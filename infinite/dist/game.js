'use strict';

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */


function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

class PlayerManagerExtesion {
    static init() {
        ModuleService.registerModule(RpcExtesionS, RpcExtesionC, null);
    }
    static isNpc(obj) {
        if ((obj instanceof Character) && obj.player == null) {
            return true;
        }
        return false;
    }
    static isCharacter(obj) {
        if ((obj instanceof Character) && obj.player != null) {
            return true;
        }
        return false;
    }
    static isUseRpc(isSync) {
        if (SystemUtil.isServer()) {
            return false;
        }
        else {
            return isSync;
        }
    }
    static stopStanceExtesion(char, sync) {
        sync = sync === undefined ? true : sync;
        if (!this.isUseRpc(sync)) {
            char.currentSubStance?.stop();
            return;
        }
        let mtStance = new RpcStance("", char);
        let module = ModuleService.getModule(RpcExtesionC);
        module.stopStanceSync(char.gameObjectId, mtStance);
    }
    static changeBaseStanceExtesion(char, assetId) {
        if (!this.isUseRpc(true)) {
            if (assetId == "") {
                char.currentStance?.stop();
                return;
            }
            let basicStance = char.loadStance(assetId);
            basicStance.play();
        }
        else {
            let module = ModuleService.getModule(RpcExtesionC);
            module.playBasicStance(char.gameObjectId, assetId);
        }
    }
    static changeStanceExtesion(char, assetId) {
        let sync = true;
        if (!this.isUseRpc(sync)) {
            if (assetId == "") {
                char.currentSubStance?.stop();
                return;
            }
            char.loadSubStance(assetId).play();
            return;
        }
        let mtStance = new RpcStance(assetId, char);
        let module = ModuleService.getModule(RpcExtesionC);
        module.playStanceSync(char.gameObjectId, mtStance);
    }
    static loadStanceExtesion(char, assetId, sync) {
        sync = sync === undefined ? true : sync;
        if (!this.isUseRpc(sync)) {
            return char.loadSubStance(assetId);
        }
        sync = sync == undefined ? true : sync;
        const stance = new RpcStance(assetId, char);
        return stance;
    }
    static rpcPlayAnimation(owner, assetId, loop = 1, speed = 1) {
        let ani = this.loadAnimationExtesion(owner, assetId);
        ani.loop = loop;
        ani.speed = speed;
        ani.play();
        return ani;
    }
    static rpcStopAnimation(owner, assetId) {
        if (!this.isUseRpc(true)) {
            if (owner.currentAnimation && owner.currentAnimation.assetId == assetId)
                owner.currentAnimation.stop();
            return;
        }
        if (owner.currentAnimation && owner.currentAnimation.assetId == assetId)
            owner.currentAnimation.stop();
        let module = ModuleService.getModule(RpcExtesionC);
        module.stopAnimationSync(owner.gameObjectId, assetId);
    }
    static rpcPlayAnimationLocally(owner, assetId, AnimationLength = 0, loopCount = 1) {
        if (owner === undefined || owner === null)
            return;
        let anim = owner.loadAnimation(assetId);
        anim.loop = loopCount;
        anim.speed = AnimationLength === 0 ? 1 : this.getRate(anim.length / AnimationLength);
        anim.play();
        return anim;
    }
    static getRate(num) {
        return Math.round(num * 100) / 100;
    }
    static loadAnimationExtesion(char, assetid, sync) {
        sync = sync === undefined ? true : sync;
        if (!this.isUseRpc(sync)) {
            return char.loadAnimation(assetid);
        }
        const anim = new RpcAnimation(char, assetid);
        return anim;
    }
}
class RpcExtesionC extends ModuleC {
    constructor() {
        super(...arguments);
        this.syncAnimation = null;
    }
    net_playerJoin(playerId) {
        if (this.localPlayerId == playerId)
            return;
        let char = this.localPlayer.character;
        let curAnimation = char.currentAnimation;
        if (!curAnimation)
            return;
        let ani = this.syncAnimation;
        if (ani && curAnimation.assetId == ani.assetId && ani.isPlaying) {
            this.server.net_playAnimationSync(char.gameObjectId, ani.assetId, ani.speed, ani.loop, ani.slot, playerId);
        }
    }
    playAnimationSync(charGuid, myAnimation) {
        if (charGuid == this.localPlayer.character.gameObjectId) {
            this.syncAnimation = myAnimation;
        }
        this.server.net_playAnimationSync(charGuid, myAnimation.assetId, myAnimation.speed, myAnimation.loop, myAnimation.slot);
    }
    pauseAnimationSync(charGuid, myAnimation) {
        this.server.net_pauseAnimationSync(charGuid, myAnimation.assetId);
    }
    resumeAnimationSync(charGuid, myAnimation) {
        this.server.net_resumeAnimationSync(charGuid, myAnimation.assetId);
    }
    stopAnimationSync(charGuid, myAnimation) {
        if (charGuid == this.localPlayer.character.gameObjectId) {
            this.syncAnimation = null;
        }
        let assetId = typeof myAnimation == "string" ? myAnimation : myAnimation.assetId;
        this.server.net_stopAnimationSync(charGuid, assetId);
    }
    playBasicStance(charGuid, basicStance) {
        this.server.net_playBasicStance(charGuid, basicStance);
    }
    playStanceSync(charGuid, myStance) {
        this.server.net_playStanceSync(charGuid, myStance.assetId, myStance.blendMode);
    }
    stopStanceSync(charGuid, stance) {
        this.server.net_stopStanceSync(charGuid, stance.assetId);
    }
    net_playAnimation(charGuid, assetId, rate, loop, slot) {
        if (charGuid == this.localPlayer.character.gameObjectId)
            return;
        RpcAnimation.playAnimation(charGuid, assetId, rate, loop, slot);
    }
    net_pauseAnimation(charGuid, assetId) {
        if (charGuid == this.localPlayer.character.gameObjectId)
            return;
        RpcAnimation.pauseAnimation(charGuid, assetId);
    }
    net_resumeAnimation(charGuid, assetId) {
        if (charGuid == this.localPlayer.character.gameObjectId)
            return;
        RpcAnimation.resumeAnimation(charGuid, assetId);
    }
    net_stopAnimation(charGuid, assetId) {
        if (charGuid == this.localPlayer.character.gameObjectId)
            return;
        RpcAnimation.stopAnimation(charGuid, assetId);
    }
}
class RpcExtesionS extends ModuleS {
    async net_playBasicStance(charGuid, basicStance) {
        let char = await GameObject.asyncFindGameObjectById(charGuid);
        char.loadStance(basicStance).play();
    }
    net_playAnimationSync(charGuid, assetId, rate, loop, slot, playerId = 0) {
        if (playerId != 0) {
            this.getClient(playerId).net_playAnimation(charGuid, assetId, rate, loop, slot);
            return;
        }
        this.getAllClient().net_playAnimation(charGuid, assetId, rate, loop, slot);
    }
    net_pauseAnimationSync(charGuid, assetId) {
        this.getAllClient().net_pauseAnimation(charGuid, assetId);
    }
    net_resumeAnimationSync(charGuid, assetId) {
        this.getAllClient().net_resumeAnimation(charGuid, assetId);
    }
    net_stopAnimationSync(charGuid, assetId) {
        this.getAllClient().net_stopAnimation(charGuid, assetId);
    }
    playStanceSync(charGuid, mystance) {
        RpcStance.playStance(charGuid, mystance.assetId, mystance.blendMode);
    }
    net_stopStanceSync(charGuid, assetId) {
        RpcStance.stopStance(charGuid, assetId);
    }
    stopStanceSync(charGuid, stance) {
        RpcStance.stopStance(charGuid, stance.assetId);
    }
    net_playStanceSync(charGuid, assetid, blendMode) {
        RpcStance.playStance(charGuid, assetid, blendMode);
    }
    onPlayerEnterGame(player) {
        this.getAllClient().net_playerJoin(player.playerId);
    }
}
class RpcAnimation {
    constructor(char, assetId) {
        this.ani = null;
        this.assetId = null;
        this.owner = null;
        this._loop = 1;
        this._speed = 1;
        this._slot = mw.AnimSlot.Default;
        this.owner = char;
        this.assetId = assetId;
        this.ani = char.loadAnimation(assetId);
    }
    get loop() {
        return this._loop;
    }
    set loop(value) {
        this._loop = value;
        this.ani.loop = value;
    }
    get speed() {
        return this._speed;
    }
    set speed(value) {
        this._speed = value;
        this.ani.speed = value;
    }
    get slot() {
        return this._slot;
    }
    set slot(value) {
        this._slot = value;
        this.ani.slot = value;
    }
    get length() {
        return this.ani.length;
    }
    get isPlaying() {
        return this.ani.isPlaying;
    }
    get onFinish() {
        return this.ani.onFinish;
    }
    play() {
        this.ani?.play();
        let module = ModuleService.getModule(RpcExtesionC);
        module.playAnimationSync(this.owner.gameObjectId, this);
        return true;
    }
    pause() {
        this.ani?.pause();
        let module = ModuleService.getModule(RpcExtesionC);
        module.pauseAnimationSync(this.owner.gameObjectId, this);
        return true;
    }
    resume() {
        this.ani?.resume();
        let module = ModuleService.getModule(RpcExtesionC);
        module.resumeAnimationSync(this.owner.gameObjectId, this);
        return true;
    }
    stop() {
        this.ani?.stop();
        let module = ModuleService.getModule(RpcExtesionC);
        module.stopAnimationSync(this.owner.gameObjectId, this);
        return true;
    }
    static playAnimation(guid, assetid, speed, loop, slot) {
        let char = Character.findGameObjectById(guid);
        if (!char)
            return;
        let anim = char.loadAnimation(assetid);
        anim.loop = loop;
        anim.speed = speed;
        anim.slot = slot;
        anim.play();
        return anim;
    }
    static pauseAnimation(guid, assetId) {
        let char = Character.findGameObjectById(guid);
        if (!char)
            return;
        let anim = char.currentAnimation;
        if (!anim)
            return;
        anim.pause();
    }
    static resumeAnimation(guid, assetId) {
        let char = Character.findGameObjectById(guid);
        if (!char)
            return;
        let anim = char.currentAnimation;
        if (!anim)
            return;
        anim.resume();
    }
    static stopAnimation(guid, assetId) {
        let char = Character.findGameObjectById(guid);
        if (!char)
            return;
        let anim = char.currentAnimation;
        if (!anim)
            return;
        anim.stop();
    }
}
class RpcStance {
    constructor(assetId, owner) {
        this.assetId = null;
        this.owner = null;
        this.blendMode = null;
        this.assetId = assetId;
        this.owner = owner;
    }
    play() {
        let module = SystemUtil.isServer() ? ModuleService.getModule(RpcExtesionS) : ModuleService.getModule(RpcExtesionC);
        module.playStanceSync(this.owner.gameObjectId, this);
        return true;
    }
    stop() {
        let module = SystemUtil.isServer() ? ModuleService.getModule(RpcExtesionS) : ModuleService.getModule(RpcExtesionC);
        module.stopStanceSync(this.owner.gameObjectId, this);
        return true;
    }
    static playStance(charGuid, assetId, blendMode) {
        let char = GameObject.findGameObjectById(charGuid);
        if (!char)
            return;
        if (assetId == "") {
            char.currentSubStance?.stop();
            return;
        }
        let stance = char.loadSubStance(assetId);
        if (blendMode != null)
            stance.blendMode = blendMode;
        stance.play();
    }
    static stopStance(charGuid, assetId) {
        let char = GameObject.findGameObjectById(charGuid);
        if (!char)
            return;
        let currentStance = char.currentSubStance;
        if (currentStance && (currentStance.assetId == assetId || assetId == "")) {
            currentStance.stop();
        }
    }
}
PlayerManagerExtesion.init();

var foreign40 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    PlayerManagerExtesion: PlayerManagerExtesion
});

class SpawnManager {
    static replicateGuid(guid) {
        let res = guid;
        if (this.replicateDic.has(guid)) {
            res = this.replicateDic.get(guid);
        }
        else if (this.deleteDic.has(guid)) {
            console.error("-------", guid, "------- is deleted!");
        }
        return res;
    }
    static modifyPoolSpawn(guid, type) {
        let assetId = this.replicateGuid(guid);
        if (type == undefined) {
            return GameObjPool.spawn(assetId);
        }
        return GameObjPool.spawn(assetId, type);
    }
    static modifyPoolAsyncSpawn(guid, type) {
        let assetId = this.replicateGuid(guid);
        if (type == undefined) {
            return GameObjPool.asyncSpawn(assetId);
        }
        return GameObjPool.asyncSpawn(assetId, type);
    }
    static wornSpawn(assetId, inReplicates, transform) {
        let info = {
            guid: assetId,
            replicates: inReplicates,
            transform: transform
        };
        return this.spawn(info);
    }
    static wornAsyncSpawn(assetId, inReplicates, transform) {
        let info = {
            guid: assetId,
            replicates: inReplicates,
            transform: transform
        };
        return this.asyncSpawn(info);
    }
    static spawn(info) {
        let assetId = info.gameObjectId ? info.gameObjectId : info.guid;
        let guid = this.replicateGuid(assetId);
        let obj = mw.GameObject.spawn(guid, { replicates: info.replicates, transform: info.transform });
        return obj;
    }
    static asyncSpawn(info) {
        let assetId = info.gameObjectId ? info.gameObjectId : info.guid;
        let guid = this.replicateGuid(assetId);
        let obj = mw.GameObject.asyncSpawn(guid, { replicates: info.replicates, transform: info.transform });
        return obj;
    }
}
SpawnManager.replicateDic = new Map([
    ["104", "Sound"],
    ["109", "SpawnLocation"],
    ["113", "Trigger"],
    ["116", "Interactor"],
    ["117", "BlockingVolume"],
    ["4301", "PointLight"],
    ["4306", "Effect"],
    ["20191", "PhysicsThruster"],
    ["20193", "NavigationVolume"],
    ["21151", "PostProcess"],
    ["108547", "ObjectLauncher"],
    ["119918", "IntegratedMover"],
    ["12683", "SwimmingVolume"],
    ["16037", "UIWidget"],
    ["16038", "WheeledVehicle4W"],
    ["20504", "PhysicsFulcrum"],
    ["20194", "NavModifierVolume"],
    ["20638", "HotWeapon"],
    ["25782", "Anchor"],
    ["67455", "PhysicsImpulse"],
    ["NPC", "Character"],
    ["31969", "Character"],
    ["124744", "Character"],
    ["28449", "Character"],
    ["BlockingArea", "BlockingVolume"],
    ["RelativeEffect", "Effect"],
    ["Thruster", "PhysicsThruster"],
    ["NavMeshVolume", "NavigationVolume"],
    ["PostProcessAdvance", "PostProcess"],
    ["ProjectileLauncher", "ObjectLauncher"],
    ["PhysicsSports", "IntegratedMover"],
]);
SpawnManager.deleteDic = new Map([
    ["110", true],
    ["8444", true],
    ["14090", true],
    ["14971", true],
    ["2695", true],
    ["30829", true],
    ["31479", true],
    ["14197", true],
]);

var foreign41 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    SpawnManager: SpawnManager
});

class GeneralManager {
    vscodeChange() {
        let animation;
        animation.speed = 1; // 先通过vscodeF2替换为 rate 再替换为 speed
        let obj;
        obj.gameObjectId; // 先通过vscodeF2替换为 guid 再替换为 gameObjectId
        let camera;
        camera.worldTransform; // 先通过vscodeF2替换为 transform 再替换为 worldTransform
        let model;
        model.onTouch; // 先通过vscodeF2替换为 onEnter 再替换为 onTouch
        model.onTouchEnd; // 先通过vscodeF2替换为 onLeave 再替换为 onTouchEnd 
        let effect;
        effect.maskcolor; // 先通过vscodeF2替换为 color 再替换为 maskcolor
        effect.onFinish; // 先通过vscodeF2替换为 onFinished 再替换为 onFinish
        effect.timeLength; // 先通过vscodeF2替换为 particleLength 再替换为 timeLength
        let sound;
        sound.timePosition; // 先通过vscodeF2替换为 currentProgress 再替换为 timePosition
        sound.timeLength; // 先通过vscodeF2替换为 duration 再替换为 timeLength
        sound.timeLength; // 先通过vscodeF2替换为 timelength 再替换为 timeLength
        sound.isLoop; // 先通过vscodeF2替换为 loop 再替换为 isLoop
        let transform;
        transform.position; // 先通过vscodeF2替换为 location 再替换为 position
        class module extends ModuleC {
            get localPlayer() {
                return null;
            }
            get localPlayerId() {
                return null;
            }
        }
    }
    static async asyncRpcGetData(key) {
        let value = await DataStorage.asyncGetData(key);
        return value.data;
    }
    static async asyncRpcGetPlayer(playerId) {
        let player = Player.getPlayer(playerId);
        return Promise.resolve(player);
    }
    static rpcPlayEffectOnPlayer(source, target, slotType, loopCount, offset, rotation, scale) {
        let duration = undefined;
        if (loopCount < 0) {
            duration = -loopCount;
            loopCount = undefined;
        }
        return EffectService.playOnGameObject(source, target instanceof mw.Player ? target.character : target, {
            slotType: slotType,
            loopCount: loopCount,
            duration: duration,
            position: offset,
            rotation: rotation,
            scale: scale
        });
    }
    static rpcPlayEffectOnGameObject(source, target, loopCount, offset, rotation, scale) {
        let duration = undefined;
        if (loopCount < 0) {
            duration = -loopCount;
            loopCount = undefined;
        }
        return EffectService.playOnGameObject(source, target, {
            loopCount: loopCount,
            duration: duration,
            position: offset,
            rotation: rotation,
            scale: scale
        });
    }
    static rpcPlayEffectAtLocation(source, location, loopCount, rotation, scale) {
        let duration = undefined;
        if (loopCount < 0) {
            duration = -loopCount;
            loopCount = undefined;
        }
        return EffectService.playAtPosition(source, location, {
            loopCount: loopCount,
            duration: duration,
            rotation: rotation,
            scale: scale,
        });
    }
    static modifyShowAd(adsType, callback) {
        AdsService.showAd(adsType, isSuccess => {
            if (isSuccess) {
                callback(AdsState.Success);
                if (adsType == AdsType.Reward)
                    callback(AdsState.Reward);
                callback(AdsState.Close);
            }
            else {
                callback(AdsState.Fail);
            }
        });
    }
    static modiftEnterInteractiveState(inter, characterObj) {
        if (!(characterObj instanceof mw.Character)) {
            return Promise.resolve(false);
        }
        let reult = inter.enter(characterObj);
        if (!reult)
            return Promise.resolve(false);
        return new Promise((resolve, reject) => {
            let resultFun = () => {
                inter.onEnter.remove(resultFun);
                resolve(true);
            };
            inter.onEnter.add(resultFun);
        });
    }
    static modifyExitInteractiveState(inter, Location, stance) {
        let result = inter.leave(Location, null, stance);
        return Promise.resolve(result);
    }
    static modifyaddOutlineEffect(obj, OutlineColor, OutlineWidth, OutlineDepthOffset, OutlineClampValue, considerCameraPosition, outlineSilhouetteOnly) {
        if (obj instanceof mw.Model || obj instanceof Character) {
            obj.setOutline(true, OutlineColor, OutlineWidth);
        }
    }
    static modifyRemoveOutlineEffect(obj) {
        if (obj instanceof mw.Model || obj instanceof Character) {
            obj.setOutline(false);
        }
    }
    static modiftboxOverlap(startLocation, endLocation, width, height, drawDebug, objectsToIgnore, ignoreObjectsByType, self) {
        let halfSize = new Vector(1, width / 2, height / 2);
        let orientation = Vector.subtract(endLocation, startLocation).toRotation();
        let results = QueryUtil.boxTrace(startLocation, endLocation, halfSize, orientation, true, drawDebug, objectsToIgnore, ignoreObjectsByType, self);
        let objResults = new Array();
        for (let i = 0; i < results.length; i++) {
            let obj = results[i].gameObject;
            if (!obj)
                continue;
            if (objResults.indexOf(obj) == -1)
                objResults.push(obj);
        }
        return objResults;
    }
    static modifyboxOverlapInLevel(StartLocation, EndLocation, Width, Height, debug, IgnoreObjectsGuid, IgnoreByKind, Source) {
        let halfSize = new Vector(1, Width / 2, Height / 2);
        let orientation = Vector.subtract(EndLocation, StartLocation).toRotation();
        let results = QueryUtil.boxTrace(StartLocation, EndLocation, halfSize, orientation, true, debug, IgnoreObjectsGuid, IgnoreByKind, Source);
        let objResults = new Array();
        for (let i = 0; i < results.length; i++) {
            let obj = results[i].gameObject;
            if (!obj)
                continue;
            if (objResults.indexOf(obj) == -1)
                objResults.push(obj);
        }
        return objResults;
    }
    static modifyGetShootDir(chara, startPos, shootRange) {
        const camera = Camera.currentCamera;
        let start = Vector.zero;
        let end = Vector.zero;
        let dir = Vector.zero;
        if (startPos) {
            start = startPos;
        }
        if (camera) {
            end = camera.worldTransform.position.add(camera.worldTransform.getForwardVector().multiply(shootRange));
            const hits = QueryUtil.lineTrace(camera.worldTransform.position, end, false, true, [], false, false, chara);
            dir = end.subtract(start);
            if (hits.length > 0) {
                dir = hits[0].impactPoint.subtract(start);
            }
        }
        return dir.normalize();
    }
    static modifyProjectWorldLocationToWidgetPosition(player, worldLocation, outScreenPosition, isPlayerViewportRelative) {
        let result = InputUtil.projectWorldPositionToWidgetPosition(worldLocation, isPlayerViewportRelative);
        outScreenPosition.x = result.screenPosition.x;
        outScreenPosition.y = result.screenPosition.y;
        return result.result;
    }
    static setMaterialColor(model, Index, InColor) {
        let materialList = model.getMaterialInstance();
        materialList[Index].getAllVectorParameterName().forEach((v, i) => {
            materialList[Index].setVectorParameterValue(v, InColor);
        });
    }
    static getMaterialColor(model, Index) {
        let materialList = model.getMaterialInstance();
        if (!(materialList.length > 0)) {
            return;
        }
        let nameList = materialList[Index].getAllVectorParameterName();
        return nameList.length > 0 ? materialList[Index].getVectorParameterValue(nameList[0]) : new LinearColor(1, 1, 1, 1);
    }
}

var foreign42 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    GeneralManager: GeneralManager
});

//配置的基类
class ConfigBase {
    constructor(excelData) {
        this.ELEMENTARR = [];
        this.ELEMENTMAP = new Map();
        this.KEYMAP = new Map();
        let headerLine = 2; //表头的行数
        this.ELEMENTARR = new Array(excelData.length - headerLine);
        for (let i = 0; i < this.ELEMENTARR.length; i++) {
            this.ELEMENTARR[i] = {};
        }
        let column = excelData[0].length; //列数
        for (let j = 0; j < column; j++) { //遍历各列
            let name = excelData[0][j];
            let tags = excelData[1][j].split('|');
            if (tags.includes(ConfigBase.TAG_CHILDLANGUAGE))
                continue;
            let jOffect = 0; //列偏移量
            if (tags.includes(ConfigBase.TAG_MAINLANGUAGE)) {
                let index = j + ConfigBase.languageIndex;
                let targetTags = excelData[1][index].split('|');
                if (index < column && targetTags.includes(ConfigBase.TAG_CHILDLANGUAGE)) {
                    jOffect = ConfigBase.languageIndex;
                }
            }
            let hasTag_Key = tags.includes(ConfigBase.TAG_KEY);
            let hasTag_Language = tags.includes(ConfigBase.TAG_LANGUAGE);
            for (let i = 0; i < this.ELEMENTARR.length; i++) {
                let ele = this.ELEMENTARR[i];
                let value = excelData[i + headerLine][j + jOffect];
                if (j == 0) { //ID
                    this.ELEMENTMAP.set(value, ele);
                }
                else {
                    if (hasTag_Key) {
                        this.KEYMAP.set(value, excelData[i + headerLine][0]);
                    }
                    if (hasTag_Language) {
                        if (ConfigBase.getLanguage != null) {
                            value = ConfigBase.getLanguage(value);
                        }
                        else {
                            value = "unknow";
                        }
                    }
                }
                ele[name] = value;
            }
        }
    }
    //设置获取语言的方法
    static initLanguage(languageIndex, getLanguageFun) {
        ConfigBase.languageIndex = languageIndex;
        ConfigBase.getLanguage = getLanguageFun;
        if (ConfigBase.languageIndex < 0) {
            ConfigBase.languageIndex = ConfigBase.getSystemLanguageIndex();
        }
    }
    //获取系统语言索引
    static getSystemLanguageIndex() {
        let language = LocaleUtil.getDefaultLocale().toString().toLowerCase();
        if (!!language.match("en")) {
            return 0;
        }
        if (!!language.match("zh")) {
            return 1;
        }
        if (!!language.match("ja")) {
            return 2;
        }
        if (!!language.match("de")) {
            return 3;
        }
        return 0;
    }
    /**
    * 根据id获取一个元素
    * @param id id|key
    * @returns Element
    */
    getElement(id) {
        let ele = this.ELEMENTMAP.get(Number(id)) || this.ELEMENTMAP.get(this.KEYMAP.get(id));
        if (ele == null) {
            console.warn(this.constructor.name + "配置表中找不到元素 id:" + id);
        }
        return ele;
    }
    /**
    * 根据字段名和字段值查找一个元素
    * @param fieldName 字段名
    * @param fieldValue 字段值
    * @returns 第一个找到的Element
    */
    findElement(fieldName, fieldValue) {
        for (let i = 0; i < this.ELEMENTARR.length; i++) {
            if (this.ELEMENTARR[i][fieldName] == fieldValue) {
                return this.ELEMENTARR[i];
            }
        }
    }
    /**
    * 根据字段名和字段值查找一组元素
    * @param fieldName 字段名
    * @param fieldValue 字段值
    * @returns 所有符合要求的Element
    */
    findElements(fieldName, fieldValue) {
        let arr = [];
        for (let i = 0; i < this.ELEMENTARR.length; i++) {
            if (this.ELEMENTARR[i][fieldName] == fieldValue) {
                arr.push(this.ELEMENTARR[i]);
            }
        }
        return arr;
    }
    /**获取所有元素*/
    getAllElement() {
        return this.ELEMENTARR;
    }
}
ConfigBase.TAG_KEY = 'Key'; //读取键(除了ID之外的别名，带key的字段必须是string类型)
ConfigBase.TAG_LANGUAGE = 'Language'; //关联语言表的id或key(如果有这个tag，导表工具要把数据生成为string类型，因为会自动进行值的转换)
ConfigBase.TAG_MAINLANGUAGE = 'MainLanguage'; //主语言tag
ConfigBase.TAG_CHILDLANGUAGE = 'ChildLanguage'; //子语言tag
ConfigBase.languageIndex = 0;

var foreign24 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ConfigBase: ConfigBase
});

const EXCELDATA$h = [["actionid", "actionname", "actionguid", "soundId", "posses", "iconguid", "price", "loopPlay", "PlayTime", "activity", "abrupt", "type"], ["tag", "", "tag", "tag", "tag", "tag", "tag", "tag", "tag", "tag", "tag", ""], [40001, "打招呼", "8352", 0, true, "146441", 0, 1, 670, 1, 0, 1], [40002, "行礼", "15057", 0, true, "146740", 0, 1, 3430, 0, 0, 1], [40003, "点赞", "95777", 0, true, "146737", 0, 1, 1930, 0, 0, 1], [40004, "比心", "15078", 0, true, "146445", 0, 1, 1330, 0, 0, 1], [40005, "摇头", "95775", 0, true, "146502", 0, 1, 1470, 0, 0, 1], [40006, "后空翻", "14602", 0, true, "146460", 0, 1, 1500, 1, 1, 1], [40007, "打CALL", "122288", 0, true, "146696", 0, 1, 600, 0, 0, 1], [40008, "生气", "14766", 0, true, "146581", 0, 1, 2000, 1, 0, 1], [40009, "哭泣", "14655", 13, true, "146742", 0, 1, 630, 0, 0, 1], [40010, "劲舞", "88450", 0, true, "146411", 0, 0, 8700, 1, 0, 2], [40011, "海盗舞", "124621", 0, true, "146701", 0, 0, 7400, 1, 0, 2], [40012, "慢摇", "123636", 0, true, "146700", 0, 0, 1570, 1, 0, 2], [40013, "电子舞", "122750", 0, true, "146465", 0, 0, 8000, 1, 0, 2], [40014, "旋转", "14552", 0, true, "146537", 0, 0, 530, 1, 0, 1], [40015, "扭腰", "121811", 0, true, "146622", 0, 0, 1070, 1, 0, 1], [40016, "炫舞", "88544", 0, true, "146693", 0, 0, 6520, 1, 0, 2], [40017, "舞蹈", "88448", 0, true, "146673", 0, 0, 7770, 1, 0, 2], [40018, "嘻哈舞", "122676", 0, true, "146515", 0, 0, 6500, 1, 0, 2], [40019, "跳跃舞姿", "122745", 0, true, "146468", 0, 0, 4270, 1, 0, 2], [40020, "街舞", "122813", 0, true, "146603", 0, 0, 2330, 1, 0, 2], [40021, "霹雳舞", "124498", 0, true, "146662", 0, 0, 10670, 1, 0, 2], [40022, "太空步", "124500", 0, true, "146463", 0, 0, 4670, 1, 0, 2]];
class ActionConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$h);
    }
}

var foreign17 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ActionConfig: ActionConfig
});

const EXCELDATA$g = [["id", "rightWeaponGuid", "leftWeaponGuid", "Role", "Trigger", "StandbyAnimation", "EffectId", "EffectOffset", "EffectRot", "EffectScale", "Del"], ["", "", "", "", "", "", "", "", "", "", ""], [23, "118148", null, "0B9B67E3", "141155A8", "117391", "42805", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "洛基"], [24, "103061", null, "0361F303", "0A373643", "117391", "145912", new mw.Vector(0, 0, 10), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "太阳神"], [25, "122956", "122956", "3CB274AB", "1ED4D8AB", "117403", "42828", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "宇智波斑"], [26, "122949", null, "2BCDEFA2", "18C0C30C", "111095", "145907", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(2, 2, 2), "纳米机甲女性"], [27, "122952", "122952", "20861A49", "2EB504BE", "121951", "136966", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 180), new mw.Vector(1, 1, 1), "死侍"], [28, "122946", "122946", "1D9A227F", "15F97EBF", "121951", "145913", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1.5, 1.5, 1.5), "火山哨兵"], [29, "103061", null, "1C2BE8C3", "24E360D0", "111092", "42816", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "绯红女巫"], [30, null, null, "055D7698", "191ADBD2", "117391", "42804", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "钢铁侠"], [31, "118147", "118147", "0C09B42E", "0BCB5B51", "125369", "42818", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "雷神"], [32, null, null, "348ADA73", "095A39A5", "125369", "42804", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "蜘蛛侠"], [33, null, null, "242B8A53", "1CCE1F42", "121608", "42804", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "金刚狼"], [34, null, null, "1FB6BD6C", "21329C84", "121610", "42805", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "女浩克"], [35, null, null, "155CF7C6", "1CB84342", "121610", "42805", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "绿巨人"], [36, null, null, "0DC6258B", "2207E660", "117391", "42804", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "天神"], [37, null, null, "39D6B1B5", "03B7A929", "108371", "42818", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "机甲少女"], [38, null, null, "20CC1A24", "370CFBD6", "117340", "42816", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "雏田"], [39, null, null, "16167C89", "1A8B6BB6", "122541", "42804", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "路飞"], [40, null, null, "23526A84", "160D5877", "125369", "42818", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "佐助"]];
class AdsConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$g);
    }
}

var foreign18 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    AdsConfig: AdsConfig
});

const EXCELDATA$f = [["id", "Guid", "Annotation"], ["", "", ""], [1, "140390", "全局UI点击音效"], [2, "133403", "Off"], [3, "133445", "On"], [4, "122959,122952,122946,103061,118140,122953,103073,118147,122956,122949,118148,31712", "冷兵器-武器"], [5, "121409", "冷兵器-受击动画"], [6, "7742,27422,31122,117224,7745,89089,151551,27421,7807,153640,7749,163337,135892,142950,169537,168828,13418", "冷兵器-受击特效"], [7, "142932,141618,142889,142895,141498,142898,142886,142899,142925,142153,143229,142255,142903,142293,142262,142888,142894,142907,142892,142294,142897,142310,142272,142913,142922,143236,142292,143387,143389,409EBB1E48B099BDC8F15192C6443591,0D2FE7104CD5DE0291C71B964C7C7AAC,142896,90CDCFD5497992D511E6E38B7015C795,142901,142918,142924,142917,142891,142919,142920,143231,142915,142138", "冷兵器-角色"], [8, "117403,111095,117391,121951,111092,121658,125369,121648,121608,121610,108371,117340,122541,121557", "冷兵器-待机动画"], [9, "42821,42828,145907,42805,136966,145913,145912,42816,42830,42804,42818", "冷兵器-翅膀特效"], [10, "193337,193356,193343,193334,193346,193340,193345,193333,193338,193331,193349,193336,193344,193341,193348,193355,193351,193350,193352,193332,193342,193354,193347,193339,193353,193335", "角色Icon"], [11, "176198", "暴金币"], [12, "110950", "墓碑"], [13, "151007,151008,122568,89089,128518,89128,89129,89130", "冲刺资源（音效、特效动画）"], [14, "150691,130743,132627,89128,89129,89130,89089,122568,121734,101208", "jump资源"], [15, "122543,160750,88781,168952,155593", "巨人资源"], [16, "121650,121652,121639,122486,85125,20267,111103,111101,111093,117399,117398,117397,117396,117394,121644,121647,121641,121597,121592,121600,121599,121575,121574,121573,121572,121571,117371,117366,117375,117376,117382,111102,111100,121959,121966,121965,121963,121962,121967,111094,111098,111099,111097,121413,121654,121416,121642,121645,121643,121651,121594,121595,121591,121593,121598,121606,121596,121609,117402,117400,108416,108417,108418,108373,108375,108374,108370,108372,117337,117338,117335,117336,117339,117341,122534,122535,122536,122522,122523,122548,117326,117328,117327,117316,117315,117324,29726,162137,29728,117367,117407,119910,117361,117344,117363,117364,117362,29744,115466,162183,162132,162128,162129,29714,29730,117537", "冷兵器-攻击动画"], [17, "118698,118699,117222,118697,118700,118701,118702,118703,118704,118712,118706,118707,118709,118711,118716,117220,128884,128888", "背景音乐"], [18, "121586,115482,121556,122532,84912,29718,21615,96578,29747,29723,29764,29767,85957,162136,122491,85945", "NPC动画"], [19, "142351,142341,142340,142339,142338,142337,142336,142335,142334,142333,142332,142331,142330,142329,142328,142327,142326,142325,142324,142323,142322,142321,142320,142319,142318,142317,142316,142177,142176,142175,142174,142173,142172,142171,142170,142169,142168,142167,142166,142165,142164,142163,142162,142161,142160,142159,142158,142157,142156,142155,143387,143385,143237,143383,142694,142692,142693,142691,142690", "NPC"], [20, "186518,,103061,,122956,20799,40706,29043,29045,29047,29050,29052,29054,29055,29057,31170,31175,31178,31179,31710,31712,31714,31716,31718,31722,31726,31728,31730,31732,31734,186693,186519,122959,122955,122952,122951,122949,122945,118145,102928,102926,103081,103071,103068,103065,103064,103063,103062,103058,103057,102953,45002", "NPC-Weapon"], [21, "162013", "寻路特效"], [22, "27396", "目标点特效"]];
class AssetsConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$f);
    }
}

var foreign19 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    AssetsConfig: AssetsConfig
});

const EXCELDATA$e = [["ID", "NameExplain", "Name", "Type", "AssetId", "Rarity", "HumanoidSlotType", "OffsetPos", "OffsetRot", "OffsetSca", "ObjId", "AssetOffsetPos", "AssetOffsetRot", "AssetOffsetSca", "Idle", "Move", "GetType"], ["", "", "Language", "", "", "", "", "", "", "", "", "", "", "", "", "", ""], [1, "武魂|魂师|魂骨|魂兽", "Text_BagTabTextBlock", 0, null, 0, 0, null, null, null, null, null, null, null, null, null, 0], [10046, "自动攻击拳(男)", "Text_AutomaticAttackFist_Male", 1, "92821", 3, 0, null, null, null, "92821", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 5], [10047, "自动攻击拳(女)", "Text_AutomaticAttackFist_Female", 1, "168946", 3, 0, null, null, null, "168946", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 5], [10044, "机甲斩狂风斩(男)", "Text_MechSlashWindSlash_Male", 1, "151245", 3, 0, null, null, null, "151245", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 3], [10045, "机甲斩狂风斩(女)", "Text_MechSlashWindSlash_Female", 1, "151897", 3, 0, null, null, null, "151897", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 3], [10041, "金箍棒(粉)", "Text_GoldenHoopRod_Powder", 1, "209508", 3, 0, null, null, null, "209508", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 2], [10042, "金箍棒(紫)", "Text_GoldenHoopRod_Purple", 1, "313464", 3, 0, null, null, null, "313464", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 2], [10043, "昊天锤", "Text_HaotianHammer", 1, "318640", 3, 0, null, null, null, "318640", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 2], [10001, "海神三叉戟", "Text_TridentOfTheSeaGod", 1, "134222", 0, 0, null, null, null, "134222", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [10002, "赛博自来也长枪", "Text_CyberComesWithALongSpear", 1, "122953", 0, 0, null, null, null, "122953", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [10003, "海王双头刀", "Text_SeaKingDoubleHeadedKnife", 1, "118146", 0, 0, null, null, null, "118146", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [10004, "美国队长神锤", "Text_CaptainAmericaSHammer", 1, "152954", 2, 0, null, null, null, "152954", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [10005, "毒液斧头", "Text_VenomAxe", 1, "118143", 0, 0, null, null, null, "118143", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [10006, "灭霸斧", "Text_MiebaAxe", 1, "122960", 2, 0, null, null, null, "122960", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [10007, "鸣人手里剑", "Text_NarutoWieldingASword", 1, "33861", 1, 0, null, null, null, "33861", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [10008, "未来战士黄金剑", "Text_FutureWarriorGoldenSword", 1, "218730", 2, 0, null, null, null, "218730", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [10009, "森林哨兵魔法仗", "Text_ForestSentinelMagicBattle", 1, "210791", 0, 0, null, null, null, "210791", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [10010, "手枪(索尼克专用)", "Text_Pistol_SonicSpecific", 1, "221099", 1, 0, null, null, null, "221099", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [10011, "信号枪(粉毛怪专用)", "Text_SignalGun_SpecificallyForPinkHairMonster", 1, "43702", 1, 0, null, null, null, "43702", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [10012, "刀(纲手专用)", "Text_Knife_ForTsunade", 1, "103067", 1, 0, null, null, null, "103067", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [10013, "刀(李洛克专用)", "Text_Knife_ExclusiveToLilock", 1, "103080", 1, 0, null, null, null, "103080", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [10014, "镰刀(干柿鬼鲛专用)", "Text_Sickle_ForDriedPersimmonGhostShark", 1, "103075", 1, 0, null, null, null, "103075", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [10015, "镰刀(赛博女孩专用)", "Text_Sickle_ExclusivelyForCyberGirls", 1, "122946", 1, 0, null, null, null, "122946", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [10016, "冰封剑(黑寡妇专用)", "Text_IceSword_ExclusivelyForBlackWidow", 1, "31710", 1, 0, null, null, null, "31710", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [10017, "怪物爪刀", "Text_MonsterClawKnife", 1, "103069", 1, 0, null, null, null, "103069", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [10018, "大砍刀(卡卡西专用)", "Text_Machete_KakashiSpecific", 1, "122961", 1, 0, null, null, null, "122961", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [10019, "法杖(宇智波鼬专用)", "Text_TheStaff_ExclusivelyForUchihaItachi", 1, "272767", 1, 0, null, null, null, "272767", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [10020, "水枪", "Text_WaterGun", 1, "166941", 2, 0, null, null, null, "166941", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [10021, "冰钻剑", "Text_IceDiamondSword", 1, "31712", 2, 0, null, null, null, "31712", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [10022, "屠刀", "Text_ButcherSKnife", 1, "118142", 2, 0, null, null, null, "118142", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [10023, "蓝色法杖(洛基专用)", "Text_BlueStaff_LokiSpecific", 1, "210651", 2, 0, null, null, null, "210651", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [10024, "镰刀(太阳神专用)", "Text_Sickle_SunGodExclusive", 1, "121672", 3, 0, null, null, null, "121672", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [10025, "恶魔剑(宇智波斑爷专用)", "Text_DemonSword_ExclusivelyForUchihaMadara", 1, "122956", 3, 0, null, null, null, "122956", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [10026, "剑(纳米机器人专用)", "Text_Sword_SpecificallyDesignedForNanorobots", 1, "103068", 2, 0, null, null, null, "103068", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [10027, "镰刀(死侍专用)", "Text_Sickle_DeadpoolSpecific", 1, "103083", 2, 0, null, null, null, "103083", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [10028, "  荧光剑(火山哨兵专用)", "Text_FluorescentSword_ForVolcanoSentinelsOnly", 1, "198698", 2, 0, null, null, null, "198698", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [10029, "狂热剑(绯红女巫专用)", "Text_FanaticalSword_ExclusiveToCrimsonWitch", 1, "29057", 2, 0, null, null, null, "29057", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [10030, "充气锤子", "Text_InflatableHammer", 1, "272130", 1, 0, null, null, null, "272130", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [10031, "木法杖(毒液蜘蛛侠专用)", "Text_WoodenStaff_VenomSpiderManSpecific", 1, "300436", 3, 0, null, null, null, "300436", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [10032, "瓜子盾", "Text_GuaziShield", 1, "121541", 0, 0, null, null, null, "121541", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [10033, "盾(浩克专用)", "Text_Shield_HulkExclusive", 1, "122950", 3, 0, null, null, null, "122950", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [10034, "终极冰环剑", "Text_UltimateIceRingSword", 1, "31734", 3, 0, null, null, null, "31734", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [10035, "散弹喷枪(雏田专用)", "Text_BulletSprayGun_ForHinata", 1, "155702", 3, 0, null, null, null, "155702", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [10036, "火枪(路飞专用)", "Text_Firearms_LuffySpecific", 1, "122726", 3, 0, null, null, null, "122726", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [10037, "紫光剑(佐助专用)", "Text_PurpleLightSword_SpecialForSasuke", 1, "297029", 3, 0, null, null, null, "297029", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [10038, "激光枪(天神专用)", "Text_LaserGun_TenjinSpecific", 1, "222534", 3, 0, null, null, null, "222534", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [10039, "剑(金刚狼专用)", "Text_Sword_ExclusivelyForWolverine", 1, "269895", 3, 0, null, null, null, "269895", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [10040, "激光枪(钢铁侠专用)", "Text_LaserGun_IronManSpecific", 1, "122720", 3, 0, null, null, null, "122720", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [20063, "情侣机甲套装(女)", "Text_CoupleMechSet_Female", 2, "163553", 3, 0, null, null, null, "163553", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 5], [20062, "情侣机甲套装(男)", "Text_CoupleMechSet_Male", 2, "164428", 3, 0, null, null, null, "164428", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 5], [20061, "小舞姐", "Text_XiaoWuJie", 2, "163292", 3, 0, null, null, null, "163292", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 4], [20055, "蓝银皇", "Text_BlueSilverEmperor", 2, "398484", 3, 0, null, null, null, "398484", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 2], [20056, "制服女孩", "Text_UniformGirl", 2, "367076", 3, 0, null, null, null, "367076", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 2], [20057, "唐三", "Text_TangSan", 2, "343523", 3, 0, null, null, null, "343523", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 2], [20064, "黄金王子", "Text_TheGoldenPrince", 2, "142399", 3, 0, null, null, null, "142399", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 6], [20065, "JK女孩", "Text_JkGirl", 2, "320751", 3, 0, null, null, null, "320751", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 6], [20066, "小蓝龙", "Text_XiaolanLong", 2, "216268", 3, 0, null, null, null, "216268", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 6], [20067, "小绿龙", "Text_LittleGreenDragon", 2, "216269", 3, 0, null, null, null, "216269", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 6], [20068, "小黑龙", "Text_LittleBlackDragon", 2, "216270", 3, 0, null, null, null, "216270", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 6], [20069, "小橘龙", "Text_LittleOrangeDragon", 2, "212971", 3, 0, null, null, null, "212971", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 6], [20058, "神级魔王", "Text_GodLevelDemonKing", 2, "141499", 3, 0, null, null, null, "141499", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 3], [20059, "四代火影", "Text_TheFourthHokage", 2, "142921", 3, 0, null, null, null, "142921", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 3], [20060, "美杜莎女王", "Text_MedusaQueen", 2, "163289", 3, 0, null, null, null, "163289", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 3], [20001, "狐耳少女", "Text_FoxEaredGirl", 2, "361906", 3, 0, null, null, null, "65710", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [20002, "邪恶使者", "Text_EvilMessenger", 2, "357571", 3, 0, null, null, null, "64995", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [20003, "长款大衣女", "Text_LongCoatForWomen", 2, "357567", 2, 0, null, null, null, "142606", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [20004, "海绵宝宝", "Text_Spongebob", 2, "357566", 3, 0, null, null, null, "63711", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [20005, "钢铁侠", "Text_IronMan", 2, "357563", 3, 0, null, null, null, "94782", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [20006, "灭霸", "Text_Thanos", 2, "357556", 3, 0, null, null, null, "112568", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [20007, "刺猬小子", "Text_HedgehogBoy", 2, "357555", 3, 0, null, null, null, "117681", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [20008, "邪恶使者", "Text_EvilMessenger1", 2, "351891", 3, 0, null, null, null, "64995", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [20009, "蓝衣男", "Text_BlueClothedMan", 2, "351680", 3, 0, null, null, null, "127800", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [20010, "黑衣男", "Text_BlackClothedMan", 2, "351598", 3, 0, null, null, null, "224168", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [20011, "毁灭战士", "Text_Doom", 2, "351597", 3, 0, null, null, null, "94782", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [20012, "雷神", "Text_ThunderGod", 2, "357570", 2, 0, null, null, null, "111768", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [20013, "黑寡妇", "Text_BlackWidow", 2, "357568", 2, 0, null, null, null, "111240", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [20014, "可爱女", "Text_CuteGirl", 2, "351500", 2, 0, null, null, null, "269652", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [20015, "丸子头女", "Text_MarukoHeadGirl", 2, "351497", 2, 0, null, null, null, "60981", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [20016, "西方神女", "Text_WesternGoddess", 2, "351405", 3, 0, null, null, null, "64410", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [20017, "黑裙少女", "Text_BlackDressGirl", 2, "351404", 3, 0, null, null, null, "128834", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [20018, "短发女", "Text_ShortHairedWoman", 2, "351026", 2, 0, null, null, null, "115849", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [20019, "旗袍女", "Text_QipaoWomen", 2, "351025", 2, 0, null, null, null, "299082", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [20020, "披风男", "Text_ClothedMan", 2, "351024", 1, 0, null, null, null, "96576", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [20021, "长发女", "Text_LongHairedWoman", 2, "351004", 1, 0, null, null, null, "63291", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [20022, "双马尾女", "Text_DoublePonytailGirl1", 2, "350987", 1, 0, null, null, null, "59857", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [20023, "长发短裙女", "Text_WomenWithLongHairAndShortSkirts", 2, "350973", 1, 0, null, null, null, "63648", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [20024, "双马尾女", "Text_DoublePonytailGirl2", 2, "350959", 0, 0, null, null, null, "248351", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [20025, "双马尾女", "Text_DoublePonytailGirl3", 2, "350958", 0, 0, null, null, null, "64774", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [20026, "百褶裙女孩", "Text_PleatedSkirtGirl", 2, "350756", 1, 0, null, null, null, "63291", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [20027, "短发时尚女", "Text_ShortHairedFashionableWomen", 2, "350752", 0, 0, null, null, null, "111241", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [20028, "长马尾女孩", "Text_LongPonytailGirl", 2, "350746", 1, 0, null, null, null, "121948", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [20029, "长耳女", "Text_LongEaredGirl", 2, "350744", 1, 0, null, null, null, "64458", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [20030, "风衣长发女", "Text_LongHairedWomanInWindbreaker", 2, "350739", 2, 0, null, null, null, "142606", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [20031, "恶魔角女", "Text_DevilHornGirl", 2, "350738", 1, 0, null, null, null, "64305", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [20032, "和服女", "Text_KimonoGirl", 2, "350568", 2, 0, null, null, null, "299082", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [20033, "发卡女", "Text_HairpinGirl", 2, "350318", 1, 0, null, null, null, "181365", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [20034, "女仆套装女", "Text_MaidSuitForWomen", 2, "350569", 2, 0, null, null, null, "63291", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [20035, "帽子女", "Text_HatGirl", 2, "350314", 1, 0, null, null, null, "299082", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [20036, "魔法女孩", "Text_MagicalGirl", 2, "350260", 1, 0, null, null, null, "111088", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [20037, "长裙女", "Text_LongSkirtWomen", 2, "349270", 2, 0, null, null, null, "124880", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [20038, "杀手女", "Text_KillerWoman", 2, "347528", 3, 0, null, null, null, "137518", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [20039, "巫医", "Text_WitchDoctor", 2, "145319", 3, 0, null, null, null, "119773", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [20040, "长腿妈妈", "Text_LongLeggedMom", 2, "143403", 2, 0, null, null, null, "119229", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [20041, "玄魁", "Text_XuanKui", 2, "143402", 2, 0, null, null, null, "121882", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [20042, "邪恶女巫", "Text_EvilWitch", 2, "143401", 2, 0, null, null, null, "119745", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [20043, "小丑女", "Text_LittleUglyGirl", 2, "143400", 1, 0, null, null, null, "63539", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [20044, "万圣节女", "Text_HalloweenGirl", 2, "143399", 2, 0, null, null, null, "60981", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [20045, "屠夫", "Text_Butcher", 2, "143398", 0, 0, null, null, null, "109144", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [20046, "魔莱坞学院院长", "Text_DeanOfMolewoodCollege", 2, "143396", 1, 0, null, null, null, "64141", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [20047, "迷雾鬼影", "Text_MistyGhostShadow", 2, "143395", 0, 0, null, null, null, "109058", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [20048, "蓝毛怪", "Text_BlueHairedMonster", 2, "143394", 1, 0, null, null, null, "109839", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [20049, "狗头毛毛虫", "Text_DogHeadedCaterpillar", 2, "143390", 1, 0, null, null, null, "118079", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [20050, "粉毛怪", "Text_PinkHairedMonster", 2, "143389", 1, 0, null, null, null, "109839", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [20051, "索尼克", "Text_SonicAdvance", 2, "143387", 1, 0, null, null, null, "117681", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [20052, "Rainbow friends", "Text_RainbowFriends", 2, "143385", 3, 0, null, null, null, "119483", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [20053, "海神", "Text_SeaGod", 2, "226377", 3, 0, null, null, null, "226377", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [30001, "恶魔翅膀", "Text_DevilSWings", 3, "223877", 3, 12, new mw.Vector(-10, 0, 10), new mw.Vector(0, 0, 90), new mw.Vector(2, 2, 2), "223877", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(2, 2, 2), null, null, 1], [30002, "恶魔角", "Text_DevilSCorner", 3, "266332", 3, 1, new mw.Vector(0, 5, 10), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 2), "266332", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 2), null, null, 1], [30003, "恶魔尾巴", "Text_DevilSTail", 3, "136179", 3, 19, new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), "136179", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [30004, "恶魔头骨", "Text_DemonSkull", 3, "136506", 3, 6, new mw.Vector(-4.8, 0, -11), new mw.Vector(0, 0, -90), new mw.Vector(1, 1, 1), "136506", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [30005, "恶魔三头犬", "Text_DevilSThreeHeadedDog", 3, "192395", 3, 20, new mw.Vector(0, 0, 0), new mw.Vector(0, 0, -90), new mw.Vector(1, 1, 1), "192395", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [30006, "天使翅膀", "Text_AngelWings", 3, "334814", 3, 12, new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "334814", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [30007, "天使蜘蛛", "Text_AngelSpider", 3, "192359", 3, 20, new mw.Vector(0, 0, 0), new mw.Vector(0, 0, -90), new mw.Vector(1, 1, 1), "192359", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [30008, "狐狸尾巴", "Text_FoxSTail", 3, "226476", 3, 19, new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), "226476", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [30009, "狐狸耳朵", "Text_FoxEars", 3, "226479", 3, 1, new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), "226479", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [30010, "挥动的围巾", "Text_WavingScarf", 3, "295506", 3, 1, new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), "295506", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [30011, "闪电翅膀", "Text_LightningWings", 3, "42818", 0, 12, new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "42818", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [30012, "眼镜", "Text_Glasses", 3, "324491", 3, 1, new mw.Vector(0, -1, 2), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), "324491", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [30013, "拍照机器人", "Text_PhotographyRobot", 3, "292313", 3, 26, new mw.Vector(1, -10, -1), new mw.Vector(110, -45, 55), new mw.Vector(0.4, 0.4, 0.4), "292313", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(0.4, 0.4, 0.4), null, null, 1], [30014, "面纱", "Text_Veil", 3, "269783", 3, 1, new mw.Vector(0, 14, -4), new mw.Vector(0, 0, 0), new mw.Vector(1, 0.8, 0.8), "269783", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 0.8, 0.8), null, null, 1], [30015, "火箭发射器", "Text_RocketLauncher", 3, "226826", 3, 26, new mw.Vector(20, 8, -10), new mw.Vector(-90, 0, 0), new mw.Vector(0.5, 0.5, 0.5), "226826", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(0.5, 0.5, 0.5), null, null, 1], [30016, "狙击枪枪身", "Text_SniperGunBody", 3, "318663", 3, 26, new mw.Vector(20, 8, -10), new mw.Vector(-90, 0, 0), new mw.Vector(0.5, 0.5, 0.5), "318663", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(0.5, 0.5, 0.5), null, null, 1], [30017, "可爱西方龙", "Text_CuteWesternDragon", 3, "152259", 0, 21, new mw.Vector(0, 50, -80), new mw.Vector(0, 0, -90), new mw.Vector(1, 1, 1), "152259", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [30018, "龙", "Text_Loong", 3, "292574", 2, 21, new mw.Vector(0, 50, -80), new mw.Vector(0, 0, -90), new mw.Vector(1, 1, 1), "292574", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [30019, "帝王龙", "Text_EmperorDragon", 3, "192533", 3, 21, new mw.Vector(0, 50, -80), new mw.Vector(0, 0, -90), new mw.Vector(1, 1, 1), "192533", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [30020, "地狱龙", "Text_HellDragon", 3, "192420", 1, 21, new mw.Vector(0, 50, -80), new mw.Vector(0, 0, -90), new mw.Vector(1, 1, 1), "192420", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [30021, "糖果龙", "Text_CandyDragon", 3, "191950", 3, 21, new mw.Vector(0, 50, -80), new mw.Vector(0, 0, -90), new mw.Vector(1, 1, 1), "191950", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [30022, "武士龙", "Text_WuShilong", 3, "191852", 1, 21, new mw.Vector(0, 50, -80), new mw.Vector(0, 0, -90), new mw.Vector(1, 1, 1), "191852", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [30023, "水晶翅膀", "Text_CrystalWings", 3, "375788", 2, 12, new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "375788", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [30024, "杀戮翅膀", "Text_KillingWings", 3, "136966", 2, 12, new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 180), new mw.Vector(1, 1, 1), "136966", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [30025, "地狱翅膀", "Text_HellSWings", 3, "145912", 2, 12, new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "145912", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [30026, "精灵翅膀", "Text_FairyWings", 3, "393543", 2, 12, new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "393543", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [30027, "火焰翅膀", "Text_FlameWings", 3, "211667", 2, 12, new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "211667", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [30028, "大剑", "Text_BigSword", 3, "186519", 3, 12, new mw.Vector(7, 0, 20), new mw.Vector(-170, 0, 90), new mw.Vector(1, 1, 1), "186519", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [30029, "天使剑", "Text_AngelSword", 3, "20971", 3, 12, new mw.Vector(7, 0, 20), new mw.Vector(-170, 0, 90), new mw.Vector(1, 1, 1), "20971", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1], [40001, "蛇女", "Text_Snaker", 4, "328236", 3, 0, null, null, null, "328236", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), "318618", "318617", 1], [40002, "络新妇", "Text_ASpider", 4, "338436", 3, 0, null, null, null, "338436", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), "336668", "338467", 1], [40003, "大蜘蛛", "Text_BigSpider", 4, "328291", 3, 0, null, null, null, "328291", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), "336668", "336669", 1], [40004, "小型抱脸紫蜘蛛", "Text_SmallFaceHuggingPurpleSpider", 4, "340103", 3, 0, null, null, null, "340103", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), "336668", "336669", 1], [40005, "小型抱脸红蜘蛛", "Text_SmallBlushingSpider", 4, "340104", 3, 0, null, null, null, "340104", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), "336668", "336669", 1], [40006, "小型抱脸绿蜘蛛", "Text_SmallFaceHuggingGreenSpider", 4, "340105", 3, 0, null, null, null, "340105", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), "336668", "336669", 1], [40007, "小型抱脸蓝蜘蛛", "Text_SmallFaceHuggingBlueSpider", 4, "340106", 3, 0, null, null, null, "340106", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), "336668", "336669", 1], [40008, "小龙", "Text_Xiaolong", 4, "328246", 1, 0, null, null, null, "328246", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), "160627", "160628", 1], [40009, "卡通木龙", "Text_CartoonWoodenDragon", 4, "328030", 1, 0, null, null, null, "328030", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), "160627", "160628", 1], [40010, "红龙", "Text_RedDragon", 4, "328093", 1, 0, null, null, null, "328093", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), "160627", "160628", 1], [40011, "黄龙", "Text_Huanglong", 4, "328083", 1, 0, null, null, null, "328083", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), "160627", "160628", 1], [40012, "蓝龙", "Text_BlueDragon", 4, "328088", 1, 0, null, null, null, "328088", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), "160627", "160628", 1], [20054, "奥特之神", "Text_TheGodOfOtter", 2, "162938", 3, 0, null, null, null, "162938", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), new mw.Vector(1, 1, 1), null, null, 1]];
class BagInfoConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$e);
    }
}

var foreign20 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    BagInfoConfig: BagInfoConfig
});

const EXCELDATA$d = [["ID", "Trigger"], ["", ""], [1, "31C74B45"], [2, "1C8239C4"], [3, "364BACB8"], [4, "2852C170"], [5, "256775C1"], [6, "33906784"], [7, "33906784"], [8, "06EA29D4"], [9, "3632B26C"], [10, "0BDB9B69"], [11, "26DCD312"], [12, "2EF31BDE"], [13, "260DF16D"], [14, "072B90C4"], [15, "3BA34E3A"], [16, "2B517DC3"], [17, "32E70AAC"], [18, "051F01E3"], [19, "103ED656"], [20, "18FE991B"], [21, "3E774F57"], [22, "30660E1E"], [23, "31B520C6"], [24, "34D2C862"], [25, "1E00AB5F"], [26, "296BE274"], [27, "3F75C46D"], [28, "113CB47A"], [29, "120FD6FA"], [30, "30153F08"], [31, "37197334"], [32, "3406A226"], [33, "263A1821"], [34, "3778D193"], [35, "0D712684"], [36, "2DADCA4E"], [37, "2B7FDE80"], [38, "28576BC5"], [39, "31450F51"], [40, "2D1538C8"], [41, "03B0A46A"], [42, "0D225B82"], [43, "292A156C"], [44, "07F8E5AC"], [45, "1144C7F4"], [46, "374443F2"]];
class CoinConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$d);
    }
}

var foreign21 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    CoinConfig: CoinConfig
});

const EXCELDATA$c = [["id", "jsons", "rightWeaponGuid", "leftWeaponGuid", "hitAnimation", "hitEffect", "hitDamage", "Role", "RoleType", "Price", "RoleIcon", "StandbyAnimation", "EffectId", "EffectOffset", "EffectRot", "EffectScale", "Del"], ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""], [10001, "{\"charFightIdelAniId\":\"\",\"infos\":[{\"type\":\"1\",\"guid\":\"121650\",\"duration\":\"900\",\"hitLength\":\"300\",\"frontRockLength\":\"600\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"12374\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"0\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"200\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"50\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"85152\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"350\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"180\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"50\",\"skillLength\":\"120\",\"skillWidth\":\"220\",\"moveSpeed\":\"300\"},{\"type\":\"1\",\"guid\":\"121652\",\"duration\":\"900\",\"hitLength\":\"300\",\"frontRockLength\":\"600\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"12374\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"0\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"200\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"50\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"85152\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"250\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"-30\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"120\",\"skillLength\":\"120\",\"skillWidth\":\"160\",\"moveSpeed\":\"300\"},{\"type\":\"1\",\"guid\":\"121639\",\"duration\":\"1300\",\"hitLength\":\"600\",\"frontRockLength\":\"800\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"12374\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"0\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"180\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"80\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"85152\",\"duration\":\"\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"350\",\"slotIndex\":\"-1\",\"stopTime\":\"600\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"90\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"300\",\"skillLength\":\"120\",\"skillWidth\":\"120\",\"moveSpeed\":\"300\"}]}", "D636AFB34192D6DB62DD059D4F73538A", null, "121409", "27421", 10, "142932", 2, 6666, "193337", "117391", "42830", new mw.Vector(0, 0, -20), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "悟空", 0], [10002, "{\n    \"charFightIdelAniId\": \"\",\n    \"infos\": [\n        {\n            \"type\": \"1\",\n            \"guid\": \"122486\",\n            \"duration\": \"550\",\n            \"hitLength\": \"400\",\n            \"frontRockLength\": \"700\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"4\",\n            \"guid\": \"47421\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"400\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0|0|0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"84949\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"400\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"700\",\n            \"offsetPos\": [\n                \"0\",\n                \"10\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"45\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"400\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"120\",\n            \"skillLength\": \"175\",\n            \"skillWidth\": \"170\",\n            \"moveSpeed\": \"300\"\n        }\n    ]\n}", "122953", null, "121409", "27421", 10, "141618", 2, 3000, "193356", "117391", "42821", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "赛博自来也", 0], [10003, "{\"charFightIdelAniId\":\"\",\"infos\":[{\"type\":\"1\",\"guid\":\"85125\",\"duration\":\"600\",\"hitLength\":\"300\",\"frontRockLength\":\"400\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"47870\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"0\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"200\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"50\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"84952\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"350\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"180\",\"30\",\"70\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"0\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"100\",\"skillLength\":\"120\",\"skillWidth\":\"220\",\"moveSpeed\":\"300\"},{\"type\":\"1\",\"guid\":\"20267\",\"duration\":\"600\",\"hitLength\":\"300\",\"frontRockLength\":\"400\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"47870\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"0\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"200\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"50\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"84952\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"250\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"-90\",\"20\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"0\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"150\",\"skillLength\":\"150\",\"skillWidth\":\"120\",\"moveSpeed\":\"300\"}]}", "118146", null, "121409", "27421", 10, "142889", 2, 8888, "193343", "117391", "42805", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "海王", 0], [10004, "{\"charFightIdelAniId\":\"\",\"infos\":[{\"type\":\"1\",\"guid\":\"121652\",\"duration\":\"900\",\"hitLength\":\"300\",\"frontRockLength\":\"600\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"200\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"50\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"126922\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"250\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"-30\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"120\",\"skillLength\":\"120\",\"skillWidth\":\"160\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"47870\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"0\",\"slotIndex\":\"-1\",\"stopTime\":\"0\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"0\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"100\"},{\"type\":\"4\",\"guid\":\"145579\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"150\",\"slotIndex\":\"-1\",\"stopTime\":\"0\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"0\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"100\"},{\"type\":\"1\",\"guid\":\"121639\",\"duration\":\"1300\",\"hitLength\":\"600\",\"frontRockLength\":\"800\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"180\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"80\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"300\",\"skillLength\":\"500\",\"skillWidth\":\"120\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"126922\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"350\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"90\",\"0\",\"0\"],\"offsetScale\":[\"1.2\",\"1.2\",\"1.2\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"135892\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"450\",\"slotIndex\":\"-1\",\"stopTime\":\"600\",\"offsetPos\":[\"120\",\"0\",\"-85\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"135892\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"500\",\"slotIndex\":\"-1\",\"stopTime\":\"600\",\"offsetPos\":[\"240\",\"0\",\"-85\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"135892\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"550\",\"slotIndex\":\"-1\",\"stopTime\":\"600\",\"offsetPos\":[\"360\",\"0\",\"-85\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"135892\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"600\",\"slotIndex\":\"-1\",\"stopTime\":\"600\",\"offsetPos\":[\"480\",\"0\",\"-85\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"1\",\"guid\":\"121644\",\"duration\":\"1300\",\"hitLength\":\"400\",\"frontRockLength\":\"800\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"75351\",\"duration\":\"\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"0\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"0\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"100\"},{\"type\":\"2\",\"guid\":\"135891\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"800\",\"offsetPos\":[\"120\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"200\",\"skillLength\":\"300\",\"skillWidth\":\"200\",\"moveSpeed\":\"300\"}]}", "152954", "152954", "121409", "135892", 10, "142898", 2, 66666, "193340", "121658", "42818", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "美国队长", "神锤"], [10005, "{\"charFightIdelAniId\":\"\",\"infos\":[{\"type\":\"1\",\"guid\":\"121647\",\"duration\":\"800\",\"hitLength\":\"300\",\"frontRockLength\":\"500\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"124432\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"230\",\"slotIndex\":\"-1\",\"stopTime\":\"500\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"-10\",\"-120\"],\"offsetScale\":[\"0.8\",\"0.8\",\"0.8\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"10\",\"skillLength\":\"150\",\"skillWidth\":\"160\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"47870\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"0\",\"slotIndex\":\"-1\",\"stopTime\":\"0\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"0\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"100\"},{\"type\":\"1\",\"guid\":\"121641\",\"duration\":\"600\",\"hitLength\":\"300\",\"frontRockLength\":\"500\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"124433\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"1200\",\"offsetPos\":[\"-30\",\"0\",\"-20\"],\"offsetRotation\":[\"240\",\"-45\",\"-278\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"150\",\"skillLength\":\"160\",\"skillWidth\":\"140\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"75372\",\"duration\":\"\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"0\",\"slotIndex\":\"-1\",\"stopTime\":\"0\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"0\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"100\"},{\"type\":\"1\",\"guid\":\"121597\",\"duration\":\"2300\",\"hitLength\":\"1000\",\"frontRockLength\":\"1800\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"300\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"200\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"124434\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"900\",\"slotIndex\":\"-1\",\"stopTime\":\"2000\",\"offsetPos\":[\"50\",\"0\",\"-80\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"0.8\",\"0.8\",\"0.8\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"0\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"150\",\"skillLength\":\"800\",\"skillWidth\":\"140\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"122569\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"700\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"}]}", "118143", null, "121409", "27421", 10, "142886", 2, 100000, "193345", "121648", "42828", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "毒液", 0], [10006, "{\"charFightIdelAniId\":\"\",\"infos\":[{\"type\":\"1\",\"guid\":\"121592\",\"duration\":\"750\",\"hitLength\":\"450\",\"frontRockLength\":\"500\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"126922\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"400\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"50\",\"0\",\"0\"],\"offsetRotation\":[\"160\",\"0\",\"0\"],\"offsetScale\":[\"1.2\",\"1.2\",\"1.2\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"12374\",\"duration\":\"\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"0\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"100\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"200\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"50\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"120\",\"skillLength\":\"200\",\"skillWidth\":\"200\",\"moveSpeed\":\"300\"},{\"type\":\"1\",\"guid\":\"121600\",\"duration\":\"800\",\"hitLength\":\"150\",\"frontRockLength\":\"250\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"80\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"126922\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"30\",\"0\",\"0\"],\"offsetScale\":[\"1.35\",\"1.35\",\"1.35\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"12374\",\"duration\":\"\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"0\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"200\",\"skillLength\":\"250\",\"skillWidth\":\"200\",\"moveSpeed\":\"300\"},{\"type\":\"1\",\"guid\":\"121599\",\"duration\":\"800\",\"hitLength\":\"250\",\"frontRockLength\":\"300\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"600\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"126922\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"180\",\"0\",\"0\"],\"offsetScale\":[\"1.5\",\"1.5\",\"1.5\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"12374\",\"duration\":\"\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"0\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"100\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"80\",\"skillLength\":\"200\",\"skillWidth\":\"300\",\"moveSpeed\":\"300\"}]}", "122960", "122960", "121409", "89089", 10, "142899", 2, 120000, "193333", "117391", "42804", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "灭霸拳套", "斧头"], [10007, "{\"charFightIdelAniId\":\"121557\",\"infos\":[{\"type\":\"1\",\"guid\":\"121575\",\"duration\":\"900\",\"hitLength\":\"500\",\"frontRockLength\":\"600\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"135890\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"450\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"160\",\"10\",\"20\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"30\",\"skillRadius\":\"0\",\"skillHeight\":\"120\",\"skillLength\":\"100\",\"skillWidth\":\"200\"},{\"type\":\"1\",\"guid\":\"121574\",\"duration\":\"800\",\"hitLength\":\"400\",\"frontRockLength\":\"500\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"600\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"100\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"50\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"135890\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"30\",\"skillRadius\":\"0\",\"skillHeight\":\"120\",\"skillLength\":\"100\",\"skillWidth\":\"200\"},{\"type\":\"1\",\"guid\":\"121573\",\"duration\":\"800\",\"hitLength\":\"400\",\"frontRockLength\":\"500\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"150\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"135890\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"130\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"30\",\"skillRadius\":\"0\",\"skillHeight\":\"120\",\"skillLength\":\"80\",\"skillWidth\":\"200\"},{\"type\":\"1\",\"guid\":\"121572\",\"duration\":\"1200\",\"hitLength\":\"350\",\"frontRockLength\":\"600\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"135889\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"1200\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"-150\",\"skillRadius\":\"0\",\"skillHeight\":\"100\",\"skillLength\":\"300\",\"skillWidth\":\"300\"},{\"type\":\"1\",\"guid\":\"121571\",\"duration\":\"1500\",\"hitLength\":\"500\",\"frontRockLength\":\"800\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"200\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"320\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"160\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"135894\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"500\",\"slotIndex\":\"-1\",\"stopTime\":\"800\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"200\",\"skillLength\":\"450\",\"skillWidth\":\"200\"}]}", "33861", null, "121409", "135892", 10, "142925", 2, 150000, "193338", "121557", "42804", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "鸣人", 0], [10008, "{\"charFightIdelAniId\":\"\",\"infos\":[{\"type\":\"1\",\"guid\":\"117371\",\"duration\":\"500\",\"hitLength\":\"100\",\"frontRockLength\":\"300\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"123288\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"500\",\"offsetPos\":[\"30\",\"0\",\"-30\"],\"offsetRotation\":[\"0\",\"-20\",\"-90\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"\",\"skillAngle\":\"45\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"60\",\"skillLength\":\"180\",\"skillWidth\":\"240\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"135750\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"0\",\"slotIndex\":\"-1\",\"stopTime\":\"0\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"1\",\"guid\":\"117366\",\"duration\":\"1000\",\"hitLength\":\"300\",\"frontRockLength\":\"500\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"100\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"80\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"123288\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"400\",\"slotIndex\":\"-1\",\"stopTime\":\"500\",\"offsetPos\":[\"30\",\"0\",\"15\"],\"offsetRotation\":[\"187\",\"20\",\"110\"],\"offsetScale\":[\"1.2\",\"1.2\",\"1.2\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"40\",\"skillRadius\":\"0\",\"skillHeight\":\"120\",\"skillLength\":\"180\",\"skillWidth\":\"240\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"135750\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"0\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"1\",\"guid\":\"117375\",\"duration\":\"1300\",\"hitLength\":\"300\",\"frontRockLength\":\"500\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"50\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"20\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"123288\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"150\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"30\",\"0\",\"15\"],\"offsetRotation\":[\"-15\",\"27\",\"-122\"],\"offsetScale\":[\"1.25\",\"1.25\",\"1.25\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"200\",\"skillLength\":\"180\",\"skillWidth\":\"240\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"135750\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"0\",\"slotIndex\":\"-1\",\"stopTime\":\"0\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"1\",\"guid\":\"117376\",\"duration\":\"1500\",\"hitLength\":\"600\",\"frontRockLength\":\"850\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"200\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"80\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"123286\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"400\",\"slotIndex\":\"-1\",\"stopTime\":\"500\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"-180\",\"15\",\"-270\"],\"offsetScale\":[\"1.5\",\"1.5\",\"1.5\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"123286\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"600\",\"slotIndex\":\"-1\",\"stopTime\":\"800\",\"offsetPos\":[\"30\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"1.6\",\"1.6\",\"1.6\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"135750\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"400\",\"slotIndex\":\"-1\",\"stopTime\":\"0\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"135750\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"150\",\"slotIndex\":\"-1\",\"stopTime\":\"0\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"120\",\"skillLength\":\"250\",\"skillWidth\":\"400\",\"moveSpeed\":\"300\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"200\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"150\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"}]}", "218730", "218730", "121409", "135892", 10, "EE5F536B4DD23D7B7684669580687A3C", 2, 200000, "182102", "117403", "42821", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "未来战士", 0], [10009, "{\n    \"charFightIdelAniId\": \"\",\n    \"infos\": [\n        {\n            \"type\": \"1\",\n            \"guid\": \"29726\",\n            \"duration\": \"1970\",\n            \"hitLength\": \"900\",\n            \"frontRockLength\": \"1900\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"163339\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"900\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"1970\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"-95\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"-90\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"4\",\n            \"guid\": \"135752\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"900\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0|0|0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"0\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"0\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0|0|-100\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"120\",\n            \"skillLength\": \"1000\",\n            \"skillWidth\": \"120\",\n            \"moveSpeed\": \"300\"\n        }\n    ]\n}", "210791", null, "121409", "163337", 10, "142896", 2, 5000, "164634", "117391", "42805", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "森林哨兵"], [10010, "{\n    \"charFightIdelAniId\": \"\",\n    \"infos\": [\n        {\n            \"type\": \"1\",\n            \"guid\": \"162137\",\n            \"duration\": \"1500\",\n            \"hitLength\": \"0\",\n            \"frontRockLength\": \"1500\",\n            \"isCharge\": \"1\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"163346\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"0\",\n            \"offsetPos\": [\n                \"-80\",\n                \"40\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"2\",\n                \"2\",\n                \"2\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"1\",\n            \"guid\": \"29728\",\n            \"duration\": \"2330\",\n            \"hitLength\": \"600\",\n            \"frontRockLength\": \"2330\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"163347\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"600\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"2330\",\n            \"offsetPos\": [\n                \"100\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"600\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"100\",\n            \"skillLength\": \"1000\",\n            \"skillWidth\": \"100\",\n            \"moveSpeed\": \"300\"\n        }\n    ]\n}", "221099", "221099", "121409", "135892", 10, "90CDCFD5497992D511E6E38B7015C795", 2, 20000, "164671", "117391", "42818", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "索尼克", "手枪"], [10011, "{\n    \"charFightIdelAniId\": \"\",\n    \"infos\": [\n        {\n            \"type\": \"1\",\n            \"guid\": \"162137\",\n            \"duration\": \"1500\",\n            \"hitLength\": \"0\",\n            \"frontRockLength\": \"1500\",\n            \"isCharge\": \"1\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"163348\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"0\",\n            \"offsetPos\": [\n                \"-80\",\n                \"40\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"2\",\n                \"2\",\n                \"2\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"1\",\n            \"guid\": \"29728\",\n            \"duration\": \"2330\",\n            \"hitLength\": \"600\",\n            \"frontRockLength\": \"2330\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"163349\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"600\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"2330\",\n            \"offsetPos\": [\n                \"100\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"600\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"100\",\n            \"skillLength\": \"1000\",\n            \"skillWidth\": \"100\",\n            \"moveSpeed\": \"300\"\n        }\n    ]\n}", "43702", "43702", "121409", "142950", 10, "142901", 2, 30000, "164652", "117391", "42804", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "粉毛怪", "信号枪"], [10012, "{\n    \"charFightIdelAniId\": \"\",\n    \"infos\": [\n        {\n            \"type\": \"1\",\n            \"guid\": \"117367\",\n            \"duration\": \"2230\",\n            \"hitLength\": \"1050\",\n            \"frontRockLength\": \"1600\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"164530\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"1050\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"2230\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"-95\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"3\",\n                \"3\",\n                \"3\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"0\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"360\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"200\",\n            \"skillHeight\": \"200\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"1\",\n            \"guid\": \"117407\",\n            \"duration\": \"2500\",\n            \"hitLength\": \"1050\",\n            \"frontRockLength\": \"2500\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"3\",\n            \"guid\": \"\",\n            \"duration\": \"300\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"450\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"0\",\n            \"moveDir\": \"1\",\n            \"moveDistance\": \"300\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"164529\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"1050\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"2500\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"-95\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"3\",\n                \"3\",\n                \"3\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"0\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"360\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"200\",\n            \"skillHeight\": \"200\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        }\n    ]\n}", "103067", null, "121409", "135892", 10, "142918", 2, 88888, "164630", "111092", "42805", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "纲手", "刀"], [10013, "{\n    \"charFightIdelAniId\": \"\",\n    \"infos\": [\n        {\n            \"type\": \"1\",\n            \"guid\": \"117367\",\n            \"duration\": \"2230\",\n            \"hitLength\": \"1050\",\n            \"frontRockLength\": \"1600\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"164530\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"1050\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"2230\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"-95\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"3\",\n                \"3\",\n                \"3\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"0\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"360\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"200\",\n            \"skillHeight\": \"200\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"1\",\n            \"guid\": \"117407\",\n            \"duration\": \"2500\",\n            \"hitLength\": \"1050\",\n            \"frontRockLength\": \"2500\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"3\",\n            \"guid\": \"\",\n            \"duration\": \"300\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"450\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"0\",\n            \"moveDir\": \"1\",\n            \"moveDistance\": \"300\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"164528\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"1050\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"2500\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"-95\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"3\",\n                \"3\",\n                \"3\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"0\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"360\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"200\",\n            \"skillHeight\": \"200\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        }\n    ]\n}", "103080", null, "121409", "135892", 10, "142924", 2, 88888, "164626", "117391", "42805", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "李洛克", "刀"], [10014, "{\n    \"charFightIdelAniId\": \"\",\n    \"infos\": [\n        {\n            \"type\": \"1\",\n            \"guid\": \"119910\",\n            \"duration\": \"3230\",\n            \"hitLength\": \"800\",\n            \"frontRockLength\": \"3230\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"168834\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"800\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"3230\",\n            \"offsetPos\": [\n                \"400\",\n                \"0\",\n                \"-95\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"0\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"200\",\n            \"skillLength\": \"1500\",\n            \"skillWidth\": \"50\",\n            \"moveSpeed\": \"300\"\n        }\n    ]\n}", "103075", null, "121409", "168828", 10, "142917", 2, 166666, "164648", "117391", "42818", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "干柿鬼鲛", "镰刀"], [10015, "{\n    \"charFightIdelAniId\": \"\",\n    \"infos\": [\n        {\n            \"type\": \"1\",\n            \"guid\": \"117361\",\n            \"duration\": \"830\",\n            \"hitLength\": \"250\",\n            \"frontRockLength\": \"500\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"168946\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"250\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"830\",\n            \"offsetPos\": [\n                \"50\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"0\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"-100\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"50\",\n            \"skillLength\": \"300\",\n            \"skillWidth\": \"200\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"1\",\n            \"guid\": \"117344\",\n            \"duration\": \"1070\",\n            \"hitLength\": \"400\",\n            \"frontRockLength\": \"800\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"168946\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"400\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"1070\",\n            \"offsetPos\": [\n                \"50\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"0\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"-100\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"50\",\n            \"skillLength\": \"300\",\n            \"skillWidth\": \"200\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"1\",\n            \"guid\": \"117363\",\n            \"duration\": \"830\",\n            \"hitLength\": \"300\",\n            \"frontRockLength\": \"600\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"168957\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"300\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"830\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"-35\",\n                \"0\",\n                \"-90\"\n            ],\n            \"offsetScale\": [\n                \"1.5\",\n                \"1.5\",\n                \"1.5\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"0\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"50\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"100\",\n            \"skillLength\": \"100\",\n            \"skillWidth\": \"50\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"1\",\n            \"guid\": \"117364\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"250\",\n            \"frontRockLength\": \"500\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"168957\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"250\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"1000\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"-90\"\n            ],\n            \"offsetScale\": [\n                \"1.5\",\n                \"1.5\",\n                \"1.5\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"0\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"50\",\n            \"skillLength\": \"200\",\n            \"skillWidth\": \"50\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"1\",\n            \"guid\": \"117362\",\n            \"duration\": \"2400\",\n            \"hitLength\": \"1300\",\n            \"frontRockLength\": \"2400\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"3\",\n            \"guid\": \"\",\n            \"duration\": \"300\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"650\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"0\",\n            \"moveDir\": \"1\",\n            \"moveDistance\": \"300\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"168943\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"1300\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"2400\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"-95\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"0\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"300\",\n            \"skillAngle\": \"360\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"200\",\n            \"skillHeight\": \"200\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        }\n    ]\n}", "122946", null, "121409", "151551", 10, "409EBB1E48B099BDC8F15192C6443591", 2, 999999, "54193", "111092", "42804", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "赛博女孩", "镰刀"], [10016, "{\n    \"charFightIdelAniId\": \"\",\n    \"infos\": [\n        {\n            \"type\": \"1\",\n            \"guid\": \"29744\",\n            \"duration\": \"1730\",\n            \"hitLength\": \"600\",\n            \"frontRockLength\": \"1500\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"168824\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"300\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"1730\",\n            \"offsetPos\": [\n                \"100\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"-135\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"4\",\n            \"guid\": \"135750\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"300\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"0\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0|0|0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"168824\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"600\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"1730\",\n            \"offsetPos\": [\n                \"100\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"-135\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"4\",\n            \"guid\": \"135750\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"600\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"0\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0|0|0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"168824\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"1200\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"1730\",\n            \"offsetPos\": [\n                \"100\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"-135\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"4\",\n            \"guid\": \"135750\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"1200\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"0\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0|0|0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"0\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"300\",\n            \"skillAngle\": \"360\",\n            \"skillOffsetDis\": \"100\",\n            \"skillRadius\": \"200\",\n            \"skillHeight\": \"200\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"1\",\n            \"guid\": \"115466\",\n            \"duration\": \"2000\",\n            \"hitLength\": \"1200\",\n            \"frontRockLength\": \"2000\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"168826\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"200\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"2000\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"168827\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"950\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"2000\",\n            \"offsetPos\": [\n                \"300\",\n                \"0\",\n                \"50\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"-20\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"4\",\n            \"guid\": \"135750\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"950\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"0\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0|0|0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"168833\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"1000\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"2000\",\n            \"offsetPos\": [\n                \"500\",\n                \"0\",\n                \"-95\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"2\",\n                \"2\",\n                \"2\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"0\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"300\",\n            \"skillAngle\": \"360\",\n            \"skillOffsetDis\": \"500\",\n            \"skillRadius\": \"200\",\n            \"skillHeight\": \"200\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        }\n    ]\n}", "31710", null, "121409", "27422", 10, "142891", 2, 288888, "164656", "111092", "42804", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "黑寡妇", "冰封剑"], [10017, "{\n    \"charFightIdelAniId\": \"\",\n    \"infos\": [\n        {\n            \"type\": \"1\",\n            \"guid\": \"162183\",\n            \"duration\": \"2130\",\n            \"hitLength\": \"800\",\n            \"frontRockLength\": \"2130\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"125705\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"800\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"2130\",\n            \"offsetPos\": [\n                \"75\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"30\",\n                \"-180\",\n                \"180\"\n            ],\n            \"offsetScale\": [\n                \"3\",\n                \"3\",\n                \"3\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"0\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"75\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"50\",\n            \"skillLength\": \"200\",\n            \"skillWidth\": \"200\",\n            \"moveSpeed\": \"300\"\n        }\n    ]\n}", "103069", null, "121409", "13418", 10, "142919", 2, 128888, "164661", "117391", "42804", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "怪物爪子", "刀"], [10018, "{\n    \"charFightIdelAniId\": \"\",\n    \"infos\": [\n        {\n            \"type\": \"1\",\n            \"guid\": \"162132\",\n            \"duration\": \"2070\",\n            \"hitLength\": \"250\",\n            \"frontRockLength\": \"500\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"124432\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"250\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"2070\",\n            \"offsetPos\": [\n                \"75\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"-30\",\n                \"-90\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"0\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"50\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"50\",\n            \"skillLength\": \"200\",\n            \"skillWidth\": \"200\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"1\",\n            \"guid\": \"162128\",\n            \"duration\": \"1730\",\n            \"hitLength\": \"250\",\n            \"frontRockLength\": \"500\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"124432\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"250\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"2070\",\n            \"offsetPos\": [\n                \"75\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"180\",\n                \"-30\",\n                \"-270\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"0\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"50\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"50\",\n            \"skillLength\": \"200\",\n            \"skillWidth\": \"200\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"1\",\n            \"guid\": \"162129\",\n            \"duration\": \"2670\",\n            \"hitLength\": \"800\",\n            \"frontRockLength\": \"2500\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"3\",\n            \"guid\": \"\",\n            \"duration\": \"300\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"300\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"0\",\n            \"moveDir\": \"1\",\n            \"moveDistance\": \"300\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"125706\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"250\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"2670\",\n            \"offsetPos\": [\n                \"0\",\n                \"-50\",\n                \"100\"\n            ],\n            \"offsetRotation\": [\n                \"90\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"124432\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"800\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"2670\",\n            \"offsetPos\": [\n                \"75\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"-30\",\n                \"-90\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"124432\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"800\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"2670\",\n            \"offsetPos\": [\n                \"75\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"180\",\n                \"-30\",\n                \"-270\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"0\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"100\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"200\",\n            \"skillLength\": \"200\",\n            \"skillWidth\": \"200\",\n            \"moveSpeed\": \"300\"\n        }\n    ]\n}", "122961", "122961", "121409", "13418", 10, "142920", 2, 688888, "164654", "117391", "42804", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "卡卡西"], [10019, "{\n    \"charFightIdelAniId\": \"\",\n    \"infos\": [\n        {\n            \"type\": \"1\",\n            \"guid\": \"162128\",\n            \"duration\": \"1730\",\n            \"hitLength\": \"250\",\n            \"frontRockLength\": \"500\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"108558\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"250\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"1730\",\n            \"offsetPos\": [\n                \"50\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"30\",\n                \"-180\",\n                \"180\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"0\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"50\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"200\",\n            \"skillLength\": \"100\",\n            \"skillWidth\": \"50\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"1\",\n            \"guid\": \"117364\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"250\",\n            \"frontRockLength\": \"500\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"108555\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"250\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"1730\",\n            \"offsetPos\": [\n                \"150\",\n                \"25\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"0\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"100\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"100\",\n            \"skillLength\": \"100\",\n            \"skillWidth\": \"100\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"1\",\n            \"guid\": \"117361\",\n            \"duration\": \"830\",\n            \"hitLength\": \"250\",\n            \"frontRockLength\": \"600\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"135893\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"250\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"830\",\n            \"offsetPos\": [\n                \"50\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"30\",\n                \"0\",\n                \"225\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"0\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"50\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"50\",\n            \"skillLength\": \"200\",\n            \"skillWidth\": \"200\",\n            \"moveSpeed\": \"300\"\n        }\n    ]\n}", "272767", null, "121409", "27421", 10, "143231", 2, 488888, "164662", "117391", "42804", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "鼬", "法杖"], [10020, "{\n    \"charFightIdelAniId\": \"\",\n    \"infos\": [\n        {\n            \"type\": \"1\",\n            \"guid\": \"117537\",\n            \"duration\": \"2500\",\n            \"hitLength\": \"1500\",\n            \"frontRockLength\": \"2400\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"123626\",\n            \"duration\": \"2000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"100\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"1500\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"-95\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"1.5\",\n                \"1.5\",\n                \"1.5\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"160750\",\n            \"duration\": \"2000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"100\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"1500\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"-95\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"163346\",\n            \"duration\": \"2000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"300\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"650\",\n            \"offsetPos\": [\n                \"30\",\n                \"-30\",\n                \"100\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"2\",\n                \"2\",\n                \"2\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"160755\",\n            \"duration\": \"2000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"1500\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"2400\",\n            \"offsetPos\": [\n                \"150\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"0\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"150\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"100\",\n            \"skillLength\": \"2000\",\n            \"skillWidth\": \"100\",\n            \"moveSpeed\": \"300\"\n        }\n    ]\n}", "166941", "166941", "121409", "27421", 10, "142915", 2, 100000, "164643", "117391", "42804", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "大蛇丸", "水枪"], [10021, "{\n    \"charFightIdelAniId\": \"\",\n    \"infos\": [\n        {\n            \"type\": \"1\",\n            \"guid\": \"29714\",\n            \"duration\": \"1330\",\n            \"hitLength\": \"500\",\n            \"frontRockLength\": \"1000\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"120063\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"500\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"1330\",\n            \"offsetPos\": [\n                \"330\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"-90\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"0\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"100\",\n            \"skillLength\": \"400\",\n            \"skillWidth\": \"100\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"1\",\n            \"guid\": \"29730\",\n            \"duration\": \"2000\",\n            \"hitLength\": \"500\",\n            \"frontRockLength\": \"1500\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"108557\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"500\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"2000\",\n            \"offsetPos\": [\n                \"60\",\n                \"0\",\n                \"-95\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"-90\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"0\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"200\",\n            \"skillLength\": \"500\",\n            \"skillWidth\": \"50\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"1\",\n            \"guid\": \"29726\",\n            \"duration\": \"1970\",\n            \"hitLength\": \"700\",\n            \"frontRockLength\": \"1500\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"152557\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"700\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"2000\",\n            \"offsetPos\": [\n                \"300\",\n                \"0\",\n                \"-95\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"0\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"100\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"200\",\n            \"skillLength\": \"200\",\n            \"skillWidth\": \"200\",\n            \"moveSpeed\": \"300\"\n        }\n    ]\n}", "31712", null, "121409", "27421", 10, "0D2FE7104CD5DE0291C71B964C7C7AAC", 2, 200000, "164672", "111092", "42805", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "冰女", "冰钻剑"], [10022, "{\n    \"charFightIdelAniId\": \"\",\n    \"infos\": [\n        {\n            \"type\": \"1\",\n            \"guid\": \"121592\",\n            \"duration\": \"1870\",\n            \"hitLength\": \"400\",\n            \"frontRockLength\": \"900\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"121784\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"400\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"1870\",\n            \"offsetPos\": [\n                \"65\",\n                \"0\",\n                \"-30\"\n            ],\n            \"offsetRotation\": [\n                \"20\",\n                \"-200\",\n                \"-30\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"0\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"50\",\n            \"skillLength\": \"200\",\n            \"skillWidth\": \"200\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"1\",\n            \"guid\": \"121600\",\n            \"duration\": \"1830\",\n            \"hitLength\": \"400\",\n            \"frontRockLength\": \"900\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"121784\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"400\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"1830\",\n            \"offsetPos\": [\n                \"65\",\n                \"0\",\n                \"-30\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"20\",\n                \"-110\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"0\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"50\",\n            \"skillLength\": \"200\",\n            \"skillWidth\": \"200\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"1\",\n            \"guid\": \"121596\",\n            \"duration\": \"2830\",\n            \"hitLength\": \"800\",\n            \"frontRockLength\": \"2500\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"3\",\n            \"guid\": \"\",\n            \"duration\": \"200\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"400\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"0\",\n            \"moveDir\": \"1\",\n            \"moveDistance\": \"200\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"126923\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"800\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"2830\",\n            \"offsetPos\": [\n                \"200\",\n                \"0\",\n                \"-95\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"-90\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"00FFFF\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"0\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"100\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"200\",\n            \"skillLength\": \"400\",\n            \"skillWidth\": \"100\",\n            \"moveSpeed\": \"300\"\n        }\n    ]\n}", "118142", "118142", "121409", "27421", 10, "142138", 2, 200000, "164689", "117391", "42805", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "兔子", "屠刀"], [10023, "{\"charFightIdelAniId\":\"\",\"infos\":[{\"type\":\"1\",\"guid\":\"111103\",\"duration\":\"700\",\"hitLength\":\"300\",\"frontRockLength\":\"500\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"50\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"0\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"30\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"12374\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"0\",\"slotIndex\":\"-1\",\"stopTime\":\"0\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"0\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"100\"},{\"type\":\"2\",\"guid\":\"105325\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"220\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"30\",\"0\",\"0\"],\"offsetRotation\":[\"150\",\"12\",\"20\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"88E5FFFF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"12374\",\"duration\":\"\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"0\",\"slotIndex\":\"-1\",\"stopTime\":\"0\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"0\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"100\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"80\",\"skillLength\":\"110\",\"skillWidth\":\"120\",\"moveSpeed\":\"300\"},{\"type\":\"1\",\"guid\":\"111101\",\"duration\":\"1300\",\"hitLength\":\"300\",\"frontRockLength\":\"400\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"12374\",\"duration\":\"\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"0\",\"slotIndex\":\"-1\",\"stopTime\":\"0\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"0\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"100\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"100\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"60\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"-80\",\"skillRadius\":\"0\",\"skillHeight\":\"250\",\"skillLength\":\"260\",\"skillWidth\":\"20\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"105325\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"250\",\"slotIndex\":\"-1\",\"stopTime\":\"500\",\"offsetPos\":[\"20\",\"0\",\"0\"],\"offsetRotation\":[\"-107\",\"55\",\"-14\"],\"offsetScale\":[\"1.1\",\"1.1\",\"1.1\"],\"colorHex\":\"88E5FFFF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"105325\",\"duration\":\"\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"350\",\"slotIndex\":\"-1\",\"stopTime\":\"500\",\"offsetPos\":[\"20\",\"20\",\"0\"],\"offsetRotation\":[\"-254\",\"44\",\"-168\"],\"offsetScale\":[\"1.3\",\"1.3\",\"1.3\"],\"colorHex\":\"88E5FFFF\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"105325\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"450\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"20\",\"-30\",\"0\"],\"offsetRotation\":[\"-249\",\"-56\",\"-196\"],\"offsetScale\":[\"1.15\",\"1.15\",\"1.15\"],\"colorHex\":\"88E5FFFF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"105325\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"480\",\"slotIndex\":\"-1\",\"stopTime\":\"100\",\"offsetPos\":[\"20\",\"20\",\"0\"],\"offsetRotation\":[\"-101\",\"-17\",\"-355\"],\"offsetScale\":[\"1.2\",\"1.2\",\"1.2\"],\"colorHex\":\"88E5FFFF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"105325\",\"duration\":\"\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"500\",\"slotIndex\":\"-1\",\"stopTime\":\"500\",\"offsetPos\":[\"30\",\"0\",\"0\"],\"offsetRotation\":[\"-101\",\"-8\",\"-358\"],\"offsetScale\":[\"1.5\",\"1.5\",\"1.5\"],\"colorHex\":\"88E5FFFF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"1\",\"guid\":\"111093\",\"duration\":\"1700\",\"hitLength\":\"500\",\"frontRockLength\":\"800\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"300\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"116459\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"600\",\"slotIndex\":\"-1\",\"stopTime\":\"1200\",\"offsetPos\":[\"0\",\"0\",\"-60\"],\"offsetRotation\":[\"0\",\"0\",\"-180\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"88E5FFFF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"12374\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"350\",\"slotIndex\":\"-1\",\"stopTime\":\"0\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"}]}", "210651", null, "121409", "27422", 10, "142895", 3, 0, "193334", "117391", "42805", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "洛基", "蓝色法杖"], [10024, "{\n    \"charFightIdelAniId\": \"117380\",\n    \"infos\": [\n        {\n            \"type\": \"1\",\n            \"guid\": \"117399\",\n            \"duration\": \"1200\",\n            \"hitLength\": \"300\",\n            \"frontRockLength\": \"500\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"100\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"120066\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"150\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"500\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\"\n        },\n        {\n            \"type\": \"3\",\n            \"guid\": \"\",\n            \"duration\": \"50\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"200\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"0\",\n            \"moveDir\": \"1\",\n            \"moveDistance\": \"50\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"300\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"0\",\n            \"moveDir\": \"1\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"45\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"60\",\n            \"skillLength\": \"180\",\n            \"skillWidth\": \"240\"\n        },\n        {\n            \"type\": \"1\",\n            \"guid\": \"117398\",\n            \"duration\": \"1400\",\n            \"hitLength\": \"300\",\n            \"frontRockLength\": \"600\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"100\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"120066\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"150\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"500\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"160\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\"\n        },\n        {\n            \"type\": \"3\",\n            \"guid\": \"\",\n            \"duration\": \"50\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"100\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"0\",\n            \"moveDir\": \"1\",\n            \"moveDistance\": \"50\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"300\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"40\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"120\",\n            \"skillLength\": \"180\",\n            \"skillWidth\": \"240\"\n        },\n        {\n            \"type\": \"1\",\n            \"guid\": \"117397\",\n            \"duration\": \"2100\",\n            \"hitLength\": \"300\",\n            \"frontRockLength\": \"800\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"100\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\"\n        },\n        {\n            \"type\": \"3\",\n            \"guid\": \"\",\n            \"duration\": \"500\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"150\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"0\",\n            \"moveDir\": \"1\",\n            \"moveDistance\": \"300\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"120063\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"150\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"600\",\n            \"offsetPos\": [\n                \"120\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"-90\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"120062\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"350\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"800\",\n            \"offsetPos\": [\n                \"200\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"1.3\",\n                \"1.3\",\n                \"1.3\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"300\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"250\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"200\",\n            \"skillLength\": \"180\",\n            \"skillWidth\": \"240\"\n        },\n        {\n            \"type\": \"1\",\n            \"guid\": \"117396\",\n            \"duration\": \"2000\",\n            \"hitLength\": \"500\",\n            \"frontRockLength\": \"1200\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"100\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"120065\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"300\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"1800\",\n            \"offsetPos\": [\n                \"60\",\n                \"0\",\n                \"100\"\n            ],\n            \"offsetRotation\": [\n                \"90\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\"\n        },\n        {\n            \"type\": \"3\",\n            \"guid\": \"\",\n            \"duration\": \"300\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"100\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"0\",\n            \"moveDir\": \"1\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"500\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"-150\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"200\",\n            \"skillLength\": \"300\",\n            \"skillWidth\": \"100\"\n        },\n        {\n            \"type\": \"1\",\n            \"guid\": \"117394\",\n            \"duration\": \"1600\",\n            \"hitLength\": \"300\",\n            \"frontRockLength\": \"500\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"100\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\"\n        },\n        {\n            \"type\": \"3\",\n            \"guid\": \"\",\n            \"duration\": \"200\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"100\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"0\",\n            \"moveDir\": \"1\",\n            \"moveDistance\": \"150\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"120064\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"100\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"1600\",\n            \"offsetPos\": [\n                \"120\",\n                \"0\",\n                \"-50\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"-90\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"300\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"50\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"200\",\n            \"skillLength\": \"200\",\n            \"skillWidth\": \"200\"\n        }\n    ]\n}", "121672", null, "121409", "31122", 10, "141498", 3, 0, "193346", "117391", "145912", new mw.Vector(0, 0, 10), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "太阳神", "镰刀"], [10025, "{\"charFightIdelAniId\":\"117403\",\"infos\":[{\"type\":\"1\",\"guid\":\"117371\",\"duration\":\"500\",\"hitLength\":\"100\",\"frontRockLength\":\"300\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"123288\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"500\",\"offsetPos\":[\"30\",\"0\",\"-30\"],\"offsetRotation\":[\"0\",\"-20\",\"-90\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"\",\"skillAngle\":\"45\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"60\",\"skillLength\":\"180\",\"skillWidth\":\"240\"},{\"type\":\"1\",\"guid\":\"117366\",\"duration\":\"1000\",\"hitLength\":\"300\",\"frontRockLength\":\"500\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"100\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"120\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"123288\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"400\",\"slotIndex\":\"-1\",\"stopTime\":\"500\",\"offsetPos\":[\"30\",\"0\",\"15\"],\"offsetRotation\":[\"187\",\"20\",\"110\"],\"offsetScale\":[\"1.2\",\"1.2\",\"1.2\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"40\",\"skillRadius\":\"0\",\"skillHeight\":\"120\",\"skillLength\":\"180\",\"skillWidth\":\"240\"},{\"type\":\"1\",\"guid\":\"117375\",\"duration\":\"1300\",\"hitLength\":\"300\",\"frontRockLength\":\"500\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"50\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"20\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"123288\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"150\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"30\",\"0\",\"15\"],\"offsetRotation\":[\"-15\",\"27\",\"-122\"],\"offsetScale\":[\"1.25\",\"1.25\",\"1.25\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"200\",\"skillLength\":\"180\",\"skillWidth\":\"240\"},{\"type\":\"1\",\"guid\":\"117376\",\"duration\":\"1500\",\"hitLength\":\"600\",\"frontRockLength\":\"850\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"200\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"200\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"123286\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"400\",\"slotIndex\":\"-1\",\"stopTime\":\"500\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"-180\",\"15\",\"-270\"],\"offsetScale\":[\"1.5\",\"1.5\",\"1.5\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"123286\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"600\",\"slotIndex\":\"-1\",\"stopTime\":\"800\",\"offsetPos\":[\"30\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"1.6\",\"1.6\",\"1.6\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"120\",\"skillLength\":\"250\",\"skillWidth\":\"400\"},{\"type\":\"1\",\"guid\":\"117382\",\"duration\":\"1800\",\"hitLength\":\"500\",\"frontRockLength\":\"1300\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"200\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"150\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"300\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"123289\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"250\",\"slotIndex\":\"-1\",\"stopTime\":\"600\",\"offsetPos\":[\"280\",\"0\",\"-40\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"123287\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"2500\",\"offsetPos\":[\"180\",\"0\",\"-80\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"360\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"320\",\"skillHeight\":\"230\",\"skillLength\":\"0\",\"skillWidth\":\"0\"}]}", "122956", "122956", "121409", "27421", 10, "143229", 3, 0, "193349", "117403", "42828", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "宇智波斑", "恶魔剑"], [10026, "{\"charFightIdelAniId\":\"111095\",\"infos\":[{\"type\":\"1\",\"guid\":\"111103\",\"duration\":\"700\",\"hitLength\":\"300\",\"frontRockLength\":\"500\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"50\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"0\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"30\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"105325\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"220\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"30\",\"0\",\"0\"],\"offsetRotation\":[\"150\",\"12\",\"20\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"88E5FFFF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"80\",\"skillLength\":\"110\",\"skillWidth\":\"120\"},{\"type\":\"1\",\"guid\":\"111102\",\"duration\":\"600\",\"hitLength\":\"200\",\"frontRockLength\":\"300\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"80\",\"skillLength\":\"110\",\"skillWidth\":\"120\"},{\"type\":\"2\",\"guid\":\"105325\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"220\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"20\",\"0\",\"0\"],\"offsetRotation\":[\"-15\",\"0\",\"0\"],\"offsetScale\":[\"1.3\",\"1.3\",\"1.3\"],\"colorHex\":\"88E5FFFF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"1\",\"guid\":\"111101\",\"duration\":\"1300\",\"hitLength\":\"300\",\"frontRockLength\":\"400\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"100\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"60\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"-80\",\"skillRadius\":\"0\",\"skillHeight\":\"250\",\"skillLength\":\"260\",\"skillWidth\":\"20\"},{\"type\":\"2\",\"guid\":\"105325\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"250\",\"slotIndex\":\"-1\",\"stopTime\":\"500\",\"offsetPos\":[\"20\",\"0\",\"0\"],\"offsetRotation\":[\"-107\",\"55\",\"-14\"],\"offsetScale\":[\"1.1\",\"1.1\",\"1.1\"],\"colorHex\":\"88E5FFFF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"105325\",\"duration\":\"\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"350\",\"slotIndex\":\"-1\",\"stopTime\":\"500\",\"offsetPos\":[\"20\",\"20\",\"0\"],\"offsetRotation\":[\"-254\",\"44\",\"-168\"],\"offsetScale\":[\"1.3\",\"1.3\",\"1.3\"],\"colorHex\":\"88E5FFFF\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"105325\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"450\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"20\",\"-30\",\"0\"],\"offsetRotation\":[\"-249\",\"-56\",\"-196\"],\"offsetScale\":[\"1.15\",\"1.15\",\"1.15\"],\"colorHex\":\"88E5FFFF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"105325\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"480\",\"slotIndex\":\"-1\",\"stopTime\":\"100\",\"offsetPos\":[\"20\",\"20\",\"0\"],\"offsetRotation\":[\"-101\",\"-17\",\"-355\"],\"offsetScale\":[\"1.2\",\"1.2\",\"1.2\"],\"colorHex\":\"88E5FFFF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"105325\",\"duration\":\"\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"500\",\"slotIndex\":\"-1\",\"stopTime\":\"500\",\"offsetPos\":[\"30\",\"0\",\"0\"],\"offsetRotation\":[\"-101\",\"-8\",\"-358\"],\"offsetScale\":[\"1.5\",\"1.5\",\"1.5\"],\"colorHex\":\"88E5FFFF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"1\",\"guid\":\"111100\",\"duration\":\"1100\",\"hitLength\":\"300\",\"frontRockLength\":\"800\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"116455\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"600\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"88E5FFFF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"300\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"50\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"1\",\"guid\":\"111093\",\"duration\":\"1700\",\"hitLength\":\"500\",\"frontRockLength\":\"800\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"300\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"116459\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"600\",\"slotIndex\":\"-1\",\"stopTime\":\"1200\",\"offsetPos\":[\"0\",\"0\",\"-60\"],\"offsetRotation\":[\"0\",\"0\",\"-180\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"88E5FFFF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"}]}", "103068", null, "121409", "27422", 10, "142255", 3, 0, "193336", "111095", "145907", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(2, 2, 2), "纳米机甲女性", "剑"], [10027, "{\"charFightIdelAniId\":\"121951\",\"infos\":[{\"type\":\"1\",\"guid\":\"121959\",\"duration\":\"800\",\"hitLength\":\"380\",\"frontRockLength\":\"400\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"105195\",\"duration\":\"\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"800\",\"offsetPos\":[\"10\",\"0\",\"0\"],\"offsetRotation\":[\"40\",\"0\",\"0\"],\"offsetScale\":[\"0.8\",\"0.8\",\"0.8\"],\"colorHex\":\"BFFF5AFF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"200\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"50\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"30\",\"skillRadius\":\"0\",\"skillHeight\":\"120\",\"skillLength\":\"130\",\"skillWidth\":\"130\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"135750\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"0\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"1\",\"guid\":\"121966\",\"duration\":\"800\",\"hitLength\":\"400\",\"frontRockLength\":\"600\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"105195\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"800\",\"offsetPos\":[\"60\",\"0\",\"0\"],\"offsetRotation\":[\"150\",\"0\",\"0\"],\"offsetScale\":[\"0.8\",\"0.8\",\"0.8\"],\"colorHex\":\"BFFF5AFF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"30\",\"skillRadius\":\"0\",\"skillHeight\":\"120\",\"skillLength\":\"120\",\"skillWidth\":\"130\",\"moveSpeed\":\"300\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"200\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"50\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"135750\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"180\",\"slotIndex\":\"-1\",\"stopTime\":\"0\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"1\",\"guid\":\"121965\",\"duration\":\"900\",\"hitLength\":\"300\",\"frontRockLength\":\"500\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"105195\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"50\",\"slotIndex\":\"-1\",\"stopTime\":\"800\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"50\",\"0\",\"0\"],\"offsetScale\":[\"0.9\",\"0.9\",\"0.9\"],\"colorHex\":\"BFFF5AFF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"105195\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"50\",\"slotIndex\":\"-1\",\"stopTime\":\"500\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"150\",\"0\",\"0\"],\"offsetScale\":[\"1.2\",\"1.2\",\"1.2\"],\"colorHex\":\"A6FF39FF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"30\",\"skillRadius\":\"0\",\"skillHeight\":\"200\",\"skillLength\":\"150\",\"skillWidth\":\"200\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"135750\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"0\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"1\",\"guid\":\"121963\",\"duration\":\"1000\",\"hitLength\":\"450\",\"frontRockLength\":\"600\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"120062\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"350\",\"slotIndex\":\"-1\",\"stopTime\":\"800\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"180\",\"0\",\"0\"],\"offsetScale\":[\"1.3\",\"1.3\",\"1.3\"],\"colorHex\":\"A6FF39FF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"50\",\"skillRadius\":\"0\",\"skillHeight\":\"30\",\"skillLength\":\"150\",\"skillWidth\":\"300\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"135749\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"0\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"1\",\"guid\":\"121962\",\"duration\":\"1400\",\"hitLength\":\"600\",\"frontRockLength\":\"1000\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"200\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"80\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"131516\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"400\",\"slotIndex\":\"-1\",\"stopTime\":\"1200\",\"offsetPos\":[\"100\",\"0\",\"-80\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"0.5\",\"1\",\"1\"],\"colorHex\":\"7DFF37FF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"30\",\"skillRadius\":\"0\",\"skillHeight\":\"350\",\"skillLength\":\"650\",\"skillWidth\":\"50\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"135749\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"250\",\"slotIndex\":\"-1\",\"stopTime\":\"0\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"1\",\"guid\":\"121967\",\"duration\":\"2400\",\"hitLength\":\"1000\",\"frontRockLength\":\"2200\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"400\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"400\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"200\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"120066\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"400\",\"slotIndex\":\"-1\",\"stopTime\":\"600\",\"offsetPos\":[\"0\",\"20\",\"30\"],\"offsetRotation\":[\"90\",\"90\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"A8FF58FF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"120066\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"500\",\"slotIndex\":\"-1\",\"stopTime\":\"600\",\"offsetPos\":[\"0\",\"0\",\"30\"],\"offsetRotation\":[\"90\",\"-30\",\"0\"],\"offsetScale\":[\"1.2\",\"1.2\",\"1.2\"],\"colorHex\":\"A8FF58FF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"120066\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"600\",\"slotIndex\":\"-1\",\"stopTime\":\"600\",\"offsetPos\":[\"0\",\"-20\",\"30\"],\"offsetRotation\":[\"90\",\"-160\",\"0\"],\"offsetScale\":[\"1.3\",\"1.3\",\"1.3\"],\"colorHex\":\"A8FF58FF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"120062\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"800\",\"slotIndex\":\"-1\",\"stopTime\":\"600\",\"offsetPos\":[\"30\",\"0\",\"30\"],\"offsetRotation\":[\"90\",\"60\",\"0\"],\"offsetScale\":[\"1.5\",\"1.5\",\"1.5\"],\"colorHex\":\"A8FF58FF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"120066\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"900\",\"slotIndex\":\"-1\",\"stopTime\":\"600\",\"offsetPos\":[\"150\",\"0\",\"30\"],\"offsetRotation\":[\"90\",\"30\",\"0\"],\"offsetScale\":[\"1.8\",\"1.8\",\"1.8\"],\"colorHex\":\"A8FF58FF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"400\",\"skillLength\":\"350\",\"skillWidth\":\"50\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"135749\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"900\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"}]}", "103083", "103083", "121409", "31122", 10, "142903", 3, 0, "193344", "121951", "136966", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 180), new mw.Vector(1, 1, 1), "死侍", "镰刀"], [10028, "{\"charFightIdelAniId\":\"121951\",\"infos\":[{\"type\":\"1\",\"guid\":\"121959\",\"duration\":\"800\",\"hitLength\":\"380\",\"frontRockLength\":\"400\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"105195\",\"duration\":\"\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"800\",\"offsetPos\":[\"10\",\"0\",\"0\"],\"offsetRotation\":[\"40\",\"0\",\"0\"],\"offsetScale\":[\"0.8\",\"0.8\",\"0.8\"],\"colorHex\":\"BFFF5AFF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"200\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"50\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"30\",\"skillRadius\":\"0\",\"skillHeight\":\"120\",\"skillLength\":\"130\",\"skillWidth\":\"130\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"135750\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"0\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"1\",\"guid\":\"121966\",\"duration\":\"800\",\"hitLength\":\"400\",\"frontRockLength\":\"600\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"105195\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"800\",\"offsetPos\":[\"60\",\"0\",\"0\"],\"offsetRotation\":[\"150\",\"0\",\"0\"],\"offsetScale\":[\"0.8\",\"0.8\",\"0.8\"],\"colorHex\":\"BFFF5AFF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"30\",\"skillRadius\":\"0\",\"skillHeight\":\"120\",\"skillLength\":\"120\",\"skillWidth\":\"130\",\"moveSpeed\":\"300\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"200\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"50\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"135750\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"180\",\"slotIndex\":\"-1\",\"stopTime\":\"0\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"1\",\"guid\":\"121965\",\"duration\":\"900\",\"hitLength\":\"300\",\"frontRockLength\":\"500\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"105195\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"50\",\"slotIndex\":\"-1\",\"stopTime\":\"800\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"50\",\"0\",\"0\"],\"offsetScale\":[\"0.9\",\"0.9\",\"0.9\"],\"colorHex\":\"BFFF5AFF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"105195\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"50\",\"slotIndex\":\"-1\",\"stopTime\":\"500\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"150\",\"0\",\"0\"],\"offsetScale\":[\"1.2\",\"1.2\",\"1.2\"],\"colorHex\":\"A6FF39FF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"30\",\"skillRadius\":\"0\",\"skillHeight\":\"200\",\"skillLength\":\"150\",\"skillWidth\":\"200\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"135750\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"0\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"1\",\"guid\":\"121963\",\"duration\":\"1000\",\"hitLength\":\"450\",\"frontRockLength\":\"600\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"120062\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"350\",\"slotIndex\":\"-1\",\"stopTime\":\"800\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"180\",\"0\",\"0\"],\"offsetScale\":[\"1.3\",\"1.3\",\"1.3\"],\"colorHex\":\"A6FF39FF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"50\",\"skillRadius\":\"0\",\"skillHeight\":\"30\",\"skillLength\":\"150\",\"skillWidth\":\"300\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"135749\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"0\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"1\",\"guid\":\"121962\",\"duration\":\"1400\",\"hitLength\":\"600\",\"frontRockLength\":\"1000\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"200\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"80\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"131516\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"400\",\"slotIndex\":\"-1\",\"stopTime\":\"1200\",\"offsetPos\":[\"100\",\"0\",\"-80\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"0.5\",\"1\",\"1\"],\"colorHex\":\"7DFF37FF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"30\",\"skillRadius\":\"0\",\"skillHeight\":\"350\",\"skillLength\":\"650\",\"skillWidth\":\"50\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"135749\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"250\",\"slotIndex\":\"-1\",\"stopTime\":\"0\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"1\",\"guid\":\"121967\",\"duration\":\"2400\",\"hitLength\":\"1000\",\"frontRockLength\":\"2200\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"400\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"400\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"200\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"120066\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"400\",\"slotIndex\":\"-1\",\"stopTime\":\"600\",\"offsetPos\":[\"0\",\"20\",\"30\"],\"offsetRotation\":[\"90\",\"90\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"A8FF58FF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"120066\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"500\",\"slotIndex\":\"-1\",\"stopTime\":\"600\",\"offsetPos\":[\"0\",\"0\",\"30\"],\"offsetRotation\":[\"90\",\"-30\",\"0\"],\"offsetScale\":[\"1.2\",\"1.2\",\"1.2\"],\"colorHex\":\"A8FF58FF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"120066\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"600\",\"slotIndex\":\"-1\",\"stopTime\":\"600\",\"offsetPos\":[\"0\",\"-20\",\"30\"],\"offsetRotation\":[\"90\",\"-160\",\"0\"],\"offsetScale\":[\"1.3\",\"1.3\",\"1.3\"],\"colorHex\":\"A8FF58FF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"120062\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"800\",\"slotIndex\":\"-1\",\"stopTime\":\"600\",\"offsetPos\":[\"30\",\"0\",\"30\"],\"offsetRotation\":[\"90\",\"60\",\"0\"],\"offsetScale\":[\"1.5\",\"1.5\",\"1.5\"],\"colorHex\":\"A8FF58FF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"120066\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"900\",\"slotIndex\":\"-1\",\"stopTime\":\"600\",\"offsetPos\":[\"150\",\"0\",\"30\"],\"offsetRotation\":[\"90\",\"30\",\"0\"],\"offsetScale\":[\"1.8\",\"1.8\",\"1.8\"],\"colorHex\":\"A8FF58FF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"400\",\"skillLength\":\"350\",\"skillWidth\":\"50\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"135749\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"900\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"}]}", "198698", "198698", "121409", "31122", 10, "142293", 3, 0, "193341", "121951", "145913", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1.5, 1.5, 1.5), "火山哨兵", "  荧光剑"], [10029, "{\"charFightIdelAniId\":\"111092\",\"infos\":[{\"type\":\"1\",\"guid\":\"111094\",\"duration\":\"900\",\"hitLength\":\"550\",\"frontRockLength\":\"600\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"113917\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"450\",\"slotIndex\":\"-1\",\"stopTime\":\"500\",\"offsetPos\":[\"-30\",\"0\",\"0\"],\"offsetRotation\":[\"155\",\"13\",\"27\"],\"offsetScale\":[\"0.8\",\"0.8\",\"0.8\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"150\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"30\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"80\",\"skillLength\":\"100\",\"skillWidth\":\"150\"},{\"type\":\"1\",\"guid\":\"111098\",\"duration\":\"900\",\"hitLength\":\"400\",\"frontRockLength\":\"600\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"113917\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"250\",\"slotIndex\":\"-1\",\"stopTime\":\"500\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"-10\"],\"offsetScale\":[\"0.8\",\"0.8\",\"0.8\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"150\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"30\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"80\",\"skillLength\":\"100\",\"skillWidth\":\"150\"},{\"type\":\"1\",\"guid\":\"111099\",\"duration\":\"1900\",\"hitLength\":\"250\",\"frontRockLength\":\"300\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"113921\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"150\",\"slotIndex\":\"-1\",\"stopTime\":\"800\",\"offsetPos\":[\"0\",\"0\",\"-80\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"-180\",\"skillRadius\":\"0\",\"skillHeight\":\"80\",\"skillLength\":\"350\",\"skillWidth\":\"350\"},{\"type\":\"1\",\"guid\":\"111097\",\"duration\":\"1900\",\"hitLength\":\"700\",\"frontRockLength\":\"800\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"113920\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"600\",\"slotIndex\":\"-1\",\"stopTime\":\"1200\",\"offsetPos\":[\"-30\",\"0\",\"0\"],\"offsetRotation\":[\"35\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"200\",\"skillLength\":\"200\",\"skillWidth\":\"300\"}]}", "29057", null, "121409", "31122", 10, "142262", 3, 0, "193348", "111092", "42816", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "绯红女巫", "狂热剑"], [10030, "{\"charFightIdelAniId\":\"121658\",\"infos\":[{\"type\":\"1\",\"guid\":\"121650\",\"duration\":\"900\",\"hitLength\":\"300\",\"frontRockLength\":\"600\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"200\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"50\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"126922\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"350\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"180\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"50\",\"skillLength\":\"120\",\"skillWidth\":\"220\"},{\"type\":\"1\",\"guid\":\"121652\",\"duration\":\"900\",\"hitLength\":\"300\",\"frontRockLength\":\"600\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"200\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"50\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"126922\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"250\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"-30\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"120\",\"skillLength\":\"120\",\"skillWidth\":\"160\"},{\"type\":\"1\",\"guid\":\"121639\",\"duration\":\"1300\",\"hitLength\":\"600\",\"frontRockLength\":\"800\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"180\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"80\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"300\",\"skillLength\":\"500\",\"skillWidth\":\"120\"},{\"type\":\"2\",\"guid\":\"126922\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"350\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"90\",\"0\",\"0\"],\"offsetScale\":[\"1.2\",\"1.2\",\"1.2\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"135892\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"450\",\"slotIndex\":\"-1\",\"stopTime\":\"600\",\"offsetPos\":[\"120\",\"0\",\"-85\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"135892\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"500\",\"slotIndex\":\"-1\",\"stopTime\":\"600\",\"offsetPos\":[\"240\",\"0\",\"-85\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"135892\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"550\",\"slotIndex\":\"-1\",\"stopTime\":\"600\",\"offsetPos\":[\"360\",\"0\",\"-85\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"135892\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"600\",\"slotIndex\":\"-1\",\"stopTime\":\"600\",\"offsetPos\":[\"480\",\"0\",\"-85\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"1\",\"guid\":\"121644\",\"duration\":\"1300\",\"hitLength\":\"400\",\"frontRockLength\":\"800\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"135891\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"800\",\"offsetPos\":[\"120\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"200\",\"skillLength\":\"300\",\"skillWidth\":\"200\"},{\"type\":\"1\",\"guid\":\"121642\",\"duration\":\"1200\",\"hitLength\":\"400\",\"frontRockLength\":\"900\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"200\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"135893\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"800\",\"offsetPos\":[\"60\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"-180\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"100\",\"skillLength\":\"200\",\"skillWidth\":\"300\"}]}", "272130", "272130", "121409", "135892", 10, "142894", 3, 0, "193351", "125369", "42818", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "雷神", 0], [10031, "{\"charFightIdelAniId\":\"121648\",\"infos\":[{\"type\":\"1\",\"guid\":\"121647\",\"duration\":\"800\",\"hitLength\":\"300\",\"frontRockLength\":\"500\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"124432\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"230\",\"slotIndex\":\"-1\",\"stopTime\":\"500\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"-10\",\"-120\"],\"offsetScale\":[\"0.8\",\"0.8\",\"0.8\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"10\",\"skillLength\":\"110\",\"skillWidth\":\"160\"},{\"type\":\"1\",\"guid\":\"121645\",\"duration\":\"800\",\"hitLength\":\"300\",\"frontRockLength\":\"500\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"50\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"80\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"124432\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"150\",\"slotIndex\":\"-1\",\"stopTime\":\"500\",\"offsetPos\":[\"-5\",\"0\",\"0\"],\"offsetRotation\":[\"203\",\"25\",\"-224\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"150\",\"skillLength\":\"120\",\"skillWidth\":\"100\"},{\"type\":\"1\",\"guid\":\"121643\",\"duration\":\"850\",\"hitLength\":\"300\",\"frontRockLength\":\"500\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"50\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"30\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"124432\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"500\",\"offsetPos\":[\"-30\",\"0\",\"0\"],\"offsetRotation\":[\"-20\",\"-50\",\"-60\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"150\",\"skillLength\":\"100\",\"skillWidth\":\"100\"},{\"type\":\"1\",\"guid\":\"121641\",\"duration\":\"600\",\"hitLength\":\"300\",\"frontRockLength\":\"500\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"124433\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"1200\",\"offsetPos\":[\"-30\",\"0\",\"-20\"],\"offsetRotation\":[\"240\",\"-45\",\"-278\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"150\",\"skillLength\":\"120\",\"skillWidth\":\"140\"},{\"type\":\"1\",\"guid\":\"121651\",\"duration\":\"2300\",\"hitLength\":\"1000\",\"frontRockLength\":\"1800\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"300\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"200\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"124434\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"900\",\"slotIndex\":\"-1\",\"stopTime\":\"2000\",\"offsetPos\":[\"50\",\"0\",\"-80\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"0.8\",\"0.8\",\"0.8\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"124431\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"1500\",\"slotIndex\":\"-1\",\"stopTime\":\"1500\",\"offsetPos\":[\"70\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"100\",\"skillLength\":\"600\",\"skillWidth\":\"150\"}]}", "300436", null, "121409", "27421", 10, "142907", 3, 0, "193350", "125369", "42804", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "蜘蛛侠", "木法杖"], [10032, "{\"charFightIdelAniId\":\"\",\"infos\":[{\"type\":\"1\",\"guid\":\"121592\",\"duration\":\"750\",\"hitLength\":\"450\",\"frontRockLength\":\"500\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"126922\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"400\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"50\",\"0\",\"0\"],\"offsetRotation\":[\"160\",\"0\",\"0\"],\"offsetScale\":[\"1.2\",\"1.2\",\"1.2\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"200\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"50\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"120\",\"skillLength\":\"200\",\"skillWidth\":\"200\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"12374\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"0\",\"slotIndex\":\"-1\",\"stopTime\":\"0\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"0\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"100\"},{\"type\":\"1\",\"guid\":\"121599\",\"duration\":\"800\",\"hitLength\":\"250\",\"frontRockLength\":\"300\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"600\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"126922\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"180\",\"0\",\"0\"],\"offsetScale\":[\"1.5\",\"1.5\",\"1.5\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"80\",\"skillLength\":\"200\",\"skillWidth\":\"300\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"12374\",\"duration\":\"\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"0\",\"slotIndex\":\"-1\",\"stopTime\":\"0\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"0\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"100\"},{\"type\":\"1\",\"guid\":\"121597\",\"duration\":\"1400\",\"hitLength\":\"600\",\"frontRockLength\":\"650\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"600\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"80\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"500\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"50\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"126925\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"600\",\"slotIndex\":\"-1\",\"stopTime\":\"1200\",\"offsetPos\":[\"80\",\"0\",\"-125\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"1.5\",\"1.5\",\"1.5\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"50\",\"skillRadius\":\"0\",\"skillHeight\":\"250\",\"skillLength\":\"600\",\"skillWidth\":\"50\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"130793\",\"duration\":\"\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"650\",\"slotIndex\":\"-1\",\"stopTime\":\"0\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"0\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"100\"},{\"type\":\"1\",\"guid\":\"121596\",\"duration\":\"1600\",\"hitLength\":\"800\",\"frontRockLength\":\"1000\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"400\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"500\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"126924\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"800\",\"slotIndex\":\"-1\",\"stopTime\":\"1600\",\"offsetPos\":[\"10\",\"0\",\"-125\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"-200\",\"skillRadius\":\"0\",\"skillHeight\":\"120\",\"skillLength\":\"400\",\"skillWidth\":\"400\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"122569\",\"duration\":\"\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"720\",\"slotIndex\":\"-1\",\"stopTime\":\"0\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"0\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"100\"}]}", "121541", null, "121409", "89089", 10, "142294", 3, 0, "193332", "121610", "42805", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "女浩克", "瓜子盾"], [10033, "{\"charFightIdelAniId\":\"121610\",\"infos\":[{\"type\":\"1\",\"guid\":\"121592\",\"duration\":\"750\",\"hitLength\":\"450\",\"frontRockLength\":\"500\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"126922\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"400\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"50\",\"0\",\"0\"],\"offsetRotation\":[\"160\",\"0\",\"0\"],\"offsetScale\":[\"1.2\",\"1.2\",\"1.2\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"200\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"50\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"120\",\"skillLength\":\"200\",\"skillWidth\":\"200\"},{\"type\":\"1\",\"guid\":\"121600\",\"duration\":\"800\",\"hitLength\":\"150\",\"frontRockLength\":\"250\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"80\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"126922\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"30\",\"0\",\"0\"],\"offsetScale\":[\"1.35\",\"1.35\",\"1.35\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"200\",\"skillLength\":\"250\",\"skillWidth\":\"200\"},{\"type\":\"1\",\"guid\":\"121599\",\"duration\":\"800\",\"hitLength\":\"250\",\"frontRockLength\":\"300\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"600\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"126922\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"180\",\"0\",\"0\"],\"offsetScale\":[\"1.5\",\"1.5\",\"1.5\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"80\",\"skillLength\":\"200\",\"skillWidth\":\"300\"},{\"type\":\"1\",\"guid\":\"121597\",\"duration\":\"1400\",\"hitLength\":\"600\",\"frontRockLength\":\"650\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"600\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"80\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"500\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"50\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"126925\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"600\",\"slotIndex\":\"-1\",\"stopTime\":\"1200\",\"offsetPos\":[\"80\",\"0\",\"-125\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"1.5\",\"1.5\",\"1.5\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"50\",\"skillRadius\":\"0\",\"skillHeight\":\"250\",\"skillLength\":\"600\",\"skillWidth\":\"50\"},{\"type\":\"1\",\"guid\":\"121596\",\"duration\":\"1600\",\"hitLength\":\"800\",\"frontRockLength\":\"1000\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"400\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"500\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"126924\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"800\",\"slotIndex\":\"-1\",\"stopTime\":\"1600\",\"offsetPos\":[\"10\",\"0\",\"-125\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"-200\",\"skillRadius\":\"0\",\"skillHeight\":\"120\",\"skillLength\":\"400\",\"skillWidth\":\"400\"},{\"type\":\"1\",\"guid\":\"121609\",\"duration\":\"2700\",\"hitLength\":\"800\",\"frontRockLength\":\"1500\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"126923\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"700\",\"slotIndex\":\"-1\",\"stopTime\":\"1600\",\"offsetPos\":[\"180\",\"0\",\"-123\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"1.5\",\"1.5\",\"1.5\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"113900\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"150\",\"slotIndex\":\"-1\",\"stopTime\":\"500\",\"offsetPos\":[\"40\",\"0\",\"-50\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"2.5\",\"2.5\",\"2.5\"],\"colorHex\":\"FF5198FF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"50\",\"skillRadius\":\"0\",\"skillHeight\":\"350\",\"skillLength\":\"600\",\"skillWidth\":\"200\"}]}", "122950", null, "121409", "89089", 10, "142897", 3, 0, "193342", "121610", "42805", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "绿巨人", "盾"], [10034, "{\"charFightIdelAniId\":\"108371\",\"infos\":[{\"type\":\"1\",\"guid\":\"108373\",\"duration\":\"650\",\"hitLength\":\"300\",\"frontRockLength\":\"400\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"70\",\"skillLength\":\"100\",\"skillWidth\":\"100\"},{\"type\":\"2\",\"guid\":\"121784\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"20\",\"0\",\"0\"],\"offsetRotation\":[\"-200\",\"0\",\"-180\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"100\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"30\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"20\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"1\",\"guid\":\"108375\",\"duration\":\"700\",\"hitLength\":\"300\",\"frontRockLength\":\"500\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"70\",\"skillLength\":\"100\",\"skillWidth\":\"100\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"100\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"30\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"20\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"121784\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"250\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"30\",\"0\",\"0\"],\"offsetRotation\":[\"40\",\"0\",\"-180\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"1\",\"guid\":\"108374\",\"duration\":\"700\",\"hitLength\":\"300\",\"frontRockLength\":\"500\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"80\",\"skillLength\":\"140\",\"skillWidth\":\"80\"},{\"type\":\"2\",\"guid\":\"121783\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"50\",\"slotIndex\":\"-1\",\"stopTime\":\"600\",\"offsetPos\":[\"30\",\"0\",\"10\"],\"offsetRotation\":[\"0\",\"0\",\"90\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"1\",\"guid\":\"108370\",\"duration\":\"1700\",\"hitLength\":\"300\",\"frontRockLength\":\"600\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"200\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"150\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"150\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"80\",\"skillLength\":\"230\",\"skillWidth\":\"300\"},{\"type\":\"2\",\"guid\":\"121782\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"1200\",\"offsetPos\":[\"80\",\"0\",\"-85\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"1\",\"guid\":\"108372\",\"duration\":\"1380\",\"hitLength\":\"300\",\"frontRockLength\":\"500\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"100\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"50\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"60\",\"skillRadius\":\"0\",\"skillHeight\":\"350\",\"skillLength\":\"160\",\"skillWidth\":\"160\"},{\"type\":\"2\",\"guid\":\"121785\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"400\",\"slotIndex\":\"-1\",\"stopTime\":\"2500\",\"offsetPos\":[\"140\",\"0\",\"-85\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1.5\",\"1.5\",\"1.5\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"}]}", "31734", null, "121409", "27421", 10, "142272", 3, 0, "193347", "108371", "42818", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "机甲少女", "终极冰环剑"], [10035, "{\"charFightIdelAniId\":\"117340\",\"infos\":[{\"type\":\"1\",\"guid\":\"117337\",\"duration\":\"550\",\"hitLength\":\"200\",\"frontRockLength\":\"300\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"132628\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"800\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"30\",\"skillRadius\":\"0\",\"skillHeight\":\"50\",\"skillLength\":\"120\",\"skillWidth\":\"200\"},{\"type\":\"1\",\"guid\":\"117338\",\"duration\":\"700\",\"hitLength\":\"200\",\"frontRockLength\":\"300\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"100\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"50\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"132630\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"150\",\"slotIndex\":\"-1\",\"stopTime\":\"1200\",\"offsetPos\":[\"50\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"90\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"30\",\"skillRadius\":\"0\",\"skillHeight\":\"60\",\"skillLength\":\"180\",\"skillWidth\":\"60\"},{\"type\":\"1\",\"guid\":\"117335\",\"duration\":\"1200\",\"hitLength\":\"700\",\"frontRockLength\":\"800\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"200\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"250\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"132629\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"600\",\"slotIndex\":\"-1\",\"stopTime\":\"1200\",\"offsetPos\":[\"-60\",\"0\",\"-80\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"132627\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"650\",\"slotIndex\":\"-1\",\"stopTime\":\"1200\",\"offsetPos\":[\"120\",\"0\",\"-76\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"40\",\"skillRadius\":\"0\",\"skillHeight\":\"120\",\"skillLength\":\"200\",\"skillWidth\":\"200\"},{\"type\":\"1\",\"guid\":\"117336\",\"duration\":\"1200\",\"hitLength\":\"500\",\"frontRockLength\":\"800\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"200\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"350\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"200\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"132632\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"400\",\"slotIndex\":\"-1\",\"stopTime\":\"800\",\"offsetPos\":[\"120\",\"0\",\"-80\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"-100\",\"skillRadius\":\"0\",\"skillHeight\":\"200\",\"skillLength\":\"300\",\"skillWidth\":\"300\"},{\"type\":\"1\",\"guid\":\"117339\",\"duration\":\"1400\",\"hitLength\":\"1050\",\"frontRockLength\":\"1200\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"132860\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"800\",\"offsetPos\":[\"30\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"132631\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"1000\",\"slotIndex\":\"-1\",\"stopTime\":\"1200\",\"offsetPos\":[\"120\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"200\",\"skillLength\":\"400\",\"skillWidth\":\"200\"},{\"type\":\"1\",\"guid\":\"117341\",\"duration\":\"1300\",\"hitLength\":\"600\",\"frontRockLength\":\"1000\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"100\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"200\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"132875\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"450\",\"slotIndex\":\"-1\",\"stopTime\":\"1500\",\"offsetPos\":[\"0\",\"0\",\"-80\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"-200\",\"skillRadius\":\"0\",\"skillHeight\":\"300\",\"skillLength\":\"400\",\"skillWidth\":\"400\"}]}", "155702", "155702", "121409", "135892", 10, "142913", 3, 0, "193339", "117340", "42816", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "雏田", "散弹喷枪"], [10036, "{\"charFightIdelAniId\":\"122541\",\"infos\":[{\"type\":\"1\",\"guid\":\"122534\",\"duration\":\"700\",\"hitLength\":\"300\",\"frontRockLength\":\"400\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"150\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"250\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\\r\\n1\",\"moveDistance\":\"50\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"129279\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"350\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"-50\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"80\",\"skillLength\":\"200\",\"skillWidth\":\"80\"},{\"type\":\"1\",\"guid\":\"122535\",\"duration\":\"700\",\"hitLength\":\"300\",\"frontRockLength\":\"400\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"100\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\\r\\n0\",\"moveDir\":\"1\",\"moveDistance\":\"30\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"129283\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"250\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"30\",\"0\",\"-110\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"150\",\"skillLength\":\"120\",\"skillWidth\":\"80\"},{\"type\":\"1\",\"guid\":\"122536\",\"duration\":\"800\",\"hitLength\":\"400\",\"frontRockLength\":\"600\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"129279\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"500\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"0\",\"0\",\"10\"],\"offsetRotation\":[\"-30\",\"-40\",\"-80\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"100\",\"skillLength\":\"250\",\"skillWidth\":\"80\"},{\"type\":\"1\",\"guid\":\"122522\",\"duration\":\"900\",\"hitLength\":\"300\",\"frontRockLength\":\"500\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"100\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"50\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"129282\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"800\",\"offsetPos\":[\"-10\",\"0\",\"-89\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"120\",\"skillLength\":\"500\",\"skillWidth\":\"100\"},{\"type\":\"1\",\"guid\":\"122523\",\"duration\":\"1600\",\"hitLength\":\"800\",\"frontRockLength\":\"1000\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"400\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"250\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"200\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"129280\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"600\",\"slotIndex\":\"-1\",\"stopTime\":\"1200\",\"offsetPos\":[\"30\",\"0\",\"-80\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"-160\",\"skillRadius\":\"0\",\"skillHeight\":\"50\",\"skillLength\":\"350\",\"skillWidth\":\"350\"},{\"type\":\"1\",\"guid\":\"122548\",\"duration\":\"3000\",\"hitLength\":\"800\",\"frontRockLength\":\"2000\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"129278\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"600\",\"slotIndex\":\"-1\",\"stopTime\":\"1200\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"129281\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"2000\",\"slotIndex\":\"-1\",\"stopTime\":\"1500\",\"offsetPos\":[\"-30\",\"0\",\"-80\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"1.2\",\"1.2\",\"1.2\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"150\",\"skillLength\":\"700\",\"skillWidth\":\"150\"}]}", "122726", "122726", "121409", "135892", 10, "142922", 3, 0, "193353", "122541", "42804", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "路飞", "火枪"], [10037, "{\"charFightIdelAniId\":\"125369\",\"infos\":[{\"type\":\"1\",\"guid\":\"117326\",\"duration\":\"500\",\"hitLength\":\"200\",\"frontRockLength\":\"250\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"121783\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"150\",\"slotIndex\":\"-1\",\"stopTime\":\"300\",\"offsetPos\":[\"60\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"90\"],\"offsetScale\":[\"0.5\",\"0.5\",\"0.5\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"100\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"150\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"30\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"30\",\"skillRadius\":\"0\",\"skillHeight\":\"80\",\"skillLength\":\"80\",\"skillWidth\":\"80\"},{\"type\":\"1\",\"guid\":\"117328\",\"duration\":\"600\",\"hitLength\":\"300\",\"frontRockLength\":\"400\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"130639\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"300\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"30\",\"40\",\"-48\"],\"offsetScale\":[\"0.6\",\"0.6\",\"0.6\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"30\",\"skillRadius\":\"0\",\"skillHeight\":\"200\",\"skillLength\":\"100\",\"skillWidth\":\"80\"},{\"type\":\"1\",\"guid\":\"117327\",\"duration\":\"550\",\"hitLength\":\"200\",\"frontRockLength\":\"300\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"121785\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"150\",\"slotIndex\":\"-1\",\"stopTime\":\"800\",\"offsetPos\":[\"-30\",\"0\",\"-80\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"-1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"120\",\"skillLength\":\"200\",\"skillWidth\":\"450\"},{\"type\":\"1\",\"guid\":\"117316\",\"duration\":\"800\",\"hitLength\":\"200\",\"frontRockLength\":\"300\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"100\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"130643\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"800\",\"offsetPos\":[\"120\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"100\",\"skillRadius\":\"0\",\"skillHeight\":\"300\",\"skillLength\":\"120\",\"skillWidth\":\"120\"},{\"type\":\"1\",\"guid\":\"117315\",\"duration\":\"800\",\"hitLength\":\"500\",\"frontRockLength\":\"600\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"200\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"200\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"130643\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"350\",\"slotIndex\":\"-1\",\"stopTime\":\"800\",\"offsetPos\":[\"-50\",\"0\",\"0\"],\"offsetRotation\":[\"-140\",\"0\",\"-270\"],\"offsetScale\":[\"1\",\"1.5\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"130642\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"500\",\"slotIndex\":\"-1\",\"stopTime\":\"1200\",\"offsetPos\":[\"120\",\"0\",\"-80\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"130642\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"600\",\"slotIndex\":\"-1\",\"stopTime\":\"1200\",\"offsetPos\":[\"250\",\"50\",\"-80\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"130642\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"700\",\"slotIndex\":\"-1\",\"stopTime\":\"1200\",\"offsetPos\":[\"380\",\"0\",\"-80\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"130642\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"800\",\"slotIndex\":\"-1\",\"stopTime\":\"1200\",\"offsetPos\":[\"500\",\"50\",\"-80s\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"50\",\"skillRadius\":\"0\",\"skillHeight\":\"400\",\"skillLength\":\"500\",\"skillWidth\":\"150\"},{\"type\":\"1\",\"guid\":\"117324\",\"duration\":\"1600\",\"hitLength\":\"1100\",\"frontRockLength\":\"1200\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"300\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"1000\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"500\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"114161\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"150\",\"slotIndex\":\"-1\",\"stopTime\":\"700\",\"offsetPos\":[\"0\",\"0\",\"-75\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1.5\",\"1.5\",\"1.5\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"130743\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"800\",\"offsetPos\":[\"0\",\"0\",\"-80\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"130640\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"1050\",\"slotIndex\":\"-1\",\"stopTime\":\"1500\",\"offsetPos\":[\"600\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"1.2\",\"1.2\",\"1.2\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"-200\",\"skillRadius\":\"0\",\"skillHeight\":\"150\",\"skillLength\":\"550\",\"skillWidth\":\"150\"}]}", "297029", null, "121409", "135892", 10, "143236", 3, 0, "193335", "125369", "42818", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "佐助", "紫光剑"], [10038, "{\"charFightIdelAniId\":\"117391\",\"infos\":[{\"type\":\"1\",\"guid\":\"117402\",\"duration\":\"500\",\"hitLength\":\"100\",\"frontRockLength\":\"300\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"108555\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"500\",\"offsetPos\":[\"80\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1.5\",\"1.5\",\"1.5\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"60\",\"skillLength\":\"100\",\"skillWidth\":\"60\"},{\"type\":\"1\",\"guid\":\"117400\",\"duration\":\"500\",\"hitLength\":\"250\",\"frontRockLength\":\"300\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"108558\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"0\",\"slotIndex\":\"-1\",\"stopTime\":\"600\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"-130\",\"0\",\"0\"],\"offsetScale\":[\"1.5\",\"1.5\",\"1.5\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"80\",\"skillLength\":\"80\",\"skillWidth\":\"80\"},{\"type\":\"1\",\"guid\":\"108416\",\"duration\":\"1800\",\"hitLength\":\"500\",\"frontRockLength\":\"800\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"108556\",\"duration\":\"\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"500\",\"slotIndex\":\"-1\",\"stopTime\":\"600\",\"offsetPos\":[\"80\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"1.5\",\"1.5\",\"1.5\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"50\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"450\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"50\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"60\",\"skillLength\":\"130\",\"skillWidth\":\"60\"},{\"type\":\"1\",\"guid\":\"108417\",\"duration\":\"1100\",\"hitLength\":\"550\",\"frontRockLength\":\"800\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"85166\",\"duration\":\"\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"600\",\"offsetPos\":[\"100\",\"0\",\"-50\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"A8FF8AFF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"85166\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"450\",\"slotIndex\":\"-1\",\"stopTime\":\"600\",\"offsetPos\":[\"80\",\"0\",\"60\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"A8FF8AFF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"30\",\"skillRadius\":\"0\",\"skillHeight\":\"120\",\"skillLength\":\"140\",\"skillWidth\":\"120\"},{\"type\":\"1\",\"guid\":\"108418\",\"duration\":\"2300\",\"hitLength\":\"700\",\"frontRockLength\":\"1000\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"108557\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"500\",\"slotIndex\":\"-1\",\"stopTime\":\"1200\",\"offsetPos\":[\"30\",\"0\",\"-80\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"108557\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"550\",\"slotIndex\":\"-1\",\"stopTime\":\"1200\",\"offsetPos\":[\"30\",\"0\",\"-80\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"108557\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"600\",\"slotIndex\":\"-1\",\"stopTime\":\"1200\",\"offsetPos\":[\"30\",\"0\",\"-80\"],\"offsetRotation\":[\"0\",\"0\",\"90\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"108557\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"650\",\"slotIndex\":\"-1\",\"stopTime\":\"1200\",\"offsetPos\":[\"30\",\"0\",\"-80\"],\"offsetRotation\":[\"0\",\"0\",\"180\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"123626\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"500\",\"slotIndex\":\"-1\",\"stopTime\":\"1500\",\"offsetPos\":[\"0\",\"0\",\"-70\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"450\",\"skillLength\":\"500\",\"skillWidth\":\"120\"}]}", "222534", "222534", "121409", "27421", 10, "142310", 3, 0, "193354", "117391", "42804", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "天神", "激光枪"], [10039, "{\"charFightIdelAniId\":\"121608\",\"infos\":[{\"type\":\"1\",\"guid\":\"121594\",\"duration\":\"500\",\"hitLength\":\"180\",\"frontRockLength\":\"200\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"125705\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"500\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"30\",\"skillLength\":\"135\",\"skillWidth\":\"250\"},{\"type\":\"1\",\"guid\":\"121595\",\"duration\":\"700\",\"hitLength\":\"300\",\"frontRockLength\":\"400\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"125705\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"500\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"150\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"150\",\"skillLength\":\"150\",\"skillWidth\":\"200\"},{\"type\":\"1\",\"guid\":\"121591\",\"duration\":\"800\",\"hitLength\":\"300\",\"frontRockLength\":\"500\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"125706\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"800\",\"offsetPos\":[\"0\",\"0\",\"-80\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"-200\",\"skillRadius\":\"0\",\"skillHeight\":\"80\",\"skillLength\":\"400\",\"skillWidth\":\"400\"},{\"type\":\"1\",\"guid\":\"121593\",\"duration\":\"1700\",\"hitLength\":\"300\",\"frontRockLength\":\"500\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"200\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"1\",\"moveDistance\":\"150\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"125705\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"1200\",\"offsetPos\":[\"30\",\"0\",\"30\"],\"offsetRotation\":[\"90\",\"0\",\"0\"],\"offsetScale\":[\"1.5\",\"1.5\",\"1.5\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"350\",\"skillLength\":\"240\",\"skillWidth\":\"100\"},{\"type\":\"1\",\"guid\":\"121598\",\"duration\":\"2000\",\"hitLength\":\"300\",\"frontRockLength\":\"500\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"100\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"120\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"125704\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"1200\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"150\",\"skillLength\":\"360\",\"skillWidth\":\"120\"},{\"type\":\"1\",\"guid\":\"121606\",\"duration\":\"2000\",\"hitLength\":\"1000\",\"frontRockLength\":\"1500\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"200\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"400\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"300\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"125707\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"900\",\"slotIndex\":\"-1\",\"stopTime\":\"1000\",\"offsetPos\":[\"0\",\"0\",\"-80\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"1.2\",\"1.2\",\"1.2\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"600\",\"skillLength\":\"200\",\"skillWidth\":\"300\"}]}", "269895", "269895", "121409", "151551", 10, "142892", 3, 0, "193352", "121608", "42804", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "金刚狼", "剑(金刚狼专用)"], [10040, "{\n    \"charFightIdelAniId\": \"\",\n    \"infos\": [\n        {\n            \"type\": \"1\",\n            \"guid\": \"121413\",\n            \"duration\": \"2000\",\n            \"hitLength\": \"500\",\n            \"frontRockLength\": \"500\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"600\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"0\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"224109\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"300\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"400\",\n            \"offsetPos\": [\n                \"50\",\n                \"0\",\n                \"30\"\n            ],\n            \"offsetRotation\": [\n                \"180\",\n                \"0\",\n                \"90\"\n            ],\n            \"offsetScale\": [\n                \"1.5\",\n                \"1.5\",\n                \"1.5\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"100\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"80\",\n            \"skillLength\": \"700\",\n            \"skillWidth\": \"100\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"4\",\n            \"guid\": \"75351\",\n            \"duration\": \"\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"150\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"0\",\n            \"moveDir\": \"1\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0|0|0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"100\"\n        },\n        {\n            \"type\": \"1\",\n            \"guid\": \"121654\",\n            \"duration\": \"750\",\n            \"hitLength\": \"500\",\n            \"frontRockLength\": \"600\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"100\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"224109\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"450\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"400\",\n            \"offsetPos\": [\n                \"90\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"180\",\n                \"0\",\n                \"90\"\n            ],\n            \"offsetScale\": [\n                \"1.2\",\n                \"1.2\",\n                \"1.2\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"4\",\n            \"guid\": \"75351\",\n            \"duration\": \"\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"300\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"0\",\n            \"moveDir\": \"1\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0|0|0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"100\"\n        },\n        {\n            \"type\": \"3\",\n            \"guid\": \"\",\n            \"duration\": \"200\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"300\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"0\",\n            \"moveDir\": \"1\",\n            \"moveDistance\": \"50\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"100\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"120\",\n            \"skillLength\": \"700\",\n            \"skillWidth\": \"100\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"1\",\n            \"guid\": \"121416\",\n            \"duration\": \"800\",\n            \"hitLength\": \"400\",\n            \"frontRockLength\": \"500\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"100\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"0\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"3\",\n            \"guid\": \"\",\n            \"duration\": \"80\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"200\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"0\",\n            \"moveDir\": \"1\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"224109\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"450\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"400\",\n            \"offsetPos\": [\n                \"60\",\n                \"0\",\n                \"70\"\n            ],\n            \"offsetRotation\": [\n                \"180\",\n                \"0\",\n                \"90\"\n            ],\n            \"offsetScale\": [\n                \"1.35\",\n                \"1.35\",\n                \"1.35\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"4\",\n            \"guid\": \"75351\",\n            \"duration\": \"\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"300\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"0\",\n            \"moveDir\": \"1\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0|0|0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"100\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"200\",\n            \"skillLength\": \"700\",\n            \"skillWidth\": \"100\",\n            \"moveSpeed\": \"300\"\n        }\n    ]\n}", "122720", "122720", "121409", "135892", 10, "142888", 3, 0, "193355", "117391", "42804", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "钢铁侠", "激光枪"], [10041, "{\"charFightIdelAniId\":\"\",\"infos\":[{\"type\":\"1\",\"guid\":\"121650\",\"duration\":\"900\",\"hitLength\":\"300\",\"frontRockLength\":\"600\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"12374\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"0\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"200\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"50\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"85152\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"350\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"180\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"50\",\"skillLength\":\"120\",\"skillWidth\":\"220\",\"moveSpeed\":\"300\"},{\"type\":\"1\",\"guid\":\"121652\",\"duration\":\"900\",\"hitLength\":\"300\",\"frontRockLength\":\"600\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"12374\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"0\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"200\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"50\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"85152\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"250\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"-30\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"120\",\"skillLength\":\"120\",\"skillWidth\":\"160\",\"moveSpeed\":\"300\"},{\"type\":\"1\",\"guid\":\"121639\",\"duration\":\"1300\",\"hitLength\":\"600\",\"frontRockLength\":\"800\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"12374\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"0\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"180\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"80\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"85152\",\"duration\":\"\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"350\",\"slotIndex\":\"-1\",\"stopTime\":\"600\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"90\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"300\",\"skillLength\":\"120\",\"skillWidth\":\"120\",\"moveSpeed\":\"300\"}]}", "81F9867944A6560D453B23AAF7852255", null, "121409", "27421", 10, "142932", 2, 6666, "193337", "117391", "42830", new mw.Vector(0, 0, -20), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "金箍棒(粉)"], [10042, "{\"charFightIdelAniId\":\"\",\"infos\":[{\"type\":\"1\",\"guid\":\"121650\",\"duration\":\"900\",\"hitLength\":\"300\",\"frontRockLength\":\"600\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"12374\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"0\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"200\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"50\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"85152\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"350\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"180\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"50\",\"skillLength\":\"120\",\"skillWidth\":\"220\",\"moveSpeed\":\"300\"},{\"type\":\"1\",\"guid\":\"121652\",\"duration\":\"900\",\"hitLength\":\"300\",\"frontRockLength\":\"600\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"12374\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"0\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"200\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"50\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"85152\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"250\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"-30\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"120\",\"skillLength\":\"120\",\"skillWidth\":\"160\",\"moveSpeed\":\"300\"},{\"type\":\"1\",\"guid\":\"121639\",\"duration\":\"1300\",\"hitLength\":\"600\",\"frontRockLength\":\"800\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"4\",\"guid\":\"12374\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"0\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0|0|0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"180\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"80\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"2\",\"guid\":\"85152\",\"duration\":\"\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"350\",\"slotIndex\":\"-1\",\"stopTime\":\"600\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"90\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\",\"moveSpeed\":\"300\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"300\",\"skillLength\":\"120\",\"skillWidth\":\"120\",\"moveSpeed\":\"300\"}]}", "B8A5C22D492E7B11AACB6F82011686C8", null, "121409", "27421", 10, "142932", 2, 6666, "193337", "117391", "42830", new mw.Vector(0, 0, -20), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "金箍棒(紫)"], [10043, "{\"charFightIdelAniId\":\"121658\",\"infos\":[{\"type\":\"1\",\"guid\":\"121650\",\"duration\":\"900\",\"hitLength\":\"300\",\"frontRockLength\":\"600\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"200\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"50\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"126922\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"350\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"180\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"50\",\"skillLength\":\"120\",\"skillWidth\":\"220\"},{\"type\":\"1\",\"guid\":\"121652\",\"duration\":\"900\",\"hitLength\":\"300\",\"frontRockLength\":\"600\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"200\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"50\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"126922\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"250\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"-30\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"120\",\"skillLength\":\"120\",\"skillWidth\":\"160\"},{\"type\":\"1\",\"guid\":\"121639\",\"duration\":\"1300\",\"hitLength\":\"600\",\"frontRockLength\":\"800\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"180\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"80\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"300\",\"skillLength\":\"500\",\"skillWidth\":\"120\"},{\"type\":\"2\",\"guid\":\"126922\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"350\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"90\",\"0\",\"0\"],\"offsetScale\":[\"1.2\",\"1.2\",\"1.2\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"135892\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"450\",\"slotIndex\":\"-1\",\"stopTime\":\"600\",\"offsetPos\":[\"120\",\"0\",\"-85\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"135892\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"500\",\"slotIndex\":\"-1\",\"stopTime\":\"600\",\"offsetPos\":[\"240\",\"0\",\"-85\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"135892\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"550\",\"slotIndex\":\"-1\",\"stopTime\":\"600\",\"offsetPos\":[\"360\",\"0\",\"-85\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"135892\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"600\",\"slotIndex\":\"-1\",\"stopTime\":\"600\",\"offsetPos\":[\"480\",\"0\",\"-85\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"1\",\"guid\":\"121644\",\"duration\":\"1300\",\"hitLength\":\"400\",\"frontRockLength\":\"800\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"135891\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"800\",\"offsetPos\":[\"120\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"200\",\"skillLength\":\"300\",\"skillWidth\":\"200\"},{\"type\":\"1\",\"guid\":\"121642\",\"duration\":\"1200\",\"hitLength\":\"400\",\"frontRockLength\":\"900\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"200\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"135893\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"800\",\"offsetPos\":[\"60\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"-180\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"100\",\"skillLength\":\"200\",\"skillWidth\":\"300\"}]}", "C66D1D35417FB7A43F09159F77CAB8F8", null, "121409", "135892", 10, "142894", 3, 0, "193351", "125369", "42818", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "昊天锤"], [10044, "{\"charFightIdelAniId\":\"117391\",\"infos\":[{\"type\":\"1\",\"guid\":\"117402\",\"duration\":\"500\",\"hitLength\":\"100\",\"frontRockLength\":\"300\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"108555\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"500\",\"offsetPos\":[\"80\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1.5\",\"1.5\",\"1.5\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"60\",\"skillLength\":\"100\",\"skillWidth\":\"60\"},{\"type\":\"1\",\"guid\":\"117400\",\"duration\":\"500\",\"hitLength\":\"250\",\"frontRockLength\":\"300\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"108558\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"0\",\"slotIndex\":\"-1\",\"stopTime\":\"600\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"-130\",\"0\",\"0\"],\"offsetScale\":[\"1.5\",\"1.5\",\"1.5\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"80\",\"skillLength\":\"80\",\"skillWidth\":\"80\"},{\"type\":\"1\",\"guid\":\"108416\",\"duration\":\"1800\",\"hitLength\":\"500\",\"frontRockLength\":\"800\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"108556\",\"duration\":\"\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"500\",\"slotIndex\":\"-1\",\"stopTime\":\"600\",\"offsetPos\":[\"80\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"1.5\",\"1.5\",\"1.5\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"50\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"450\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"50\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"60\",\"skillLength\":\"130\",\"skillWidth\":\"60\"},{\"type\":\"1\",\"guid\":\"108417\",\"duration\":\"1100\",\"hitLength\":\"550\",\"frontRockLength\":\"800\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"85166\",\"duration\":\"\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"600\",\"offsetPos\":[\"100\",\"0\",\"-50\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"A8FF8AFF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"85166\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"450\",\"slotIndex\":\"-1\",\"stopTime\":\"600\",\"offsetPos\":[\"80\",\"0\",\"60\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"A8FF8AFF\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"30\",\"skillRadius\":\"0\",\"skillHeight\":\"120\",\"skillLength\":\"140\",\"skillWidth\":\"120\"},{\"type\":\"1\",\"guid\":\"108418\",\"duration\":\"2300\",\"hitLength\":\"700\",\"frontRockLength\":\"1000\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"108557\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"500\",\"slotIndex\":\"-1\",\"stopTime\":\"1200\",\"offsetPos\":[\"30\",\"0\",\"-80\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"108557\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"550\",\"slotIndex\":\"-1\",\"stopTime\":\"1200\",\"offsetPos\":[\"30\",\"0\",\"-80\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"108557\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"600\",\"slotIndex\":\"-1\",\"stopTime\":\"1200\",\"offsetPos\":[\"30\",\"0\",\"-80\"],\"offsetRotation\":[\"0\",\"0\",\"90\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"108557\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"650\",\"slotIndex\":\"-1\",\"stopTime\":\"1200\",\"offsetPos\":[\"30\",\"0\",\"-80\"],\"offsetRotation\":[\"0\",\"0\",\"180\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"123626\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"500\",\"slotIndex\":\"-1\",\"stopTime\":\"1500\",\"offsetPos\":[\"0\",\"0\",\"-70\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"450\",\"skillLength\":\"500\",\"skillWidth\":\"120\"}]}", null, null, "121409", "27421", 10, "142310", 3, 0, "193354", "117391", "42804", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "天神", "激光枪"], [10045, "{\"charFightIdelAniId\":\"108371\",\"infos\":[{\"type\":\"1\",\"guid\":\"108373\",\"duration\":\"650\",\"hitLength\":\"300\",\"frontRockLength\":\"400\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"70\",\"skillLength\":\"100\",\"skillWidth\":\"100\"},{\"type\":\"2\",\"guid\":\"121784\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"20\",\"0\",\"0\"],\"offsetRotation\":[\"-200\",\"0\",\"-180\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"100\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"30\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"20\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"1\",\"guid\":\"108375\",\"duration\":\"700\",\"hitLength\":\"300\",\"frontRockLength\":\"500\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"70\",\"skillLength\":\"100\",\"skillWidth\":\"100\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"100\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"30\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"20\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"2\",\"guid\":\"121784\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"250\",\"slotIndex\":\"-1\",\"stopTime\":\"400\",\"offsetPos\":[\"30\",\"0\",\"0\"],\"offsetRotation\":[\"40\",\"0\",\"-180\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"1\",\"guid\":\"108374\",\"duration\":\"700\",\"hitLength\":\"300\",\"frontRockLength\":\"500\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"80\",\"skillLength\":\"140\",\"skillWidth\":\"80\"},{\"type\":\"2\",\"guid\":\"121783\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"50\",\"slotIndex\":\"-1\",\"stopTime\":\"600\",\"offsetPos\":[\"30\",\"0\",\"10\"],\"offsetRotation\":[\"0\",\"0\",\"90\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"1\",\"guid\":\"108370\",\"duration\":\"1700\",\"hitLength\":\"300\",\"frontRockLength\":\"600\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"200\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"150\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"150\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"80\",\"skillLength\":\"230\",\"skillWidth\":\"300\"},{\"type\":\"2\",\"guid\":\"121782\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"300\",\"slotIndex\":\"-1\",\"stopTime\":\"1200\",\"offsetPos\":[\"80\",\"0\",\"-85\"],\"offsetRotation\":[\"0\",\"0\",\"-90\"],\"offsetScale\":[\"1\",\"1\",\"1\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"1\",\"guid\":\"108372\",\"duration\":\"1380\",\"hitLength\":\"300\",\"frontRockLength\":\"500\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"3\",\"guid\":\"\",\"duration\":\"100\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"200\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"0\",\"moveDir\":\"1\",\"moveDistance\":\"50\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"},{\"type\":\"5\",\"guid\":\"\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"100\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"60\",\"skillRadius\":\"0\",\"skillHeight\":\"350\",\"skillLength\":\"160\",\"skillWidth\":\"160\"},{\"type\":\"2\",\"guid\":\"121785\",\"duration\":\"1000\",\"hitLength\":\"\",\"frontRockLength\":\"\",\"isCharge\":\"0\",\"isAutoPlay\":\"0\",\"delayPlayTime\":\"400\",\"slotIndex\":\"-1\",\"stopTime\":\"2500\",\"offsetPos\":[\"140\",\"0\",\"-85\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"1.5\",\"1.5\",\"1.5\"],\"colorHex\":\"\",\"isToPos\":\"\",\"moveDir\":\"\",\"moveDistance\":\"100\",\"skillAngle\":\"0\",\"skillOffsetDis\":\"0\",\"skillRadius\":\"0\",\"skillHeight\":\"0\",\"skillLength\":\"0\",\"skillWidth\":\"0\"}]}", null, null, "121409", "27421", 10, "142272", 3, 0, "193347", "108371", "42818", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "机甲少女", "终极冰环剑"], [10046, "{\n    \"charFightIdelAniId\": \"\",\n    \"infos\": [\n        {\n            \"type\": \"1\",\n            \"guid\": \"85125\",\n            \"duration\": \"600\",\n            \"hitLength\": \"300\",\n            \"frontRockLength\": \"400\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"4\",\n            \"guid\": \"47870\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0|0|0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"92821\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"350\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"400\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"180\",\n                \"30\",\n                \"70\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"FF963FFF\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"100\",\n            \"skillLength\": \"120\",\n            \"skillWidth\": \"220\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"1\",\n            \"guid\": \"20267\",\n            \"duration\": \"600\",\n            \"hitLength\": \"300\",\n            \"frontRockLength\": \"400\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"100\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"4\",\n            \"guid\": \"47870\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0|0|0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"92821\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"250\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"400\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"-90\",\n                \"20\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"FF963FFF\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"150\",\n            \"skillLength\": \"150\",\n            \"skillWidth\": \"120\",\n            \"moveSpeed\": \"300\"\n        }\n    ]\n}", null, null, "121409", "27421", 10, "142310", 3, 0, "193354", "117391", "42804", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "92821-自动攻击拳(男)"], [10047, "{\n    \"charFightIdelAniId\": \"\",\n    \"infos\": [\n        {\n            \"type\": \"1\",\n            \"guid\": \"85125\",\n            \"duration\": \"600\",\n            \"hitLength\": \"300\",\n            \"frontRockLength\": \"400\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"4\",\n            \"guid\": \"47870\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0|0|0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"168946\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"350\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"400\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"180\",\n                \"30\",\n                \"70\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"100\",\n            \"skillLength\": \"120\",\n            \"skillWidth\": \"220\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"1\",\n            \"guid\": \"20267\",\n            \"duration\": \"600\",\n            \"hitLength\": \"300\",\n            \"frontRockLength\": \"400\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"100\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"4\",\n            \"guid\": \"47870\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0|0|0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"2\",\n            \"guid\": \"168946\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"250\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"400\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"-90\",\n                \"20\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"1\",\n                \"1\",\n                \"1\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"0\",\n            \"skillLength\": \"0\",\n            \"skillWidth\": \"0\",\n            \"moveSpeed\": \"300\"\n        },\n        {\n            \"type\": \"5\",\n            \"guid\": \"\",\n            \"duration\": \"1000\",\n            \"hitLength\": \"\",\n            \"frontRockLength\": \"\",\n            \"isCharge\": \"0\",\n            \"isAutoPlay\": \"0\",\n            \"delayPlayTime\": \"0\",\n            \"slotIndex\": \"-1\",\n            \"stopTime\": \"\",\n            \"offsetPos\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetRotation\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"offsetScale\": [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            \"colorHex\": \"\",\n            \"isToPos\": \"\",\n            \"moveDir\": \"\",\n            \"moveDistance\": \"100\",\n            \"skillAngle\": \"0\",\n            \"skillOffsetDis\": \"0\",\n            \"skillRadius\": \"0\",\n            \"skillHeight\": \"150\",\n            \"skillLength\": \"150\",\n            \"skillWidth\": \"120\",\n            \"moveSpeed\": \"300\"\n        }\n    ]\n}", null, null, "121409", "27421", 10, "142310", 3, 0, "193354", "117391", "42804", new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 90), new mw.Vector(1, 1, 1), "168946-自动攻击拳(女)"]];
class ColdWeaponConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$c);
    }
}

var foreign22 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ColdWeaponConfig: ColdWeaponConfig
});

const EXCELDATA$b = [["id", "name", "value", "typeEx", "icon", "type"], ["", "", "", "", "", ""], [20700, "灰色/乖乖女眼/现代舞者", "898989FF", 207, "86704", 203], [20701, "淡玫瑰色/黑人运动姐眼", "BC537AFF", 207, "86704", 203], [20702, "金棕色/白人朋克男眼", "FEC574FF", 207, "86704", 203], [20703, "紫色/白人女天使", "AD82F7FF", 207, "86704", 203], [20704, "黑色/女军人", "1F2329FF", 207, "86704", 203], [20705, "橄榄绿/红发姐眼", "83BCB1FF", 207, "86704", 203], [20706, "深蓝色/警察男/黑人女模特", "5F7CBCFF", 207, "86704", 203], [20707, "浅棕色/嘎嘎姐眼", "9A937AFF", 207, "86704", 203], [20708, "深棕色/超市女服务员/黑人运动男", "492320FF", 207, "86704", 203], [20709, "蓝绿色/足球运动员/举重男", "9BFFD9FF", 207, "86704", 203], [20710, "深紫色/红衣西装男眼", "764A71FF", 207, "86704", 203], [20711, "蓝色/神王", "307ADDFF", 207, "86704", 203], [20712, "玫瑰红/小丑男", "C3005FFF", 207, "86704", 203], [20713, "浅红棕色/黑人赛车手", "974F60FF", 207, "86704", 203], [20714, "红棕色/游泳男", "6E2929FF", 207, "86704", 203], [20715, "粉紫色/天使男", "E188D6FF", 207, "86704", 203], [20716, "透明/默认色", "FFFFFF00", 207, "86704", 203], [30200, "其他部分默认肤色", "D4C5C5FF", 302, "86704", 302], [30201, "白1", "FFFBF8FF", 302, "86704", 302], [30202, "白2", "FDF5F2FF", 302, "86704", 302], [30203, "白3", "FBF4ECFF", 302, "86704", 302], [30204, "嘎嘎姐白", "F6EADCFF", 302, "86704", 302], [30205, "黄1", "EFE1D4FF", 302, "86704", 302], [30206, "黄2", "CAB3A5FF", 302, "86704", 302], [30207, "冷棕1", "EBDED6FF", 302, "86704", 302], [30208, "冷棕2", "BCADAAFF", 302, "86704", 302], [30209, "暖棕1", "F4E3D1FF", 302, "86704", 302], [30210, "红衣西装男棕", "9F8D8DFF", 302, "86704", 302], [30211, "黑1", "BA9C84FF", 302, "86704", 302], [30212, "黑2", "A08165FF", 302, "86704", 302], [30213, "黑人男", "897272FF", 302, "86704", 302], [30214, "黑人女", "876D6DFF", 302, "86704", 302], [20800, "深灰/乖乖女/白人乘务员", "312E2CFF", 208, "86704", 204], [20801, "深棕/黑人女天使/红衣西装男", "4A2B25FF", 208, "86704", 204], [20802, "红棕/天使/朋克男", "7A3730FF", 208, "86704", 204], [20803, "黄棕/摩登女青年", "863F30FF", 208, "86704", 204], [20804, "板栗色/女刺客/黑人运动男", "6C4232FF", 208, "86704", 204], [20805, "浅棕/乘务员/小爱神", "B26949FF", 208, "86704", 204], [20806, "肉棕/公主/游泳运动员", "E9A37BFF", 208, "86704", 204], [20807, "深绿色/超市店员", "364B55FF", 208, "86704", 204], [20808, "深红色/黑女啦啦队/黑皮游泳男", "6D212EFF", 208, "86704", 204], [20809, "粉色", "B9677BFF", 208, "86704", 204], [20810, "默认眉毛色/赛车手", "3F1D21FF", 208, "86704", 204], [20811, "深紫色/黑女仆", "2C1335FF", 208, "86704", 204], [20812, "橄榄绿/红发姐", "55512FFF", 208, "86704", 204], [20813, "深红色/黑人运动姐", "792634FF", 208, "86704", 204], [20814, "深蓝/神后/嘎嘎姐", "264B63FF", 208, "86704", 204], [20815, "蓝黑色/警察/魔王", "141535FF", 208, "86704", 204], [20816, "黑色/海盗/黑海盗", "000000FF", 208, "86704", 204], [20900, "浅粉", "FFD6E6FF", 209, "86704", 206], [20901, "珊瑚色/乖乖女", "FFABADFF", 209, "86704", 206], [20902, "芭比粉", "FE77B3FF", 209, "86704", 206], [20903, "玫粉色", "C14C71FF", 209, "86704", 206], [20904, "桃红色", "FDAEB9FF", 209, "86704", 206], [20905, "橘红色/黑人运动女", "FF5562FF", 209, "86704", 206], [20906, "橘色/乖乖女唇", "E78863FF", 209, "86704", 206], [20907, "裸色/大厚唇", "856B63FF", 209, "86704", 206], [20908, "深裸色/天使女唇", "BC6A65FF", 209, "86704", 206], [20909, "深红色/嘎嘎姐/红发女", "993B4CFF", 209, "86704", 206], [20910, "深裸色/嘎嘎姐唇/红发女唇", "993B4CFF", 209, "86704", 206], [20911, "黑运动女色", "C13862FF", 209, "86704", 206], [20912, "大红色/泳衣女/女巫唇", "B60000FF", 209, "86704", 206], [20913, "黑人男厚唇色", "A37C71FF", 209, "86704", 206], [20914, "金黄色胡子", "A1986AFF", 209, "86704", 206], [20915, "咖啡色胡子", "5D320CFF", 209, "86704", 206], [20916, "深棕色", "381C04FF", 209, "86704", 206], [20917, "浅灰色胡子", "736A6AFF", 209, "86704", 206], [20918, "黑胡子", "1A0B09FF", 209, "86704", 206], [21000, "浅粉", "FFD6E6FF", 210, "86704", 205], [21001, "珊瑚色/乖乖女", "FFABADFF", 210, "86704", 205], [21002, "芭比粉", "FE77B3FF", 210, "86704", 205], [21003, "玫粉色", "C14C71FF", 210, "86704", 205], [21004, "桃红色", "FDAEB9FF", 210, "86704", 205], [21005, "橘红色/黑人运动女", "FF5562FF", 210, "86704", 205], [21006, "橘色/乖乖女唇", "E78863FF", 210, "86704", 205], [21007, "裸色/大厚唇", "856B63FF", 210, "86704", 205], [21008, "深裸色/天使女唇", "BC6A65FF", 210, "86704", 205], [21009, "深红色/嘎嘎姐/红发女", "993B4CFF", 210, "86704", 205], [21010, "深裸色/嘎嘎姐唇/红发女唇", "993B4CFF", 210, "86704", 205], [21011, "黑运动女色", "C13862FF", 210, "86704", 205], [21012, "大红色/泳衣女/女巫唇", "B60000FF", 210, "86704", 205], [21013, "黑人男厚唇色", "A37C71FF", 210, "86704", 205]];
class ColorConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$b);
    }
}

var foreign23 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ColorConfig: ColorConfig
});

const EXCELDATA$a = [["id", "data", "sex", "type", "Name", "icon", "price", "visible", "animation"], ["", "", "", "", "", "", "", "", ""], [1, "[100,200,301,412]", 1, 0, "乖乖女", "147390", 0, 1, "47766"], [2, "[100,201,302,413]", 1, 0, "嘎嘎姐", "147372", 0, 1, "108445"], [3, "[100,202,303,415]", 1, 0, "黑人运动姐", "147398", 0, 1, "126578"], [11, "[100,203,301,414]", 1, 0, "红发姐", "147361", 0, 1, "122538"], [12, "[101,205,307,416]", 2, 0, "朋克男", "147357", 0, 1, "85953"], [13, "[101,207,306,418]", 2, 0, "黑人运动男", "147397", 0, 1, "121794"], [14, "[101,206,307,419]", 2, 0, "警察男", "147362", 0, 1, "52979"], [15, "[101,209,305,417]", 2, 0, "西装小丑男", "147391", 0, 1, "15057"], [16, "[100,200,301,410]", 1, 0, "切换女", "28491", 0, 0, null], [17, "[101,205,307,411]", 2, 0, "切换男", "28491", 0, 0, null], [100, "[10001]", 1, 100, "性别预设女", "28491", 0, 0, null], [101, "[10002]", 2, 100, "性别预设男", "28491", 0, 0, null], [200, "[20100,20205,20300,20400,20501,20601,20700,20800,20901,21001]", 1, 200, "乖乖女", "145633", 0, 1, null], [201, "[20101,20207,20301,20401,20502,20602,20707,20814,20909,21010]", 1, 200, "嘎嘎姐", "145620", 0, 1, null], [202, "[20102,20206,20303,20403,20504,20603,20701,20813,20905,21005]", 1, 200, "黑人运动女", "145634", 0, 1, null], [203, "[20100,20209,20302,20402,20503,20602,20705,20812,20909,21010]", 1, 200, "红发女", "145621", 0, 1, null], [204, "[20101,20206,20309,20421,20508,20602,20704,20800,20909,21007]", 1, 200, "黑帮女", "145628", 0, 1, null], [205, "[20105,20200,20310,20418,20517,20611,20702,20802,20900,21000]", 2, 200, "朋克男", "145625", 0, 1, null], [206, "[20106,20200,20312,20416,20517,20611,20706,20815,20900,21000]", 2, 200, "警察男", "145622", 0, 1, null], [207, "[20107,20202,20313,20417,20517,20611,20708,20804,20900,21000]", 2, 200, "黑人运动男", "145626", 0, 1, null], [208, "[20108,20202,20315,20419,20514,20611,20713,20816,20900,21013]", 2, 200, "酒吧服务员男", "145630", 0, 1, null], [209, "[20105,20201,20314,20415,20513,20611,20710,20801,20900,21000]", 2, 200, "红色西装男", "145629", 0, 1, null], [300, "[30100,30202,30300]", 1, 300, "女矮瘦型", "146435", 0, 1, "108420"], [301, "[30103,30202,30301]", 1, 300, "乖乖女身材", "146480", 0, 1, "108420"], [302, "[30104,30204,30302]", 1, 300, "嘎嘎姐身材", "146710", 0, 1, "108420"], [303, "[30105,30214,30303]", 1, 300, "黑人运动女", "146641", 0, 1, "108420"], [304, "[30106,30200,30304]", 2, 300, "男瘦矮身材", "146435", 0, 1, "108420"], [305, "[30109,30210,30306]", 2, 300, "红发西装适中身材", "146480", 0, 1, "108420"], [306, "[30110,30213,30307]", 2, 300, "黑人运动男腿粗身材", "146710", 0, 1, "108420"], [307, "[30111,30200,30305]", 2, 300, "警察男健壮身材", "146641", 0, 1, "108420"], [400, "[40116,40221,40301,40412,40614,40500]", 1, 400, "春节旗袍套装预制", "142018", 0, 1, "52965"], [401, "[40134,40205,40301,40405,40606,40500]", 1, 400, "极光鱼尾裙套装预制", "142103", 0, 1, "52965"], [402, "[40132,40203,40301,40403,40604,40500]", 1, 400, "蓝黑裙套装预制", "142064", 0, 1, "52965"], [403, "[40135,40206,40301,40406,40607,40500]", 1, 400, "古代立领套装预制", "142068", 0, 1, "52965"], [404, "[40131,40202,40301,40402,40603,40500]", 1, 400, "苏格兰套装预制", "141976", 0, 1, "52965"], [405, "[40149,40247,40311,40440,40639,40500]", 2, 400, "朋克短袖套装预制", "142113", 0, 1, "46293"], [406, "[40148,40246,40318,40439,40638,40500]", 2, 400, "黄金铠甲套装预制", "142060", 0, 1, "46293"], [407, "[40145,40243,40311,40436,40635,40500]", 2, 400, "埃及王套装预制", "142067", 0, 1, "46293"], [408, "[40146,40244,40316,40437,40636,40500]", 2, 400, "海盗套装预制", "142026", 0, 1, "46293"], [409, "[40139,40238,40312,40441,40630,40500]", 2, 400, "春节套装预制", "141951", 0, 1, "46293"], [410, "[40182,40273,40301,40468,40600,40500]", 1, 400, "切换女套装", "141951", 0, 0, null], [411, "[40183,40272,40311,40467,40629,40500]", 2, 400, "切换男套装", "141951", 0, 0, null], [412, "[40136,40207,40301,40407,40608,40500]", 1, 400, "学妹", "28491", 0, 0, null], [413, "[40130,40201,40301,40401,40602,40500]", 1, 400, "嘎嘎姐", "28491", 0, 0, null], [414, "[40138,40209,40301,40409,40610,40500]", 1, 400, "红发姐", "28491", 0, 0, null], [415, "[40137,40208,40301,40408,40609,40500]", 1, 400, "黑人运动姐", "28491", 0, 0, null], [416, "[40142,40240,40311,40433,40632,40500]", 2, 400, "白人朋克男", "28491", 0, 0, null], [417, "[40143,40241,40314,40434,40633,40500]", 2, 400, "西装小丑男", "28491", 0, 0, null], [418, "[40141,40239,40311,40432,40631,40500]", 2, 400, "黑人运动男", "28491", 0, 0, null], [419, "[40144,40239,40315,40434,40634,40500]", 2, 400, "警察男", "28491", 0, 0, null], [10001, "{\"stance\": \"30274\", \"faceGuid\": \"76618\", \"somatotype\": 2}", 1, 101, null, "28491", 0, 0, null], [10002, "{\"stance\": \"39317\", \"faceGuid\": \"76619\", \"somatotype\": 1}", 2, 101, null, "28491", 0, 0, null], [20100, "{\"LowerFaceWidth\": 0, \"UpperFaceRange\": 0, \"JawSmooth\": 0.212, \"JawLength\": -0.159, \"JawVertexWidth\": 0.292, \"LowerJawWidth\": 0, \"CheekBoneWidth\": 0, \"CheekWidth\": 0, \"CheekHeight\": 0}", 1, 201, "脸", "143988", 0, 1, null], [20101, "{\"LowerFaceWidth\": -0.175, \"UpperFaceRange\": 0, \"JawSmooth\": 0.185, \"JawLength\": 0.525, \"JawVertexWidth\": 0.228, \"LowerJawWidth\": 0, \"CheekBoneWidth\": 0.339, \"CheekWidth\": 0.187, \"CheekHeight\": 0.059}", 1, 201, null, "144002", 0, 1, null], [20102, "{\"LowerFaceWidth\": -0.135, \"UpperFaceRange\": 0, \"JawSmooth\": 0.185, \"JawLength\": 0.268, \"JawVertexWidth\": 0.386, \"LowerJawWidth\": 0, \"CheekBoneWidth\": 0.339, \"CheekWidth\": 0.187, \"CheekHeight\": 0}", 1, 201, null, "143910", 0, 1, null], [20103, "{\"LowerFaceWidth\": 0, \"UpperFaceRange\": 0, \"JawSmooth\": 0, \"JawLength\": 0, \"JawVertexWidth\": 0, \"JawVertexHeight\": -0.822, \"LowerJawWidth\": 0, \"CheekBoneWidth\": 0, \"CheekWidth\": 0, \"CheekHeight\": 0}", 1, 201, null, "143992", 0, 1, null], [20104, "{\"LowerFaceWidth\": 0.253, \"UpperFaceRange\": -0.2, \"JawSmooth\": 0.262, \"JawLength\": 0.069, \"JawVertexWidth\": 1, \"JawVertexHeight\": -0.546, \"LowerJawWidth\": 0, \"CheekBoneWidth\": 0, \"CheekWidth\": 0.006, \"CheekHeight\": 0}", 1, 201, null, "143957", 0, 1, null], [20105, "{\"LowerFaceWidth\": 0, \"UpperFaceRange\": 0, \"JawSmooth\": 0, \"JawLength\": 0, \"JawVertexWidth\": 0, \"LowerJawWidth\": 0, \"CheekBoneWidth\": 0, \"CheekWidth\": 0, \"CheekHeight\": 0}", 2, 201, null, "143918", 0, 1, null], [20106, "{\"LowerFaceWidth\": -0.116, \"UpperFaceRange\": -0.171, \"JawSmooth\": -0.147, \"JawLength\": 0.119, \"JawVertexWidth\": 0.702, \"LowerJawWidth\": 0.279, \"CheekBoneWidth\": 0.346, \"CheekWidth\": 0.175, \"CheekHeight\": 0}", 2, 201, null, "144005", 0, 1, null], [20107, "{\"LowerFaceWidth\": -0.212, \"UpperFaceRange\": 0, \"JawSmooth\": 0.253, \"JawLength\": 0.404, \"JawVertexWidth\": 0.522, \"LowerJawWidth\": 0.354, \"CheekBoneWidth\": 0.22, \"CheekWidth\": -0.032, \"CheekHeight\": 0}", 2, 201, null, "143964", 0, 1, null], [20108, "{\"LowerFaceWidth\": 0, \"UpperFaceRange\": 0, \"JawSmooth\": 0.503, \"JawLength\": 0.079, \"JawVertexWidth\": 0, \"JawVertexHeight\": -0.505, \"LowerJawWidth\": 0.062, \"CheekBoneWidth\": 0, \"CheekWidth\": 0, \"CheekHeight\": 0}", 2, 201, null, "143911", 0, 1, null], [20109, "{\"LowerFaceWidth\": 0.165, \"UpperFaceRange\": 0, \"JawSmooth\": 1, \"JawLength\": 0.513, \"JawVertexWidth\": 1, \"LowerJawWidth\": 0, \"CheekBoneWidth\": 1, \"CheekWidth\": 0.608, \"CheekHeight\": 0}", 2, 201, null, "144036", 0, 1, null], [20110, "{\"LowerFaceWidth\": 0, \"UpperFaceRange\": 0, \"JawSmooth\": 0, \"JawLength\": 0, \"JawVertexWidth\": 0, \"JawVertexHeight\": 0, \"LowerJawWidth\": 0, \"CheekBoneWidth\": 0, \"CheekWidth\": 0, \"CheekHeight\": 0}", 1, 201, null, "28491", 0, 0, null], [20111, "{\"LowerFaceWidth\": 0, \"UpperFaceRange\": 0, \"JawSmooth\": 0, \"JawLength\": 0, \"JawVertexWidth\": 0, \"JawVertexHeight\": 0, \"LowerJawWidth\": 0, \"CheekBoneWidth\": 0, \"CheekWidth\": 0, \"CheekHeight\": 0}", 2, 201, null, "28491", 0, 0, null], [20200, "{\"NoseHeight\": 0, \"NoseProtrusion\": 0, \"NoseVerticalPosition\": 0}", 2, 202, null, "143998", 0, 1, null], [20201, "{\"NoseHeight\": 0, \"NoseProtrusion\": 0.004, \"NoseVerticalPosition\": 0.255}", 2, 202, null, "144025", 0, 1, null], [20202, "{\"NoseHeight\": 0.44, \"NoseProtrusion\": 0, \"NoseVerticalPosition\": 0.153}", 2, 202, null, "144038", 0, 1, null], [20203, "{\"NoseHeight\": 1, \"NoseProtrusion\": 0, \"NoseVerticalPosition\": -0.224}", 2, 202, null, "143990", 0, 1, null], [20204, "{\"NoseHeight\": -0.3, \"NoseProtrusion\": 0.476, \"NoseVerticalPosition\": -0.203}", 2, 202, null, "143959", 0, 1, null], [20205, "{\"NoseHeight\": 0, \"NoseProtrusion\": 0, \"NoseVerticalPosition\": 0}", 1, 202, null, "143939", 0, 1, null], [20206, "{\"NoseHeight\": 0, \"NoseProtrusion\": 0.489, \"NoseVerticalPosition\": 0.645}", 1, 202, null, "143946", 0, 1, null], [20207, "{\"NoseHeight\": 1, \"NoseProtrusion\": 0.72, \"NoseVerticalPosition\": 0.519}", 1, 202, null, "143929", 0, 1, null], [20208, "{\"NoseHeight\": 1, \"NoseProtrusion\": 0, \"NoseVerticalPosition\": -0.661}", 1, 202, null, "144019", 0, 1, null], [20209, "{\"NoseHeight\": -0.3, \"NoseProtrusion\": -0.141, \"NoseVerticalPosition\": -0.7}", 1, 202, null, "143980", 0, 1, null], [20300, "{\"EyeTexture\": \"47961\", \"EyeShadowTexture\": \"77497\", \"EyeShadowColor\": \"D88F93FF\", \"EyeLashTexture\": \"32096\", \"EyeLashColor\": \"544539FF\", \"EyesGap\": 0, \"EyesHeight\": 0, \"EyesRotation\": -0.123, \"EyesLength\": -0.174, \"EyesWidth\": -0.055, \"CanthusHorizontalPosition\": 0, \"CanthusVerticalPosition\": 0}", 1, 203, null, "143962", 0, 1, null], [20301, "{\"EyeTexture\": \"47970\", \"EyeShadowTexture\": \"77495\", \"EyeShadowColor\": \"879793FF\", \"EyeLashTexture\": \"48065\", \"EyeLashColor\": \"364B55FF\", \"EyesGap\": 0.036, \"EyesHeight\": 0.386, \"EyesRotation\": -0.864, \"EyesLength\": 0.921, \"EyesWidth\": 0.722, \"CanthusHorizontalPosition\": -0.474, \"CanthusVerticalPosition\": 0.136}", 1, 203, null, "144041", 0, 1, null], [20302, "{\"EyeTexture\": \"47958\", \"EyeShadowTexture\": \"116441\", \"EyeShadowColor\": \"464326FF\", \"EyeLashTexture\": \"32096\", \"EyeLashColor\": \"55512FFF\", \"EyesGap\": 0.036, \"EyesHeight\": 0.4, \"EyesRotation\": 0.332, \"EyesLength\": 0.573, \"EyesWidth\": 0.382, \"CanthusHorizontalPosition\": -0.468, \"CanthusVerticalPosition\": -0.018}", 1, 203, null, "144001", 0, 1, null], [20303, "{\"EyeTexture\": \"47964\", \"EyeShadowTexture\": \"77528\", \"EyeShadowColor\": \"A54D59FF\", \"EyeLashTexture\": \"48065\", \"EyeLashColor\": \"6D212EFF\", \"EyesGap\": 0.036, \"EyesHeight\": 0.3, \"EyesRotation\": -0.382, \"EyesLength\": 0.65, \"EyesWidth\": 0.036, \"CanthusHorizontalPosition\": -0.222, \"CanthusVerticalPosition\": 0.524}", 1, 203, null, "144003", 0, 1, null], [20304, "{\"EyeTexture\": \"47957\", \"EyeShadowTexture\": \"75951\", \"EyeShadowColor\": \"4A5680FF\", \"EyeLashTexture\": \"48063\", \"EyeLashColor\": \"1D3B4FFF\", \"EyesGap\": 0, \"EyesHeight\": 0.274, \"EyesRotation\": -0.906, \"EyesLength\": 0.918, \"EyesWidth\": 0.242, \"CanthusHorizontalPosition\": 0, \"CanthusVerticalPosition\": -0.224}", 1, 203, null, "143985", 0, 1, null], [20305, "{\"EyeTexture\": \"47973\", \"EyeShadowTexture\": \"77496\", \"EyeShadowColor\": \"C69CE8FF\", \"EyeLashTexture\": \"48055\", \"EyeLashColor\": \"3D2225FF\", \"EyesGap\": 0.036, \"EyesHeight\": 0.467, \"EyesRotation\": 0.875, \"EyesLength\": 1, \"EyesWidth\": 0.382, \"CanthusHorizontalPosition\": -0.468, \"CanthusVerticalPosition\": -0.986}", 1, 203, null, "144033", 0, 1, null], [20306, "{\"EyeTexture\": \"47971\", \"EyeShadowTexture\": \"32081\", \"EyeShadowColor\": \"D5854EFF\", \"EyeLashTexture\": \"48050\", \"EyeLashColor\": \"21110BFF\", \"EyesGap\": 0.195, \"EyesHeight\": -0.174, \"EyesRotation\": -0.632, \"EyesLength\": 0.384, \"EyesWidth\": 0.106, \"CanthusHorizontalPosition\": 0.308, \"CanthusVerticalPosition\": -0.232}", 1, 203, null, "143956", 0, 1, null], [20307, "{\"EyeTexture\": \"47968\", \"EyeShadowTexture\": \"77494\", \"EyeShadowColor\": \"147E2AFF\", \"EyeLashTexture\": \"48054\", \"EyeLashColor\": \"6C4D30FF\", \"EyesGap\": 0, \"EyesHeight\": 0.444, \"EyesRotation\": -0.348, \"EyesLength\": 0.251, \"EyesWidth\": -0.016, \"CanthusHorizontalPosition\": -0.488, \"CanthusVerticalPosition\": -0.506}", 1, 203, null, "143947", 0, 1, null], [20308, "{\"EyeTexture\": \"47963\", \"EyeShadowTexture\": \"77599\", \"EyeShadowColor\": \"FF6D5FFF\", \"EyeLashTexture\": \"48063\", \"EyeLashColor\": \"B9677BFF\", \"EyesGap\": 0.104, \"EyesHeight\": 0.072, \"EyesRotation\": 0.464, \"EyesLength\": 0.22, \"EyesWidth\": 0.3, \"CanthusHorizontalPosition\": -0.072, \"CanthusVerticalPosition\": 0.15}", 1, 203, null, "143997", 0, 1, null], [20309, "{\"EyeTexture\": \"47968\", \"EyeShadowTexture\": \"77496\", \"EyeShadowColor\": \"401616FF\", \"EyeLashTexture\": \"48056\", \"EyeLashColor\": \"351E15FF\", \"EyesGap\": 0, \"EyesHeight\": 0.276, \"EyesRotation\": -0.622, \"EyesLength\": 0.855, \"EyesWidth\": 0, \"CanthusHorizontalPosition\": 0, \"CanthusVerticalPosition\": -0.676}", 1, 203, null, "143916", 0, 1, null], [20310, "{\"EyeTexture\": \"30422\", \"EyeShadowTexture\": \"32115\", \"EyeShadowColor\": \"FFFFFFFF\", \"EyeLashTexture\": \"48062\", \"EyeLashColor\": \"21160CFF\", \"EyesGap\": 0, \"EyesHeight\": 0, \"EyesRotation\": 0, \"EyesLength\": 0, \"EyesWidth\": 0, \"CanthusHorizontalPosition\": 0, \"CanthusVerticalPosition\": 0}", 2, 203, null, "143907", 0, 1, null], [20311, "{\"EyeTexture\": \"47958\", \"EyeShadowTexture\": \"77530\", \"EyeShadowColor\": \"915752FF\", \"EyeLashTexture\": \"48066\", \"EyeLashColor\": \"100A02FF\", \"EyesGap\": 0.223, \"EyesHeight\": 0.346, \"EyesRotation\": 0.183, \"EyesLength\": -0.12, \"EyesWidth\": -0.197, \"CanthusHorizontalPosition\": -0.129, \"CanthusVerticalPosition\": -0.202}", 2, 203, null, "143968", 0, 1, null], [20312, "{\"EyeTexture\": \"30422\", \"EyeShadowTexture\": \"77497\", \"EyeShadowColor\": \"2E334CFF\", \"EyeLashTexture\": \"48059\", \"EyeLashColor\": \"040710FF\", \"EyesGap\": 0.162, \"EyesHeight\": 0.211, \"EyesRotation\": 0.053, \"EyesLength\": 0.312, \"EyesWidth\": 0.082, \"CanthusHorizontalPosition\": 0.01, \"CanthusVerticalPosition\": -0.413}", 2, 203, null, "144035", 0, 1, null], [20313, "{\"EyeTexture\": \"47961\", \"EyeShadowTexture\": \"77497\", \"EyeShadowColor\": \"4D251EFF\", \"EyeLashTexture\": \"77466\", \"EyeLashColor\": \"1D0D0AFF\", \"EyesGap\": 0.187, \"EyesHeight\": 0.022, \"EyesRotation\": -0.972, \"EyesLength\": 0.112, \"EyesWidth\": 0.242, \"CanthusHorizontalPosition\": 0, \"CanthusVerticalPosition\": 0.796}", 2, 203, null, "143963", 0, 1, null], [20314, "{\"EyeTexture\": \"70241\", \"EyeShadowTexture\": \"77497\", \"EyeShadowColor\": \"273C76FF\", \"EyeLashTexture\": \"48067\", \"EyeLashColor\": \"2B0A11FF\", \"EyesGap\": 0, \"EyesHeight\": 0.26, \"EyesRotation\": 0.242, \"EyesLength\": 0.112, \"EyesWidth\": 0.242, \"CanthusHorizontalPosition\": 0, \"CanthusVerticalPosition\": 0.19}", 2, 203, null, "143993", 0, 1, null], [20315, "{\"EyeTexture\": \"47958\", \"EyeShadowTexture\": \"77497\", \"EyeShadowColor\": \"4C261FFF\", \"EyeLashTexture\": \"48048\", \"EyeLashColor\": \"100403FF\", \"EyesGap\": 0.144, \"EyesHeight\": 0.269, \"EyesRotation\": 0.87, \"EyesLength\": 0.024, \"EyesWidth\": -0.197, \"CanthusHorizontalPosition\": -0.129, \"CanthusVerticalPosition\": -0.202}", 2, 203, null, "144024", 0, 1, null], [20316, "{\"EyeTexture\": \"47957\", \"EyeShadowTexture\": \"77600\", \"EyeShadowColor\": \"917149FF\", \"EyeLashTexture\": \"48057\", \"EyeLashColor\": \"2C2418FF\", \"EyesGap\": 0.144, \"EyesHeight\": 0.25, \"EyesRotation\": 0.486, \"EyesLength\": 0.294, \"EyesWidth\": -0.197, \"CanthusHorizontalPosition\": -0.129, \"CanthusVerticalPosition\": -0.202}", 2, 203, null, "143940", 0, 1, null], [20317, "{\"EyeTexture\": \"47957\", \"EyeShadowTexture\": \"32115\", \"EyeShadowColor\": \"FFFFFFFF\", \"EyeLashTexture\": \"48048\", \"EyeLashColor\": \"21160CFF\", \"EyesGap\": 0.157, \"EyesHeight\": 0.304, \"EyesRotation\": 0.676, \"EyesLength\": 0.036, \"EyesWidth\": 0.318, \"CanthusHorizontalPosition\": -0.174, \"CanthusVerticalPosition\": -0.144}", 2, 203, null, "144027", 0, 1, null], [20318, "{\"EyeTexture\": \"47958\", \"EyeShadowTexture\": \"32115\", \"EyeShadowColor\": \"FFFFFFFF\", \"EyeLashTexture\": \"48061\", \"EyeLashColor\": \"100904FF\", \"EyesGap\": 0, \"EyesHeight\": 0, \"EyesRotation\": 0, \"EyesLength\": 0, \"EyesWidth\": 0, \"CanthusHorizontalPosition\": 0, \"CanthusVerticalPosition\": 0}", 2, 203, null, "143936", 0, 1, null], [20319, "{\"EyeTexture\": \"47961\", \"EyeShadowTexture\": \"77497\", \"EyeShadowColor\": \"3B255BFF\", \"EyeLashTexture\": \"48066\", \"EyeLashColor\": \"170821FF\", \"EyesGap\": 0.315, \"EyesHeight\": -0.087, \"EyesRotation\": 0.018, \"EyesLength\": -0.061, \"EyesWidth\": -0.067, \"CanthusHorizontalPosition\": -0.205, \"CanthusVerticalPosition\": 0.5}", 2, 203, null, "143944", 0, 1, null], [20320, "{\"EyeTexture\": \"32093\", \"EyeShadowTexture\": \"32115\", \"EyeShadowColor\": \"FFFFFFFF\", \"EyeLashTexture\": \"32096\", \"EyeLashColor\": \"6C4232FF\", \"EyesGap\": 0, \"EyesHeight\": 0, \"EyesRotation\": 0, \"EyesLength\": 0, \"EyesWidth\": 0, \"CanthusHorizontalPosition\": 0, \"CanthusVerticalPosition\": 0}", 1, 203, null, "145385", 0, 1, null], [20321, "{\"EyeTexture\": \"30422\", \"EyeShadowTexture\": \"32115\", \"EyeShadowColor\": \"FFFFFFFF\", \"EyeLashTexture\": \"48062\", \"EyeLashColor\": \"21160CFF\", \"EyesGap\": 0, \"EyesHeight\": 0, \"EyesRotation\": 0, \"EyesLength\": 0, \"EyesWidth\": 0, \"CanthusHorizontalPosition\": 0, \"CanthusVerticalPosition\": 0}", 2, 203, null, "145380", 0, 1, null], [20400, "{\"BrowGap\": -0.353, \"BrowHeight\": 0.516, \"BrowTexture\": \"48605\", \"BrowRotation\": -0.209, \"BrowColor\": \"3F1D21FF\"}", 1, 204, null, "143927", 0, 1, null], [20401, "{\"BrowGap\": -0.329, \"BrowHeight\": -0.11, \"BrowTexture\": \"115868\", \"BrowRotation\": -0.5, \"BrowColor\": \"3F1D21FF\"}", 1, 204, null, "143955", 0, 1, null], [20402, "{\"BrowGap\": -0.329, \"BrowHeight\": 0.05, \"BrowTexture\": \"48598\", \"BrowRotation\": -0.5, \"BrowColor\": \"3F1D21FF\"}", 1, 204, null, "143926", 0, 1, null], [20403, "{\"BrowGap\": 0.053, \"BrowHeight\": -0.836, \"BrowTexture\": \"48610\", \"BrowRotation\": 0.6, \"BrowColor\": \"3F1D21FF\"}", 1, 204, null, "144037", 0, 1, null], [20404, "{\"BrowGap\": -0.5, \"BrowHeight\": 0.496, \"BrowTexture\": \"48595\", \"BrowRotation\": 0, \"BrowColor\": \"3F1D21FF\", \"posOffset\": \" \"}", 1, 204, null, "144022", 0, 1, null], [20405, "{\"BrowGap\": 0, \"BrowHeight\": 0, \"BrowTexture\": \"48612\", \"BrowRotation\": 0, \"BrowColor\": \"3F1D21FF\"}", 1, 204, null, "144021", 0, 1, null], [20406, "{\"BrowGap\": -0.5, \"BrowHeight\": 0.986, \"BrowTexture\": \"48597\", \"BrowRotation\": -0.333, \"BrowColor\": \"3F1D21FF\"}", 1, 204, null, "143996", 0, 1, null], [20407, "{\"BrowGap\": -0.5, \"BrowHeight\": -0.909, \"BrowTexture\": \"48607\", \"BrowRotation\": -0.5, \"BrowColor\": \"3F1D21FF\"}", 1, 204, null, "144039", 0, 1, null], [20408, "{\"BrowGap\": 0, \"BrowHeight\": 1, \"BrowTexture\": \"48590\", \"BrowRotation\": 0.202, \"BrowColor\": \"3F1D21FF\"}", 1, 204, null, "144032", 0, 1, null], [20409, "{\"BrowGap\": 0, \"BrowHeight\": 0, \"BrowTexture\": \"48601\", \"BrowRotation\": 0, \"BrowColor\": \"3F1D21FF\"}", 1, 204, null, "143974", 0, 1, null], [20410, "{\"BrowGap\": -0.5, \"BrowHeight\": 0.556, \"BrowTexture\": \"48594\", \"BrowRotation\": 0, \"BrowColor\": \"3F1D21FF\"}", 1, 204, null, "143970", 0, 1, null], [20411, "{\"BrowGap\": 0, \"BrowHeight\": 1, \"BrowTexture\": \"48611\", \"BrowRotation\": 0, \"BrowColor\": \"3F1D21FF\"}", 1, 204, null, "143932", 0, 1, null], [20412, "{\"BrowGap\": -0.111, \"BrowHeight\": 0.507, \"BrowTexture\": \"32105\", \"BrowRotation\": -0.244, \"BrowColor\": \"3F1D21FF\"}", 1, 204, null, "143994", 0, 1, null], [20413, "{\"BrowGap\": -0.5, \"BrowHeight\": 0.985, \"BrowTexture\": \"48606\", \"BrowRotation\": 0.6, \"BrowColor\": \"3F1D21FF\"}", 1, 204, null, "143989", 0, 1, null], [20414, "{\"BrowGap\": 0.001, \"BrowHeight\": 0.001, \"BrowTexture\": \"48603\", \"BrowRotation\": 0.001, \"BrowColor\": \"3F1D21FF\"}", 1, 204, null, "144006", 0, 1, null], [20415, "{\"BrowGap\": -0.267, \"BrowHeight\": 0.389, \"BrowTexture\": \"48600\", \"BrowRotation\": 0.246, \"BrowColor\": \"3F1D21FF\"}", 2, 204, null, "143928", 0, 1, null], [20416, "{\"BrowGap\": -0.053, \"BrowHeight\": 0.106, \"BrowTexture\": \"48599\", \"BrowRotation\": 0.14, \"BrowColor\": \"3F1D21FF\"}", 2, 204, null, "143913", 0, 1, null], [20417, "{\"BrowGap\": 0.264, \"BrowHeight\": 0.064, \"BrowTexture\": \"121549\", \"BrowRotation\": 0.477, \"BrowColor\": \"3F1D21FF\"}", 2, 204, null, "143937", 0, 1, null], [20418, "{\"BrowGap\": 0, \"BrowHeight\": 0, \"BrowTexture\": \"77763\", \"BrowRotation\": 0, \"BrowColor\": \"3F1D21FF\"}", 2, 204, null, "144016", 0, 1, null], [20419, "{\"BrowGap\": 0, \"BrowHeight\": 0, \"BrowTexture\": \"77527\", \"BrowRotation\": 0.319, \"BrowColor\": \"3F1D21FF\"}", 2, 204, null, "143965", 0, 1, null], [20420, "{\"BrowGap\": -0.5, \"BrowHeight\": -0.272, \"BrowTexture\": \"48608\", \"BrowRotation\": 0.19, \"BrowColor\": \"3F1D21FF\"}", 2, 204, null, "143917", 0, 1, null], [20421, "{\"BrowGap\": 0, \"BrowHeight\": 0, \"BrowTexture\": \"48596\", \"BrowRotation\": 0, \"BrowColor\": \"3F1D21FF\"}", 2, 204, null, "143931", 0, 1, null], [20422, "{\"BrowGap\": -0.015, \"BrowHeight\": 0.197, \"BrowTexture\": \"48604\", \"BrowRotation\": 0.14, \"BrowColor\": \"3F1D21FF\"}", 2, 204, null, "143948", 0, 1, null], [20423, "{\"BrowGap\": 0, \"BrowHeight\": 0, \"BrowTexture\": \"115868\", \"BrowRotation\": 0, \"BrowColor\": \"3F1D21FF\"}", 2, 204, null, "144046", 0, 1, null], [20424, "{\"BrowGap\": 0.121, \"BrowHeight\": 0.062, \"BrowTexture\": \"48609\", \"BrowRotation\": -0.152, \"BrowColor\": \"3F1D21FF\"}", 2, 204, null, "144026", 0, 1, null], [20425, "{\"BrowGap\": 0.318, \"BrowHeight\": 0.062, \"BrowTexture\": \"48601\", \"BrowRotation\": 0.14, \"BrowColor\": \"3F1D21FF\"}", 2, 204, null, "144000", 0, 1, null], [20426, "{\"BrowGap\": 0, \"BrowHeight\": 0, \"BrowTexture\": \"99653\", \"BrowRotation\": 0.579, \"BrowColor\": \"3F1D21FF\"}", 2, 204, null, "143941", 0, 1, null], [20500, "{\"MouthHeight\": 0, \"MouthWidth\": 0, \"MouthShape\": 0, \"LipstickTexture\": \"32115\", \"LipstickColor\": \"FFFFFFFF\"}", 1, 205, null, "143976", 0, 1, null], [20501, "{\"MouthHeight\": 0, \"MouthWidth\": 0, \"MouthShape\": 0.174, \"LipstickTexture\": \"32089\", \"LipstickColor\": \"C14C71FF\"}", 1, 205, null, "144040", 0, 1, null], [20502, "{\"MouthHeight\": 0.371, \"MouthWidth\": 0.278, \"MouthShape\": -0.718, \"LipstickTexture\": \"77526\", \"LipstickColor\": \"C14C71FF\"}", 1, 205, null, "144007", 0, 1, null], [20503, "{\"MouthHeight\": 0.371, \"MouthWidth\": 0.94, \"MouthShape\": 0.258, \"LipstickTexture\": \"77526\", \"LipstickColor\": \"C14C71FF\"}", 1, 205, null, "143925", 0, 1, null], [20504, "{\"MouthHeight\": 0.371, \"MouthWidth\": 0.56, \"MouthShape\": 0.336, \"LipstickTexture\": \"77522\", \"LipstickColor\": \"C14C71FF\"}", 1, 205, null, "143967", 0, 1, null], [20505, "{\"MouthHeight\": 0.451, \"MouthWidth\": 0.694, \"MouthShape\": 0.324, \"LipstickTexture\": \"77520\", \"LipstickColor\": \"C14C71FF\"}", 1, 205, null, "143922", 0, 1, null], [20506, "{\"MouthHeight\": 0.371, \"MouthWidth\": 0.94, \"MouthShape\": 0.262, \"LipstickTexture\": \"77521\", \"LipstickColor\": \"C14C71FF\"}", 1, 205, null, "143945", 0, 1, null], [20507, "{\"MouthHeight\": 0, \"MouthWidth\": 0, \"MouthShape\": -0.657, \"LipstickTexture\": \"32090\", \"LipstickColor\": \"C14C71FF\"}", 1, 205, null, "143984", 0, 1, null], [20508, "{\"MouthHeight\": 0, \"MouthWidth\": 0, \"MouthShape\": 0, \"LipstickTexture\": \"112587\", \"LipstickColor\": \"C14C71FF\"}", 1, 205, null, "143938", 0, 1, null], [20509, "{\"MouthHeight\": 0, \"MouthWidth\": 0, \"MouthShape\": 0, \"LipstickTexture\": \"77603\", \"LipstickColor\": \"C14C71FF\"}", 1, 205, null, "143995", 0, 1, null], [20510, "{\"MouthHeight\": 0, \"MouthWidth\": 0, \"MouthShape\": 0, \"LipstickTexture\": \"77602\", \"LipstickColor\": \"C14C71FF\"}", 1, 205, null, "144045", 0, 1, null], [20511, "{\"MouthHeight\": 0, \"MouthWidth\": 0.571, \"MouthShape\": 0.558, \"LipstickTexture\": \"77525\", \"LipstickColor\": \"C14C71FF\"}", 1, 205, null, "144020", 0, 1, null], [20512, "{\"MouthHeight\": 0, \"MouthWidth\": 0.571, \"MouthShape\": 0.558, \"LipstickTexture\": \"77523\", \"LipstickColor\": \"C14C71FF\"}", 1, 205, null, "143983", 0, 1, null], [20513, "{\"MouthHeight\": 0.69, \"MouthWidth\": 0.716, \"MouthShape\": 0.716, \"LipstickTexture\": \"32115\", \"LipstickColor\": \"FFFFFFFF\"}", 2, 205, null, "143966", 0, 1, null], [20514, "{\"MouthHeight\": 0, \"MouthWidth\": 0, \"MouthShape\": 0, \"LipstickTexture\": \"112587\", \"LipstickColor\": \"A38B85FF\"}", 2, 205, null, "144034", 0, 1, null], [20515, "{\"MouthHeight\": 0, \"MouthWidth\": 0, \"MouthShape\": 0, \"LipstickTexture\": \"32088\", \"LipstickColor\": \"A38B85FF\"}", 2, 205, null, "143973", 0, 1, null], [20516, "{\"MouthHeight\": 0.511, \"MouthWidth\": 0, \"MouthShape\": -1, \"LipstickTexture\": \"32115\", \"LipstickColor\": \"FFFFFFFF\"}", 2, 205, null, "143958", 0, 1, null], [20517, "{\"MouthHeight\": 0, \"MouthWidth\": 0, \"MouthShape\": 0, \"LipstickTexture\": \"32115\", \"LipstickColor\": \"FFFFFFFF\"}", 2, 205, null, "143977", 0, 1, null], [20600, "{\"BlushTexture\": \"32115\", \"BlushColor\": \"D85D67FF\"}", 1, 206, "默认无腮红", "143976", 0, 1, null], [20601, "{\"BlushTexture\": \"32103\", \"BlushColor\": \"D85D67FF\"}", 1, 206, "乖乖女腮红", "144008", 0, 1, null], [20602, "{\"BlushTexture\": \"77440\", \"BlushColor\": \"D85D67FF\"}", 1, 206, "嘎嘎姐腮红", "143908", 0, 1, null], [20603, "{\"BlushTexture\": \"77437\", \"BlushColor\": \"D85D67FF\"}", 1, 206, "黑人运动女腮红", "144009", 0, 1, null], [20604, "{\"BlushTexture\": \"32114\", \"BlushColor\": \"D85D67FF\"}", 1, 206, "腮红3", "143921", 0, 1, null], [20605, "{\"BlushTexture\": \"77438\", \"BlushColor\": \"D85D67FF\"}", 1, 206, "腮红4", "143987", 0, 1, null], [20606, "{\"BlushTexture\": \"77441\", \"BlushColor\": \"D85D67FF\"}", 1, 206, "腮红5", "143950", 0, 1, null], [20607, "{\"BlushTexture\": \"77442\", \"BlushColor\": \"D85D67FF\"}", 1, 206, "腮红6", "144028", 0, 1, null], [20608, "{\"BlushTexture\": \"77488\", \"BlushColor\": \"D85D67FF\"}", 1, 206, "腮红7", "143954", 0, 1, null], [20609, "{\"BlushTexture\": \"77489\", \"BlushColor\": \"D85D67FF\"}", 1, 206, "腮红8", "144030", 0, 1, null], [20610, "{\"BlushTexture\": \"77490\", \"BlushColor\": \"D85D67FF\"}", 1, 206, "腮红9", "144029", 0, 1, null], [20611, "{\"BlushTexture\": \"32115\", \"BlushColor\": \"D85D67FF\"}", 2, 206, "默认无腮红", "143977", 0, 1, null], [20612, "{\"BlushTexture\": \"75674\", \"BlushColor\": \"D85D67FF\"}", 2, 206, "腮红1", "144012", 0, 1, null], [20613, "{\"BlushTexture\": \"107625\", \"BlushColor\": \"D85D67FF\"}", 2, 206, "腮红2", "144013", 0, 1, null], [20614, "{\"BlushTexture\": \"75673\", \"BlushColor\": \"D85D67FF\"}", 2, 206, "腮红3", "143979", 0, 1, null], [20615, "{\"BlushTexture\": \"112593\", \"BlushColor\": \"5D320CFF\"}", 2, 206, "胡子1", "144047", 0, 1, null], [20616, "{\"BlushTexture\": \"112586\", \"BlushColor\": \"5D320CFF\"}", 2, 206, "胡子2", "143969", 0, 1, null], [20617, "{\"BlushTexture\": \"112588\", \"BlushColor\": \"5D320CFF\"}", 2, 206, "胡子3", "143960", 0, 1, null], [20618, "{\"BlushTexture\": \"112589\", \"BlushColor\": \"5D320CFF\"}", 2, 206, "胡子4", "143961", 0, 1, null], [20619, "{\"BlushTexture\": \"112590\", \"BlushColor\": \"5D320CFF\"}", 2, 206, "胡子5", "143923", 0, 1, null], [20620, "{\"BlushTexture\": \"112591\", \"BlushColor\": \"5D320CFF\"}", 2, 206, "胡子6", "144044", 0, 1, null], [20621, "{\"BlushTexture\": \"112594\", \"BlushColor\": \"5D320CFF\"}", 2, 206, "胡子7", "144042", 0, 1, null], [20622, "{\"BlushTexture\": \"112597\", \"BlushColor\": \"5D320CFF\"}", 2, 206, "胡子8", "144043", 0, 1, null], [20700, "{\"_colorID\": \"20700\"}", 0, 207, "灰色/乖乖女眼/现代舞者", "28491", 0, 1, null], [20701, "{\"_colorID\": \"20701\"}", 0, 207, "淡玫瑰色/黑人运动姐眼", "28491", 0, 1, null], [20702, "{\"_colorID\": \"20702\"}", 0, 207, "金棕色/白人朋克男眼", "28491", 0, 1, null], [20703, "{\"_colorID\": \"20703\"}", 0, 207, "紫色/白人女天使", "28491", 0, 1, null], [20704, "{\"_colorID\": \"20704\"}", 0, 207, "黑色/女军人", "28491", 0, 1, null], [20705, "{\"_colorID\": \"20705\"}", 0, 207, "橄榄绿/红发姐眼", "28491", 0, 1, null], [20706, "{\"_colorID\": \"20706\"}", 0, 207, "深蓝色/警察男/黑人女模特", "28491", 0, 1, null], [20707, "{\"_colorID\": \"20707\"}", 0, 207, "浅棕色/嘎嘎姐眼", "28491", 0, 1, null], [20708, "{\"_colorID\": \"20708\"}", 0, 207, "深棕色/超市女服务员/黑人运动男", "28491", 0, 1, null], [20709, "{\"_colorID\": \"20709\"}", 0, 207, "蓝绿色/足球运动员/举重男", "28491", 0, 1, null], [20710, "{\"_colorID\": \"20710\"}", 0, 207, "深紫色/红衣西装男眼", "28491", 0, 1, null], [20711, "{\"_colorID\": \"20711\"}", 0, 207, "蓝色/神王", "28491", 0, 1, null], [20712, "{\"_colorID\": \"20712\"}", 0, 207, "玫瑰红/小丑男", "28491", 0, 1, null], [20713, "{\"_colorID\": \"20713\"}", 0, 207, "浅红棕色/黑人赛车手", "28491", 0, 1, null], [20714, "{\"_colorID\": \"20714\"}", 0, 207, "红棕色/游泳男", "28491", 0, 1, null], [20715, "{\"_colorID\": \"20715\"}", 0, 207, "粉紫色/天使男", "28491", 0, 1, null], [20716, "{\"_colorID\": \"20716\"}", 0, 207, "透明/默认色", "28491", 0, 1, null], [20800, "{\"_colorID\": \"20800\"}", 0, 208, "深灰/乖乖女/白人乘务员", "28491", 0, 1, null], [20801, "{\"_colorID\": \"20801\"}", 0, 208, "深棕/黑人女天使/红衣西装男", "28491", 0, 1, null], [20802, "{\"_colorID\": \"20802\"}", 0, 208, "红棕/天使/朋克男", "28491", 0, 1, null], [20803, "{\"_colorID\": \"20803\"}", 0, 208, "黄棕/摩登女青年", "28491", 0, 1, null], [20804, "{\"_colorID\": \"20804\"}", 0, 208, "板栗色/女刺客/黑人运动男", "28491", 0, 1, null], [20805, "{\"_colorID\": \"20805\"}", 0, 208, "浅棕/乘务员/小爱神", "28491", 0, 1, null], [20806, "{\"_colorID\": \"20806\"}", 0, 208, "肉棕/公主/游泳运动员", "28491", 0, 1, null], [20807, "{\"_colorID\": \"20807\"}", 0, 208, "深绿色/超市店员", "28491", 0, 1, null], [20808, "{\"_colorID\": \"20808\"}", 0, 208, "深红色/黑女啦啦队/黑皮游泳男", "28491", 0, 1, null], [20809, "{\"_colorID\": \"20809\"}", 0, 208, "粉色", "28491", 0, 1, null], [20810, "{\"_colorID\": \"20810\"}", 0, 208, "默认眉毛色/赛车手", "28491", 0, 1, null], [20811, "{\"_colorID\": \"20811\"}", 0, 208, "深紫色/黑女仆", "28491", 0, 1, null], [20812, "{\"_colorID\": \"20812\"}", 0, 208, "橄榄绿/红发姐", "28491", 0, 1, null], [20813, "{\"_colorID\": \"20813\"}", 0, 208, "深红色/黑人运动姐", "28491", 0, 1, null], [20814, "{\"_colorID\": \"20814\"}", 0, 208, "深蓝/神后/嘎嘎姐", "28491", 0, 1, null], [20815, "{\"_colorID\": \"20815\"}", 0, 208, "蓝黑色/警察/魔王", "28491", 0, 1, null], [20816, "{\"_colorID\": \"20816\"}", 0, 208, "黑色/海盗/黑海盗", "28491", 0, 1, null], [20900, "{\"_colorID\": \"20900\"}", 0, 209, "浅粉", "28491", 0, 1, null], [20901, "{\"_colorID\": \"20901\"}", 0, 209, "珊瑚色/乖乖女", "28491", 0, 1, null], [20902, "{\"_colorID\": \"20902\"}", 0, 209, "芭比粉", "28491", 0, 1, null], [20903, "{\"_colorID\": \"20903\"}", 0, 209, "玫粉色", "28491", 0, 1, null], [20904, "{\"_colorID\": \"20904\"}", 0, 209, "桃红色", "28491", 0, 1, null], [20905, "{\"_colorID\": \"20905\"}", 0, 209, "橘红色/黑人运动女", "28491", 0, 1, null], [20906, "{\"_colorID\": \"20906\"}", 0, 209, "橘色/乖乖女唇", "28491", 0, 1, null], [20907, "{\"_colorID\": \"20907\"}", 0, 209, "裸色/大厚唇", "28491", 0, 1, null], [20908, "{\"_colorID\": \"20908\"}", 0, 209, "深裸色/天使女唇", "28491", 0, 1, null], [20909, "{\"_colorID\": \"20909\"}", 0, 209, "深红色/嘎嘎姐/红发女", "28491", 0, 1, null], [20910, "{\"_colorID\": \"20910\"}", 0, 209, "深裸色/嘎嘎姐唇/红发女唇", "28491", 0, 1, null], [20911, "{\"_colorID\": \"20911\"}", 0, 209, "黑运动女色", "28491", 0, 1, null], [20912, "{\"_colorID\": \"20912\"}", 0, 209, "大红色/泳衣女/女巫唇", "28491", 0, 1, null], [20913, "{\"_colorID\": \"20913\"}", 0, 209, "黑人男厚唇色", "28491", 0, 1, null], [20914, "{\"_colorID\": \"20914\"}", 0, 209, "金黄色胡子", "28491", 0, 1, null], [20915, "{\"_colorID\": \"20915\"}", 0, 209, "咖啡色胡子", "28491", 0, 1, null], [20916, "{\"_colorID\": \"20916\"}", 0, 209, "深棕色", "28491", 0, 1, null], [20917, "{\"_colorID\": \"20917\"}", 0, 209, "浅灰色胡子", "28491", 0, 1, null], [20918, "{\"_colorID\": \"20918\"}", 0, 209, "黑胡子", "28491", 0, 1, null], [21000, "{\"_colorID\": \"21000\"}", 0, 210, "浅粉", "28491", 0, 1, null], [21001, "{\"_colorID\": \"21001\"}", 0, 210, "珊瑚色/乖乖女", "28491", 0, 1, null], [21002, "{\"_colorID\": \"21002\"}", 0, 210, "芭比粉", "28491", 0, 1, null], [21003, "{\"_colorID\": \"21003\"}", 0, 210, "玫粉色", "28491", 0, 1, null], [21004, "{\"_colorID\": \"21004\"}", 0, 210, "桃红色", "28491", 0, 1, null], [21005, "{\"_colorID\": \"21005\"}", 0, 210, "橘红色/黑人运动女", "28491", 0, 1, null], [21006, "{\"_colorID\": \"21006\"}", 0, 210, "橘色/乖乖女唇", "28491", 0, 1, null], [21007, "{\"_colorID\": \"21007\"}", 0, 210, "裸色/大厚唇", "28491", 0, 1, null], [21008, "{\"_colorID\": \"21008\"}", 0, 210, "深裸色/天使女唇", "28491", 0, 1, null], [21009, "{\"_colorID\": \"21009\"}", 0, 210, "深红色/嘎嘎姐/红发女", "28491", 0, 1, null], [21010, "{\"_colorID\": \"21010\"}", 0, 210, "深裸色/嘎嘎姐唇/红发女唇", "28491", 0, 1, null], [21011, "{\"_colorID\": \"21011\"}", 0, 210, "黑运动女色", "28491", 0, 1, null], [21012, "{\"_colorID\": \"21012\"}", 0, 210, "大红色/泳衣女/女巫唇", "28491", 0, 1, null], [21013, "{\"_colorID\": \"21013\"}", 0, 210, "黑人男厚唇色", "28491", 0, 1, null], [30100, "{\"CharacterHeight\": 0.75}", 1, 301, null, "143924", 0, 1, "14560"], [30101, "{\"CharacterHeight\": 0.8}", 1, 301, null, "144023", 0, 1, "14560"], [30102, "{\"CharacterHeight\": 0.9}", 1, 301, null, "143981", 0, 1, "14560"], [30103, "{\"CharacterHeight\": 0.95}", 1, 301, null, "144014", 0, 1, "14560"], [30104, "{\"CharacterHeight\": 1}", 1, 301, null, "144017", 0, 1, "14560"], [30105, "{\"CharacterHeight\": 1.05}", 1, 301, null, "144015", 0, 1, "14560"], [30106, "{\"CharacterHeight\": 0.75}", 2, 301, null, "143978", 0, 1, "14573"], [30107, "{\"CharacterHeight\": 0.8}", 2, 301, null, "143943", 0, 1, "14573"], [30108, "{\"CharacterHeight\": 0.9}", 2, 301, null, "143909", 0, 1, "14573"], [30109, "{\"CharacterHeight\": 0.95}", 2, 301, null, "143934", 0, 1, "14573"], [30110, "{\"CharacterHeight\": 1}", 2, 301, null, "143912", 0, 1, "14573"], [30111, "{\"CharacterHeight\": 1.05}", 2, 301, null, "143935", 0, 1, "14573"], [30201, "{\"SkinColor\": \"FFFBF8FF\"}", 0, 302, null, "145388", 0, 1, null], [30202, "{\"SkinColor\": \"FDF5F2FF\"}", 0, 302, null, "145387", 0, 1, null], [30203, "{\"SkinColor\": \"FBF4ECFF\"}", 0, 302, null, "145382", 0, 1, null], [30204, "{\"SkinColor\": \"F6EADCFF\"}", 0, 302, null, "145384", 0, 1, null], [30205, "{\"SkinColor\": \"EFE1D4FF\"}", 0, 302, null, "145389", 0, 1, null], [30200, "{\"SkinColor\": \"D4C5C5FF\"}", 0, 302, null, "145386", 0, 1, null], [30206, "{\"SkinColor\": \"CAB3A5FF\"}", 0, 302, null, "145392", 0, 1, null], [30207, "{\"SkinColor\": \"EBDED6FF\"}", 0, 302, null, "145379", 0, 1, null], [30208, "{\"SkinColor\": \"BCADAAFF\"}", 0, 302, null, "145381", 0, 1, null], [30209, "{\"SkinColor\": \"F4E3D1FF\"}", 0, 302, null, "145378", 0, 1, null], [30210, "{\"SkinColor\": \"9F8D8DFF\"}", 0, 302, null, "145376", 0, 1, null], [30211, "{\"SkinColor\": \"BA9C84FF\"}", 0, 302, null, "145390", 0, 1, null], [30212, "{\"SkinColor\": \"A08165FF\"}", 0, 302, null, "145391", 0, 1, null], [30213, "{\"SkinColor\": \"897272FF\"}", 0, 302, null, "145383", 0, 1, null], [30214, "{\"SkinColor\": \"876D6DFF\"}", 0, 302, null, "145377", 0, 1, null], [30300, "{\"BreastScale\": 1.116, \"ShoulderWidth\": 0.973, \"ShoulderThickness\": 1.3, \"RibWidth\": 0.938, \"RibThickness\": 1.2, \"WaistWidth\": 0.976, \"WaistThickness\": 1, \"GroinWidth\": 1.036, \"GroinThickness\": 1, \"UpperArmsWidth\": 0.909, \"UpperArmsThickness\": 1.2, \"LowerArmsWidth\": 0.915, \"LowerArmsThickness\": 1.2, \"ThighThicknessX\": 0.903, \"ThighThicknessZ\": 1.2, \"ShankScaleX\": 0.946, \"ShankScaleZ\": 1.2}", 1, 303, null, "143949", 0, 1, null], [30301, "{\"BreastScale\": 1.1, \"ShoulderWidth\": 1.1, \"ShoulderThickness\": 1.1, \"RibWidth\": 1.1, \"RibThickness\": 1.1, \"WaistWidth\": 1.1, \"WaistThickness\": 1.1, \"GroinWidth\": 1.1, \"GroinThickness\": 1.1, \"UpperArmsWidth\": 1.1, \"UpperArmsThickness\": 1.1, \"LowerArmsWidth\": 1.1, \"LowerArmsThickness\": 1.1, \"ThighThicknessX\": 1.1, \"ThighThicknessZ\": 1.1, \"ShankScaleX\": 1.1, \"ShankScaleZ\": 1.1}", 1, 303, null, "143972", 0, 1, null], [30302, "{\"BreastScale\": 1.3, \"ShoulderWidth\": 1.1, \"ShoulderThickness\": 1.1, \"RibWidth\": 1, \"RibThickness\": 1, \"WaistWidth\": 1, \"WaistThickness\": 1, \"GroinWidth\": 1.1, \"GroinThickness\": 1.1, \"UpperArmsWidth\": 1.2, \"UpperArmsThickness\": 1.2, \"LowerArmsWidth\": 1.2, \"LowerArmsThickness\": 1.2, \"ThighThicknessX\": 1.1, \"ThighThicknessZ\": 1.1, \"ShankScaleX\": 1.2, \"ShankScaleZ\": 1.2}", 1, 303, null, "143914", 0, 1, null], [30303, "{\"BreastScale\": 1.4, \"ShoulderWidth\": 1.4, \"ShoulderThickness\": 1.4, \"RibWidth\": 1.2, \"RibThickness\": 1.2, \"WaistWidth\": 1.1, \"WaistThickness\": 1.2, \"GroinWidth\": 1.2, \"GroinThickness\": 1.2, \"UpperArmsWidth\": 1.2, \"UpperArmsThickness\": 1.2, \"LowerArmsWidth\": 1.2, \"LowerArmsThickness\": 1.2, \"ThighThicknessX\": 1.1, \"ThighThicknessZ\": 1.2, \"ShankScaleX\": 1.1, \"ShankScaleZ\": 1.2}", 1, 303, null, "143933", 0, 1, null], [30304, "{\"BreastScale\": 1, \"ShoulderWidth\": 1.057, \"ShoulderThickness\": 1, \"RibWidth\": 0.896, \"RibThickness\": 1, \"WaistWidth\": 1, \"WaistThickness\": 1, \"GroinWidth\": 1.063, \"GroinThickness\": 1, \"UpperArmsWidth\": 1, \"UpperArmsThickness\": 1, \"LowerArmsWidth\": 1, \"LowerArmsThickness\": 1, \"ThighThicknessX\": 1, \"ThighThicknessZ\": 1, \"ShankScaleX\": 1, \"ShankScaleZ\": 1}", 2, 303, null, "143930", 0, 1, null], [30305, "{\"BreastScale\": 1, \"ShoulderWidth\": 1.2, \"ShoulderThickness\": 1.2, \"RibWidth\": 1.048, \"RibThickness\": 1.131, \"WaistWidth\": 1.002, \"WaistThickness\": 1, \"GroinWidth\": 1, \"GroinThickness\": 1, \"UpperArmsWidth\": 1.4, \"UpperArmsThickness\": 1.4, \"LowerArmsWidth\": 1.25, \"LowerArmsThickness\": 1.5, \"ThighThicknessX\": 1.066, \"ThighThicknessZ\": 1.064, \"ShankScaleX\": 1.324, \"ShankScaleZ\": 1.328}", 2, 303, null, "143953", 0, 1, null], [30306, "{\"BreastScale\": 1.146, \"ShoulderWidth\": 1.095, \"ShoulderThickness\": 1.167, \"RibWidth\": 1.143, \"RibThickness\": 1.143, \"WaistWidth\": 1, \"WaistThickness\": 1, \"GroinWidth\": 1.109, \"GroinThickness\": 1.067, \"UpperArmsWidth\": 1.167, \"UpperArmsThickness\": 1, \"LowerArmsWidth\": 1.095, \"LowerArmsThickness\": 1, \"ThighThicknessX\": 1, \"ThighThicknessZ\": 1, \"ShankScaleX\": 1, \"ShankScaleZ\": 1}", 2, 303, null, "143942", 0, 1, null], [30307, "{\"BreastScale\": 1.505, \"ShoulderWidth\": 1.2, \"ShoulderThickness\": 1.2, \"RibWidth\": 1.2, \"RibThickness\": 1.478, \"WaistWidth\": 1.119, \"WaistThickness\": 1.217, \"GroinWidth\": 1.007, \"GroinThickness\": 1.2, \"UpperArmsWidth\": 1.096, \"UpperArmsThickness\": 1.263, \"LowerArmsWidth\": 1.382, \"LowerArmsThickness\": 1.048, \"ThighThicknessX\": 1.1, \"ThighThicknessZ\": 1.1, \"ShankScaleX\": 1.1, \"ShankScaleZ\": 1.1}", 2, 303, null, "143991", 0, 1, null], [40182, "{\"bodyupper\": \"64140\"}", 1, 401, null, "144144", 0, 1, "29756"], [40183, "{\"bodyupper\": \"65973\"}", 2, 401, null, "144149", 0, 1, "46293"], [40100, "{\"bodyupper\": \"137599\"}", 1, 401, null, "142030", 0, 1, "29756"], [40101, "{\"bodyupper\": \"140483\"}", 1, 401, null, "141957", 0, 1, "29756"], [40102, "{\"bodyupper\": \"134484\"}", 1, 401, null, "135045", 0, 1, "29756"], [40103, "{\"bodyupper\": \"134234\"}", 1, 401, null, "135037", 0, 1, "29756"], [40104, "{\"bodyupper\": \"131789\"}", 1, 401, null, "135036", 0, 1, "29756"], [40105, "{\"bodyupper\": \"127852\"}", 1, 401, null, "142114", 0, 1, "29756"], [40106, "{\"bodyupper\": \"127681\"}", 1, 401, null, "141987", 0, 1, "29756"], [40107, "{\"bodyupper\": \"127609\"}", 1, 401, null, "142031", 0, 1, "29756"], [40108, "{\"bodyupper\": \"127522\"}", 1, 401, null, "142115", 0, 1, "29756"], [40109, "{\"bodyupper\": \"127316\"}", 1, 401, null, "142111", 0, 1, "29756"], [40110, "{\"bodyupper\": \"127277\"}", 1, 401, null, "142112", 0, 1, "29756"], [40111, "{\"bodyupper\": \"126615\"}", 1, 401, null, "141991", 0, 1, "29756"], [40112, "{\"bodyupper\": \"125789\"}", 1, 401, null, "141993", 0, 1, "29756"], [40113, "{\"bodyupper\": \"122100\"}", 1, 401, null, "142109", 0, 1, "29756"], [40114, "{\"bodyupper\": \"121948\"}", 1, 401, null, "141992", 0, 1, "29756"], [40115, "{\"bodyupper\": \"119366\"}", 1, 401, null, "123697", 0, 1, "29756"], [40116, "{\"bodyupper\": \"141708\"}", 1, 401, null, "142104", 0, 1, "29756"], [40117, "{\"bodyupper\": \"119362\"}", 1, 401, null, "123699", 0, 1, "29756"], [40118, "{\"bodyupper\": \"119354\"}", 1, 401, null, "123669", 0, 1, "29756"], [40119, "{\"bodyupper\": \"111721\"}", 1, 401, null, "122305", 0, 1, "29756"], [40121, "{\"bodyupper\": \"111519\"}", 1, 401, null, "141956", 0, 1, "29756"], [40122, "{\"bodyupper\": \"137492\"}", 1, 401, null, "141990", 0, 1, "29756"], [40123, "{\"bodyupper\": \"111088\"}", 1, 401, null, "122310", 0, 1, "29756"], [40124, "{\"bodyupper\": \"115633\"}", 1, 401, null, "142033", 0, 1, "29756"], [40125, "{\"bodyupper\": \"111505\"}", 1, 401, null, "122320", 0, 1, "29756"], [40126, "{\"bodyupper\": \"119358\"}", 1, 401, null, "122326", 0, 1, "29756"], [40127, "{\"bodyupper\": \"111714\"}", 1, 401, null, "122307", 0, 1, "29756"], [40128, "{\"bodyupper\": \"115849\"}", 1, 401, null, "115978", 0, 1, "29756"], [40129, "{\"bodyupper\": \"137385\"}", 1, 401, null, "142110", 0, 1, "29756"], [40130, "{\"bodyupper\": \"137505\"}", 1, 401, null, "142069", 0, 1, "29756"], [40131, "{\"bodyupper\": \"128834\"}", 1, 401, null, "141959", 0, 1, "29756"], [40132, "{\"bodyupper\": \"127639\"}", 1, 401, null, "142108", 0, 1, "29756"], [40133, "{\"bodyupper\": \"125737\"}", 1, 401, null, "142066", 0, 1, "29756"], [40134, "{\"bodyupper\": \"124880\"}", 1, 401, null, "141950", 0, 1, "29756"], [40135, "{\"bodyupper\": \"121055\"}", 1, 401, null, "141958", 0, 1, "29756"], [40136, "{\"bodyupper\": \"119350\"}", 1, 401, null, "123657", 0, 1, "29756"], [40137, "{\"bodyupper\": \"111509\"}", 1, 401, null, "122354", 0, 1, "29756"], [40138, "{\"bodyupper\": \"63304\"}", 1, 401, null, "142073", 0, 1, "29756"], [40139, "{\"bodyupper\": \"140280\"}", 2, 401, null, "141145", 0, 1, "46293"], [40140, "{\"bodyupper\": \"140934\"}", 2, 401, null, "142106", 0, 1, "46293"], [40141, "{\"bodyupper\": \"129249\"}", 2, 401, null, "142029", 0, 1, "46293"], [40142, "{\"bodyupper\": \"128801\"}", 2, 401, null, "142027", 0, 1, "46293"], [40143, "{\"bodyupper\": \"74680\"}", 2, 401, null, "141989", 0, 1, "46293"], [40144, "{\"bodyupper\": \"63672\"}", 2, 401, null, "141955", 0, 1, "46293"], [40145, "{\"bodyupper\": \"127351\"}", 2, 401, null, "142079", 0, 1, "46293"], [40146, "{\"bodyupper\": \"125658\"}", 2, 401, null, "142037", 0, 1, "46293"], [40147, "{\"bodyupper\": \"119773\"}", 2, 401, null, "142035", 0, 1, "46293"], [40148, "{\"bodyupper\": \"112568\"}", 2, 401, null, "122302", 0, 1, "46293"], [40149, "{\"bodyupper\": \"129209\"}", 2, 401, null, "142117", 0, 1, "46293"], [40150, "{\"bodyupper\": \"119112\"}", 2, 401, null, "123695", 0, 1, "46293"], [40151, "{\"bodyupper\": \"129936\"}", 2, 401, null, "142032", 0, 1, "46293"], [40152, "{\"bodyupper\": \"129177\"}", 2, 401, null, "142000", 0, 1, "46293"], [40154, "{\"bodyupper\": \"127802\"}", 2, 401, null, "142040", 0, 1, "46293"], [40155, "{\"bodyupper\": \"127800\"}", 2, 401, null, "142039", 0, 1, "46293"], [40156, "{\"bodyupper\": \"127716\"}", 2, 401, null, "142080", 0, 1, "46293"], [40157, "{\"bodyupper\": \"111573\"}", 2, 401, null, "122351", 0, 1, "46293"], [40158, "{\"bodyupper\": \"126920\"}", 2, 401, null, "142122", 0, 1, "46293"], [40159, "{\"bodyupper\": \"126679\"}", 2, 401, null, "142002", 0, 1, "46293"], [40160, "{\"bodyupper\": \"125689\"}", 2, 401, null, "141997", 0, 1, "46293"], [40161, "{\"bodyupper\": \"122919\"}", 2, 401, null, "142041", 0, 1, "46293"], [40162, "{\"bodyupper\": \"122779\"}", 2, 401, null, "141962", 0, 1, "46293"], [40163, "{\"bodyupper\": \"122089\"}", 2, 401, null, "142042", 0, 1, "46293"], [40164, "{\"bodyupper\": \"122009\"}", 2, 401, null, "142081", 0, 1, "46293"], [40165, "{\"bodyupper\": \"120060\"}", 2, 401, null, "122332", 0, 1, "46293"], [40166, "{\"bodyupper\": \"120059\"}", 2, 401, null, "122295", 0, 1, "46293"], [40167, "{\"bodyupper\": \"120058\"}", 2, 401, null, "122296", 0, 1, "46293"], [40168, "{\"bodyupper\": \"120057\"}", 2, 401, null, "122293", 0, 1, "46293"], [40169, "{\"bodyupper\": \"120056\"}", 2, 401, null, "122331", 0, 1, "46293"], [40170, "{\"bodyupper\": \"119893\"}", 2, 401, null, "123693", 0, 1, "46293"], [40171, "{\"bodyupper\": \"115938\"}", 2, 401, null, "115980", 0, 1, "46293"], [40172, "{\"bodyupper\": \"112202\"}", 2, 401, null, "122324", 0, 1, "46293"], [40173, "{\"bodyupper\": \"112201\"}", 2, 401, null, "122322", 0, 1, "46293"], [40174, "{\"bodyupper\": \"112200\"}", 2, 401, null, "122323", 0, 1, "46293"], [40175, "{\"bodyupper\": \"111356\"}", 2, 401, null, "122337", 0, 1, "46293"], [40176, "{\"bodyupper\": \"66593\"}", 2, 401, null, "142038", 0, 1, "46293"], [40177, "{\"bodyupper\": \"66696\"}", 2, 401, null, "142119", 0, 1, "46293"], [40178, "{\"bodyupper\": \"134559\"}", 2, 401, null, "135070", 0, 1, "46293"], [40179, "{\"bodyupper\": \"134944\"}", 2, 401, null, "135067", 0, 1, "46293"], [40180, "{\"bodyupper\": \"131747\"}", 2, 401, null, "135036", 0, 1, "46293"], [40181, "{\"bodyupper\": \"134561\"}", 2, 401, null, "135050", 0, 1, "46293"], [40272, "{\"bodylower\": \"65982\"}", 2, 402, null, "144150", 0, 1, "108421"], [40273, "{\"bodylower\": \"64152\"}", 1, 402, null, "144151", 0, 1, "108421"], [40200, "{\"bodylower\": \"137382\"}", 1, 402, null, "142085", 0, 1, "108421"], [40201, "{\"bodylower\": \"137504\"}", 1, 402, null, "142118", 0, 1, "108421"], [40202, "{\"bodylower\": \"128837\"}", 1, 402, null, "141947", 0, 1, "108421"], [40203, "{\"bodylower\": \"127636\"}", 1, 402, null, "141980", 0, 1, "108421"], [40204, "{\"bodylower\": \"125734\"}", 1, 402, null, "142070", 0, 1, "108421"], [40205, "{\"bodylower\": \"67545\"}", 1, 402, null, "141954", 0, 1, "108421"], [40206, "{\"bodylower\": \"121054\"}", 1, 402, null, "141953", 0, 1, "108421"], [40207, "{\"bodylower\": \"66356\"}", 1, 402, null, "142028", 0, 1, "108421"], [40208, "{\"bodylower\": \"65659\"}", 1, 402, null, "141952", 0, 1, "108421"], [40209, "{\"bodylower\": \"111248\"}", 1, 402, null, "122317", 0, 1, "108421"], [40210, "{\"bodylower\": \"134487\"}", 1, 402, null, "135057", 0, 1, "108421"], [40211, "{\"bodylower\": \"134233\"}", 1, 402, null, "135044", 0, 1, "108421"], [40212, "{\"bodylower\": \"131790\"}", 1, 402, null, "135049", 0, 1, "108421"], [40213, "{\"bodylower\": \"127682\"}", 1, 402, null, "142001", 0, 1, "108421"], [40214, "{\"bodylower\": \"127607\"}", 1, 402, null, "142078", 0, 1, "108421"], [40215, "{\"bodylower\": \"127523\"}", 1, 402, null, "142077", 0, 1, "108421"], [40216, "{\"bodylower\": \"127317\"}", 1, 402, null, "141996", 0, 1, "108421"], [40217, "{\"bodylower\": \"127279\"}", 1, 402, null, "142076", 0, 1, "108421"], [40218, "{\"bodylower\": \"126616\"}", 1, 402, null, "142036", 0, 1, "108421"], [40219, "{\"bodylower\": \"122101\"}", 1, 402, null, "142075", 0, 1, "108421"], [40220, "{\"bodylower\": \"116973\"}", 1, 402, null, "142051", 0, 1, "108421"], [40221, "{\"bodylower\": \"141710\"}", 1, 402, null, "141983", 0, 1, "108421"], [40222, "{\"bodylower\": \"116955\"}", 1, 402, null, "141966", 0, 1, "108421"], [40223, "{\"bodylower\": \"112206\"}", 1, 402, null, "142006", 0, 1, "108421"], [40224, "{\"bodylower\": \"111724\"}", 1, 402, null, "141994", 0, 1, "108421"], [40225, "{\"bodylower\": \"116956\"}", 1, 402, null, "142116", 0, 1, "108421"], [40227, "{\"bodylower\": \"111722\"}", 1, 402, null, "142058", 0, 1, "108421"], [40228, "{\"bodylower\": \"67590\"}", 1, 402, null, "142056", 0, 1, "108421"], [40229, "{\"bodylower\": \"111251\"}", 1, 402, null, "122318", 0, 1, "108421"], [40230, "{\"bodylower\": \"111085\"}", 1, 402, null, "122357", 0, 1, "108421"], [40231, "{\"bodylower\": \"65665\"}", 1, 402, null, "141968", 0, 1, "108421"], [40232, "{\"bodylower\": \"64729\"}", 1, 402, null, "141972", 0, 1, "108421"], [40233, "{\"bodylower\": \"115632\"}", 1, 402, null, "115984", 0, 1, "108421"], [40234, "{\"bodylower\": \"111723\"}", 1, 402, null, "142059", 0, 1, "108421"], [40235, "{\"bodylower\": \"115846\"}", 1, 402, null, "115972", 0, 1, "108421"], [40236, "{\"bodylower\": \"121947\"}", 1, 402, null, "141963", 0, 1, "108421"], [40237, "{\"bodylower\": \"137491\"}", 1, 402, null, "141973", 0, 1, "108421"], [40238, "{\"bodylower\": \"140276\"}", 2, 402, null, "141961", 0, 1, "108421"], [40239, "{\"bodylower\": \"111575\"}", 2, 402, null, "122327", 0, 1, "108421"], [40240, "{\"bodylower\": \"129211\"}", 2, 402, null, "141998", 0, 1, "108421"], [40241, "{\"bodylower\": \"65062\"}", 2, 402, null, "142074", 0, 1, "108421"], [40242, "{\"bodylower\": \"63681\"}", 2, 402, null, "142034", 0, 1, "108421"], [40243, "{\"bodylower\": \"127348\"}", 2, 402, null, "142121", 0, 1, "108421"], [40244, "{\"bodylower\": \"125661\"}", 2, 402, null, "142120", 0, 1, "108421"], [40245, "{\"bodylower\": \"111352\"}", 2, 402, null, "122344", 0, 1, "108421"], [40246, "{\"bodylower\": \"112575\"}", 2, 402, null, "122338", 0, 1, "108421"], [40247, "{\"bodylower\": \"111159\"}", 2, 402, null, "142082", 0, 1, "108421"], [40248, "{\"bodylower\": \"134943\"}", 2, 402, null, "135039", 0, 1, "108421"], [40249, "{\"bodylower\": \"134563\"}", 2, 402, null, "135042", 0, 1, "108421"], [40250, "{\"bodylower\": \"129179\"}", 2, 402, null, "144131", 0, 1, "108421"], [40252, "{\"bodylower\": \"127714\"}", 2, 402, null, "144138", 0, 1, "108421"], [40253, "{\"bodylower\": \"126921\"}", 2, 402, null, "144140", 0, 1, "108421"], [40254, "{\"bodylower\": \"125690\"}", 2, 402, null, "144132", 0, 1, "108421"], [40255, "{\"bodylower\": \"122778\"}", 2, 402, null, "144139", 0, 1, "108421"], [40256, "{\"bodylower\": \"119891\"}", 2, 402, null, "123692", 0, 1, "108421"], [40257, "{\"bodylower\": \"119341\"}", 2, 402, null, "144137", 0, 1, "108421"], [40258, "{\"bodylower\": \"119257\"}", 2, 402, null, "123691", 0, 1, "108421"], [40259, "{\"bodylower\": \"116983\"}", 2, 402, null, "123688", 0, 1, "108421"], [40260, "{\"bodylower\": \"115941\"}", 2, 402, null, "115975", 0, 1, "108421"], [40261, "{\"bodylower\": \"111761\"}", 2, 402, null, "122367", 0, 1, "108421"], [40262, "{\"bodylower\": \"111613\"}", 2, 402, null, "122368", 0, 1, "108421"], [40263, "{\"bodylower\": \"111575\"}", 2, 402, null, "122327", 0, 1, "108421"], [40264, "{\"bodylower\": \"111510\"}", 2, 402, null, "122341", 0, 1, "108421"], [40265, "{\"bodylower\": \"111487\"}", 2, 402, null, "122335", 0, 1, "108421"], [40266, "{\"bodylower\": \"111395\"}", 2, 402, null, "122360", 0, 1, "108421"], [40268, "{\"bodylower\": \"74122\"}", 2, 402, null, "143136", 0, 1, "108421"], [40269, "{\"bodylower\": \"134560\"}", 2, 402, null, "135038", 0, 1, "108421"], [40270, "{\"bodylower\": \"131745\"}", 2, 402, null, "135051", 0, 1, "108421"], [40271, "{\"bodylower\": \"129250\"}", 2, 402, null, "144247", 0, 1, "108421"], [40301, "{\"gloves\": \"75663\"}", 1, 403, null, "144127", 0, 1, "53004"], [40300, "{\"gloves\": \"137386\"}", 1, 403, null, "144141", 0, 1, "53004"], [40302, "{\"gloves\": \"131791\"}", 1, 403, null, "135055", 0, 1, "53004"], [40303, "{\"gloves\": \"127605\"}", 1, 403, null, "141937", 0, 1, "53004"], [40304, "{\"gloves\": \"125787\"}", 1, 403, null, "141935", 0, 1, "53004"], [40305, "{\"gloves\": \"121945\"}", 1, 403, null, "142013", 0, 1, "53004"], [40306, "{\"gloves\": \"119226\"}", 1, 403, null, "123664", 0, 1, "53004"], [40307, "{\"gloves\": \"117489\"}", 1, 403, null, "123661", 0, 1, "53004"], [40308, "{\"gloves\": \"115847\"}", 1, 403, null, "115973", 0, 1, "53004"], [40309, "{\"gloves\": \"111087\"}", 1, 403, null, "122312", 0, 1, "53004"], [40310, "{\"gloves\": \"67544\"}", 1, 403, null, "144147", 0, 1, "53004"], [40311, "{\"gloves\": \"75664\"}", 2, 403, null, "144126", 0, 1, "116994"], [40312, "{\"gloves\": \"129935\"}", 2, 403, null, "144134", 0, 1, "116994"], [40314, "{\"gloves\": \"111285\"}", 2, 403, null, "122321", 0, 1, "116994"], [40315, "{\"gloves\": \"63890\"}", 2, 403, null, "144136", 0, 1, "116994"], [40316, "{\"gloves\": \"126918\"}", 2, 403, null, "144135", 0, 1, "116994"], [40317, "{\"gloves\": \"109070\"}", 2, 403, null, "121396", 0, 1, "116994"], [40318, "{\"gloves\": \"112037\"}", 2, 403, null, "122362", 0, 1, "116994"], [40319, "{\"gloves\": \"140281\"}", 2, 403, null, "141978", 0, 1, "116994"], [40320, "{\"gloves\": \"134566\"}", 2, 403, null, "135043", 0, 1, "116994"], [40321, "{\"gloves\": \"131746\"}", 2, 403, null, "135055", 0, 1, "116994"], [40322, "{\"gloves\": \"129274\"}", 2, 403, null, "142086", 0, 1, "116994"], [40323, "{\"gloves\": \"129090\"}", 2, 403, null, "142048", 0, 1, "116994"], [40324, "{\"gloves\": \"127718\"}", 2, 403, null, "142019", 0, 1, "116994"], [40325, "{\"gloves\": \"127496\"}", 2, 403, null, "142098", 0, 1, "116994"], [40326, "{\"gloves\": \"123710\"}", 2, 403, null, "142020", 0, 1, "116994"], [40327, "{\"gloves\": \"121881\"}", 2, 403, null, "142008", 0, 1, "116994"], [40328, "{\"gloves\": \"120574\"}", 2, 403, null, "123667", 0, 1, "116994"], [40329, "{\"gloves\": \"117051\"}", 2, 403, null, "123675", 0, 1, "116994"], [40330, "{\"gloves\": \"119892\"}", 2, 403, null, "123690", 0, 1, "116994"], [40331, "{\"gloves\": \"119663\"}", 2, 403, null, "142101", 0, 1, "116994"], [40332, "{\"gloves\": \"119254\"}", 2, 403, null, "123682", 0, 1, "116994"], [40333, "{\"gloves\": \"115939\"}", 2, 403, null, "115979", 0, 1, "116994"], [40467, "{\"shoe\": \"75658\"}", 2, 404, null, "144143", 0, 1, "108421"], [40468, "{\"shoe\": \"64147\"}", 1, 404, null, "144152", 0, 1, "108421"], [40400, "{\"shoe\": \"137383\"}", 1, 404, null, "142094", 0, 1, "108421"], [40401, "{\"shoe\": \"137593\"}", 1, 404, null, "142093", 0, 1, "108421"], [40402, "{\"shoe\": \"128835\"}", 1, 404, null, "141938", 0, 1, "108421"], [40403, "{\"shoe\": \"127638\"}", 1, 404, null, "142091", 0, 1, "108421"], [40404, "{\"shoe\": \"125735\"}", 1, 404, null, "142050", 0, 1, "108421"], [40405, "{\"shoe\": \"124879\"}", 1, 404, null, "142016", 0, 1, "108421"], [40406, "{\"shoe\": \"127278\"}", 1, 404, null, "142055", 0, 1, "108421"], [40407, "{\"shoe\": \"66355\"}", 1, 404, null, "142092", 0, 1, "108421"], [40408, "{\"shoe\": \"111207\"}", 1, 404, null, "141967", 0, 1, "108421"], [40409, "{\"shoe\": \"111252\"}", 1, 404, null, "122311", 0, 1, "108421"], [40410, "{\"shoe\": \"137490\"}", 1, 404, null, "142014", 0, 1, "108421"], [40411, "{\"shoe\": \"137428\"}", 1, 404, null, "142004", 0, 1, "108421"], [40412, "{\"shoe\": \"141712\"}", 1, 404, null, "142063", 0, 1, "108421"], [40413, "{\"shoe\": \"134485\"}", 1, 404, null, "135052", 0, 1, "108421"], [40414, "{\"shoe\": \"134232\"}", 1, 404, null, "135041", 0, 1, "108421"], [40415, "{\"shoe\": \"131788\"}", 1, 404, null, "135047", 0, 1, "108421"], [40416, "{\"shoe\": \"127315\"}", 1, 404, null, "141964", 0, 1, "108421"], [40417, "{\"shoe\": \"127850\"}", 1, 404, null, "142003", 0, 1, "108421"], [40418, "{\"shoe\": \"127608\"}", 1, 404, null, "142015", 0, 1, "108421"], [40419, "{\"shoe\": \"126614\"}", 1, 404, null, "141960", 0, 1, "108421"], [40420, "{\"shoe\": \"121946\"}", 1, 404, null, "141999", 0, 1, "108421"], [40421, "{\"shoe\": \"115634\"}", 1, 404, null, "115966", 0, 1, "108421"], [40422, "{\"shoe\": \"115850\"}", 1, 404, null, "115967", 0, 1, "108421"], [40423, "{\"shoe\": \"111195\"}", 1, 404, null, "142011", 0, 1, "108421"], [40425, "{\"shoe\": \"111206\"}", 1, 404, null, "142047", 0, 1, "108421"], [40426, "{\"shoe\": \"111204\"}", 1, 404, null, "142049", 0, 1, "108421"], [40427, "{\"shoe\": \"111082\"}", 1, 404, null, "122355", 0, 1, "108421"], [40428, "{\"shoe\": \"109837\"}", 1, 404, null, "142010", 0, 1, "108421"], [40429, "{\"shoe\": \"86089\"}", 1, 404, null, "142009", 0, 1, "108421"], [40430, "{\"shoe\": \"125788\"}", 1, 404, null, "144133", 0, 1, "108421"], [40432, "{\"shoe\": \"63596\"}", 2, 404, null, "144145", 0, 1, "108421"], [40433, "{\"shoe\": \"127715\"}", 2, 404, null, "144142", 0, 1, "108421"], [40434, "{\"shoe\": \"65726\"}", 2, 404, null, "144146", 0, 1, "108421"], [40436, "{\"shoe\": \"127349\"}", 2, 404, null, "144148", 0, 1, "108421"], [40437, "{\"shoe\": \"125659\"}", 2, 404, null, "144125", 0, 1, "108421"], [40438, "{\"shoe\": \"119774\"}", 2, 404, null, "119973", 0, 1, "108421"], [40439, "{\"shoe\": \"112569\"}", 2, 404, null, "122300", 0, 1, "108421"], [40440, "{\"shoe\": \"111160\"}", 2, 404, null, "116700", 0, 1, "108421"], [40441, "{\"shoe\": \"140279\"}", 2, 404, null, "142102", 0, 1, "108421"], [40442, "{\"shoe\": \"134565\"}", 2, 404, null, "135035", 0, 1, "108421"], [40443, "{\"shoe\": \"134945\"}", 2, 404, null, "135040", 0, 1, "108421"], [40444, "{\"shoe\": \"134558\"}", 2, 404, null, "135053", 0, 1, "108421"], [40445, "{\"shoe\": \"131749\"}", 2, 404, null, "135047", 0, 1, "108421"], [40446, "{\"shoe\": \"129937\"}", 2, 404, null, "141939", 0, 1, "108421"], [40447, "{\"shoe\": \"129248\"}", 2, 404, null, "141979", 0, 1, "108421"], [40448, "{\"shoe\": \"129210\"}", 2, 404, null, "144153", 0, 1, "108421"], [40449, "{\"shoe\": \"129178\"}", 2, 404, null, "142061", 0, 1, "108421"], [40450, "{\"shoe\": \"129088\"}", 2, 404, null, "142096", 0, 1, "108421"], [40451, "{\"shoe\": \"127799\"}", 2, 404, null, "142090", 0, 1, "108421"], [40452, "{\"shoe\": \"127498\"}", 2, 404, null, "142053", 0, 1, "108421"], [40453, "{\"shoe\": \"126919\"}", 2, 404, null, "142012", 0, 1, "108421"], [40454, "{\"shoe\": \"125687\"}", 2, 404, null, "141936", 0, 1, "108421"], [40455, "{\"shoe\": \"125334\"}", 2, 404, null, "141971", 0, 1, "108421"], [40456, "{\"shoe\": \"122826\"}", 2, 404, null, "141965", 0, 1, "108421"], [40457, "{\"shoe\": \"122784\"}", 2, 404, null, "142043", 0, 1, "108421"], [40458, "{\"shoe\": \"122088\"}", 2, 404, null, "142072", 0, 1, "108421"], [40459, "{\"shoe\": \"119890\"}", 2, 404, null, "123686", 0, 1, "108421"], [40460, "{\"shoe\": \"119340\"}", 2, 404, null, "142057", 0, 1, "108421"], [40461, "{\"shoe\": \"119255\"}", 2, 404, null, "123684", 0, 1, "108421"], [40462, "{\"shoe\": \"119114\"}", 2, 404, null, "123660", 0, 1, "108421"], [40463, "{\"shoe\": \"115937\"}", 2, 404, null, "115977", 0, 1, "108421"], [40464, "{\"shoe\": \"111769\"}", 2, 404, null, "122330", 0, 1, "108421"], [40465, "{\"shoe\": \"111618\"}", 2, 404, null, "122365", 0, 1, "108421"], [40466, "{\"shoe\": \"111393\"}", 2, 404, null, "122359", 0, 1, "108421"], [40500, "{\"effectGuid\": \"0\", \"socket\": 0, \"posOffset\": \"70|-30|-5\", \"scale\": \"1|1|1\", \"rotate\": \"90|6|90\"}", 0, 405, null, "146223", 0, 1, null], [40501, "{\"effectGuid\": \"141704\", \"socket\": 10, \"posOffset\": \"72|27|2\", \"scale\": \"1|1|1\", \"rotate\": \"270|-8|-90\"}", 0, 405, null, "144263", 0, 1, null], [40502, "{\"effectGuid\": \"140286\", \"socket\": 10, \"posOffset\": \"48|4|-3\", \"scale\": \"1|1|1\", \"rotate\": \"90|61|90\"}", 0, 405, null, "144267", 0, 1, null], [40503, "{\"effectGuid\": \"136518\", \"socket\": 12, \"posOffset\": \"3|0|-20\", \"scale\": \"1|1|1\", \"rotate\": \"0|0|-90\"}", 0, 405, null, "144849", 0, 1, null], [40504, "{\"effectGuid\": \"136511\", \"socket\": 20, \"posOffset\": \"0|0|-18\", \"scale\": \"1|1|1\", \"rotate\": \"0|0|0\"}", 0, 405, null, "144280", 0, 1, null], [40505, "{\"effectGuid\": \"136506\", \"socket\": 20, \"posOffset\": \"8|0|-32\", \"scale\": \"1|1|1\", \"rotate\": \"0|0|270\"}", 0, 405, null, "144277", 0, 1, null], [40506, "{\"effectGuid\": \"136508\", \"socket\": 20, \"posOffset\": \"0|0|-32\", \"scale\": \"1|1|1\", \"rotate\": \"0|0|-90\"}", 0, 405, null, "144276", 0, 1, null], [40507, "{\"effectGuid\": \"136509\", \"socket\": 20, \"posOffset\": \"0|0|-18\", \"scale\": \"1|1|1\", \"rotate\": \"0|0|0\"}", 0, 405, null, "144275", 0, 1, null], [40508, "{\"effectGuid\": \"136504\", \"socket\": 20, \"posOffset\": \"0|0|-10\", \"scale\": \"1|1|1\", \"rotate\": \"0|0|-90\"}", 0, 405, null, "144282", 0, 1, null], [40509, "{\"effectGuid\": \"136177\", \"socket\": 20, \"posOffset\": \"0|0|-35\", \"scale\": \"1|1|1\", \"rotate\": \"0|0|-90\"}", 0, 405, null, "144283", 0, 1, null], [40510, "{\"effectGuid\": \"136171\", \"socket\": 20, \"posOffset\": \"0|0|-35\", \"scale\": \"1|1|1\", \"rotate\": \"0|0|-90\"}", 0, 405, null, "144266", 0, 1, null], [40511, "{\"effectGuid\": \"136172\", \"socket\": 19, \"posOffset\": \"0|0|0\", \"scale\": \"1|1|1\", \"rotate\": \"0|0|0\"}", 0, 405, null, "144265", 0, 1, null], [40512, "{\"effectGuid\": \"136174\", \"socket\": 19, \"posOffset\": \"0|0|0\", \"scale\": \"1|1|1\", \"rotate\": \"0|0|0\"}", 0, 405, null, "144284", 0, 1, null], [40513, "{\"effectGuid\": \"136173\", \"socket\": 19, \"posOffset\": \"0|0|0\", \"scale\": \"1|1|1\", \"rotate\": \"0|0|0\"}", 0, 405, null, "144279", 0, 1, null], [40514, "{\"effectGuid\": \"136178\", \"socket\": 20, \"posOffset\": \"0|0|-35\", \"scale\": \"1|1|1\", \"rotate\": \"0|0|-90\"}", 0, 405, null, "144274", 0, 1, null], [40515, "{\"effectGuid\": \"136179\", \"socket\": 19, \"posOffset\": \"0|0|0\", \"scale\": \"1|1|1\", \"rotate\": \"0|0|0\"}", 0, 405, null, "144278", 0, 1, null], [40517, "{\"effectGuid\": \"136169\", \"socket\": 20, \"posOffset\": \"0|0|-35\", \"scale\": \"1|1|1\", \"rotate\": \"0|0|-90\"}", 0, 405, null, "144281", 0, 1, null], [40518, "{\"effectGuid\": \"136164\", \"socket\": 20, \"posOffset\": \"0|0|-35\", \"scale\": \"1|1|1\", \"rotate\": \"0|0|-90\"}", 0, 405, null, "144269", 0, 1, null], [40519, "{\"effectGuid\": \"136166\", \"socket\": 20, \"posOffset\": \"0|0|-35\", \"scale\": \"1|1|1\", \"rotate\": \"0|0|-90\"}", 0, 405, null, "144270", 0, 1, null], [40520, "{\"effectGuid\": \"135850\", \"socket\": 20, \"posOffset\": \"8|0|-75\", \"scale\": \"1|1|1\", \"rotate\": \"0|0|-90\"}", 0, 405, null, "144851", 0, 1, null], [40521, "{\"effectGuid\": \"135849\", \"socket\": 20, \"posOffset\": \"8|0|-75\", \"scale\": \"1|1|1\", \"rotate\": \"0|0|-90\"}", 0, 405, null, "144264", 0, 1, null], [40522, "{\"effectGuid\": \"135853\", \"socket\": 20, \"posOffset\": \"11|0|-75\", \"scale\": \"1|1|1\", \"rotate\": \"0|0|-90\"}", 0, 405, null, "144271", 0, 1, null], [40525, "{\"effectGuid\": \"135837\", \"socket\": 12, \"posOffset\": \"0|0|0\", \"scale\": \"1|1|1\", \"rotate\": \"0|0|90\"}", 0, 405, null, "144260", 0, 1, null], [40526, "{\"effectGuid\": \"135227\", \"socket\": 12, \"posOffset\": \"4|0|-20\", \"scale\": \"1|1|1\", \"rotate\": \"0|0|-90\"}", 0, 405, null, "144262", 0, 1, null], [40527, "{\"effectGuid\": \"135231\", \"socket\": 12, \"posOffset\": \"1|0.3|-28\", \"scale\": \"1|1|1\", \"rotate\": \"0|0|-90\"}", 0, 405, null, "144261", 0, 1, null], [40528, "{\"effectGuid\": \"135226\", \"socket\": 12, \"posOffset\": \"0|0|0\", \"scale\": \"1|1|1\", \"rotate\": \"0|0|90\"}", 0, 405, null, "144259", 0, 1, null], [40529, "{\"effectGuid\": \"135224\", \"socket\": 12, \"posOffset\": \"0|0|0\", \"scale\": \"1|1|1\", \"rotate\": \"0|0|90\"}", 0, 405, null, "144268", 0, 1, null], [40530, "{\"effectGuid\": \"136966\", \"socket\": 12, \"posOffset\": \"0|0|5\", \"scale\": \"1|1|1\", \"rotate\": \"0|0|180\"}", 0, 405, null, "143417", 0, 1, null], [40531, "{\"effectGuid\": \"136965\", \"socket\": 12, \"posOffset\": \"0|0|5\", \"scale\": \"1|1|1\", \"rotate\": \"0|0|180\"}", 0, 405, null, "143415", 0, 1, null], [40532, "{\"effectGuid\": \"136963\", \"socket\": 12, \"posOffset\": \"0|0|5\", \"scale\": \"1|1|1\", \"rotate\": \"0|0|180\"}", 0, 405, null, "145171", 0, 1, null], [40533, "{\"effectGuid\": \"136960\", \"socket\": 12, \"posOffset\": \"0|0|5\", \"scale\": \"1|1|1\", \"rotate\": \"0|0|180\"}", 0, 405, null, "143411", 0, 1, null], [40534, "{\"effectGuid\": \"136958\", \"socket\": 12, \"posOffset\": \"0|0|5\", \"scale\": \"1|1|1\", \"rotate\": \"0|0|180\"}", 0, 405, null, "143409", 0, 1, null], [40535, "{\"effectGuid\": \"136957\", \"socket\": 12, \"posOffset\": \"0|0|5\", \"scale\": \"1|1|1\", \"rotate\": \"0|0|180\"}", 0, 405, null, "143413", 0, 1, null], [40536, "{\"effectGuid\": \"136959\", \"socket\": 12, \"posOffset\": \"0|0|5\", \"scale\": \"1|1|1\", \"rotate\": \"0|0|180\"}", 0, 405, null, "143410", 0, 1, null], [40537, "{\"effectGuid\": \"145903\", \"socket\": 12, \"posOffset\": \"0|0|5\", \"scale\": \"1|1|1\", \"rotate\": \"0|0|180\"}", 0, 405, null, "145993", 0, 1, null], [40538, "{\"effectGuid\": \"145904\", \"socket\": 12, \"posOffset\": \"0|0|5\", \"scale\": \"1|1|1\", \"rotate\": \"0|0|180\"}", 0, 405, null, "145994", 0, 1, null], [40539, "{\"effectGuid\": \"145905\", \"socket\": 12, \"posOffset\": \"0|0|10\", \"scale\": \"0.8|0.8|0.8\", \"rotate\": \"0|0|90\"}", 0, 405, null, "145996", 0, 1, null], [40541, "{\"effectGuid\": \"145907\", \"socket\": 12, \"posOffset\": \"0|0|5\", \"scale\": \"1|1|1\", \"rotate\": \"0|0|90\"}", 0, 405, null, "146002", 0, 1, null], [40542, "{\"effectGuid\": \"145908\", \"socket\": 12, \"posOffset\": \"0|0|0\", \"scale\": \"1|1|1\", \"rotate\": \"0|0|90\"}", 0, 405, null, "146000", 0, 1, null], [40543, "{\"effectGuid\": \"145909\", \"socket\": 12, \"posOffset\": \"0|0|5\", \"scale\": \"1|1|1\", \"rotate\": \"0|0|90\"}", 0, 405, null, "145999", 0, 1, null], [40544, "{\"effectGuid\": \"145910\", \"socket\": 12, \"posOffset\": \"0|0|5\", \"scale\": \"1|1|1\", \"rotate\": \"0|0|180\"}", 0, 405, null, "145997", 0, 1, null], [40545, "{\"effectGuid\": \"145911\", \"socket\": 12, \"posOffset\": \"0|0|0\", \"scale\": \"1|1|1\", \"rotate\": \"0|0|90\"}", 0, 405, null, "146614", 0, 1, null], [40600, "{\"hairfront\": \"62963\", \"hairlate\": \"62966\"}", 1, 406, null, "144128", 0, 1, null], [40601, "{\"hairfront\": \"137384\", \"hairlate\": \"137381\"}", 1, 406, null, "141940", 0, 1, null], [40602, "{\"hairfront\": \"137486\", \"hairlate\": \"137493\"}", 1, 406, null, "142054", 0, 1, null], [40603, "{\"hairfront\": \"92726\", \"hairlate\": \"128836\"}", 1, 406, null, "142088", 0, 1, null], [40604, "{\"hairfront\": \"92726\", \"hairlate\": \"119744\"}", 1, 406, null, "119978", 0, 1, null], [40605, "{\"hairfront\": \"92726\", \"hairlate\": \"125736\"}", 1, 406, null, "141969", 0, 1, null], [40606, "{\"hairfront\": \"92726\", \"hairlate\": \"124878\"}", 1, 406, null, "141970", 0, 1, null], [40607, "{\"hairfront\": \"92726\", \"hairlate\": \"124743\"}", 1, 406, null, "141932", 0, 1, null], [40608, "{\"hairfront\": \"92726\", \"hairlate\": \"128594\"}", 1, 406, null, "142044", 0, 1, null], [40609, "{\"hairfront\": \"92726\", \"hairlate\": \"119430\"}", 1, 406, null, "141931", 0, 1, null], [40610, "{\"hairfront\": \"118484\", \"hairlate\": \"118483\"}", 1, 406, null, "123373", 0, 1, null], [40611, "{\"hairfront\": \"140478\", \"hairlate\": \"140482\"}", 1, 406, null, "141933", 0, 1, null], [40612, "{\"hairfront\": \"92726\", \"hairlate\": \"137426\"}", 1, 406, null, "142100", 0, 1, null], [40613, "{\"hairfront\": \"134483\", \"hairlate\": \"134486\"}", 1, 406, null, "135069", 0, 1, null], [40614, "{\"hairfront\": \"141709\", \"hairlate\": \"141711\"}", 1, 406, null, "141984", 0, 1, null], [40615, "{\"hairfront\": \"92726\", \"hairlate\": \"134960\"}", 1, 406, null, "135066", 0, 1, null], [40616, "{\"hairfront\": \"92726\", \"hairlate\": \"131787\"}", 1, 406, null, "135064", 0, 1, null], [40617, "{\"hairfront\": \"144613\", \"hairlate\": \"127851\"}", 1, 406, null, "141945", 0, 1, null], [40618, "{\"hairfront\": \"92726\", \"hairlate\": \"127680\"}", 1, 406, null, "142022", 0, 1, null], [40619, "{\"hairfront\": \"127635\", \"hairlate\": \"127637\"}", 1, 406, null, "123369", 0, 1, null], [40620, "{\"hairfront\": \"92726\", \"hairlate\": \"128595\"}", 1, 406, null, "142045", 0, 1, null], [40621, "{\"hairfront\": \"92726\", \"hairlate\": \"119413\"}", 1, 406, null, "123364", 0, 1, null], [40622, "{\"hairfront\": \"92726\", \"hairlate\": \"126617\"}", 1, 406, null, "142007", 0, 1, null], [40623, "{\"hairfront\": \"126005\", \"hairlate\": \"126006\"}", 1, 406, null, "141930", 0, 1, null], [40624, "{\"hairfront\": \"129460\", \"hairlate\": \"129459\"}", 1, 406, null, "142046", 0, 1, null], [40625, "{\"hairfront\": \"92726\", \"hairlate\": \"125790\"}", 1, 406, null, "142084", 0, 1, null], [40626, "{\"hairfront\": \"92726\", \"hairlate\": \"118544\"}", 1, 406, null, "123385", 0, 1, null], [40629, "{\"hairfront\": \"64715\", \"hairlate\": \"64719\"}", 2, 406, null, "144130", 0, 1, "108424"], [40630, "{\"hairfront\": \"122918\", \"hairlate\": \"122920\"}", 2, 406, null, "142095", 0, 1, "108424"], [40631, "{\"hairfront\": \"92724\", \"hairlate\": \"65617\"}", 2, 406, null, "141995", 0, 1, "108424"], [40632, "{\"hairfront\": \"92724\", \"hairlate\": \"111397\"}", 2, 406, null, "123389", 0, 1, "108424"], [40633, "{\"hairfront\": \"92724\", \"hairlate\": \"121120\"}", 2, 406, null, "123368", 0, 1, "108424"], [40634, "{\"hairfront\": \"66162\", \"hairlate\": \"66161\"}", 2, 406, null, "142005", 0, 1, "108424"], [40635, "{\"hairfront\": \"92724\", \"hairlate\": \"127350\"}", 2, 406, null, "142083", 0, 1, "108424"], [40636, "{\"hairfront\": \"92724\", \"hairlate\": \"126917\"}", 2, 406, null, "142087", 0, 1, "108424"], [40637, "{\"hairfront\": \"92724\", \"hairlate\": \"119772\"}", 2, 406, null, "119965", 0, 1, "108424"], [40638, "{\"hairfront\": \"92724\", \"hairlate\": \"66662\"}", 2, 406, null, "142052", 0, 1, "108424"], [40639, "{\"hairfront\": \"140327\", \"hairlate\": \"140328\"}", 2, 406, null, "142099", 0, 1, "108424"], [40640, "{\"hairfront\": \"92724\", \"hairlate\": \"130755\"}", 2, 406, null, "141944", 0, 1, "108424"], [40641, "{\"hairfront\": \"92724\", \"hairlate\": \"134940\"}", 2, 406, null, "135068", 0, 1, "108424"], [40642, "{\"hairfront\": \"92724\", \"hairlate\": \"129247\"}", 2, 406, null, "141975", 0, 1, "108424"], [40643, "{\"hairfront\": \"92724\", \"hairlate\": \"129175\"}", 2, 406, null, "142062", 0, 1, "108424"], [40645, "{\"hairfront\": \"92724\", \"hairlate\": \"127798\"}", 2, 406, null, "142021", 0, 1, "108424"], [40646, "{\"hairfront\": \"92724\", \"hairlate\": \"127797\"}", 2, 406, null, "141977", 0, 1, "108424"], [40647, "{\"hairfront\": \"92724\", \"hairlate\": \"127717\"}", 2, 406, null, "141946", 0, 1, "108424"], [40648, "{\"hairfront\": \"92724\", \"hairlate\": \"126325\"}", 2, 406, null, "142065", 0, 1, "108424"], [40649, "{\"hairfront\": \"92724\", \"hairlate\": \"99383\"}", 2, 406, null, "123386", 0, 1, "108424"], [40650, "{\"hairfront\": \"126007\", \"hairlate\": \"126004\"}", 2, 406, null, "141948", 0, 1, "108424"], [40651, "{\"hairfront\": \"92724\", \"hairlate\": \"125688\"}", 2, 406, null, "142105", 0, 1, "108424"], [40652, "{\"hairfront\": \"92724\", \"hairlate\": \"111578\"}", 2, 406, null, "123396", 0, 1, "108424"], [40653, "{\"hairfront\": \"92724\", \"hairlate\": \"121523\"}", 2, 406, null, "123384", 0, 1, "108424"], [40654, "{\"hairfront\": \"92724\", \"hairlate\": \"121522\"}", 2, 406, null, "123387", 0, 1, "108424"], [40655, "{\"hairfront\": \"121122\", \"hairlate\": \"121121\"}", 2, 406, null, "123365", 0, 1, "108424"], [40656, "{\"hairfront\": \"119681\", \"hairlate\": \"119680\"}", 2, 406, null, "142097", 0, 1, "108424"], [40657, "{\"hairfront\": \"119495\", \"hairlate\": \"119494\"}", 2, 406, null, "141942", 0, 1, "108424"], [40658, "{\"hairfront\": \"92724\", \"hairlate\": \"117115\"}", 2, 406, null, "123363", 0, 1, "108424"], [40660, "{\"hairfront\": \"92724\", \"hairlate\": \"134564\"}", 2, 406, null, "135065", 0, 1, "108424"], [40661, "{\"hairfront\": \"92724\", \"hairlate\": \"131748\"}", 2, 406, null, "135064", 0, 1, "108424"]];
class DressDataConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$a);
    }
}

var foreign25 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    DressDataConfig: DressDataConfig
});

const EXCELDATA$9 = [["id", "name", "effect", "minValue", "maxValue", "defaultValue", "changeValue", "type"], ["", "", "", "", "", "", "", ""], [10100, "眼间距", "EyesGap", 0, 1, 0.5, 0.05, 203], [10101, "眼睛上下移动", "EyesHeight", 0, 1, 0.5, 0.05, 203], [10102, "眼睛角度", "EyesRotation", 0, 1, 0.5, 0.05, 203], [10103, "眼睛长度", "EyesLength", 0, 1, 0.5, 0.05, 203], [10104, "眼睛宽度", "EyesWidth", 0, 1, 0.5, 0.05, 203], [10105, "眼角左右移动", "CanthusHorizontalPosition", 0, 1, 0.5, 0.05, 203], [10106, "眼角上下移动", "CanthusVerticalPosition", 0, 1, 0.5, 0.05, 203], [10200, "眉间距", "BrowGap", 0, 1, 0.5, 0.05, 204], [10201, "眉毛上下移动", "BrowHeight", 0, 1, 0.5, 0.05, 204], [10202, "眉毛角度", "BrowRotation", 0, 1, 0.5, 0.05, 204], [10300, "鼻梁高度", "NoseHeight", 0, 1, 0.5, 0.05, 202], [10301, "鼻子长度", "NoseProtrusion", 0, 1, 0.5, 0.05, 202], [10302, "鼻子上下移动", "NoseVerticalPosition", 0, 1, 0.5, 0.05, 202], [10400, "嘴巴上下移动", "MouthHeight", 0, 1, 0.5, 0.05, 205], [10401, "嘴巴宽度", "MouthWidth", 0, 1, 0.5, 0.05, 205], [10402, "嘴巴弧度", "MouthShape", 0, 1, 0.5, 0.05, 205]];
class DressProgressConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$9);
    }
}

var foreign26 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    DressProgressConfig: DressProgressConfig
});

const EXCELDATA$8 = [["Id", "Name", "Value", "Value_Ch", "Value_Cht", "Value_J", "Value_K"], ["", "Key|ReadByName", "MainLanguage", "ChildLanguage", "ChildLanguage", "ChildLanguage", "ChildLanguage"], [1, "Text_AfterStrengthening", "After\nStrengthening", "强化后", "强化後", "強化されます", "강화된 후"], [2, "Text_StarRating", "{0} Star Rating", "{0}星级", "{0}星級", "{0}つ星", "{0}성급"], [3, "Text_NeedToReachLevel", "Need To Reach Level {0}", "需要等级达到{0}级", "需要等級達到{0}級", "要求レベルが{0}レベルに達する", "레벨 {0} 레벨 달성 필요"], [4, "Text_IncreaseBloodVolumeByTimes", "Blood Volume Increase\n{0} Times", "血量提升{0}倍", "血量提升{0}倍", "血液量が{0}倍に上昇", "혈액량 {0}배 증가"], [5, "Text_AttackPowerIncreasedByTimes", "Attack Power Enhancement\n{0} Times", "攻击力提升{0}倍", "攻擊力提升{0}倍", "攻撃力{0}倍アップ", "공격력 {0}배 증가"], [6, "Text_StrengthenSoulBones", "Strengthen Soul Bones", "强化魂骨", "强化魂骨", "魂の骨を強化する", "혼골 강화"], [7, "Text_NeedToConsume", "Need To Consume", "需要消耗", "需要消耗", "消費する必要がある", "필요 소비"], [8, "Text_Diamonds", "Diamonds", "钻石", "鑽石", "ダイヤモンド", "다이아몬드"], [9, "Text_GoldCoins", "Gold Coins", "金币", "金幣", "金貨", "금화"], [10, "Text_StrengtheningConditions", "Strengthening Conditions", "强化条件", "强化條件", "強化条件", "조건을 강화하다"], [11, "Text_EnhanceTheProbabilityOfSuccess", "Strengthening Success\nProbability: {0}%", "强化成功\n概率：{0}%", "强化成功\n概率：{0}%", "強化に成功\n確率：{0}%", "강화 성공\n확률: {0}%"], [12, "Text_IncreaseProbability", "Increase\nProbability", "提升概率", "提升概率", "かくりつを上げる", "확률 증가"], [13, "Text_StartStrengthening", "Start\nStrengthening", "开始强化", "開始强化", "強化を開始", "강화 시작"], [14, "Text_TeamCoin", "Team Coin", "派队币", "派隊幣", "派隊貨幣", "파티 머니"], [15, "Text_Buy", "Buy", "购买", "購買", "購入する", "구매"], [16, "Text_Or", "Or", "或", "或", "または", "또는"], [17, "Text_UpProbabiliotyConetntTextBlock_0", "Consume {0} Diamonds\nEnhancement Probability\nIncreased To {1}%", "消耗{0}钻石\n强化概率提升到{1}%", "消耗{0}鑽石\n强化概率提升到{1}%", "{0}ダイヤモンド消費\n強化確率が{1}%に向上", "{0} 다이아 소모\n강화 확률을 {1}%까지 증가"], [18, "Text_UpProbabiliotyConetntTextBlock_1", "Consume {0} Team Coins\nEnhance The Probability\nTo {1}%", "消耗{0}派队币\n强化概率提升到{1}%", "消耗{0}派隊幣\n强化概率提升到{1}%", "{0}パーティー貨幣を消費する\n強化確率が{1}%にアップ", "{0} 파티 코인 소모\n강화 확률을 {1}%까지 증가"], [19, "Text_UsingDiamonds", "Using Diamonds", "使用钻石", "使用鑽石", "ダイヤモンドを使う", "다이아몬드 사용"], [20, "Text_UseTeamCoins", "Use Team Coins", "使用派队币", "使用派隊幣", "ディスパッチ通貨の使用", "파티 코인 사용"], [21, "Text_DiamondShortage", "Diamond Shortage", "钻石不足", "鑽石不足", "ダイヤ不足", "다이아 부족"], [22, "Text_InsufficientGoldCoins", "Insufficient Gold Coins", "金币不足", "金幣不足", "金貨不足", "금화 부족"], [23, "Text_SuccessfullyObtainedDiamonds", "Successfully Obtained Diamonds+{0}", "成功获得钻石+{0}", "成功獲得鑽石+{0}", "ダイヤモンド+{0}の獲得に成功", "다이아 +{0} 획득 성공"], [24, "Text_GetDiamondsForFree", "Get {0} Diamonds For Free", "免费领取{0}颗钻石", "免費領取{0}顆鑽石", "{0}個のダイヤモンドを無料で受け取ります", "{0}개 다이아 무료 수령"], [25, "Text_Cancel", "Cancel", "取消", "取消", "キャンセル", "취소"], [26, "Text_FreeToReceive", "Free To Receive", "免费领取", "免費領取", "無料で受け取る", "무료 수령"], [27, "Text_FullLevel", "Full Level", "已满级", "已滿級", "フルレベル", "만급"], [28, "Text_HeadSoulBone", "Head Soul Bone", "头部魂骨", "頭部魂骨", "頭部魂骨", "머리의 혼골"], [29, "Text_ExternalSoulBone", "External Soul Bone", "外附魂骨", "外附魂骨", "外付魂骨", "외부혼골"], [30, "Text_TorsoSoulBone", "Torso Soul Bone", "躯干魂骨", "軀幹魂骨", "体幹魂骨", "몸통 혼골"], [31, "Text_WaistSoulBone", "Waist Soul Bone", "腰部魂骨", "腰部魂骨", "腰部魂骨", "허리의 혼골"], [32, "Text_ArmSoulBone", "Arm Soul Bone", "手臂魂骨", "手臂魂骨", "腕の魂骨", "팔의 혼골"], [33, "Text_LegSoulBone", "Leg Soul Bone", "腿部魂骨", "腿部魂骨", "足の魂骨", "다리 혼골"], [34, "Text_FootSoulBone", "Foot Soul Bone", "脚部魂骨", "脚部魂骨", "足魂骨", "발의 혼골"], [35, "Text_GoTo", "Go To", "前往", null, null, null], [36, "Text_GodLevelHuntingGround", "God Level Hunting Ground", "神级狩猎场", null, null, null], [37, "Text_NoviceVillage", "Novice Village", "新手村", null, null, null], [38, "Text_IntermediateHuntingGround", "Intermediate Hunting Ground", "中级狩猎场", null, null, null], [39, "Text_AdvancedHuntingGround", "Advanced Hunting Ground", "高级狩猎场", null, null, null], [40, "Text_HuntAndKill", "Hunt And Kill", "猎杀", null, null, null], [41, "Text_100000YearSoulBeast", "100000 Year Soul Beast", "10万年魂兽", null, null, null], [42, "Text_LoadingMapResourcesPleaseBePatient", "Loading Map Resources, Please Be Patient", "正在加载地图资源，请耐心等待", null, null, null], [43, "Text_AdvertisingRewards", "Advertising Rewards", "广告奖励", null, null, null], [44, "Text_WatchTheAdvertisementTimesGetItForFree", "Watch The Advertisement {0} Times\nGet It For Free", "观看{0}次广告\n免费获得", null, null, null], [45, "Text_TakeYouToGetItForFree", "Take You To Get It For Free", "带你去免费获得", null, null, null], [46, "Text_GetItForFree", "Get It For Free", "免费获得", null, null, null], [47, "Text_GetGoldCoinsForFree", "Get {0} Gold Coins For Free", "免费领取{0}金币", null, null, null], [48, "Text_SuccessfullyObtainedCoins", "Successfully Obtained Coins", "成功获得金币", null, null, null], [49, "Text_GetFreeDiamonds", "Get {0} Free Diamonds", "免费领取{0}颗钻石", null, null, null], [50, "Text_FreeLevelUpgradeByLevel", "Free Level Upgrade By {0} Level", "等级免费提升{0}级", null, null, null], [51, "Text_FreeUpgrade", "Free Upgrade", "免费提升", null, null, null], [52, "Text_FreeDayReward", "Free {0}st Day Reward", "免费领取第{0}天奖励", null, null, null], [53, "Text_FailedPleaseTryAgain", "{0} Failed, Please Try Again", "{0}失败，请重试", null, null, null], [54, "Text_DontClickTooFastItWillGetStuck", "Don't Click Too Fast, It Will Get Stuck", "别点太快、会卡哦", null, null, null], [55, "Text_DirectlyUpgradeTheLevel", "Directly Upgrade The Level", "直接提升等级", null, null, null], [56, "Text_Determine", "Determine", "确定", null, null, null], [57, "Text_UpgradeLevel", "Upgrade Level", "升级等级", null, null, null], [58, "Text_UseDiamondsUpgradeLevel", "Use {0} Diamonds\nUpgrade Level", "使用5个钻石\n提升等级", null, null, null], [59, "Text_PleaseEnterTheRedemptionCode", "Please Enter The Redemption Code", "请输入兑换码", null, null, null], [60, "Text_Exchange", "Exchange", "兑换", null, null, null], [61, "Text_PleaseEnterTheRedemptionCodeProvidedByTheAuthorCanBeRedeemedForRewards", "Please Enter The Redemption Code Provided By The Author\nCan Be Redeemed For Rewards", "请输入作者提供的兑换码\n即可兑换奖励", null, null, null], [62, "Text_GiftPackExchange", "Gift Pack Exchange", "礼包兑换", null, null, null], [63, "Text_AlreadyredeemedNoNeedToRedeemAgain", "Already Redeemed, No Need To Redeem Again", "已兑换，无需重复兑换", null, null, null], [64, "Text_CollectionFailed", "Collection Failed", "领取失败", null, null, null], [65, "Text_GiftPackRedemptionCodeError", "Gift Pack Redemption Code Error", "礼包兑换码错误", null, null, null], [66, "Text_Grade", "Grade", "等级", null, null, null], [67, "Text_ExchangeSuccessful", "Exchange Successful", "兑换成功", null, null, null], [68, "Text_CoolForSeconds", "Cool For {0} Seconds", "冷却{0}秒", null, null, null], [69, "Text_SoldouttodayPleaseReplaceWithOtherProductsToPurchase", "Sold Out Today, Please Replace With Other Products To Purchase", "今日已售空,请更换其他商品购买", null, null, null], [70, "Text_Rechargediamonds", "Recharge Diamonds", "充值钻石", null, null, null], [71, "Text_Nopurchaserestrictions", "No purchase Restrictions", "不限购", null, null, null], [72, "Text_Soldouttoday", "Sold Out Today", "今日已售空", null, null, null], [73, "Text_Limitedtoonepurchaseperday", "Limited To One Purchase Per Day", "每天限购一次", null, null, null], [74, "Text_BagTabTextBlock", "Martial Soul|Soul Master|Soul Bone|Soul Beast", "武魂|魂师|魂骨|魂兽", null, null, null], [75, "Text_AutomaticAttackFist_Male", "Automatic Attack Fist (Male)", "自动攻击拳(男)", null, null, null], [76, "Text_AutomaticAttackFist_Female", "Automatic Attack Fist (Female)", "自动攻击拳(女)", null, null, null], [77, "Text_MechSlashWindSlash_Male", "Mech Slash Wind Slash (Male)", "机甲斩狂风斩(男)", null, null, null], [78, "Text_MechSlashWindSlash_Female", "Mech Slash Wind Slash (Female)", "机甲斩狂风斩(女)", null, null, null], [79, "Text_GoldenHoopRod_Powder", "Golden Hoop Rod (Powder)", "金箍棒(粉)", null, null, null], [80, "Text_GoldenHoopRod_Purple", "Golden Hoop Rod (Purple)", "金箍棒(紫)", null, null, null], [81, "Text_HaotianHammer", "Haotian Hammer", "昊天锤", null, null, null], [82, "Text_TridentOfTheSeaGod", "Trident Of The Sea God", "海神三叉戟", null, null, null], [83, "Text_CyberComesWithALongSpear", "Cyber Comes With A Long Spear", "赛博自来也长枪", null, null, null], [84, "Text_SeaKingDoubleHeadedKnife", "Sea King Double Headed Knife", "海王双头刀", null, null, null], [85, "Text_CaptainAmericaSHammer", "Captain America'S Hammer", "美国队长神锤", null, null, null], [86, "Text_VenomAxe", "Venom Axe", "毒液斧头", null, null, null], [87, "Text_MiebaAxe", "Mieba Axe", "灭霸斧", null, null, null], [88, "Text_NarutoWieldingASword", "Naruto Wielding A Sword", "鸣人手里剑", null, null, null], [89, "Text_FutureWarriorGoldenSword", "Future Warrior Golden Sword", "未来战士黄金剑", null, null, null], [90, "Text_ForestSentinelMagicBattle", "Forest Sentinel Magic Battle", "森林哨兵魔法仗", null, null, null], [91, "Text_Pistol_SonicSpecific", "Pistol (Sonic Specific)", "手枪\n索尼克专用", null, null, null], [92, "Text_SignalGun_SpecificallyForPinkHairMonster", "Signal Gun\nSpecifically For Pink Hair Monster", "信号枪\n粉毛怪专用", null, null, null], [93, "Text_Knife_ForTsunade", "Knife (For Tsunade)", "刀(纲手专用)", null, null, null], [94, "Text_Knife_ExclusiveToLilock", "Knife (Exclusive To Lilock)", "刀(李洛克专用)", null, null, null], [95, "Text_Sickle_ForDriedPersimmonGhostShark", "Sickle\nFor Dried Persimmon Ghost Shark", "镰刀\n干柿鬼鲛专用", null, null, null], [96, "Text_Sickle_ExclusivelyForCyberGirls", "Sickle\nExclusively For Cyber Girls", "镰刀\n赛博女孩专用", null, null, null], [97, "Text_IceSword_ExclusivelyForBlackWidow", "Ice Sword\nExclusively For Black Widow", "冰封剑\n黑寡妇专用", null, null, null], [98, "Text_MonsterClawKnife", "Monster Claw Knife", "怪物爪刀", null, null, null], [99, "Text_Machete_KakashiSpecific", "Machete (Kakashi Specific)", "大砍刀\n卡卡西专用", null, null, null], [100, "Text_TheStaff_ExclusivelyForUchihaItachi", "The Staff\nExclusively For Uchiha Itachi", "法杖\n宇智波鼬专用", null, null, null], [101, "Text_WaterGun", "Water Gun", "水枪", null, null, null], [102, "Text_IceDiamondSword", "Ice Diamond Sword", "冰钻剑", null, null, null], [103, "Text_ButcherSKnife", "Butcher 'S Knife", "屠刀", null, null, null], [104, "Text_BlueStaff_LokiSpecific", "Blue Staff (Loki Specific)", "蓝色法杖\n洛基专用", null, null, null], [105, "Text_Sickle_SunGodExclusive", "Sickle (Sun God Exclusive)", "镰刀\n太阳神专用", null, null, null], [106, "Text_DemonSword_ExclusivelyForUchihaMadara", "Demon Sword\nExclusively For Uchiha Madara", "恶魔剑\n宇智波斑爷专用", null, null, null], [107, "Text_Sword_SpecificallyDesignedForNanorobots", "Sword\nSpecifically Designed For Nanorobots", "剑(纳米机器人专用)", null, null, null], [108, "Text_Sickle_DeadpoolSpecific", "Sickle (Deadpool Specific)", "镰刀(死侍专用)", null, null, null], [109, "Text_FluorescentSword_ForVolcanoSentinelsOnly", "Fluorescent Sword\nFor Volcano Sentinels Only", "荧光剑\n火山哨兵专用", null, null, null], [110, "Text_FanaticalSword_ExclusiveToCrimsonWitch", "Fanatical Sword\nExclusive To Crimson Witch", "狂热剑\n绯红女巫专用", null, null, null], [111, "Text_InflatableHammer", "Inflatable Hammer", "充气锤子", null, null, null], [112, "Text_WoodenStaff_VenomSpiderManSpecific", "Wooden Staff\nVenom Spider Man Specific", "木法杖\n毒液蜘蛛侠专用", null, null, null], [113, "Text_GuaziShield", "Guazi Shield", "瓜子盾", null, null, null], [114, "Text_Shield_HulkExclusive", "Shield (Hulk Exclusive)", "盾(浩克专用)", null, null, null], [115, "Text_UltimateIceRingSword", "Ultimate Ice Ring Sword", "终极冰环剑", null, null, null], [116, "Text_BulletSprayGun_ForHinata", "Bullet Spray Gun (For Hinata)", "散弹喷枪\n雏田专用", null, null, null], [117, "Text_Firearms_LuffySpecific", "Firearms (Luffy Specific)", "火枪(路飞专用)", null, null, null], [118, "Text_PurpleLightSword_SpecialForSasuke", "Purple Light Sword\nSpecial For Sasuke", "紫光剑\n佐助专用", null, null, null], [119, "Text_LaserGun_TenjinSpecific", "Laser Gun (Tenjin Specific)", "激光枪(天神专用)", null, null, null], [120, "Text_Sword_ExclusivelyForWolverine", "Sword\nExclusively For Wolverine", "剑(金刚狼专用)", null, null, null], [121, "Text_LaserGun_IronManSpecific", "Laser Gun (Iron Man Specific)", "激光枪(钢铁侠专用)", null, null, null], [122, "Text_CoupleMechSet_Female", "Couple Mech Set (Female)", "情侣机甲套装(女)", null, null, null], [123, "Text_CoupleMechSet_Male", "Couple Mech Set (Male)", "情侣机甲套装(男)", null, null, null], [124, "Text_XiaoWuJie", "Xiao Wu Jie", "小舞姐", null, null, null], [125, "Text_BlueSilverEmperor", "Blue Silver Emperor", "蓝银皇", null, null, null], [126, "Text_UniformGirl", "Uniform Girl", "制服女孩", null, null, null], [127, "Text_TangSan", "Tang San", "唐三", null, null, null], [128, "Text_TheGoldenPrince", "The Golden Prince", "黄金王子", null, null, null], [129, "Text_JkGirl", "Jk Girl", "JK女孩", null, null, null], [130, "Text_XiaolanLong", "Xiaolan Long", "小蓝龙", null, null, null], [131, "Text_LittleGreenDragon", "Little Green Dragon", "小绿龙", null, null, null], [132, "Text_LittleBlackDragon", "Little Black Dragon", "小黑龙", null, null, null], [133, "Text_LittleOrangeDragon", "Little Orange Dragon", "小橘龙", null, null, null], [134, "Text_GodLevelDemonKing", "God Level Demon King", "神级魔王", null, null, null], [135, "Text_TheFourthHokage", "The Fourth Hokage", "四代火影", null, null, null], [136, "Text_MedusaQueen", "Medusa Queen", "美杜莎女王", null, null, null], [137, "Text_FoxEaredGirl", "Fox Eared Girl", "狐耳少女", null, null, null], [138, "Text_EvilMessenger", "Evil Messenger", "邪恶使者", null, null, null], [139, "Text_LongCoatForWomen", "Long Coat For Women", "长款大衣女", null, null, null], [140, "Text_Spongebob", "Spongebob", "海绵宝宝", null, null, null], [141, "Text_IronMan", "Iron Man", "钢铁侠", null, null, null], [142, "Text_Thanos", "Thanos", "灭霸", null, null, null], [143, "Text_HedgehogBoy", "Hedgehog Boy", "刺猬小子", null, null, null], [144, "Text_EvilMessenger1", "Evil Messenger", "邪恶使者", null, null, null], [145, "Text_BlueClothedMan", "Blue Clothed Man", "蓝衣男", null, null, null], [146, "Text_BlackClothedMan", "Black Clothed Man", "黑衣男", null, null, null], [147, "Text_Doom", "Doom", "毁灭战士", null, null, null], [148, "Text_ThunderGod", "Thunder God", "雷神", null, null, null], [149, "Text_BlackWidow", "Black Widow", "黑寡妇", null, null, null], [150, "Text_CuteGirl", "Cute Girl", "可爱女", null, null, null], [151, "Text_MarukoHeadGirl", "Maruko Head Girl", "丸子头女", null, null, null], [152, "Text_WesternGoddess", "Western Goddess", "西方神女", null, null, null], [153, "Text_BlackDressGirl", "Black Dress Girl", "黑裙少女", null, null, null], [154, "Text_ShortHairedWoman", "Short Haired Woman", "短发女", null, null, null], [155, "Text_QipaoWomen", "Qipao Women", "旗袍女", null, null, null], [156, "Text_ClothedMan", "Clothed Man", "披风男", null, null, null], [157, "Text_LongHairedWoman", "Long Haired Woman", "长发女", null, null, null], [158, "Text_DoublePonytailGirl1", "Double Ponytail Girl", "双马尾女", null, null, null], [159, "Text_WomenWithLongHairAndShortSkirts", "Women With Long Hair\nShort Skirts", "长发短裙女", null, null, null], [160, "Text_DoublePonytailGirl2", "Double Ponytail Girl", "双马尾女", null, null, null], [161, "Text_DoublePonytailGirl3", "Double Ponytail Girl", "双马尾女", null, null, null], [162, "Text_PleatedSkirtGirl", "Pleated Skirt Girl", "百褶裙女孩", null, null, null], [163, "Text_ShortHairedFashionableWomen", "Short Haired\nFashionable Women", "短发时尚女", null, null, null], [164, "Text_LongPonytailGirl", "Long Ponytail Girl", "长马尾女孩", null, null, null], [165, "Text_LongEaredGirl", "Long Eared Girl", "长耳女", null, null, null], [166, "Text_LongHairedWomanInWindbreaker", "Long Haired\nWoman In Windbreaker", "风衣长发女", null, null, null], [167, "Text_DevilHornGirl", "Devil Horn Girl", "恶魔角女", null, null, null], [168, "Text_KimonoGirl", "Kimono Girl", "和服女", null, null, null], [169, "Text_HairpinGirl", "Hairpin Girl", "发卡女", null, null, null], [170, "Text_MaidSuitForWomen", "Maid Suit For Women", "女仆套装女", null, null, null], [171, "Text_HatGirl", "Hat Girl", "帽子女", null, null, null], [172, "Text_MagicalGirl", "Magical Girl", "魔法女孩", null, null, null], [173, "Text_LongSkirtWomen", "Long Skirt Women", "长裙女", null, null, null], [174, "Text_KillerWoman", "Killer Woman", "杀手女", null, null, null], [175, "Text_WitchDoctor", "Witch Doctor", "巫医", null, null, null], [176, "Text_LongLeggedMom", "Long Legged Mom", "长腿妈妈", null, null, null], [177, "Text_XuanKui", "Xuan Kui", "玄魁", null, null, null], [178, "Text_EvilWitch", "Evil Witch", "邪恶女巫", null, null, null], [179, "Text_LittleUglyGirl", "Little Ugly Girl", "小丑女", null, null, null], [180, "Text_HalloweenGirl", "Halloween Girl", "万圣节女", null, null, null], [181, "Text_Butcher", "Butcher", "屠夫", null, null, null], [182, "Text_DeanOfMolewoodCollege", "Dean Of Molewood College", "魔莱坞学院院长", null, null, null], [183, "Text_MistyGhostShadow", "Misty Ghost Shadow", "迷雾鬼影", null, null, null], [184, "Text_BlueHairedMonster", "Blue Haired Monster", "蓝毛怪", null, null, null], [185, "Text_DogHeadedCaterpillar", "Dog Headed Caterpillar", "狗头毛毛虫", null, null, null], [186, "Text_PinkHairedMonster", "Pink Haired Monster", "粉毛怪", null, null, null], [187, "Text_SonicAdvance", "Sonic Advance", "索尼克", null, null, null], [188, "Text_RainbowFriends", "Rainbow Friends", "Rainbow friends", null, null, null], [189, "Text_SeaGod", "Sea God", "海神", null, null, null], [190, "Text_DevilSWings", "Devil'S Wings", "恶魔翅膀", null, null, null], [191, "Text_DevilSCorner", "Devil'S Corner", "恶魔角", null, null, null], [192, "Text_DevilSTail", "Devil'S Tail", "恶魔尾巴", null, null, null], [193, "Text_DemonSkull", "Demon Skull", "恶魔头骨", null, null, null], [194, "Text_DevilSThreeHeadedDog", "Devil'S Three Headed Dog", "恶魔三头犬", null, null, null], [195, "Text_AngelWings", "Angel Wings", "天使翅膀", null, null, null], [196, "Text_AngelSpider", "Angel Spider", "天使蜘蛛", null, null, null], [197, "Text_FoxSTail", "Fox'S Tail", "狐狸尾巴", null, null, null], [198, "Text_FoxEars", "Fox Ears", "狐狸耳朵", null, null, null], [199, "Text_WavingScarf", "Waving Scarf", "挥动的围巾", null, null, null], [200, "Text_LightningWings", "Lightning Wings", "闪电翅膀", null, null, null], [201, "Text_Glasses", "Glasses", "眼镜", null, null, null], [202, "Text_PhotographyRobot", "Photography Robot", "拍照机器人", null, null, null], [203, "Text_Veil", "Veil", "面纱", null, null, null], [204, "Text_RocketLauncher", "Rocket Launcher", "火箭发射器", null, null, null], [205, "Text_SniperGunBody", "Sniper Gun Body", "狙击枪枪身", null, null, null], [206, "Text_CuteWesternDragon", "Cute Western Dragon", "可爱西方龙", null, null, null], [207, "Text_Loong", "Loong", "龙", null, null, null], [208, "Text_EmperorDragon", "Emperor Dragon", "帝王龙", null, null, null], [209, "Text_HellDragon", "Hell Dragon", "地狱龙", null, null, null], [210, "Text_CandyDragon", "Candy Dragon", "糖果龙", null, null, null], [211, "Text_WuShilong", "Wu Shilong", "武士龙", null, null, null], [212, "Text_CrystalWings", "Crystal Wings", "水晶翅膀", null, null, null], [213, "Text_KillingWings", "Killing Wings", "杀戮翅膀", null, null, null], [214, "Text_HellSWings", "Hell'S Wings", "地狱翅膀", null, null, null], [215, "Text_FairyWings", "Fairy Wings", "精灵翅膀", null, null, null], [216, "Text_FlameWings", "Flame Wings", "火焰翅膀", null, null, null], [217, "Text_BigSword", "Big Sword", "大剑", null, null, null], [218, "Text_AngelSword", "Angel Sword", "天使剑", null, null, null], [219, "Text_Snaker", "Snaker", "蛇女", null, null, null], [220, "Text_ASpider", "A Spider", "络新妇", null, null, null], [221, "Text_BigSpider", "Big Spider", "大蜘蛛", null, null, null], [222, "Text_SmallFaceHuggingPurpleSpider", "Small Face Hugging\nPurple Spider", "小型抱脸紫蜘蛛", null, null, null], [223, "Text_SmallBlushingSpider", "Small Blushing Spider", "小型抱脸红蜘蛛", null, null, null], [224, "Text_SmallFaceHuggingGreenSpider", "Small Face Hugging\nGreen Spider", "小型抱脸绿蜘蛛", null, null, null], [225, "Text_SmallFaceHuggingBlueSpider", "Small Face Hugging\nBlue Spider", "小型抱脸蓝蜘蛛", null, null, null], [226, "Text_Xiaolong", "Xiaolong", "小龙", null, null, null], [227, "Text_CartoonWoodenDragon", "Cartoon Wooden Dragon", "卡通木龙", null, null, null], [228, "Text_RedDragon", "Red Dragon", "红龙", null, null, null], [229, "Text_Huanglong", "Huanglong", "黄龙", null, null, null], [230, "Text_BlueDragon", "Blue Dragon", "蓝龙", null, null, null], [231, "Text_TheGodOfOtter", "The God Of Otter", "奥特之神", null, null, null], [232, "Text_SuccessfullyActivatedAutomaticAttack", "Successfully Activated Automatic Attack", "成功开启自动攻击", null, null, null], [233, "Text_FailedToObtainAutomaticAttackSoul", "Failed To Obtain Automatic Attack Soul", "未获得自动攻击武魂", null, null, null], [234, "Text_SuccessfullyDisabledAutomaticAttack", "Successfully Disabled Automatic Attack", "成功关闭自动攻击", null, null, null], [235, "Text_Obtained", "Obtained", "已获得", null, null, null], [236, "Text_CongratulationsOnObtaining", "Congratulations On Obtaining", "恭喜获得", null, null, null], [237, "Text_SoulPower", "Soul Power", "魂力", null, null, null], [238, "Text_MartialSoul", "Martial Soul", "武魂", null, null, null], [239, "Text_SoulMaster", "Soul Master", "魂师", null, null, null], [240, "Text_SoulBone", "Soul Bone", "魂骨", null, null, null], [241, "Text_Ayakashi", "Ayakashi", "魂兽", null, null, null], [242, "Text_Ordinary", "Ordinary", "普通", null, null, null], [243, "Text_Rare", "Rare", "稀有", null, null, null], [244, "Text_Epic", "Epic", "史诗", null, null, null], [245, "Text_Legend", "Legend", "传说", null, null, null], [246, "Text_KillingGodDomain", "Killing God Domain", "杀神领域", null, null, null], [247, "Text_DoushenContinent_MySoulRingUnlimitedUpgrade", "Doushen Continent (My Soul Ring Unlimited Upgrade)", "斗神大陆(我的魂环无限升级)", null, null, null], [248, "Text_InTheEquipment", "In The Equipment", "装备中", null, null, null], [249, "Text_InUse", "In Use", "使用中", null, null, null], [250, "Text_FollowIn", "Follow In", "跟随中", null, null, null], [251, "Text_BeginnerGiftPackAcquisition", "Beginner Gift Pack Acquisition", "新手礼包获取", null, null, null], [252, "Text_GoldCoinLotteryToObtain", "Gold Coin Lottery To Obtain", "金币抽奖获取", null, null, null], [253, "Text_PleaseCompleteTheBeginnerGuideFirst", "Please Complete The Beginner Guide First", "请先完成新手引导", null, null, null], [254, "Text_ObtainByWatchingAdvertisements", "Obtain By Watching Advertisements", "看广告获得", null, null, null], [255, "Text_OldPlayersReturningToObtain", "Old Players Returning To Obtain", "老玩家回归获得", null, null, null], [256, "Text_NotObtained", "Not Obtained", "未获得", null, null, null], [257, "Text_StartGuiding", "Start Guiding", "开始引导", null, null, null], [258, "Text_PurchaseSuccessful", "Purchase Successful", "购买成功", null, null, null], [259, "Text_EquipmentSuccessful", "Equipment Successful", "装备成功", null, null, null], [260, "Text_WearingSuccessfully", "Wearing Successfully", "穿戴成功", null, null, null], [261, "Text_FollowSuccess", "Follow Success", "跟随成功", null, null, null], [262, "Text_TheFunctionIsNotYetOpen_PleaseStayTuned", "The Function Is Not Yet Open, Please Stay Tuned", "功能暂未开放，敬请期待", null, null, null], [263, "Text_RecoveryWasSuccessful", "Recovery Was Successful", "恢复成功", null, null, null], [264, "Text_RemovedSuccessfully", "Removed Successfully", "卸下成功", null, null, null], [265, "Text_SuccessfullyDiscardedPet", "Successfully Discarded Pet", "丢掉宠物成功", null, null, null], [266, "Text_RestoreInitialImage", "Restore Initial Image", "恢复初始形象", null, null, null], [267, "Text_RemoveAllEquipment", "Remove All Equipment", "卸下所有装备", null, null, null], [268, "Text_CancelPetFollowing", "Cancel Pet Following", "取消宠物跟随", null, null, null], [269, "Text_ClickToUse", "Click To Use", "点击使用", null, null, null], [270, "Text_AlreadyOwned", "Already Owned", "已拥有", null, null, null], [271, "Text_ClickToGet", "Click To Get", "点击获得", null, null, null], [272, "Text_NotOwned", "Not Owned", "未拥有", null, null, null], [273, "Text_Use", "Use", "使用", null, null, null], [274, "Text_PurchaseCoins", "Purchase Coins", "金币购买", null, null, null], [275, "Text_Introduce", "Introduce", "介绍", null, null, null], [276, "Text_IncreasedHealthAndAttackPowerAfterUse", "Increased Health And Attack Power After Use", "使用后血量和攻击力提升", null, null, null], [277, "Text_Times", "Times", "倍", null, null, null], [278, "Text_ConsumingDiamondsToPurchase", "Consuming {0} Diamonds\nTo Purchase", "消耗{0}钻石购买", null, null, null], [279, "Text_ConsumeTeamCoinsToPurchase", "Consume {0} Team Coins\nTo Purchase", "消耗{0}派队币购买", null, null, null], [280, "Text_YujianFlyingMall", "Yujian Flying Mall", "御剑飞行商城", null, null, null], [281, "Text_RoyalSwordFlyingBonus", "Royal Sword Flying Bonus", "御剑飞行总加成", null, null, null], [282, "Text_MitsurugiSmartKiller", "Mitsurugi - Smart Killer", "御剑_智弑者", null, null, null], [283, "Text_MitsurugiGoldenSword", "Mitsurugi - Golden Sword", "御剑_黄金剑", null, null, null], [284, "Text_MitsurugiIceDiamondSword", "Mitsurugi - Ice Diamond Sword", "御剑_冰钻剑", null, null, null], [285, "Text_MitsurugiDemonSword", "Mitsurugi - Demon Sword", "御剑_恶魔剑", null, null, null], [286, "Text_MitsurugiBrokenCrazySword", "Mitsurugi - Broken Crazy Sword", "御剑_断狂剑", null, null, null], [287, "Text_MitsurugiAerocraft", "Mitsurugi - Aerocraft", "御剑_飞行器", null, null, null], [288, "Text_MitsurugiImperialSwordDart", "Mitsurugi - Imperial Sword Dart", "御剑_飞镖", null, null, null], [289, "Text_MitsurugiSmallBicycle", "Mitsurugi - Small Bicycle", "御剑_小单车", null, null, null], [290, "Text_MitsurugiAnywayHeShandsome", "Mitsurugi - Anyway, He's Handsome", "御剑_反正很帅", null, null, null], [291, "Text_MitsurugiSkate", "Mitsurugi - Skate", "御剑_滑板", null, null, null], [292, "Text_MitsurugiLittleGreenDragon", "Mitsurugi - Little Green Dragon", "御剑_小绿龙", null, null, null], [293, "Text_MitsurugiXiaolanLong", "Mitsurugi - Xiaolan Long", "御剑_小蓝龙", null, null, null], [294, "Text_MitsurugiLittleFireDragon", "Mitsurugi - Little Fire Dragon", "御剑_小火龙", null, null, null], [295, "Text_YujianFlyingHasBeenSuccessfullyPurchased", "Yujian Flying Has Been Successfully Purchased", "御剑飞行购买成功", null, null, null], [296, "Text_EquippingSwordFlying", "Equipping Sword Flying", "装备御剑飞行", null, null, null], [297, "Text_FlyingWithoutEquippedSword", "Flying Without Equipped Sword", "未装备御剑飞行", null, null, null], [298, "Text_RemoveTheImperialSwordAndFly", "Remove The Imperial Sword And Fly", "卸下御剑飞行", null, null, null], [299, "Text_IncreaseBloodVolumeByTimes_Nowrap", "Blood Volume Increase {0} Times", "血量提升{0}倍", "血量提升{0}倍", "血液量が{0}倍に上昇", "혈액량 {0}배 증가"], [300, "Text_AttackPowerIncreasedByTimes_Nowrap", "Attack Power Enhancement {0} Times", "攻击力提升{0}倍", "攻擊力提升{0}倍", "攻撃力{0}倍アップ", "공격력 {0}배 증가"], [301, "Text_ClickAnywhereToContinue", "Click anywhere to continue", "点击任意位置继续……", null, null, null], [302, "Text_Guid_0", "Welcome to\n{0}\nLet me introduce you to all the button operations.", "欢迎来到\n{0}\n我来给你介绍一下所有按钮操作吧。", null, null, null], [303, "Text_Guid_1", "Move button, click and drag to control the character's movement.", "移动按钮，点击后拖拽可以控制角色移动。", null, null, null], [304, "Text_Guid_2", "View movement area, click and drag here to control the screen view.", "视角移动区域，点击拖动这里可以控制屏幕视角。", null, null, null], [305, "Text_Guid_3", "Jump button, continuous clicking will perform a two-stage jump, which will consume {0}", "跳跃按钮，连续点击会进行二段跳，会消耗{0}", null, null, null], [306, "Text_Guid_4", "Sword flying, can fly", "御剑飞行，可以飞行", null, null, null], [307, "Text_Guid_5", "Attack button, continuous clicking can release cool combos, which will consume {0}", "攻击按钮，连续点击可释放炫酷的连招，会消耗{0}", null, null, null], [308, "Text_Guid_6", "Automatic attack button, enable automatic attack", "自动攻击按钮、开启自动攻击", null, null, null], [309, "Text_Guid_7", "Activate the soul ring button to display the soul ring.", "开启魂环按钮，可展示魂环。", null, null, null], [310, "Text_Guid_8", "Background music button, open to change background music and switch background music on/off.", "背景音乐按钮，打开可更换背景音乐以及开关背景音乐。", null, null, null], [311, "Text_Guid_9", "Click the 'I'm Home' button, and when you're stuck in the map and unable to move, you can try clicking on 'I'll Try'.", "点我回家按钮，当你被卡在地图中无法移动时可以点击我试试哦。", null, null, null], [312, "Text_Guid_10", "The backpack button, the fastest way to level up is to search for martial souls, professions, soul bones, and pets in the map.", "背包按钮，提升等级最快的办法就是在地图中寻找武魂、职业、魂骨、宠物。", null, null, null], [313, "Text_Guid_11", "The leaderboard button can be opened to view the in room leaderboard and world leaderboard. Come and check your ranking in Douluo Continent.", "排行榜按钮，打开可以进行查看房间内排行榜和世界排行榜，快来查看你在斗罗大陆的排名是多少吧。", null, null, null], [314, "Text_Guid_12", "Gold coin lottery button, where you can redeem diamonds, levels, and skins for coins that you can't spend all", "金币抽奖按钮，花不完的金币在这里可以兑现 钻石、等级、皮肤哦", null, null, null], [315, "Text_Guid_13", "The online reward button allows you to receive a large amount of coins and experience to quickly upgrade your level. You can quickly upgrade to a banned Douluo within 10 minutes of being online.", "在线奖励按钮，可以领取大量金币和经验来快速提升等级，在线10分钟即可快速升级到封号斗罗。", null, null, null], [316, "Text_Guid_14", "Task button, completing tasks can earn a large amount of coins and experience to quickly level up, and you can immediately upgrade to god level.", "任务按钮，完成任务可以领取大量金币和经验来快速提升等级，马上就可升级到神级。", null, null, null], [317, "Text_Guid_15", "Check in button, log in to the game, check in to receive a large amount of diamonds and levels.", "签到按钮，登录游戏签到领取大量钻石和等级。", null, null, null], [318, "Text_Guid_16", "There are many benefits, the fastest way to level up, unlimited upgrades, and become a shortcut to becoming a god level.", "福利多多，最快提升等级的办法，无限升级，成为神级的捷径。", null, null, null], [319, "Text_Guid_17", "Sword flying, equipped to fly.", "御剑飞行，装备后可飞行。", null, null, null], [320, "Text_Guid_18", "Recharge diamonds to quickly increase the lifespan of soul rings and reach up to one million grade levels.", "充值钻石，可充值大量钻石快速提升魂环年限、最快达到百万年级别。", null, null, null], [321, "Text_Guid_19", "Redeem rewards, receive redemption codes to redeem rewards, diamonds+levels.", "兑换奖励，领取兑换码兑换奖励，钻石+等级。", null, null, null], [322, "Text_Guid_20", "Newbie Gift Pack Button, Get Newbie Gift Pack", "新手礼包按钮，领取新手大礼包", null, null, null], [323, "Text_Guid_21", "Forge soul ring button, can forge soul rings, making your soul rings reach 100000 levels, and the tenth ring can reach millions of levels", "锻造魂环按钮，可以锻造魂环，使自己的魂环都达到十万年级别，第十环可以达到百万年级别", null, null, null], [324, "Text_Guid_22", "The hang up button automatically upgrades without the need for operation when turned on.", "挂机按钮，开启后、无需操作自动升级。", null, null, null], [325, "Text_Guid_23", "Activate defense and avoid being accidentally injured by teammates.", "开启防御，不会被队友误伤。", null, null, null], [326, "Text_Guid_24", "Character attributes, health, {0}, attack power will increase with level.", "角色属性，血量、{0}，攻击力会随等级提升而提升。", null, null, null], [327, "Text_Guid_25", "Quickly increase coins to directly purchase martial souls and soul bones.", "可快速增加金币直接购买武魂、魂骨。", null, null, null], [328, "Text_Guid_26", "Can quickly increase diamond forged soul rings.", "可快速增加钻石锻造魂环。", null, null, null], [329, "Text_Guid_27", "Introduction completed, welcome to leave a message in the gaming community. Follow my signpost and I'll take you to find the martial soul and soul bone.", "介绍完毕，欢迎游戏圈留言。跟我路标走，带你去找武魂、魂骨。", null, null, null], [330, "Text_Guid_28", "Forge Soul Bones", "锻造魂骨", null, null, null], [331, "Text_ArrivedNearTheTargetPoint", "Arrived Near The Target Point", "已到达目标点附近", null, null, null], [332, "Text_ReturnToNewbieVillage", "Return To Newbie Village", "返回新手村", null, null, null], [333, "Text_LetSOfficiallyOpenYourCopy", "Let'S Officially Open Your Copy", "正式开启你的副本吧", null, null, null], [334, "Text_Beat", "Beat", "击败", null, null, null], [335, "Text_SwordFlying", "Sword", "御剑飞行", null, null, null], [336, "Text_AutomaticAttack", "Automatic", "自动攻击", null, null, null], [337, "Text_BackgroundMusic", "Music", "背景音乐", null, null, null], [338, "Text_ClickOnMeToGoHome", "Home", "点我回家", null, null, null], [339, "Text_Knapsack", "Knapsack", "背包", null, null, null], [340, "Text_RankingList", "Ranking", "排行榜", null, null, null], [341, "Text_GoldCoinLottery", "Lottery", "金币抽奖", null, null, null], [342, "Text_CollectingTasks", "Tasks", "领取任务", null, null, null], [343, "Text_SignIn", "Sign In", "签到", null, null, null], [344, "Text_RechargeDiamonds", "Diamonds", "充值钻石", null, null, null], [345, "Text_ExchangeRewards", "Exchange", "兑换奖励", null, null, null], [346, "Text_ForgeSoulRings", "Rings", "锻造魂环", null, null, null], [347, "Text_NoviceGiftPack", "Gift Pack", "新手礼包", null, null, null], [348, "Text_ForgeSoulBones", "Bones", "锻造魂骨", null, null, null], [349, "Text_DoYouWantToActivateTeammateAccidentalInjury", "Do You Want To Activate Teammate Accidental Injury", "是否开启队友误伤", null, null, null], [350, "Text_EnableAfk", "Enable Afk", "开启挂机", null, null, null], [351, "Text_DefenseHasBeenTurnedOff", "Defense Has Been Turned Off", "已关闭防御", null, null, null], [352, "Text_DefenseActivated", "Defense Activated", "已开启防御", null, null, null], [353, "Text_PutItAway", "Off", "收起", null, null, null], [354, "Text_Open", "On", "开启", null, null, null], [355, "Text_Defeated", "Defeated", "击败了", null, null, null], [356, "Text_YouHaveBeenDefeatedBy", "You Have Been Defeated By {0}", "你已被 {0} 击败", null, null, null], [357, "Text_DefeatToCompleteRevenge", "Defeat {0} To Complete Revenge", "击败 {0} 完成复仇", null, null, null], [358, "Text_Grade_MaoHao", "Grade:", "等级：", null, null, null], [359, "Text_Experience", "Experience:", "经验：", null, null, null], [360, "Text_Aggressivity", "Aggressivity:", "攻击力：", null, null, null], [361, "Text_LevelUnlock", "Level Unlock", "级解锁", null, null, null], [362, "Text_BloodVolume", "Blood Volume:", "血量：", null, null, null], [363, "Text_Insufficient", "Insufficient", "不足", null, null, null], [364, "Text_UpgradeToIncreaseReserves", "Upgrade To Increase {0} Reserves", "升级增加{0}储量", null, null, null], [365, "Text_DoubleTheAttackPowerWithinSeconds", "Seconds", "秒内攻击力翻倍", null, null, null], [366, "Text_LevelOpen", "Level Open", "级开启", null, null, null], [367, "Text_TheSkillsAreNotReadyYet", "The Skills Are Not Ready Yet", "技能还没准备好", null, null, null], [368, "Text_UpgradeSuccessLevel", "Upgrade Success Level+{0}", "升级成功 等级+{0}", null, null, null], [369, "Text_ContinuouslyEliminatePeople_2", "Continuously Eliminate 2 People!", "连续消灭2人！势不可当！", null, null, null], [370, "Text_ContinuouslyEliminatePeople_3", "Continuously Eliminate 3 People!", "连续消灭3人！勇冠三军！", null, null, null], [371, "Text_ContinuouslyEliminatePeople_4", "Continuously Eliminate 4 People!", "连续消灭4人！无人能敌！", null, null, null], [372, "Text_ContinuouslyEliminatePeople_5", "Continuously Eliminate 5 People!", "连续消灭5人！横扫千军！", null, null, null], [373, "Text_ContinuouslyEliminatePeople_6", "Continuously Eliminate 6 People!", "连续消灭6人！接近神了！", null, null, null], [374, "Text_ContinuouslyEliminatePeople_7", "Continuously Eliminate {0} People!", "连续消灭{0}人！超越神了！", null, null, null], [375, "Text_FreeUpgrade_Simoleness", "Upgrade", "免费升级", null, null, null], [376, "Text_HangingOnTheHook", "Hanging On The Hook", "挂机中", null, null, null], [377, "Text_CancelAfk", "Cancel Afk", "取消挂机", null, null, null], [378, "Text_Level", "Level", "级", null, null, null], [379, "Text_BlackMonkeyKingLevel", "Black Monkey King", "黑悟空关卡", null, null, null], [380, "Text_MillionYearSoulBeast", "Million Year Soul Beast", "百万年魂兽", null, null, null], [381, "Text_ReturningToTheCity", "Returning To The City", "回城", null, null, null], [382, "Text_PleaseFirstRaiseTheLevelToLevel", "Please First Raise The Level To {0} Level", "请先将等级提升至{0}级", null, null, null], [383, "Text_EmptyPrizeHaha", "Empty Prize - Haha", "空奖-哈哈", null, null, null], [384, "Text_WinningProbability", "Winning Probability", "中奖概率", null, null, null], [385, "Text_DrawTimes", "Draw {0} Times", "抽{0}次", null, null, null], [386, "Text_ConsumeCoins", "Consume {0} Coins", "消耗{0}金币", null, null, null], [387, "Text_ConsumeDispatchCoins", "Consume {0} Dispatch Coins", "消耗{0}派队币", null, null, null], [388, "Text_FreeLotteryDraw", "Free\nLottery Draw", "免费抽奖", null, null, null], [389, "Text_LotteryResults", "Lottery Results", "抽奖结果", null, null, null], [390, "Text_CongratulationsOnWinningThePrize", "Congratulations On Winning The Prize", "恭喜中奖", null, null, null], [391, "Text_ObtainDiamonds", "Obtain {0} Diamonds", "获得{0}钻石", null, null, null], [392, "Text_OpenTheBackpackForUse", "Open The Backpack For Use", "打开背包使用", null, null, null], [393, "Text_FirstDay", "First Day", "第一天", null, null, null], [394, "Text_TheSecondDay", "The Second Day", "第二天", null, null, null], [395, "Text_ReturnGiftPackageForVeteranPlayers", "Return Gift Package For Veteran Players", "老玩家回归礼包", null, null, null], [396, "Text_OnlineTimeIsLessThanMinutes", "Online Time Is Less Than {0} Minutes", "在线时间不足{0}分钟", null, null, null], [397, "Text_ReceivedSuccessfully", "Received Successfully", "领取成功", null, null, null], [398, "Text_CannotBeClaimedRepeatedly", "Cannot Be Claimed Repeatedly", "不能重复领取", null, null, null], [399, "Text_PleaseComeBackToCollectOnTheThDay", "Please Come Back To Collect On The {0} Th Day", "请第{0}天再来领取", null, null, null], [400, "Text_OpenTheBackpackAndUseItAfterReceivingIt", "Open The Backpack And Use It After Receiving It", "领取后打开背包使用", null, null, null], [401, "Text_OnlineMinutes", "Online {0} Minutes ({1}/{2})", "在线{0}分钟({1}/{2})", null, null, null], [402, "Text_ReceivedAlready", "Received Already", "已领取", null, null, null], [403, "Text_OnlineRewards", "Online Rewards", "在线奖励", null, null, null], [404, "Text_CanBeClaimed", "Can Be Claimed", "可领取", null, null, null], [405, "Text_InsufficientOnlineTime", "Insufficient Online Time", "在线时间不足", null, null, null], [406, "Text_ClaimRewards", "Claim Rewards", "领取奖励", null, null, null], [407, "Text_ReceivedReward", "Received Reward", "已领取奖励", null, null, null], [408, "Text_RewardCoins", "Reward {0} Coins", "奖励{0}金币", null, null, null], [409, "Text_RewardExperience", "Reward {0} Experience", "奖励{0}经验", null, null, null], [410, "Text_RewardDiamonds", "Reward {0} Diamonds", "奖励{0}钻石", null, null, null], [411, "Text_Lv", "Lv.", "等级Lv.", null, null, null], [412, "Text_IncreaseCoins", "Increase {0} Coins", "增加{0}金币", null, null, null], [413, "Text_IncreaseExperience", "Increase {0} Experience", "增加{0}经验", null, null, null], [414, "Text_GetCoins", "Get {0} Coins", "获得{0}金币", null, null, null], [415, "Text_UpgradeLevelTo", "Upgrade Level To", "等级提升至", null, null, null], [416, "Text_CurrentlyUnavailable", "0", "暂无", null, null, null], [417, "Text_Ranking", "Ranking", "排名", null, null, null], [418, "Text_Name", "Name", "名字", null, null, null], [419, "Text_Height", "Height", "高度", null, null, null], [420, "Text_Kill", "Kill", "击杀", null, null, null], [421, "Text_LevelMode", "Level Mode", "等级模式", null, null, null], [422, "Text_HeightMode", "Height Mode", "高度模式", null, null, null], [423, "Text_KillMode", "Kill Mode", "击杀模式", null, null, null], [424, "Text_SwitchRoomLeaderboard", "Switch Room Leaderboard", "切换房间排行榜", null, null, null], [425, "Text_SwitchToTheFullServerRankingList", "Switch To The Full Server Ranking List", "切换全服排行榜", null, null, null], [426, "Text_TheRankingListInYourRoom", "The Ranking List In Your Room\nClicking The Ranking Mode Button \nOn The Right Will Refresh The Ranking Mode", "你所在房间内的排行榜。\n点击右侧排行模式按钮会刷新排行榜模式。", null, null, null], [427, "Text_RoomRanking", "Room Ranking", "房间排行榜", null, null, null], [428, "Text_TopInTheEntireServer", "Top {0} In The Entire Server\nRank Lv. Rank Ranking", "全服前{0}名\n段位 Lv.等级排行。", null, null, null], [429, "Text_FullServerRankingList", "Full Server Ranking List", "全服排行榜", null, null, null], [430, "Text_DonTClickTooQuicklyWithYourLittleHand", "Don'T Click Too Quickly With Your Little Hand~", "小手别点太快哟~", null, null, null], [431, "Text_Decade", "Decade", "十年", null, null, null], [432, "Text_AHundredYears", "A Hundred Years", "百年", null, null, null], [433, "Text_Millennium", "Millennium", "千年", null, null, null], [434, "Text_TenThousandYears", "Ten Thousand Years", "万年", null, null, null], [435, "Text_100000Years", "100000 Years", "十万年", null, null, null], [436, "Text_MillionsOfYears", "Millions Of Years", "百万年", null, null, null], [437, "Text_Eternity", "Eternity", "万万年", null, null, null], [438, "Text_BillionsOfYears", "Billions Of Years", "亿万年", null, null, null], [439, "Text_1", "1", "一", null, null, null], [440, "Text_2", "2", "二", null, null, null], [441, "Text_3", "3", "三", null, null, null], [442, "Text_4", "4", "四", null, null, null], [443, "Text_5", "5", "五", null, null, null], [444, "Text_6", "6", "六", null, null, null], [445, "Text_7", "7", "七", null, null, null], [446, "Text_8", "8", "八", null, null, null], [447, "Text_9", "9", "九", null, null, null], [448, "Text_10", "10", "十", null, null, null], [449, "Text_NotYetObtainedSoulRing", "Not Yet Obtained Soul Ring", "还未获取魂环", null, null, null], [450, "Text_ContactTheAuthorForRepair", "Contact The Author For Repair", "联系作者修复", null, null, null], [451, "Text_InsufficientLevel", "Insufficient Level", "等级不足", null, null, null], [452, "Text_SuccessfullyForged", "Successfully Forged", "锻造成功", null, null, null], [453, "Text_TotalBonus", "Total Bonus: Health Increased By {0} Times, Attack Power Increased By {1} Times", "总加成：血量提升{0}倍，攻击力提升{1}倍", null, null, null], [454, "Text_CongratulationsOnCompletingTheBeginnerSGuide", "Congratulations On Completing The Beginner'S Guide", "恭喜你完成新手引导", null, null, null], [455, "Text_RewardTheFirstSoulRingWithATenYearSoulRing", "Reward The First Soul Ring With A Ten-Year Soul Ring", "奖励第一魂环 十年魂环", null, null, null], [456, "Text_TheSoulRingSoulRing", "The {0} Soul Ring\n{1} Soul Ring", "第{0}魂环\n{1}魂环 ", null, null, null], [457, "Text_UnlockableAtLevel", "Unlockable At Level {0}", "{0}级可解锁", null, null, null], [458, "Text_Cost", "Cost", "需要消耗", null, null, null], [459, "Text_SoulRing", "Soul Ring", "魂环", null, null, null], [460, "Text_Unlockable", "Unlockable", "可解锁", null, null, null], [461, "Text_SupplementarySignature", "Supplementary Signature", "补签", null, null, null], [462, "Text_Unclaimed", "Unclaimed", "待领取", null, null, null], [463, "Text_DiamondGrade", "Diamond+{0} Grade+{1}", "钻石 +{0} 等级 +{1}", null, null, null], [464, "Text_Day", "Day {0}", "第{0}天", null, null, null], [465, "Text_DayCheckIn", "{0} Day Check-In", "{0}日签到", null, null, null], [466, "Text_SignedIn", "Signed In", "已签到", null, null, null], [467, "Text_SuccessfullyObtainedTodaySReward", "Successfully Obtained Today'S Reward", "成功获得今日奖励", null, null, null], [468, "Text_TheCheckInDateHasNotYetArrived", "The Check-In Date Has Not Yet Arrived", "还未到签到日期", null, null, null], [469, "Text_DailyLoginToGames", "Daily Login To Games（{0}/{1}）", "每日登陆游戏（{0}/{1}）", null, null, null], [470, "Text_DailyOnlineMinutes", "Daily Online {2} Minutes（{0}/{1}）", "每日在线时长{2}分钟（{0}/{1}）", null, null, null], [471, "Text_DefeatMedusaEveryDay", "Defeat {2} Medusa Every Day（{0}/{1}）", "每日击败{2}只美杜莎（{0}/{1}）", null, null, null], [472, "Text_DefeatSpiderSpiritsDaily", "Defeat {2} Spider Spirits Daily（{0}/{1}）", "每日击败{2}只蜘蛛精（{0}/{1}）", null, null, null], [473, "Text_DefeatDazzlingSpidersDaily", "Defeat {2} Dazzling Spiders Daily（{0}/{1}）", "每日击败{2}只炫彩蜘蛛（{0}/{1}）", null, null, null], [474, "Text_DefeatDragonBeastsDaily", "Defeat {2} Dragon Beasts Daily（{0}/{1}）", "每日击败{2}只龙兽（{0}/{1}）", null, null, null], [475, "Text_DefeatZombiesDaily", "Defeat {2} Zombies Daily（{0}/{1}）", "每日击败{2}只丧尸（{0}/{1}）", null, null, null], [476, "Text_DefeatMutatedPuppetsDaily", "Defeat {2} Mutated Puppets Daily（{0}/{1}）", "每日击败{2}只变异布偶（{0}/{1}）", null, null, null], [477, "Text_DefeatPlayersDaily", "Defeat {2} Players Daily（{0}/{1}）", "每日击败{2}名玩家（{0}/{1}）", null, null, null], [478, "Text_DailyLevelIncreaseByLevels", "Daily Level Increase By {2} Levels（{0}/{1}）", "每日等级提升{2}级（{0}/{1}）", null, null, null], [479, "Text_PickUpTreasuresEveryDay", "Pick Up {2} Treasures Every Day（{0}/{1}）", "每日捡到{2}个秘宝（{0}/{1}）", null, null, null], [480, "Text_WatchAdsPerDay", "Watch {2} Ads Per Day（{0}/{1}）", "每日观看{2}次广告（{0}/{1}）", null, null, null], [481, "Text_LoginDaysAWeek", "Login {2} Days A Week（{0}/{1}）", "每周登录{2}天（{0}/{1}）", null, null, null], [482, "Text_UpTo30MinutesAndDaysPerWeek", "Up To 30 Minutes And {2} Days Per Week（{0}/{1}）", "每周时长达到30分钟{2}天（{0}/{1}）", null, null, null], [483, "Text_DefeatMedusaEveryWeek", "Defeat {2} Medusa Every Week（{0}/{1}）", "每周击败{2}只美杜莎（{0}/{1}）", null, null, null], [484, "Text_DefeatSpiderSpiritsEveryWeek", "Defeat {2} Spider Spirits Every Week（{0}/{1}）", "每周击败{2}只蜘蛛精（{0}/{1}）", null, null, null], [485, "Text_DefeatDazzlingSpidersEveryWeek", "Defeat {2} Dazzling Spiders Every Week（{0}/{1}）", "每周击败{2}只炫彩蜘蛛（{0}/{1}）", null, null, null], [486, "Text_DefeatDragonBeastsEveryWeek", "Defeat {2} Dragon Beasts Every Week（{0}/{1}）", "每周击败{2}只龙兽（{0}/{1}）", null, null, null], [487, "Text_DefeatZombiesEveryWeek", "Defeat {2} Zombies Every Week（{0}/{1}）", "每周击败{2}只丧尸（{0}/{1}）", null, null, null], [488, "Text_DefeatMutatedPuppetsEveryWeek", "Defeat {2} Mutated Puppets Every Week（{0}/{1}）", "每周击败{2}只变异布偶（{0}/{1}）", null, null, null], [489, "Text_DefeatPlayersPerWeek", "Defeat {2} Players Per Week（{0}/{1}）", "每周击败{2}名玩家（{0}/{1}）", null, null, null], [490, "Text_UpgradeByLevelsPerWeek", "Upgrade By {2} Levels Per Week（{0}/{1}）", "每周等级提升{2}级（{0}/{1}）", null, null, null], [491, "Text_PickUpTreasuresEveryWeek", "Pick Up {2} Treasures Every Week（{0}/{1}）", "每周捡到{2}个秘宝（{0}/{1}）", null, null, null], [492, "Text_WatchAdsPerWeek", "Watch {2} Ads Per Week（{0}/{1}）", "每周观看{2}次广告（{0}/{1}）", null, null, null], [493, "Text_DailyTasks", "Daily Tasks", "每日任务", null, null, null], [494, "Text_AllTasksHaveBeenCompletedWaitingForRefresh", "All Tasks Have Been Completed, Waiting For Refresh", "任务已全部完成，等待刷新...", null, null, null], [495, "Text_WeeklyTasks", "Weekly Tasks", "每周任务", null, null, null], [496, "Text_RemainingHours", "Remaining: {0} Hours", "剩余：{0}小时", null, null, null], [497, "Text_RemainingDays", "Remaining: {0} Days", "剩余：{0}天", null, null, null], [498, "Text_HangInTheAir", "Hang In The Air", "未完成", null, null, null], [499, "Text_NotEquippedWithYetGoFind", "Not Equipped With {0} Yet, Go Find {1}", "还未装备{0},去寻找{1}", null, null, null], [500, "Text_WarcraftMedusa", "Warcraft Medusa", "魔兽美杜莎", null, null, null], [501, "Text_WarcraftColorfulSpider", "Warcraft Colorful Spider", "魔兽炫彩蜘蛛", null, null, null], [502, "Text_WarcraftSpiderSpirit", "Warcraft Spider Spirit", "魔兽蜘蛛精", null, null, null], [503, "Text_DragonSWarcraft", "Dragon'S Warcraft", "龙之魔兽", null, null, null], [504, "Text_Zombies", "Zombies", "丧尸", null, null, null], [505, "Text_MutatedPuppet", "Mutated Puppet", "变异布偶", null, null, null], [506, "Text_BlackWukong", "Black Wukong", "黑悟空", null, null, null], [507, "Text_MickeyMouse", "Mickey Mouse", "魔兽米老鼠", null, null, null], [508, "Text_LevelSoulMaster1", "{0} Level Soul Master", "{0}级 魂士", null, null, null], [509, "Text_LevelSoulMaster2", "{0} Level Soul Master", "{0}级 魂师", null, null, null], [510, "Text_LevelSoulMaster3", "{0} Level Soul Master", "{0}级 大魂师", null, null, null], [511, "Text_LevelSoulSovereign", "{0} Level Soul Sovereign", "{0}级 魂尊", null, null, null], [512, "Text_LevelSoulSect", "{0} Level Soul Sect", "{0}级 魂宗", null, null, null], [513, "Text_LevelSoulKing", "{0} Level Soul King", "{0}级 魂王", null, null, null], [514, "Text_LevelSoulEmperor", "{0} Level Soul Emperor", "{0}级 魂帝", null, null, null], [515, "Text_LevelSoulSaint", "{0} Level Soul Saint", "{0}级 魂圣", null, null, null], [516, "Text_LevelContra", "{0} Level Contra", "{0}级 魂斗罗", null, null, null], [517, "Text_LevelBannedDouluo", "{0} Level Banned Douluo", "{0}级 封号斗罗", null, null, null], [518, "Text_LevelPeakDouluo", "{0} Level Peak Douluo", "{0}级 巅峰斗罗", null, null, null], [519, "Text_LevelDemigod", "{0} Level Demigod", "{0}级 半神", null, null, null], [520, "Text_LevelDivineOfficer", "{0} Level Divine Officer", "{0}级 神官", null, null, null], [521, "Text_LevelTrueGodLevel", "{0} Level True God Level", "{0}级 真神级", null, null, null], [522, "Text_LevelSuperGodLevel", "{0} Level Super God Level", "{0}级 超神级", null, null, null], [523, "Text_LevelSuperGodPeak", "{0} Level Super God Peak", "{0}级 超神巅峰", null, null, null], [524, "Text_LevelDivineKing", "{0} Level Divine King", "{0}级 神王", null, null, null], [525, "Text_LevelEternalImmortalEmperor", "{0} Level Eternal Immortal Emperor", "{0}级 万古仙帝", null, null, null], [526, "Text_EternalImmortalEmperor", "Eternal Immortal Emperor", "万古仙帝", null, null, null], [527, "Text_MartialSoulMechSlashWindSlash_Male", "Martial Soul - Mech Slash Wind Slash (Male)", "武魂-机甲斩狂风斩(男)", null, null, null], [528, "Text_MartialSoulMechSlashWindSlash_Female", "Martial Soul - Mech Slash Wind Slash (Female)", "武魂-机甲斩狂风斩(女)", null, null, null], [529, "Text_GoldenHoopRodPowderUniformGirl", "Golden Hoop Rod (Powder)+Uniform Girl", "金箍棒(粉)+制服女孩", null, null, null], [530, "HaotianHammerTangSan_GoldenHoopRodPurpleBlueSilverEmperor", "Haotian Hammer+Tang San\nGolden Hoop Rod (Purple)+Blue Silver Emperor", "昊天锤+唐三\n金箍棒(紫)+蓝银皇", null, null, null], [531, "Text_TheGoldenPrinceJkGirl", "The Golden Prince+Jk Girl", "黄金王子+JK女孩", null, null, null], [532, "Text_XiaolanGreenBlackOrangeDragon", "Xiaolan Long+Little Green Dragon\nLittle Black Dragon+Little Orange Dragon", "小蓝龙+小绿龙\n小黑龙+小橘龙", null, null, null], [533, "Text_ProbabilityIncreaseSuccess", "Probability Increase Success", "概率提升成功", null, null, null], [534, "Text_SoulBoneStrengtheningSuccessful", "Soul Bone Strengthening Successful", "魂骨强化成功", null, null, null], [535, "Text_SoulBoneStrengtheningFailed", "Soul Bone Strengthening Failed", "魂骨强化失败", null, null, null], [536, "Text_ClaimLimitedSkin", "Claim Limited Skin", "领取限定皮肤", null, null, null], [537, "Text_ClaimAutomaticAttack", "Claim Automatic Attack", "领取自动攻击", null, null, null], [538, "Text_ObtainedOpenTheBackpackToUse", "Obtained, Open The Backpack To Use", "已获得，打开背包使用", null, null, null], [539, "Text_Music_1", "Open World", "开放世界", null, null, null], [540, "Text_Music_2", "Stay", "留下来", null, null, null], [541, "Text_Music_3", "Bad Guy", "坏人", null, null, null], [542, "Text_Music_4", "I Will Survive", "我会活下去", null, null, null], [543, "Text_Music_5", "Let Me Love You", "让我爱你", null, null, null], [544, "Text_Music_6", "Running Up That Hill", "跑上那座山", null, null, null], [545, "Text_Music_7", "Love To Hate Me", "爱恨我", null, null, null], [546, "Text_Music_8", "Tomboy", "假小子", null, null, null], [547, "Text_Music_9", "Shut Down", "关闭", null, null, null], [548, "Text_Music_10", "Celestial", "天空的", null, null, null], [549, "Text_Music_11", "As It Was", "事实上", null, null, null], [550, "Text_Music_12", "Good Morning", "早上好", null, null, null], [551, "Text_Music_13", "Alone", "独自一人", null, null, null], [552, "Text_Music_14", "Chanderiler", "钱德里勒", null, null, null], [553, "Text_Music_15", "Don'T Wanna Know", "不想知道", null, null, null], [554, "Text_Music_16", "Mood", "心情", null, null, null], [555, "Text_Music_17", "Moon", "金轮", null, null, null], [556, "Text_Music_18", "I Don'T Know What It'S Called", "不知道叫啥", null, null, null], [557, "Text_Music_19", "I Don'T Know What It'S Called", "也不知道叫啥", null, null, null], [558, "Text_RewardSoulBone", "Reward {0} Soul Bone", "奖励{0}魂骨碎片", null, null, null], [559, "Text_InsufficientSoulBoneFragments", "Insufficient Soul Bone Fragments", "魂骨碎片不足", null, null, null], [560, "Text_GetFreeBones", "Get {0} Free Bones", "免费领取{0}魂骨碎片", null, null, null], [561, "Text_SuccessfullyObtainedBones", "Successfully Obtained Bones+{0}", "成功获得魂骨碎片+{0}", null, null, null], [562, "Text_Upgrade", "Upgrade", "升级", null, null, null], [563, "Text_ForgeSoulRings_Button", "Forge Soul Rings", "锻造魂环", null, null, null], [564, "Text_LotsOfDiamonds", "Lots Of Diamonds", "领取大量钻石\n下次翻倍", null, null, null], [565, "Text_BillionsOfYears_10", "10 Billions Of Years", "十亿万年", null, null, null], [566, "Text_TensOfBillionsOfYears", "Tens Of Billions Of Years", "百亿万年", null, null, null], [567, "Text_HundredsOfBillionsOfYears", "Hundreds Of Billions Of Years", "千亿万年", null, null, null]];
class LanguageConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$8);
    }
    /**强化后*/
    get Text_AfterStrengthening() { return this.getElement(1); }
    ;
    /**{0}星级*/
    get Text_StarRating() { return this.getElement(2); }
    ;
    /**需要等级达到{0}级*/
    get Text_NeedToReachLevel() { return this.getElement(3); }
    ;
    /**血量提升{0}倍*/
    get Text_IncreaseBloodVolumeByTimes() { return this.getElement(4); }
    ;
    /**攻击力提升{0}倍*/
    get Text_AttackPowerIncreasedByTimes() { return this.getElement(5); }
    ;
    /**强化魂骨*/
    get Text_StrengthenSoulBones() { return this.getElement(6); }
    ;
    /**需要消耗*/
    get Text_NeedToConsume() { return this.getElement(7); }
    ;
    /**钻石*/
    get Text_Diamonds() { return this.getElement(8); }
    ;
    /**金币*/
    get Text_GoldCoins() { return this.getElement(9); }
    ;
    /**强化条件*/
    get Text_StrengtheningConditions() { return this.getElement(10); }
    ;
    /**强化成功
概率：{0}%*/
    get Text_EnhanceTheProbabilityOfSuccess() { return this.getElement(11); }
    ;
    /**提升概率*/
    get Text_IncreaseProbability() { return this.getElement(12); }
    ;
    /**开始强化*/
    get Text_StartStrengthening() { return this.getElement(13); }
    ;
    /**派队币*/
    get Text_TeamCoin() { return this.getElement(14); }
    ;
    /**购买*/
    get Text_Buy() { return this.getElement(15); }
    ;
    /**或*/
    get Text_Or() { return this.getElement(16); }
    ;
    /**消耗{0}钻石
强化概率提升到{1}%*/
    get Text_UpProbabiliotyConetntTextBlock_0() { return this.getElement(17); }
    ;
    /**消耗{0}派队币
强化概率提升到{1}%*/
    get Text_UpProbabiliotyConetntTextBlock_1() { return this.getElement(18); }
    ;
    /**使用钻石*/
    get Text_UsingDiamonds() { return this.getElement(19); }
    ;
    /**使用派队币*/
    get Text_UseTeamCoins() { return this.getElement(20); }
    ;
    /**钻石不足*/
    get Text_DiamondShortage() { return this.getElement(21); }
    ;
    /**金币不足*/
    get Text_InsufficientGoldCoins() { return this.getElement(22); }
    ;
    /**成功获得钻石+{0}*/
    get Text_SuccessfullyObtainedDiamonds() { return this.getElement(23); }
    ;
    /**免费领取{0}颗钻石*/
    get Text_GetDiamondsForFree() { return this.getElement(24); }
    ;
    /**取消*/
    get Text_Cancel() { return this.getElement(25); }
    ;
    /**免费领取*/
    get Text_FreeToReceive() { return this.getElement(26); }
    ;
    /**已满级*/
    get Text_FullLevel() { return this.getElement(27); }
    ;
    /**头部魂骨*/
    get Text_HeadSoulBone() { return this.getElement(28); }
    ;
    /**外附魂骨*/
    get Text_ExternalSoulBone() { return this.getElement(29); }
    ;
    /**躯干魂骨*/
    get Text_TorsoSoulBone() { return this.getElement(30); }
    ;
    /**腰部魂骨*/
    get Text_WaistSoulBone() { return this.getElement(31); }
    ;
    /**手臂魂骨*/
    get Text_ArmSoulBone() { return this.getElement(32); }
    ;
    /**腿部魂骨*/
    get Text_LegSoulBone() { return this.getElement(33); }
    ;
    /**脚部魂骨*/
    get Text_FootSoulBone() { return this.getElement(34); }
    ;
    /**前往*/
    get Text_GoTo() { return this.getElement(35); }
    ;
    /**神级狩猎场*/
    get Text_GodLevelHuntingGround() { return this.getElement(36); }
    ;
    /**新手村*/
    get Text_NoviceVillage() { return this.getElement(37); }
    ;
    /**中级狩猎场*/
    get Text_IntermediateHuntingGround() { return this.getElement(38); }
    ;
    /**高级狩猎场*/
    get Text_AdvancedHuntingGround() { return this.getElement(39); }
    ;
    /**猎杀*/
    get Text_HuntAndKill() { return this.getElement(40); }
    ;
    /**10万年魂兽*/
    get Text_100000YearSoulBeast() { return this.getElement(41); }
    ;
    /**正在加载地图资源，请耐心等待*/
    get Text_LoadingMapResourcesPleaseBePatient() { return this.getElement(42); }
    ;
    /**广告奖励*/
    get Text_AdvertisingRewards() { return this.getElement(43); }
    ;
    /**观看{0}次广告
免费获得*/
    get Text_WatchTheAdvertisementTimesGetItForFree() { return this.getElement(44); }
    ;
    /**带你去免费获得*/
    get Text_TakeYouToGetItForFree() { return this.getElement(45); }
    ;
    /**免费获得*/
    get Text_GetItForFree() { return this.getElement(46); }
    ;
    /**免费领取{0}金币*/
    get Text_GetGoldCoinsForFree() { return this.getElement(47); }
    ;
    /**成功获得金币*/
    get Text_SuccessfullyObtainedCoins() { return this.getElement(48); }
    ;
    /**免费领取{0}颗钻石*/
    get Text_GetFreeDiamonds() { return this.getElement(49); }
    ;
    /**等级免费提升{0}级*/
    get Text_FreeLevelUpgradeByLevel() { return this.getElement(50); }
    ;
    /**免费提升*/
    get Text_FreeUpgrade() { return this.getElement(51); }
    ;
    /**免费领取第{0}天奖励*/
    get Text_FreeDayReward() { return this.getElement(52); }
    ;
    /**{0}失败，请重试*/
    get Text_FailedPleaseTryAgain() { return this.getElement(53); }
    ;
    /**别点太快、会卡哦*/
    get Text_DontClickTooFastItWillGetStuck() { return this.getElement(54); }
    ;
    /**直接提升等级*/
    get Text_DirectlyUpgradeTheLevel() { return this.getElement(55); }
    ;
    /**确定*/
    get Text_Determine() { return this.getElement(56); }
    ;
    /**升级等级*/
    get Text_UpgradeLevel() { return this.getElement(57); }
    ;
    /**使用5个钻石
提升等级*/
    get Text_UseDiamondsUpgradeLevel() { return this.getElement(58); }
    ;
    /**请输入兑换码*/
    get Text_PleaseEnterTheRedemptionCode() { return this.getElement(59); }
    ;
    /**兑换*/
    get Text_Exchange() { return this.getElement(60); }
    ;
    /**请输入作者提供的兑换码
即可兑换奖励*/
    get Text_PleaseEnterTheRedemptionCodeProvidedByTheAuthorCanBeRedeemedForRewards() { return this.getElement(61); }
    ;
    /**礼包兑换*/
    get Text_GiftPackExchange() { return this.getElement(62); }
    ;
    /**已兑换，无需重复兑换*/
    get Text_AlreadyredeemedNoNeedToRedeemAgain() { return this.getElement(63); }
    ;
    /**领取失败*/
    get Text_CollectionFailed() { return this.getElement(64); }
    ;
    /**礼包兑换码错误*/
    get Text_GiftPackRedemptionCodeError() { return this.getElement(65); }
    ;
    /**等级*/
    get Text_Grade() { return this.getElement(66); }
    ;
    /**兑换成功*/
    get Text_ExchangeSuccessful() { return this.getElement(67); }
    ;
    /**冷却{0}秒*/
    get Text_CoolForSeconds() { return this.getElement(68); }
    ;
    /**今日已售空,请更换其他商品购买*/
    get Text_SoldouttodayPleaseReplaceWithOtherProductsToPurchase() { return this.getElement(69); }
    ;
    /**充值钻石*/
    get Text_Rechargediamonds() { return this.getElement(70); }
    ;
    /**不限购*/
    get Text_Nopurchaserestrictions() { return this.getElement(71); }
    ;
    /**今日已售空*/
    get Text_Soldouttoday() { return this.getElement(72); }
    ;
    /**每天限购一次*/
    get Text_Limitedtoonepurchaseperday() { return this.getElement(73); }
    ;
    /**武魂|魂师|魂骨|魂兽*/
    get Text_BagTabTextBlock() { return this.getElement(74); }
    ;
    /**自动攻击拳(男)*/
    get Text_AutomaticAttackFist_Male() { return this.getElement(75); }
    ;
    /**自动攻击拳(女)*/
    get Text_AutomaticAttackFist_Female() { return this.getElement(76); }
    ;
    /**机甲斩狂风斩(男)*/
    get Text_MechSlashWindSlash_Male() { return this.getElement(77); }
    ;
    /**机甲斩狂风斩(女)*/
    get Text_MechSlashWindSlash_Female() { return this.getElement(78); }
    ;
    /**金箍棒(粉)*/
    get Text_GoldenHoopRod_Powder() { return this.getElement(79); }
    ;
    /**金箍棒(紫)*/
    get Text_GoldenHoopRod_Purple() { return this.getElement(80); }
    ;
    /**昊天锤*/
    get Text_HaotianHammer() { return this.getElement(81); }
    ;
    /**海神三叉戟*/
    get Text_TridentOfTheSeaGod() { return this.getElement(82); }
    ;
    /**赛博自来也长枪*/
    get Text_CyberComesWithALongSpear() { return this.getElement(83); }
    ;
    /**海王双头刀*/
    get Text_SeaKingDoubleHeadedKnife() { return this.getElement(84); }
    ;
    /**美国队长神锤*/
    get Text_CaptainAmericaSHammer() { return this.getElement(85); }
    ;
    /**毒液斧头*/
    get Text_VenomAxe() { return this.getElement(86); }
    ;
    /**灭霸斧*/
    get Text_MiebaAxe() { return this.getElement(87); }
    ;
    /**鸣人手里剑*/
    get Text_NarutoWieldingASword() { return this.getElement(88); }
    ;
    /**未来战士黄金剑*/
    get Text_FutureWarriorGoldenSword() { return this.getElement(89); }
    ;
    /**森林哨兵魔法仗*/
    get Text_ForestSentinelMagicBattle() { return this.getElement(90); }
    ;
    /**手枪
索尼克专用*/
    get Text_Pistol_SonicSpecific() { return this.getElement(91); }
    ;
    /**信号枪
粉毛怪专用*/
    get Text_SignalGun_SpecificallyForPinkHairMonster() { return this.getElement(92); }
    ;
    /**刀(纲手专用)*/
    get Text_Knife_ForTsunade() { return this.getElement(93); }
    ;
    /**刀(李洛克专用)*/
    get Text_Knife_ExclusiveToLilock() { return this.getElement(94); }
    ;
    /**镰刀
干柿鬼鲛专用*/
    get Text_Sickle_ForDriedPersimmonGhostShark() { return this.getElement(95); }
    ;
    /**镰刀
赛博女孩专用*/
    get Text_Sickle_ExclusivelyForCyberGirls() { return this.getElement(96); }
    ;
    /**冰封剑
黑寡妇专用*/
    get Text_IceSword_ExclusivelyForBlackWidow() { return this.getElement(97); }
    ;
    /**怪物爪刀*/
    get Text_MonsterClawKnife() { return this.getElement(98); }
    ;
    /**大砍刀
卡卡西专用*/
    get Text_Machete_KakashiSpecific() { return this.getElement(99); }
    ;
    /**法杖
宇智波鼬专用*/
    get Text_TheStaff_ExclusivelyForUchihaItachi() { return this.getElement(100); }
    ;
    /**水枪*/
    get Text_WaterGun() { return this.getElement(101); }
    ;
    /**冰钻剑*/
    get Text_IceDiamondSword() { return this.getElement(102); }
    ;
    /**屠刀*/
    get Text_ButcherSKnife() { return this.getElement(103); }
    ;
    /**蓝色法杖
洛基专用*/
    get Text_BlueStaff_LokiSpecific() { return this.getElement(104); }
    ;
    /**镰刀
太阳神专用*/
    get Text_Sickle_SunGodExclusive() { return this.getElement(105); }
    ;
    /**恶魔剑
宇智波斑爷专用*/
    get Text_DemonSword_ExclusivelyForUchihaMadara() { return this.getElement(106); }
    ;
    /**剑(纳米机器人专用)*/
    get Text_Sword_SpecificallyDesignedForNanorobots() { return this.getElement(107); }
    ;
    /**镰刀(死侍专用)*/
    get Text_Sickle_DeadpoolSpecific() { return this.getElement(108); }
    ;
    /**荧光剑
火山哨兵专用*/
    get Text_FluorescentSword_ForVolcanoSentinelsOnly() { return this.getElement(109); }
    ;
    /**狂热剑
绯红女巫专用*/
    get Text_FanaticalSword_ExclusiveToCrimsonWitch() { return this.getElement(110); }
    ;
    /**充气锤子*/
    get Text_InflatableHammer() { return this.getElement(111); }
    ;
    /**木法杖
毒液蜘蛛侠专用*/
    get Text_WoodenStaff_VenomSpiderManSpecific() { return this.getElement(112); }
    ;
    /**瓜子盾*/
    get Text_GuaziShield() { return this.getElement(113); }
    ;
    /**盾(浩克专用)*/
    get Text_Shield_HulkExclusive() { return this.getElement(114); }
    ;
    /**终极冰环剑*/
    get Text_UltimateIceRingSword() { return this.getElement(115); }
    ;
    /**散弹喷枪
雏田专用*/
    get Text_BulletSprayGun_ForHinata() { return this.getElement(116); }
    ;
    /**火枪(路飞专用)*/
    get Text_Firearms_LuffySpecific() { return this.getElement(117); }
    ;
    /**紫光剑
佐助专用*/
    get Text_PurpleLightSword_SpecialForSasuke() { return this.getElement(118); }
    ;
    /**激光枪(天神专用)*/
    get Text_LaserGun_TenjinSpecific() { return this.getElement(119); }
    ;
    /**剑(金刚狼专用)*/
    get Text_Sword_ExclusivelyForWolverine() { return this.getElement(120); }
    ;
    /**激光枪(钢铁侠专用)*/
    get Text_LaserGun_IronManSpecific() { return this.getElement(121); }
    ;
    /**情侣机甲套装(女)*/
    get Text_CoupleMechSet_Female() { return this.getElement(122); }
    ;
    /**情侣机甲套装(男)*/
    get Text_CoupleMechSet_Male() { return this.getElement(123); }
    ;
    /**小舞姐*/
    get Text_XiaoWuJie() { return this.getElement(124); }
    ;
    /**蓝银皇*/
    get Text_BlueSilverEmperor() { return this.getElement(125); }
    ;
    /**制服女孩*/
    get Text_UniformGirl() { return this.getElement(126); }
    ;
    /**唐三*/
    get Text_TangSan() { return this.getElement(127); }
    ;
    /**黄金王子*/
    get Text_TheGoldenPrince() { return this.getElement(128); }
    ;
    /**JK女孩*/
    get Text_JkGirl() { return this.getElement(129); }
    ;
    /**小蓝龙*/
    get Text_XiaolanLong() { return this.getElement(130); }
    ;
    /**小绿龙*/
    get Text_LittleGreenDragon() { return this.getElement(131); }
    ;
    /**小黑龙*/
    get Text_LittleBlackDragon() { return this.getElement(132); }
    ;
    /**小橘龙*/
    get Text_LittleOrangeDragon() { return this.getElement(133); }
    ;
    /**神级魔王*/
    get Text_GodLevelDemonKing() { return this.getElement(134); }
    ;
    /**四代火影*/
    get Text_TheFourthHokage() { return this.getElement(135); }
    ;
    /**美杜莎女王*/
    get Text_MedusaQueen() { return this.getElement(136); }
    ;
    /**狐耳少女*/
    get Text_FoxEaredGirl() { return this.getElement(137); }
    ;
    /**邪恶使者*/
    get Text_EvilMessenger() { return this.getElement(138); }
    ;
    /**长款大衣女*/
    get Text_LongCoatForWomen() { return this.getElement(139); }
    ;
    /**海绵宝宝*/
    get Text_Spongebob() { return this.getElement(140); }
    ;
    /**钢铁侠*/
    get Text_IronMan() { return this.getElement(141); }
    ;
    /**灭霸*/
    get Text_Thanos() { return this.getElement(142); }
    ;
    /**刺猬小子*/
    get Text_HedgehogBoy() { return this.getElement(143); }
    ;
    /**邪恶使者*/
    get Text_EvilMessenger1() { return this.getElement(144); }
    ;
    /**蓝衣男*/
    get Text_BlueClothedMan() { return this.getElement(145); }
    ;
    /**黑衣男*/
    get Text_BlackClothedMan() { return this.getElement(146); }
    ;
    /**毁灭战士*/
    get Text_Doom() { return this.getElement(147); }
    ;
    /**雷神*/
    get Text_ThunderGod() { return this.getElement(148); }
    ;
    /**黑寡妇*/
    get Text_BlackWidow() { return this.getElement(149); }
    ;
    /**可爱女*/
    get Text_CuteGirl() { return this.getElement(150); }
    ;
    /**丸子头女*/
    get Text_MarukoHeadGirl() { return this.getElement(151); }
    ;
    /**西方神女*/
    get Text_WesternGoddess() { return this.getElement(152); }
    ;
    /**黑裙少女*/
    get Text_BlackDressGirl() { return this.getElement(153); }
    ;
    /**短发女*/
    get Text_ShortHairedWoman() { return this.getElement(154); }
    ;
    /**旗袍女*/
    get Text_QipaoWomen() { return this.getElement(155); }
    ;
    /**披风男*/
    get Text_ClothedMan() { return this.getElement(156); }
    ;
    /**长发女*/
    get Text_LongHairedWoman() { return this.getElement(157); }
    ;
    /**双马尾女*/
    get Text_DoublePonytailGirl1() { return this.getElement(158); }
    ;
    /**长发短裙女*/
    get Text_WomenWithLongHairAndShortSkirts() { return this.getElement(159); }
    ;
    /**双马尾女*/
    get Text_DoublePonytailGirl2() { return this.getElement(160); }
    ;
    /**双马尾女*/
    get Text_DoublePonytailGirl3() { return this.getElement(161); }
    ;
    /**百褶裙女孩*/
    get Text_PleatedSkirtGirl() { return this.getElement(162); }
    ;
    /**短发时尚女*/
    get Text_ShortHairedFashionableWomen() { return this.getElement(163); }
    ;
    /**长马尾女孩*/
    get Text_LongPonytailGirl() { return this.getElement(164); }
    ;
    /**长耳女*/
    get Text_LongEaredGirl() { return this.getElement(165); }
    ;
    /**风衣长发女*/
    get Text_LongHairedWomanInWindbreaker() { return this.getElement(166); }
    ;
    /**恶魔角女*/
    get Text_DevilHornGirl() { return this.getElement(167); }
    ;
    /**和服女*/
    get Text_KimonoGirl() { return this.getElement(168); }
    ;
    /**发卡女*/
    get Text_HairpinGirl() { return this.getElement(169); }
    ;
    /**女仆套装女*/
    get Text_MaidSuitForWomen() { return this.getElement(170); }
    ;
    /**帽子女*/
    get Text_HatGirl() { return this.getElement(171); }
    ;
    /**魔法女孩*/
    get Text_MagicalGirl() { return this.getElement(172); }
    ;
    /**长裙女*/
    get Text_LongSkirtWomen() { return this.getElement(173); }
    ;
    /**杀手女*/
    get Text_KillerWoman() { return this.getElement(174); }
    ;
    /**巫医*/
    get Text_WitchDoctor() { return this.getElement(175); }
    ;
    /**长腿妈妈*/
    get Text_LongLeggedMom() { return this.getElement(176); }
    ;
    /**玄魁*/
    get Text_XuanKui() { return this.getElement(177); }
    ;
    /**邪恶女巫*/
    get Text_EvilWitch() { return this.getElement(178); }
    ;
    /**小丑女*/
    get Text_LittleUglyGirl() { return this.getElement(179); }
    ;
    /**万圣节女*/
    get Text_HalloweenGirl() { return this.getElement(180); }
    ;
    /**屠夫*/
    get Text_Butcher() { return this.getElement(181); }
    ;
    /**魔莱坞学院院长*/
    get Text_DeanOfMolewoodCollege() { return this.getElement(182); }
    ;
    /**迷雾鬼影*/
    get Text_MistyGhostShadow() { return this.getElement(183); }
    ;
    /**蓝毛怪*/
    get Text_BlueHairedMonster() { return this.getElement(184); }
    ;
    /**狗头毛毛虫*/
    get Text_DogHeadedCaterpillar() { return this.getElement(185); }
    ;
    /**粉毛怪*/
    get Text_PinkHairedMonster() { return this.getElement(186); }
    ;
    /**索尼克*/
    get Text_SonicAdvance() { return this.getElement(187); }
    ;
    /**Rainbow friends*/
    get Text_RainbowFriends() { return this.getElement(188); }
    ;
    /**海神*/
    get Text_SeaGod() { return this.getElement(189); }
    ;
    /**恶魔翅膀*/
    get Text_DevilSWings() { return this.getElement(190); }
    ;
    /**恶魔角*/
    get Text_DevilSCorner() { return this.getElement(191); }
    ;
    /**恶魔尾巴*/
    get Text_DevilSTail() { return this.getElement(192); }
    ;
    /**恶魔头骨*/
    get Text_DemonSkull() { return this.getElement(193); }
    ;
    /**恶魔三头犬*/
    get Text_DevilSThreeHeadedDog() { return this.getElement(194); }
    ;
    /**天使翅膀*/
    get Text_AngelWings() { return this.getElement(195); }
    ;
    /**天使蜘蛛*/
    get Text_AngelSpider() { return this.getElement(196); }
    ;
    /**狐狸尾巴*/
    get Text_FoxSTail() { return this.getElement(197); }
    ;
    /**狐狸耳朵*/
    get Text_FoxEars() { return this.getElement(198); }
    ;
    /**挥动的围巾*/
    get Text_WavingScarf() { return this.getElement(199); }
    ;
    /**闪电翅膀*/
    get Text_LightningWings() { return this.getElement(200); }
    ;
    /**眼镜*/
    get Text_Glasses() { return this.getElement(201); }
    ;
    /**拍照机器人*/
    get Text_PhotographyRobot() { return this.getElement(202); }
    ;
    /**面纱*/
    get Text_Veil() { return this.getElement(203); }
    ;
    /**火箭发射器*/
    get Text_RocketLauncher() { return this.getElement(204); }
    ;
    /**狙击枪枪身*/
    get Text_SniperGunBody() { return this.getElement(205); }
    ;
    /**可爱西方龙*/
    get Text_CuteWesternDragon() { return this.getElement(206); }
    ;
    /**龙*/
    get Text_Loong() { return this.getElement(207); }
    ;
    /**帝王龙*/
    get Text_EmperorDragon() { return this.getElement(208); }
    ;
    /**地狱龙*/
    get Text_HellDragon() { return this.getElement(209); }
    ;
    /**糖果龙*/
    get Text_CandyDragon() { return this.getElement(210); }
    ;
    /**武士龙*/
    get Text_WuShilong() { return this.getElement(211); }
    ;
    /**水晶翅膀*/
    get Text_CrystalWings() { return this.getElement(212); }
    ;
    /**杀戮翅膀*/
    get Text_KillingWings() { return this.getElement(213); }
    ;
    /**地狱翅膀*/
    get Text_HellSWings() { return this.getElement(214); }
    ;
    /**精灵翅膀*/
    get Text_FairyWings() { return this.getElement(215); }
    ;
    /**火焰翅膀*/
    get Text_FlameWings() { return this.getElement(216); }
    ;
    /**大剑*/
    get Text_BigSword() { return this.getElement(217); }
    ;
    /**天使剑*/
    get Text_AngelSword() { return this.getElement(218); }
    ;
    /**蛇女*/
    get Text_Snaker() { return this.getElement(219); }
    ;
    /**络新妇*/
    get Text_ASpider() { return this.getElement(220); }
    ;
    /**大蜘蛛*/
    get Text_BigSpider() { return this.getElement(221); }
    ;
    /**小型抱脸紫蜘蛛*/
    get Text_SmallFaceHuggingPurpleSpider() { return this.getElement(222); }
    ;
    /**小型抱脸红蜘蛛*/
    get Text_SmallBlushingSpider() { return this.getElement(223); }
    ;
    /**小型抱脸绿蜘蛛*/
    get Text_SmallFaceHuggingGreenSpider() { return this.getElement(224); }
    ;
    /**小型抱脸蓝蜘蛛*/
    get Text_SmallFaceHuggingBlueSpider() { return this.getElement(225); }
    ;
    /**小龙*/
    get Text_Xiaolong() { return this.getElement(226); }
    ;
    /**卡通木龙*/
    get Text_CartoonWoodenDragon() { return this.getElement(227); }
    ;
    /**红龙*/
    get Text_RedDragon() { return this.getElement(228); }
    ;
    /**黄龙*/
    get Text_Huanglong() { return this.getElement(229); }
    ;
    /**蓝龙*/
    get Text_BlueDragon() { return this.getElement(230); }
    ;
    /**奥特之神*/
    get Text_TheGodOfOtter() { return this.getElement(231); }
    ;
    /**成功开启自动攻击*/
    get Text_SuccessfullyActivatedAutomaticAttack() { return this.getElement(232); }
    ;
    /**未获得自动攻击武魂*/
    get Text_FailedToObtainAutomaticAttackSoul() { return this.getElement(233); }
    ;
    /**成功关闭自动攻击*/
    get Text_SuccessfullyDisabledAutomaticAttack() { return this.getElement(234); }
    ;
    /**已获得*/
    get Text_Obtained() { return this.getElement(235); }
    ;
    /**恭喜获得*/
    get Text_CongratulationsOnObtaining() { return this.getElement(236); }
    ;
    /**魂力*/
    get Text_SoulPower() { return this.getElement(237); }
    ;
    /**武魂*/
    get Text_MartialSoul() { return this.getElement(238); }
    ;
    /**魂师*/
    get Text_SoulMaster() { return this.getElement(239); }
    ;
    /**魂骨*/
    get Text_SoulBone() { return this.getElement(240); }
    ;
    /**魂兽*/
    get Text_Ayakashi() { return this.getElement(241); }
    ;
    /**普通*/
    get Text_Ordinary() { return this.getElement(242); }
    ;
    /**稀有*/
    get Text_Rare() { return this.getElement(243); }
    ;
    /**史诗*/
    get Text_Epic() { return this.getElement(244); }
    ;
    /**传说*/
    get Text_Legend() { return this.getElement(245); }
    ;
    /**杀神领域*/
    get Text_KillingGodDomain() { return this.getElement(246); }
    ;
    /**斗神大陆(我的魂环无限升级)*/
    get Text_DoushenContinent_MySoulRingUnlimitedUpgrade() { return this.getElement(247); }
    ;
    /**装备中*/
    get Text_InTheEquipment() { return this.getElement(248); }
    ;
    /**使用中*/
    get Text_InUse() { return this.getElement(249); }
    ;
    /**跟随中*/
    get Text_FollowIn() { return this.getElement(250); }
    ;
    /**新手礼包获取*/
    get Text_BeginnerGiftPackAcquisition() { return this.getElement(251); }
    ;
    /**金币抽奖获取*/
    get Text_GoldCoinLotteryToObtain() { return this.getElement(252); }
    ;
    /**请先完成新手引导*/
    get Text_PleaseCompleteTheBeginnerGuideFirst() { return this.getElement(253); }
    ;
    /**看广告获得*/
    get Text_ObtainByWatchingAdvertisements() { return this.getElement(254); }
    ;
    /**老玩家回归获得*/
    get Text_OldPlayersReturningToObtain() { return this.getElement(255); }
    ;
    /**未获得*/
    get Text_NotObtained() { return this.getElement(256); }
    ;
    /**开始引导*/
    get Text_StartGuiding() { return this.getElement(257); }
    ;
    /**购买成功*/
    get Text_PurchaseSuccessful() { return this.getElement(258); }
    ;
    /**装备成功*/
    get Text_EquipmentSuccessful() { return this.getElement(259); }
    ;
    /**穿戴成功*/
    get Text_WearingSuccessfully() { return this.getElement(260); }
    ;
    /**跟随成功*/
    get Text_FollowSuccess() { return this.getElement(261); }
    ;
    /**功能暂未开放，敬请期待*/
    get Text_TheFunctionIsNotYetOpen_PleaseStayTuned() { return this.getElement(262); }
    ;
    /**恢复成功*/
    get Text_RecoveryWasSuccessful() { return this.getElement(263); }
    ;
    /**卸下成功*/
    get Text_RemovedSuccessfully() { return this.getElement(264); }
    ;
    /**丢掉宠物成功*/
    get Text_SuccessfullyDiscardedPet() { return this.getElement(265); }
    ;
    /**恢复初始形象*/
    get Text_RestoreInitialImage() { return this.getElement(266); }
    ;
    /**卸下所有装备*/
    get Text_RemoveAllEquipment() { return this.getElement(267); }
    ;
    /**取消宠物跟随*/
    get Text_CancelPetFollowing() { return this.getElement(268); }
    ;
    /**点击使用*/
    get Text_ClickToUse() { return this.getElement(269); }
    ;
    /**已拥有*/
    get Text_AlreadyOwned() { return this.getElement(270); }
    ;
    /**点击获得*/
    get Text_ClickToGet() { return this.getElement(271); }
    ;
    /**未拥有*/
    get Text_NotOwned() { return this.getElement(272); }
    ;
    /**使用*/
    get Text_Use() { return this.getElement(273); }
    ;
    /**金币购买*/
    get Text_PurchaseCoins() { return this.getElement(274); }
    ;
    /**介绍*/
    get Text_Introduce() { return this.getElement(275); }
    ;
    /**使用后血量和攻击力提升*/
    get Text_IncreasedHealthAndAttackPowerAfterUse() { return this.getElement(276); }
    ;
    /**倍*/
    get Text_Times() { return this.getElement(277); }
    ;
    /**消耗{0}钻石购买*/
    get Text_ConsumingDiamondsToPurchase() { return this.getElement(278); }
    ;
    /**消耗{0}派队币购买*/
    get Text_ConsumeTeamCoinsToPurchase() { return this.getElement(279); }
    ;
    /**御剑飞行商城*/
    get Text_YujianFlyingMall() { return this.getElement(280); }
    ;
    /**御剑飞行总加成*/
    get Text_RoyalSwordFlyingBonus() { return this.getElement(281); }
    ;
    /**御剑_智弑者*/
    get Text_MitsurugiSmartKiller() { return this.getElement(282); }
    ;
    /**御剑_黄金剑*/
    get Text_MitsurugiGoldenSword() { return this.getElement(283); }
    ;
    /**御剑_冰钻剑*/
    get Text_MitsurugiIceDiamondSword() { return this.getElement(284); }
    ;
    /**御剑_恶魔剑*/
    get Text_MitsurugiDemonSword() { return this.getElement(285); }
    ;
    /**御剑_断狂剑*/
    get Text_MitsurugiBrokenCrazySword() { return this.getElement(286); }
    ;
    /**御剑_飞行器*/
    get Text_MitsurugiAerocraft() { return this.getElement(287); }
    ;
    /**御剑_飞镖*/
    get Text_MitsurugiImperialSwordDart() { return this.getElement(288); }
    ;
    /**御剑_小单车*/
    get Text_MitsurugiSmallBicycle() { return this.getElement(289); }
    ;
    /**御剑_反正很帅*/
    get Text_MitsurugiAnywayHeShandsome() { return this.getElement(290); }
    ;
    /**御剑_滑板*/
    get Text_MitsurugiSkate() { return this.getElement(291); }
    ;
    /**御剑_小绿龙*/
    get Text_MitsurugiLittleGreenDragon() { return this.getElement(292); }
    ;
    /**御剑_小蓝龙*/
    get Text_MitsurugiXiaolanLong() { return this.getElement(293); }
    ;
    /**御剑_小火龙*/
    get Text_MitsurugiLittleFireDragon() { return this.getElement(294); }
    ;
    /**御剑飞行购买成功*/
    get Text_YujianFlyingHasBeenSuccessfullyPurchased() { return this.getElement(295); }
    ;
    /**装备御剑飞行*/
    get Text_EquippingSwordFlying() { return this.getElement(296); }
    ;
    /**未装备御剑飞行*/
    get Text_FlyingWithoutEquippedSword() { return this.getElement(297); }
    ;
    /**卸下御剑飞行*/
    get Text_RemoveTheImperialSwordAndFly() { return this.getElement(298); }
    ;
    /**血量提升{0}倍*/
    get Text_IncreaseBloodVolumeByTimes_Nowrap() { return this.getElement(299); }
    ;
    /**攻击力提升{0}倍*/
    get Text_AttackPowerIncreasedByTimes_Nowrap() { return this.getElement(300); }
    ;
    /**点击任意位置继续……*/
    get Text_ClickAnywhereToContinue() { return this.getElement(301); }
    ;
    /**欢迎来到
{0}
我来给你介绍一下所有按钮操作吧。*/
    get Text_Guid_0() { return this.getElement(302); }
    ;
    /**移动按钮，点击后拖拽可以控制角色移动。*/
    get Text_Guid_1() { return this.getElement(303); }
    ;
    /**视角移动区域，点击拖动这里可以控制屏幕视角。*/
    get Text_Guid_2() { return this.getElement(304); }
    ;
    /**跳跃按钮，连续点击会进行二段跳，会消耗{0}*/
    get Text_Guid_3() { return this.getElement(305); }
    ;
    /**御剑飞行，可以飞行*/
    get Text_Guid_4() { return this.getElement(306); }
    ;
    /**攻击按钮，连续点击可释放炫酷的连招，会消耗{0}*/
    get Text_Guid_5() { return this.getElement(307); }
    ;
    /**自动攻击按钮、开启自动攻击*/
    get Text_Guid_6() { return this.getElement(308); }
    ;
    /**开启魂环按钮，可展示魂环。*/
    get Text_Guid_7() { return this.getElement(309); }
    ;
    /**背景音乐按钮，打开可更换背景音乐以及开关背景音乐。*/
    get Text_Guid_8() { return this.getElement(310); }
    ;
    /**点我回家按钮，当你被卡在地图中无法移动时可以点击我试试哦。*/
    get Text_Guid_9() { return this.getElement(311); }
    ;
    /**背包按钮，提升等级最快的办法就是在地图中寻找武魂、职业、魂骨、宠物。*/
    get Text_Guid_10() { return this.getElement(312); }
    ;
    /**排行榜按钮，打开可以进行查看房间内排行榜和世界排行榜，快来查看你在斗罗大陆的排名是多少吧。*/
    get Text_Guid_11() { return this.getElement(313); }
    ;
    /**金币抽奖按钮，花不完的金币在这里可以兑现 钻石、等级、皮肤哦*/
    get Text_Guid_12() { return this.getElement(314); }
    ;
    /**在线奖励按钮，可以领取大量金币和经验来快速提升等级，在线10分钟即可快速升级到封号斗罗。*/
    get Text_Guid_13() { return this.getElement(315); }
    ;
    /**任务按钮，完成任务可以领取大量金币和经验来快速提升等级，马上就可升级到神级。*/
    get Text_Guid_14() { return this.getElement(316); }
    ;
    /**签到按钮，登录游戏签到领取大量钻石和等级。*/
    get Text_Guid_15() { return this.getElement(317); }
    ;
    /**福利多多，最快提升等级的办法，无限升级，成为神级的捷径。*/
    get Text_Guid_16() { return this.getElement(318); }
    ;
    /**御剑飞行，装备后可飞行。*/
    get Text_Guid_17() { return this.getElement(319); }
    ;
    /**充值钻石，可充值大量钻石快速提升魂环年限、最快达到百万年级别。*/
    get Text_Guid_18() { return this.getElement(320); }
    ;
    /**兑换奖励，领取兑换码兑换奖励，钻石+等级。*/
    get Text_Guid_19() { return this.getElement(321); }
    ;
    /**新手礼包按钮，领取新手大礼包*/
    get Text_Guid_20() { return this.getElement(322); }
    ;
    /**锻造魂环按钮，可以锻造魂环，使自己的魂环都达到十万年级别，第十环可以达到百万年级别*/
    get Text_Guid_21() { return this.getElement(323); }
    ;
    /**挂机按钮，开启后、无需操作自动升级。*/
    get Text_Guid_22() { return this.getElement(324); }
    ;
    /**开启防御，不会被队友误伤。*/
    get Text_Guid_23() { return this.getElement(325); }
    ;
    /**角色属性，血量、{0}，攻击力会随等级提升而提升。*/
    get Text_Guid_24() { return this.getElement(326); }
    ;
    /**可快速增加金币直接购买武魂、魂骨。*/
    get Text_Guid_25() { return this.getElement(327); }
    ;
    /**可快速增加钻石锻造魂环。*/
    get Text_Guid_26() { return this.getElement(328); }
    ;
    /**介绍完毕，欢迎游戏圈留言。跟我路标走，带你去找武魂、魂骨。*/
    get Text_Guid_27() { return this.getElement(329); }
    ;
    /**锻造魂骨*/
    get Text_Guid_28() { return this.getElement(330); }
    ;
    /**已到达目标点附近*/
    get Text_ArrivedNearTheTargetPoint() { return this.getElement(331); }
    ;
    /**返回新手村*/
    get Text_ReturnToNewbieVillage() { return this.getElement(332); }
    ;
    /**正式开启你的副本吧*/
    get Text_LetSOfficiallyOpenYourCopy() { return this.getElement(333); }
    ;
    /**击败*/
    get Text_Beat() { return this.getElement(334); }
    ;
    /**御剑飞行*/
    get Text_SwordFlying() { return this.getElement(335); }
    ;
    /**自动攻击*/
    get Text_AutomaticAttack() { return this.getElement(336); }
    ;
    /**背景音乐*/
    get Text_BackgroundMusic() { return this.getElement(337); }
    ;
    /**点我回家*/
    get Text_ClickOnMeToGoHome() { return this.getElement(338); }
    ;
    /**背包*/
    get Text_Knapsack() { return this.getElement(339); }
    ;
    /**排行榜*/
    get Text_RankingList() { return this.getElement(340); }
    ;
    /**金币抽奖*/
    get Text_GoldCoinLottery() { return this.getElement(341); }
    ;
    /**领取任务*/
    get Text_CollectingTasks() { return this.getElement(342); }
    ;
    /**签到*/
    get Text_SignIn() { return this.getElement(343); }
    ;
    /**充值钻石*/
    get Text_RechargeDiamonds() { return this.getElement(344); }
    ;
    /**兑换奖励*/
    get Text_ExchangeRewards() { return this.getElement(345); }
    ;
    /**锻造魂环*/
    get Text_ForgeSoulRings() { return this.getElement(346); }
    ;
    /**新手礼包*/
    get Text_NoviceGiftPack() { return this.getElement(347); }
    ;
    /**锻造魂骨*/
    get Text_ForgeSoulBones() { return this.getElement(348); }
    ;
    /**是否开启队友误伤*/
    get Text_DoYouWantToActivateTeammateAccidentalInjury() { return this.getElement(349); }
    ;
    /**开启挂机*/
    get Text_EnableAfk() { return this.getElement(350); }
    ;
    /**已关闭防御*/
    get Text_DefenseHasBeenTurnedOff() { return this.getElement(351); }
    ;
    /**已开启防御*/
    get Text_DefenseActivated() { return this.getElement(352); }
    ;
    /**收起*/
    get Text_PutItAway() { return this.getElement(353); }
    ;
    /**开启*/
    get Text_Open() { return this.getElement(354); }
    ;
    /**击败了*/
    get Text_Defeated() { return this.getElement(355); }
    ;
    /**你已被 {0} 击败*/
    get Text_YouHaveBeenDefeatedBy() { return this.getElement(356); }
    ;
    /**击败 {0} 完成复仇*/
    get Text_DefeatToCompleteRevenge() { return this.getElement(357); }
    ;
    /**等级：*/
    get Text_Grade_MaoHao() { return this.getElement(358); }
    ;
    /**经验：*/
    get Text_Experience() { return this.getElement(359); }
    ;
    /**攻击力：*/
    get Text_Aggressivity() { return this.getElement(360); }
    ;
    /**级解锁*/
    get Text_LevelUnlock() { return this.getElement(361); }
    ;
    /**血量：*/
    get Text_BloodVolume() { return this.getElement(362); }
    ;
    /**不足*/
    get Text_Insufficient() { return this.getElement(363); }
    ;
    /**升级增加{0}储量*/
    get Text_UpgradeToIncreaseReserves() { return this.getElement(364); }
    ;
    /**秒内攻击力翻倍*/
    get Text_DoubleTheAttackPowerWithinSeconds() { return this.getElement(365); }
    ;
    /**级开启*/
    get Text_LevelOpen() { return this.getElement(366); }
    ;
    /**技能还没准备好*/
    get Text_TheSkillsAreNotReadyYet() { return this.getElement(367); }
    ;
    /**升级成功 等级+{0}*/
    get Text_UpgradeSuccessLevel() { return this.getElement(368); }
    ;
    /**连续消灭2人！势不可当！*/
    get Text_ContinuouslyEliminatePeople_2() { return this.getElement(369); }
    ;
    /**连续消灭3人！勇冠三军！*/
    get Text_ContinuouslyEliminatePeople_3() { return this.getElement(370); }
    ;
    /**连续消灭4人！无人能敌！*/
    get Text_ContinuouslyEliminatePeople_4() { return this.getElement(371); }
    ;
    /**连续消灭5人！横扫千军！*/
    get Text_ContinuouslyEliminatePeople_5() { return this.getElement(372); }
    ;
    /**连续消灭6人！接近神了！*/
    get Text_ContinuouslyEliminatePeople_6() { return this.getElement(373); }
    ;
    /**连续消灭{0}人！超越神了！*/
    get Text_ContinuouslyEliminatePeople_7() { return this.getElement(374); }
    ;
    /**免费升级*/
    get Text_FreeUpgrade_Simoleness() { return this.getElement(375); }
    ;
    /**挂机中*/
    get Text_HangingOnTheHook() { return this.getElement(376); }
    ;
    /**取消挂机*/
    get Text_CancelAfk() { return this.getElement(377); }
    ;
    /**级*/
    get Text_Level() { return this.getElement(378); }
    ;
    /**黑悟空关卡*/
    get Text_BlackMonkeyKingLevel() { return this.getElement(379); }
    ;
    /**百万年魂兽*/
    get Text_MillionYearSoulBeast() { return this.getElement(380); }
    ;
    /**回城*/
    get Text_ReturningToTheCity() { return this.getElement(381); }
    ;
    /**请先将等级提升至{0}级*/
    get Text_PleaseFirstRaiseTheLevelToLevel() { return this.getElement(382); }
    ;
    /**空奖-哈哈*/
    get Text_EmptyPrizeHaha() { return this.getElement(383); }
    ;
    /**中奖概率*/
    get Text_WinningProbability() { return this.getElement(384); }
    ;
    /**抽{0}次*/
    get Text_DrawTimes() { return this.getElement(385); }
    ;
    /**消耗{0}金币*/
    get Text_ConsumeCoins() { return this.getElement(386); }
    ;
    /**消耗{0}派队币*/
    get Text_ConsumeDispatchCoins() { return this.getElement(387); }
    ;
    /**免费抽奖*/
    get Text_FreeLotteryDraw() { return this.getElement(388); }
    ;
    /**抽奖结果*/
    get Text_LotteryResults() { return this.getElement(389); }
    ;
    /**恭喜中奖*/
    get Text_CongratulationsOnWinningThePrize() { return this.getElement(390); }
    ;
    /**获得{0}钻石*/
    get Text_ObtainDiamonds() { return this.getElement(391); }
    ;
    /**打开背包使用*/
    get Text_OpenTheBackpackForUse() { return this.getElement(392); }
    ;
    /**第一天*/
    get Text_FirstDay() { return this.getElement(393); }
    ;
    /**第二天*/
    get Text_TheSecondDay() { return this.getElement(394); }
    ;
    /**老玩家回归礼包*/
    get Text_ReturnGiftPackageForVeteranPlayers() { return this.getElement(395); }
    ;
    /**在线时间不足{0}分钟*/
    get Text_OnlineTimeIsLessThanMinutes() { return this.getElement(396); }
    ;
    /**领取成功*/
    get Text_ReceivedSuccessfully() { return this.getElement(397); }
    ;
    /**不能重复领取*/
    get Text_CannotBeClaimedRepeatedly() { return this.getElement(398); }
    ;
    /**请第{0}天再来领取*/
    get Text_PleaseComeBackToCollectOnTheThDay() { return this.getElement(399); }
    ;
    /**领取后打开背包使用*/
    get Text_OpenTheBackpackAndUseItAfterReceivingIt() { return this.getElement(400); }
    ;
    /**在线{0}分钟({1}/{2})*/
    get Text_OnlineMinutes() { return this.getElement(401); }
    ;
    /**已领取*/
    get Text_ReceivedAlready() { return this.getElement(402); }
    ;
    /**在线奖励*/
    get Text_OnlineRewards() { return this.getElement(403); }
    ;
    /**可领取*/
    get Text_CanBeClaimed() { return this.getElement(404); }
    ;
    /**在线时间不足*/
    get Text_InsufficientOnlineTime() { return this.getElement(405); }
    ;
    /**领取奖励*/
    get Text_ClaimRewards() { return this.getElement(406); }
    ;
    /**已领取奖励*/
    get Text_ReceivedReward() { return this.getElement(407); }
    ;
    /**奖励{0}金币*/
    get Text_RewardCoins() { return this.getElement(408); }
    ;
    /**奖励{0}经验*/
    get Text_RewardExperience() { return this.getElement(409); }
    ;
    /**奖励{0}钻石*/
    get Text_RewardDiamonds() { return this.getElement(410); }
    ;
    /**等级Lv.*/
    get Text_Lv() { return this.getElement(411); }
    ;
    /**增加{0}金币*/
    get Text_IncreaseCoins() { return this.getElement(412); }
    ;
    /**增加{0}经验*/
    get Text_IncreaseExperience() { return this.getElement(413); }
    ;
    /**获得{0}金币*/
    get Text_GetCoins() { return this.getElement(414); }
    ;
    /**等级提升至*/
    get Text_UpgradeLevelTo() { return this.getElement(415); }
    ;
    /**暂无*/
    get Text_CurrentlyUnavailable() { return this.getElement(416); }
    ;
    /**排名*/
    get Text_Ranking() { return this.getElement(417); }
    ;
    /**名字*/
    get Text_Name() { return this.getElement(418); }
    ;
    /**高度*/
    get Text_Height() { return this.getElement(419); }
    ;
    /**击杀*/
    get Text_Kill() { return this.getElement(420); }
    ;
    /**等级模式*/
    get Text_LevelMode() { return this.getElement(421); }
    ;
    /**高度模式*/
    get Text_HeightMode() { return this.getElement(422); }
    ;
    /**击杀模式*/
    get Text_KillMode() { return this.getElement(423); }
    ;
    /**切换房间排行榜*/
    get Text_SwitchRoomLeaderboard() { return this.getElement(424); }
    ;
    /**切换全服排行榜*/
    get Text_SwitchToTheFullServerRankingList() { return this.getElement(425); }
    ;
    /**你所在房间内的排行榜。
点击右侧排行模式按钮会刷新排行榜模式。*/
    get Text_TheRankingListInYourRoom() { return this.getElement(426); }
    ;
    /**房间排行榜*/
    get Text_RoomRanking() { return this.getElement(427); }
    ;
    /**全服前{0}名
段位 Lv.等级排行。*/
    get Text_TopInTheEntireServer() { return this.getElement(428); }
    ;
    /**全服排行榜*/
    get Text_FullServerRankingList() { return this.getElement(429); }
    ;
    /**小手别点太快哟~*/
    get Text_DonTClickTooQuicklyWithYourLittleHand() { return this.getElement(430); }
    ;
    /**十年*/
    get Text_Decade() { return this.getElement(431); }
    ;
    /**百年*/
    get Text_AHundredYears() { return this.getElement(432); }
    ;
    /**千年*/
    get Text_Millennium() { return this.getElement(433); }
    ;
    /**万年*/
    get Text_TenThousandYears() { return this.getElement(434); }
    ;
    /**十万年*/
    get Text_100000Years() { return this.getElement(435); }
    ;
    /**百万年*/
    get Text_MillionsOfYears() { return this.getElement(436); }
    ;
    /**万万年*/
    get Text_Eternity() { return this.getElement(437); }
    ;
    /**亿万年*/
    get Text_BillionsOfYears() { return this.getElement(438); }
    ;
    /**一*/
    get Text_1() { return this.getElement(439); }
    ;
    /**二*/
    get Text_2() { return this.getElement(440); }
    ;
    /**三*/
    get Text_3() { return this.getElement(441); }
    ;
    /**四*/
    get Text_4() { return this.getElement(442); }
    ;
    /**五*/
    get Text_5() { return this.getElement(443); }
    ;
    /**六*/
    get Text_6() { return this.getElement(444); }
    ;
    /**七*/
    get Text_7() { return this.getElement(445); }
    ;
    /**八*/
    get Text_8() { return this.getElement(446); }
    ;
    /**九*/
    get Text_9() { return this.getElement(447); }
    ;
    /**十*/
    get Text_10() { return this.getElement(448); }
    ;
    /**还未获取魂环*/
    get Text_NotYetObtainedSoulRing() { return this.getElement(449); }
    ;
    /**联系作者修复*/
    get Text_ContactTheAuthorForRepair() { return this.getElement(450); }
    ;
    /**等级不足*/
    get Text_InsufficientLevel() { return this.getElement(451); }
    ;
    /**锻造成功*/
    get Text_SuccessfullyForged() { return this.getElement(452); }
    ;
    /**总加成：血量提升{0}倍，攻击力提升{1}倍*/
    get Text_TotalBonus() { return this.getElement(453); }
    ;
    /**恭喜你完成新手引导*/
    get Text_CongratulationsOnCompletingTheBeginnerSGuide() { return this.getElement(454); }
    ;
    /**奖励第一魂环 十年魂环*/
    get Text_RewardTheFirstSoulRingWithATenYearSoulRing() { return this.getElement(455); }
    ;
    /**第{0}魂环
{1}魂环 */
    get Text_TheSoulRingSoulRing() { return this.getElement(456); }
    ;
    /**{0}级可解锁*/
    get Text_UnlockableAtLevel() { return this.getElement(457); }
    ;
    /**需要消耗*/
    get Text_Cost() { return this.getElement(458); }
    ;
    /**魂环*/
    get Text_SoulRing() { return this.getElement(459); }
    ;
    /**可解锁*/
    get Text_Unlockable() { return this.getElement(460); }
    ;
    /**补签*/
    get Text_SupplementarySignature() { return this.getElement(461); }
    ;
    /**待领取*/
    get Text_Unclaimed() { return this.getElement(462); }
    ;
    /**钻石 +{0} 等级 +{1}*/
    get Text_DiamondGrade() { return this.getElement(463); }
    ;
    /**第{0}天*/
    get Text_Day() { return this.getElement(464); }
    ;
    /**{0}日签到*/
    get Text_DayCheckIn() { return this.getElement(465); }
    ;
    /**已签到*/
    get Text_SignedIn() { return this.getElement(466); }
    ;
    /**成功获得今日奖励*/
    get Text_SuccessfullyObtainedTodaySReward() { return this.getElement(467); }
    ;
    /**还未到签到日期*/
    get Text_TheCheckInDateHasNotYetArrived() { return this.getElement(468); }
    ;
    /**每日登陆游戏（{0}/{1}）*/
    get Text_DailyLoginToGames() { return this.getElement(469); }
    ;
    /**每日在线时长{2}分钟（{0}/{1}）*/
    get Text_DailyOnlineMinutes() { return this.getElement(470); }
    ;
    /**每日击败{2}只美杜莎（{0}/{1}）*/
    get Text_DefeatMedusaEveryDay() { return this.getElement(471); }
    ;
    /**每日击败{2}只蜘蛛精（{0}/{1}）*/
    get Text_DefeatSpiderSpiritsDaily() { return this.getElement(472); }
    ;
    /**每日击败{2}只炫彩蜘蛛（{0}/{1}）*/
    get Text_DefeatDazzlingSpidersDaily() { return this.getElement(473); }
    ;
    /**每日击败{2}只龙兽（{0}/{1}）*/
    get Text_DefeatDragonBeastsDaily() { return this.getElement(474); }
    ;
    /**每日击败{2}只丧尸（{0}/{1}）*/
    get Text_DefeatZombiesDaily() { return this.getElement(475); }
    ;
    /**每日击败{2}只变异布偶（{0}/{1}）*/
    get Text_DefeatMutatedPuppetsDaily() { return this.getElement(476); }
    ;
    /**每日击败{2}名玩家（{0}/{1}）*/
    get Text_DefeatPlayersDaily() { return this.getElement(477); }
    ;
    /**每日等级提升{2}级（{0}/{1}）*/
    get Text_DailyLevelIncreaseByLevels() { return this.getElement(478); }
    ;
    /**每日捡到{2}个秘宝（{0}/{1}）*/
    get Text_PickUpTreasuresEveryDay() { return this.getElement(479); }
    ;
    /**每日观看{2}次广告（{0}/{1}）*/
    get Text_WatchAdsPerDay() { return this.getElement(480); }
    ;
    /**每周登录{2}天（{0}/{1}）*/
    get Text_LoginDaysAWeek() { return this.getElement(481); }
    ;
    /**每周时长达到30分钟{2}天（{0}/{1}）*/
    get Text_UpTo30MinutesAndDaysPerWeek() { return this.getElement(482); }
    ;
    /**每周击败{2}只美杜莎（{0}/{1}）*/
    get Text_DefeatMedusaEveryWeek() { return this.getElement(483); }
    ;
    /**每周击败{2}只蜘蛛精（{0}/{1}）*/
    get Text_DefeatSpiderSpiritsEveryWeek() { return this.getElement(484); }
    ;
    /**每周击败{2}只炫彩蜘蛛（{0}/{1}）*/
    get Text_DefeatDazzlingSpidersEveryWeek() { return this.getElement(485); }
    ;
    /**每周击败{2}只龙兽（{0}/{1}）*/
    get Text_DefeatDragonBeastsEveryWeek() { return this.getElement(486); }
    ;
    /**每周击败{2}只丧尸（{0}/{1}）*/
    get Text_DefeatZombiesEveryWeek() { return this.getElement(487); }
    ;
    /**每周击败{2}只变异布偶（{0}/{1}）*/
    get Text_DefeatMutatedPuppetsEveryWeek() { return this.getElement(488); }
    ;
    /**每周击败{2}名玩家（{0}/{1}）*/
    get Text_DefeatPlayersPerWeek() { return this.getElement(489); }
    ;
    /**每周等级提升{2}级（{0}/{1}）*/
    get Text_UpgradeByLevelsPerWeek() { return this.getElement(490); }
    ;
    /**每周捡到{2}个秘宝（{0}/{1}）*/
    get Text_PickUpTreasuresEveryWeek() { return this.getElement(491); }
    ;
    /**每周观看{2}次广告（{0}/{1}）*/
    get Text_WatchAdsPerWeek() { return this.getElement(492); }
    ;
    /**每日任务*/
    get Text_DailyTasks() { return this.getElement(493); }
    ;
    /**任务已全部完成，等待刷新...*/
    get Text_AllTasksHaveBeenCompletedWaitingForRefresh() { return this.getElement(494); }
    ;
    /**每周任务*/
    get Text_WeeklyTasks() { return this.getElement(495); }
    ;
    /**剩余：{0}小时*/
    get Text_RemainingHours() { return this.getElement(496); }
    ;
    /**剩余：{0}天*/
    get Text_RemainingDays() { return this.getElement(497); }
    ;
    /**未完成*/
    get Text_HangInTheAir() { return this.getElement(498); }
    ;
    /**还未装备{0},去寻找{1}*/
    get Text_NotEquippedWithYetGoFind() { return this.getElement(499); }
    ;
    /**魔兽美杜莎*/
    get Text_WarcraftMedusa() { return this.getElement(500); }
    ;
    /**魔兽炫彩蜘蛛*/
    get Text_WarcraftColorfulSpider() { return this.getElement(501); }
    ;
    /**魔兽蜘蛛精*/
    get Text_WarcraftSpiderSpirit() { return this.getElement(502); }
    ;
    /**龙之魔兽*/
    get Text_DragonSWarcraft() { return this.getElement(503); }
    ;
    /**丧尸*/
    get Text_Zombies() { return this.getElement(504); }
    ;
    /**变异布偶*/
    get Text_MutatedPuppet() { return this.getElement(505); }
    ;
    /**黑悟空*/
    get Text_BlackWukong() { return this.getElement(506); }
    ;
    /**魔兽米老鼠*/
    get Text_MickeyMouse() { return this.getElement(507); }
    ;
    /**{0}级 魂士*/
    get Text_LevelSoulMaster1() { return this.getElement(508); }
    ;
    /**{0}级 魂师*/
    get Text_LevelSoulMaster2() { return this.getElement(509); }
    ;
    /**{0}级 大魂师*/
    get Text_LevelSoulMaster3() { return this.getElement(510); }
    ;
    /**{0}级 魂尊*/
    get Text_LevelSoulSovereign() { return this.getElement(511); }
    ;
    /**{0}级 魂宗*/
    get Text_LevelSoulSect() { return this.getElement(512); }
    ;
    /**{0}级 魂王*/
    get Text_LevelSoulKing() { return this.getElement(513); }
    ;
    /**{0}级 魂帝*/
    get Text_LevelSoulEmperor() { return this.getElement(514); }
    ;
    /**{0}级 魂圣*/
    get Text_LevelSoulSaint() { return this.getElement(515); }
    ;
    /**{0}级 魂斗罗*/
    get Text_LevelContra() { return this.getElement(516); }
    ;
    /**{0}级 封号斗罗*/
    get Text_LevelBannedDouluo() { return this.getElement(517); }
    ;
    /**{0}级 巅峰斗罗*/
    get Text_LevelPeakDouluo() { return this.getElement(518); }
    ;
    /**{0}级 半神*/
    get Text_LevelDemigod() { return this.getElement(519); }
    ;
    /**{0}级 神官*/
    get Text_LevelDivineOfficer() { return this.getElement(520); }
    ;
    /**{0}级 真神级*/
    get Text_LevelTrueGodLevel() { return this.getElement(521); }
    ;
    /**{0}级 超神级*/
    get Text_LevelSuperGodLevel() { return this.getElement(522); }
    ;
    /**{0}级 超神巅峰*/
    get Text_LevelSuperGodPeak() { return this.getElement(523); }
    ;
    /**{0}级 神王*/
    get Text_LevelDivineKing() { return this.getElement(524); }
    ;
    /**{0}级 万古仙帝*/
    get Text_LevelEternalImmortalEmperor() { return this.getElement(525); }
    ;
    /**万古仙帝*/
    get Text_EternalImmortalEmperor() { return this.getElement(526); }
    ;
    /**武魂-机甲斩狂风斩(男)*/
    get Text_MartialSoulMechSlashWindSlash_Male() { return this.getElement(527); }
    ;
    /**武魂-机甲斩狂风斩(女)*/
    get Text_MartialSoulMechSlashWindSlash_Female() { return this.getElement(528); }
    ;
    /**金箍棒(粉)+制服女孩*/
    get Text_GoldenHoopRodPowderUniformGirl() { return this.getElement(529); }
    ;
    /**昊天锤+唐三
金箍棒(紫)+蓝银皇*/
    get HaotianHammerTangSan_GoldenHoopRodPurpleBlueSilverEmperor() { return this.getElement(530); }
    ;
    /**黄金王子+JK女孩*/
    get Text_TheGoldenPrinceJkGirl() { return this.getElement(531); }
    ;
    /**小蓝龙+小绿龙
小黑龙+小橘龙*/
    get Text_XiaolanGreenBlackOrangeDragon() { return this.getElement(532); }
    ;
    /**概率提升成功*/
    get Text_ProbabilityIncreaseSuccess() { return this.getElement(533); }
    ;
    /**魂骨强化成功*/
    get Text_SoulBoneStrengtheningSuccessful() { return this.getElement(534); }
    ;
    /**魂骨强化失败*/
    get Text_SoulBoneStrengtheningFailed() { return this.getElement(535); }
    ;
    /**领取限定皮肤*/
    get Text_ClaimLimitedSkin() { return this.getElement(536); }
    ;
    /**领取自动攻击*/
    get Text_ClaimAutomaticAttack() { return this.getElement(537); }
    ;
    /**已获得，打开背包使用*/
    get Text_ObtainedOpenTheBackpackToUse() { return this.getElement(538); }
    ;
    /**开放世界*/
    get Text_Music_1() { return this.getElement(539); }
    ;
    /**留下来*/
    get Text_Music_2() { return this.getElement(540); }
    ;
    /**坏人*/
    get Text_Music_3() { return this.getElement(541); }
    ;
    /**我会活下去*/
    get Text_Music_4() { return this.getElement(542); }
    ;
    /**让我爱你*/
    get Text_Music_5() { return this.getElement(543); }
    ;
    /**跑上那座山*/
    get Text_Music_6() { return this.getElement(544); }
    ;
    /**爱恨我*/
    get Text_Music_7() { return this.getElement(545); }
    ;
    /**假小子*/
    get Text_Music_8() { return this.getElement(546); }
    ;
    /**关闭*/
    get Text_Music_9() { return this.getElement(547); }
    ;
    /**天空的*/
    get Text_Music_10() { return this.getElement(548); }
    ;
    /**事实上*/
    get Text_Music_11() { return this.getElement(549); }
    ;
    /**早上好*/
    get Text_Music_12() { return this.getElement(550); }
    ;
    /**独自一人*/
    get Text_Music_13() { return this.getElement(551); }
    ;
    /**钱德里勒*/
    get Text_Music_14() { return this.getElement(552); }
    ;
    /**不想知道*/
    get Text_Music_15() { return this.getElement(553); }
    ;
    /**心情*/
    get Text_Music_16() { return this.getElement(554); }
    ;
    /**金轮*/
    get Text_Music_17() { return this.getElement(555); }
    ;
    /**不知道叫啥*/
    get Text_Music_18() { return this.getElement(556); }
    ;
    /**也不知道叫啥*/
    get Text_Music_19() { return this.getElement(557); }
    ;
    /**奖励{0}魂骨碎片*/
    get Text_RewardSoulBone() { return this.getElement(558); }
    ;
    /**魂骨碎片不足*/
    get Text_InsufficientSoulBoneFragments() { return this.getElement(559); }
    ;
    /**免费领取{0}魂骨碎片*/
    get Text_GetFreeBones() { return this.getElement(560); }
    ;
    /**成功获得魂骨碎片+{0}*/
    get Text_SuccessfullyObtainedBones() { return this.getElement(561); }
    ;
    /**升级*/
    get Text_Upgrade() { return this.getElement(562); }
    ;
    /**锻造魂环*/
    get Text_ForgeSoulRings_Button() { return this.getElement(563); }
    ;
    /**领取大量钻石
下次翻倍*/
    get Text_LotsOfDiamonds() { return this.getElement(564); }
    ;
    /**十亿万年*/
    get Text_BillionsOfYears_10() { return this.getElement(565); }
    ;
    /**百亿万年*/
    get Text_TensOfBillionsOfYears() { return this.getElement(566); }
    ;
    /**千亿万年*/
    get Text_HundredsOfBillionsOfYears() { return this.getElement(567); }
    ;
}

var foreign28 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    LanguageConfig: LanguageConfig
});

const EXCELDATA$7 = [["ID", "Des", "PathStr", "Idles", "Moves", "MoveSpeed", "Die", "Attacks", "AttackTimePoints", "AttackOffsets", "AttackLengths", "AttackSizes", "Damages", "EffectIds", "EffectPosOffsets", "EffectRotOffsets", "EffectScales"], ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""], [1, "蛇女", ["3E882EFC"], ["318618"], ["318617"], 300, "318619", ["318616"], [0.35], [new mw.Vector(0, 50, 0)], [300], [new mw.Vector(50, 50, 100)], [100], ["125704"], [new mw.Vector(60, 0, 0)], [new mw.Vector(0, 0, -90)], [new mw.Vector(1, 0.8, 1)]], [2, "蜘蛛", ["3E882EFC"], ["336664", "336668"], ["336669"], 250, "336816", ["336673", "336670", "336672"], [1, 0.95, 1.2], [new mw.Vector(0, 50, 0), new mw.Vector(0, 50, 0), new mw.Vector(0, 50, 0)], [300, 300, 300], [new mw.Vector(50, 50, 100), new mw.Vector(50, 50, 100), new mw.Vector(50, 50, 100)], [100, 100, 100], ["384353", "101411", "297932"], [new mw.Vector(170, 0, -50), new mw.Vector(200, 0, -120), new mw.Vector(100, 0, -125)], [new mw.Vector(0, -60, 0), new mw.Vector(0, 30, 10), new mw.Vector(0, 0, 0)], [new mw.Vector(0.5, 0.5, 0.5), new mw.Vector(1, 1, 1), new mw.Vector(0.55, 1, 1)]], [3, "蜘蛛精", ["3E882EFC"], ["336664", "336668"], ["338467"], 250, "338468", ["338464", "338466"], [0.8, 0.8], [new mw.Vector(0, 50, 0), new mw.Vector(0, 50, 0)], [300, 300], [new mw.Vector(50, 50, 100), new mw.Vector(50, 50, 100)], [100, 100], ["297932", "101407"], [new mw.Vector(100, 0, -125), new mw.Vector(100, 0, -125)], [new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0)], [new mw.Vector(0.55, 1, 1), new mw.Vector(1, 1, 1)]], [4, "龙", ["3E882EFC"], ["160627", "250400", "250399", "160627"], ["160628"], 250, "-1", ["250094", "250095"], [1.6, 1.3], [new mw.Vector(0, 50, 0), new mw.Vector(0, 50, 0)], [300, 300], [new mw.Vector(50, 50, 100), new mw.Vector(50, 50, 100)], [100, 100], ["168947", "92843"], [new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0)], [new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0)], [new mw.Vector(1, 1, 1), new mw.Vector(1, 1, 1)]], [5, "丧尸", ["3E882EFC"], ["284991", "268599"], ["285740", "269161", "285826"], 150, "-1", ["285210"], [0.55], [new mw.Vector(0, 50, 0)], [300], [new mw.Vector(50, 50, 100)], [100], ["31260"], [new mw.Vector(5, 0, 0)], [new mw.Vector(0, -30, 180)], [new mw.Vector(1, 1, 1)]], [6, "角色", ["3E882EFC"], ["285445"], ["285336", "285372", "280652", "280671", "280723", "284685", "280699", "280780"], 150, "-1", ["219129", "280914", "280916"], [0.2, 0.4, 0.3], [new mw.Vector(0, 50, 0), new mw.Vector(0, 50, 0), new mw.Vector(0, 50, 0)], [300, 300, 300], [new mw.Vector(50, 50, 100), new mw.Vector(50, 50, 100), new mw.Vector(50, 50, 100)], [100, 100, 100], ["92838", "135894", "125704"], [new mw.Vector(250, 0, 0), new mw.Vector(140, 0, 0), new mw.Vector(0, 0, 0)], [new mw.Vector(0, 0, 0), new mw.Vector(0, 0, -90), new mw.Vector(0, 0, -90)], [new mw.Vector(0.5, 0.5, 0.5), new mw.Vector(0.5, 0.5, 0.5), new mw.Vector(1, 1, 1)]], [7, "角色", ["3E882EFC"], ["-1"], ["-1"], 150, "-1", ["219129", "280914", "280916"], [0.2, 0.4, 0.3], [new mw.Vector(0, 50, 0), new mw.Vector(0, 50, 0), new mw.Vector(0, 50, 0)], [300, 300, 300], [new mw.Vector(50, 50, 100), new mw.Vector(50, 50, 100), new mw.Vector(50, 50, 100)], [100, 100, 100], ["92838", "135894", "125704"], [new mw.Vector(250, 0, 0), new mw.Vector(140, 0, 0), new mw.Vector(0, 0, 0)], [new mw.Vector(0, 0, 0), new mw.Vector(0, 0, -90), new mw.Vector(0, 0, -90)], [new mw.Vector(0.5, 0.5, 0.5), new mw.Vector(0.5, 0.5, 0.5), new mw.Vector(1, 1, 1)]]];
class MonsterInfoConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$7);
    }
}

var foreign29 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    MonsterInfoConfig: MonsterInfoConfig
});

const EXCELDATA$6 = [["id", "Guid", "Annotation", "Desc"], ["", "", "Language", ""], [1, "268224", "Text_Music_1", "开放世界"], [2, "118698", "Text_Music_2", "STAY"], [3, "118699", "Text_Music_3", "bad guy"], [4, "117222", "Text_Music_4", "我会活下去"], [5, "118697", "Text_Music_5", "Let Me Love You"], [6, "118700", "Text_Music_6", "Running up That Hill"], [7, "118701", "Text_Music_7", "Love To Hate Me"], [8, "118702", "Text_Music_8", "TOMBOY"], [9, "118703", "Text_Music_9", "Shut Down"], [10, "118704", "Text_Music_10", "Celestial"], [11, "118712", "Text_Music_11", "As It Was"], [12, "118706", "Text_Music_12", "Good Morning"], [13, "118707", "Text_Music_13", "Alone"], [14, "118709", "Text_Music_14", "Chanderiler"], [15, "118711", "Text_Music_15", "Don't Wanna Know"], [16, "118716", "Text_Music_16", "Mood"], [17, "117220", "Text_Music_17", "金轮"], [18, "128884", "Text_Music_18", "不知道叫啥"], [19, "128888", "Text_Music_19", "也不知道叫啥"]];
class MusicConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$6);
    }
}

var foreign30 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    MusicConfig: MusicConfig
});

const EXCELDATA$5 = [["id", "Role", "Del"], ["", "", ""], [1, "142904", "万磁王"], [2, "141618", "赛博自来也"], [3, "142889", "海王"], [4, "142895", "洛基"], [5, "142887", "恶灵骑士"], [6, "142898", "美国队长"], [7, "142886", "毒液"], [8, "142899", "灭霸拳套"], [9, "142925", "鸣人"], [10, "142917", "干柿鬼鲛"], [11, "143229", "宇智波斑"], [12, "142272", "机甲少女"], [13, "142903", "死侍"], [14, "142900", "奇异博士"], [15, "142879", "兔女郎"], [16, "142888", "钢铁侠"], [17, "142894", "雷神"], [18, "142907", "蜘蛛侠"], [19, "142892", "金刚狼"], [20, "142885", "超人"], [21, "142893", "惊奇队长"], [22, "142193", "刺客男"], [23, "142194", "刺客女"], [24, "142913", "雏田"], [25, "142922", "路飞"], [26, "143236", "佐助"]];
class NPCConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$5);
    }
}

var foreign31 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    NPCConfig: NPCConfig
});

const EXCELDATA$4 = [["ID", "OnlineTime", "RewardCount", "Icon"], ["", "", "", ""], [1, 1, [100, 100, 0], "193281"], [2, 5, [500, 500, 0], "193281"], [3, 10, [1000, 1000, 0], "193281"], [4, 15, [1500, 1500, 0], "193281"], [5, 20, [2000, 2000, 0], "193281"], [6, 25, [2500, 2500, 0], "193281"], [7, 30, [3000, 3000, 0], "193281"], [8, 40, [4000, 4000, 0], "193281"], [9, 50, [5000, 5000, 0], "192228"], [10, 60, [6000, 6000, 0], "192228"], [11, 70, [7000, 7000, 0], "192228"], [12, 80, [8000, 8000, 0], "192228"], [13, 90, [9000, 9000, 0], "192228"], [14, 100, [10000, 10000, 0], "192228"], [15, 110, [11000, 11000, 0], "192228"], [16, 120, [12000, 12000, 0], "192228"], [17, 150, [15000, 15000, 0], "193275"], [18, 180, [18000, 18000, 0], "193275"], [19, 210, [21000, 21000, 0], "193275"], [20, 240, [24000, 24000, 0], "193275"], [21, 270, [27000, 27000, 0], "193275"], [22, 300, [30000, 30000, 0], "193275"], [23, 330, [33000, 33000, 0], "193275"], [24, 360, [36000, 36000, 0], "193275"]];
class OnlineRewardsConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$4);
    }
}

var foreign32 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    OnlineRewardsConfig: OnlineRewardsConfig
});

const EXCELDATA$3 = [["ID", "emojiGuid", "effectGuid"], ["", "", ""], [1, "112164", "151051"], [2, "112165", "151047"], [3, "112166", "151052"], [4, "112167", "151054"], [5, "112168", "151055"], [6, "112169", "151049"], [7, "112170", "151056"], [8, "112171", "151050"], [9, "112172", "151048"], [10, "112173", "151058"], [11, "112174", "151059"], [12, "112175", "151057"]];
class QuickEmojiConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$3);
    }
}

var foreign33 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    QuickEmojiConfig: QuickEmojiConfig
});

const EXCELDATA$2 = [["ID", "talkContent", "visible"], ["", "", ""], [1, "你好", 0], [2, "今天天气真好", 0], [3, "我们出去玩吧", 0], [4, "来我家里玩吧", 0], [5, "下雨了", 0], [6, "快跑", 0], [7, "跟上我", 1], [8, "不要这样", 1], [9, "OK", 1], [10, "哈哈哈哈哈哈哈", 1]];
class QuickTalkConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$2);
    }
}

var foreign34 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    QuickTalkConfig: QuickTalkConfig
});

const EXCELDATA$1 = [["id", "Describe", "Name", "TaskType", "TaskItemType", "NextId", "TragetNum", "Coin", "Exp", "Diamond"], ["", "", "Language", "", "", "", "", "", "", ""], [1, "每日登陆游戏（{0}/{1}）", "Text_DailyLoginToGames", 1, 1, 0, 1, 100, 100, 1, 1], [2, "每日在线时长8分钟（{0}/{1}）", "Text_DailyOnlineMinutes", 1, 11, 0, 8, 800, 800, 8, 11, 3], [3, "每日在线时长15分钟（{0}/{1}）", "Text_DailyOnlineMinutes", 1, 12, 0, 15, 1500, 1500, 15, 11, 4], [4, "每日在线时长25分钟（{0}/{1}）", "Text_DailyOnlineMinutes", 1, 13, 0, 25, 2500, 2500, 25, 11, 5], [5, "每日在线时长35分钟（{0}/{1}）", "Text_DailyOnlineMinutes", 1, 14, 0, 35, 3500, 3555, 100, 11, 6], [6, "每日在线时长50分钟（{0}/{1}）", "Text_DailyOnlineMinutes", 1, 15, 0, 50, 5000, 5000, 150, 11, 7], [7, "每日在线时长60分钟（{0}/{1}）", "Text_DailyOnlineMinutes", 1, 16, 0, 60, 6000, 6000, 200, 11], [8, "每日击败1只美杜莎（{0}/{1}）", "Text_DefeatMedusaEveryDay", 1, 21, 0, 1, 500, 500, 0, 21, 9], [9, "每日击败3只美杜莎（{0}/{1}）", "Text_DefeatMedusaEveryDay", 1, 22, 0, 3, 1500, 1500, 1, 21, 10], [10, "每日击败6只美杜莎（{0}/{1}）", "Text_DefeatMedusaEveryDay", 1, 23, 0, 6, 3000, 3000, 2, 21, 11], [11, "每日击败10只美杜莎（{0}/{1}）", "Text_DefeatMedusaEveryDay", 1, 24, 0, 10, 5000, 5000, 3, 21, 12], [12, "每日击败20只美杜莎（{0}/{1}）", "Text_DefeatMedusaEveryDay", 1, 25, 0, 20, 10000, 10000, 5, 21], [13, "每日击败1只蜘蛛精（{0}/{1}）", "Text_DefeatSpiderSpiritsDaily", 1, 31, 0, 1, 250, 250, 0, 31, 14], [14, "每日击败3只蜘蛛精（{0}/{1}）", "Text_DefeatSpiderSpiritsDaily", 1, 32, 0, 3, 750, 750, 1, 31, 15], [15, "每日击败6只蜘蛛精（{0}/{1}）", "Text_DefeatSpiderSpiritsDaily", 1, 33, 0, 6, 1500, 1500, 2, 31, 16], [16, "每日击败10只蜘蛛精（{0}/{1}）", "Text_DefeatSpiderSpiritsDaily", 1, 34, 0, 10, 2500, 2500, 3, 31, 17], [17, "每日击败20只蜘蛛精（{0}/{1}）", "Text_DefeatSpiderSpiritsDaily", 1, 35, 0, 20, 5000, 5000, 5, 31], [18, "每日击败1只炫彩蜘蛛（{0}/{1}）", "Text_DefeatDazzlingSpidersDaily", 1, 41, 0, 1, 250, 250, 0, 41, 19], [19, "每日击败3只炫彩蜘蛛（{0}/{1}）", "Text_DefeatDazzlingSpidersDaily", 1, 42, 0, 3, 750, 750, 1, 41, 20], [20, "每日击败6只炫彩蜘蛛（{0}/{1}）", "Text_DefeatDazzlingSpidersDaily", 1, 43, 0, 6, 1500, 1500, 2, 41, 21], [21, "每日击败10只炫彩蜘蛛（{0}/{1}）", "Text_DefeatDazzlingSpidersDaily", 1, 44, 0, 10, 2500, 2500, 3, 41, 22], [22, "每日击败20只炫彩蜘蛛（{0}/{1}）", "Text_DefeatDazzlingSpidersDaily", 1, 45, 0, 20, 5000, 5000, 5, 41], [23, "每日击败1只龙兽（{0}/{1}）", "Text_DefeatDragonBeastsDaily", 1, 51, 0, 1, 250, 250, 0, 51, 24], [24, "每日击败3只龙兽（{0}/{1}）", "Text_DefeatDragonBeastsDaily", 1, 52, 0, 3, 750, 750, 1, 51, 25], [25, "每日击败6只龙兽（{0}/{1}）", "Text_DefeatDragonBeastsDaily", 1, 53, 0, 6, 1500, 1500, 2, 51, 26], [26, "每日击败10只龙兽（{0}/{1}）", "Text_DefeatDragonBeastsDaily", 1, 54, 0, 10, 2500, 2500, 3, 51, 27], [27, "每日击败20只龙兽（{0}/{1}）", "Text_DefeatDragonBeastsDaily", 1, 55, 0, 20, 5000, 5000, 5, 51], [28, "每日击败1只丧尸（{0}/{1}）", "Text_DefeatZombiesDaily", 1, 61, 0, 1, 250, 250, 0, 61, 29], [29, "每日击败3只丧尸（{0}/{1}）", "Text_DefeatZombiesDaily", 1, 62, 0, 3, 750, 750, 1, 61, 30], [30, "每日击败6只丧尸（{0}/{1}）", "Text_DefeatZombiesDaily", 1, 63, 0, 6, 1500, 1500, 2, 61, 31], [31, "每日击败10只丧尸（{0}/{1}）", "Text_DefeatZombiesDaily", 1, 64, 0, 10, 2500, 2500, 3, 61, 32], [32, "每日击败20只丧尸（{0}/{1}）", "Text_DefeatZombiesDaily", 1, 65, 0, 20, 5000, 5000, 5, 61], [33, "每日击败1只变异布偶（{0}/{1}）", "Text_DefeatMutatedPuppetsDaily", 1, 71, 0, 1, 250, 250, 0, 71, 34], [34, "每日击败3只变异布偶（{0}/{1}）", "Text_DefeatMutatedPuppetsDaily", 1, 72, 0, 3, 750, 750, 1, 71, 35], [35, "每日击败6只变异布偶（{0}/{1}）", "Text_DefeatMutatedPuppetsDaily", 1, 73, 0, 6, 1500, 1500, 2, 71, 36], [36, "每日击败10只变异布偶（{0}/{1}）", "Text_DefeatMutatedPuppetsDaily", 1, 74, 0, 10, 2500, 2500, 3, 71, 37], [37, "每日击败20只变异布偶（{0}/{1}）", "Text_DefeatMutatedPuppetsDaily", 1, 75, 0, 20, 5000, 5000, 5, 71], [38, "每日击败1名玩家（{0}/{1}）", "Text_DefeatPlayersDaily", 1, 81, 0, 1, 250, 250, 0, 81, 39], [39, "每日击败3名玩家（{0}/{1}）", "Text_DefeatPlayersDaily", 1, 82, 0, 3, 750, 750, 1, 81, 40], [40, "每日击败6名玩家（{0}/{1}）", "Text_DefeatPlayersDaily", 1, 83, 0, 6, 1500, 1500, 2, 81, 41], [41, "每日击败10名玩家（{0}/{1}）", "Text_DefeatPlayersDaily", 1, 84, 0, 10, 2500, 2500, 3, 81, 42], [42, "每日击败20名玩家（{0}/{1}）", "Text_DefeatPlayersDaily", 1, 85, 0, 20, 5000, 5000, 5, 81], [43, "每日等级提升1级（{0}/{1}）", "Text_DailyLevelIncreaseByLevels", 1, 91, 0, 1, 250, 250, 0, 91, 44], [44, "每日等级提升3级（{0}/{1}）", "Text_DailyLevelIncreaseByLevels", 1, 92, 0, 3, 750, 750, 1, 91, 45], [45, "每日等级提升6级（{0}/{1}）", "Text_DailyLevelIncreaseByLevels", 1, 93, 0, 6, 1500, 1500, 2, 91, 46], [46, "每日等级提升10级（{0}/{1}）", "Text_DailyLevelIncreaseByLevels", 1, 94, 0, 10, 2500, 2500, 3, 91, 47], [47, "每日等级提升20级（{0}/{1}）", "Text_DailyLevelIncreaseByLevels", 1, 95, 0, 20, 5000, 5000, 5, 91], [48, "每日捡到1个秘宝（{0}/{1}）", "Text_PickUpTreasuresEveryDay", 1, 101, 0, 1, 250, 250, 0, 101, 49], [49, "每日捡到3个秘宝（{0}/{1}）", "Text_PickUpTreasuresEveryDay", 1, 102, 0, 3, 750, 750, 1, 101, 50], [50, "每日捡到6个秘宝（{0}/{1}）", "Text_PickUpTreasuresEveryDay", 1, 103, 0, 6, 1500, 1500, 2, 101, 51], [51, "每日捡到10个秘宝（{0}/{1}）", "Text_PickUpTreasuresEveryDay", 1, 104, 0, 10, 2500, 2500, 3, 101, 52], [52, "每日捡到20个秘宝（{0}/{1}）", "Text_PickUpTreasuresEveryDay", 1, 105, 0, 20, 5000, 5000, 5, 101], [53, "每日观看1次广告（{0}/{1}）", "Text_WatchAdsPerDay", 1, 111, 0, 1, 250, 250, 5, 111, 54], [54, "每日观看3次广告（{0}/{1}）", "Text_WatchAdsPerDay", 1, 112, 0, 3, 750, 750, 15, 111, 55], [55, "每日观看6次广告（{0}/{1}）", "Text_WatchAdsPerDay", 1, 113, 0, 6, 1500, 1500, 30, 111, 56], [56, "每日观看10次广告（{0}/{1}）", "Text_WatchAdsPerDay", 1, 114, 0, 10, 2500, 2500, 50, 111, 57], [57, "每日观看20次广告（{0}/{1}）", "Text_WatchAdsPerDay", 1, 115, 0, 20, 5000, 5000, 100, 111], [58, "每周登录2天（{0}/{1}）", "Text_LoginDaysAWeek", 2, 201, 0, 2, 2000, 2000, 100, 201, 59], [59, "每周登录3天（{0}/{1}）", "Text_LoginDaysAWeek", 2, 202, 0, 3, 3000, 3000, 100, 201, 60], [60, "每周登录5天（{0}/{1}）", "Text_LoginDaysAWeek", 2, 203, 0, 5, 5000, 5000, 100, 201, 61], [61, "每周登录7天（{0}/{1}）", "Text_LoginDaysAWeek", 2, 204, 0, 7, 7000, 7000, 100, 201], [62, "每周时长达到30分钟2天（{0}/{1}）", "Text_UpTo30MinutesAndDaysPerWeek", 2, 211, 0, 2, 200, 200, 100, 211, 63], [63, "每周时长达到30分钟3天（{0}/{1}）", "Text_UpTo30MinutesAndDaysPerWeek", 2, 212, 0, 3, 300, 300, 300, 211, 64], [64, "每周时长达到30分钟5天（{0}/{1}）", "Text_UpTo30MinutesAndDaysPerWeek", 2, 213, 0, 5, 500, 500, 500, 211, 65], [65, "每周时长达到30分钟7天（{0}/{1}）", "Text_UpTo30MinutesAndDaysPerWeek", 2, 214, 0, 7, 700, 700, 1000, 211], [66, "每周击败50只美杜莎（{0}/{1}）", "Text_DefeatMedusaEveryWeek", 2, 221, 0, 50, 25000, 25000, 5, 221, 67], [67, "每周击败150只美杜莎（{0}/{1}）", "Text_DefeatMedusaEveryWeek", 2, 222, 0, 150, 75000, 75000, 15, 221, 68], [68, "每周击败300只美杜莎（{0}/{1}）", "Text_DefeatMedusaEveryWeek", 2, 223, 0, 300, 150000, 150000, 30, 221, 69], [69, "每周击败500只美杜莎（{0}/{1}）", "Text_DefeatMedusaEveryWeek", 2, 224, 0, 500, 250000, 250000, 50, 221, 70], [70, "每周击败1000只美杜莎（{0}/{1}）", "Text_DefeatMedusaEveryWeek", 2, 225, 0, 1000, 500000, 500000, 100, 221], [71, "每周击败50只蜘蛛精（{0}/{1}）", "Text_DefeatSpiderSpiritsEveryWeek", 2, 231, 0, 50, 25000, 25000, 5, 231, 72], [72, "每周击败150只蜘蛛精（{0}/{1}）", "Text_DefeatSpiderSpiritsEveryWeek", 2, 232, 0, 150, 75000, 75000, 15, 231, 73], [73, "每周击败300只蜘蛛精（{0}/{1}）", "Text_DefeatSpiderSpiritsEveryWeek", 2, 233, 0, 300, 150000, 150000, 30, 231, 74], [74, "每周击败500只蜘蛛精（{0}/{1}）", "Text_DefeatSpiderSpiritsEveryWeek", 2, 234, 0, 500, 250000, 250000, 50, 231, 75], [75, "每周击败1000只蜘蛛精（{0}/{1}）", "Text_DefeatSpiderSpiritsEveryWeek", 2, 235, 0, 1000, 500000, 500000, 100, 231], [76, "每周击败50只炫彩蜘蛛（{0}/{1}）", "Text_DefeatDazzlingSpidersEveryWeek", 2, 241, 0, 50, 25000, 25000, 5, 241, 77], [77, "每周击败150只炫彩蜘蛛（{0}/{1}）", "Text_DefeatDazzlingSpidersEveryWeek", 2, 241, 0, 150, 75000, 75000, 15, 241, 78], [78, "每周击败300只炫彩蜘蛛（{0}/{1}）", "Text_DefeatDazzlingSpidersEveryWeek", 2, 241, 0, 300, 150000, 150000, 30, 241, 79], [79, "每周击败500只炫彩蜘蛛（{0}/{1}）", "Text_DefeatDazzlingSpidersEveryWeek", 2, 241, 0, 500, 250000, 250000, 50, 241, 80], [80, "每周击败1000只炫彩蜘蛛（{0}/{1}）", "Text_DefeatDazzlingSpidersEveryWeek", 2, 241, 0, 1000, 500000, 500000, 100, 241], [81, "每周击败50只龙兽（{0}/{1}）", "Text_DefeatDragonBeastsEveryWeek", 2, 251, 0, 50, 25000, 25000, 5, 251, 82], [82, "每周击败150只龙兽（{0}/{1}）", "Text_DefeatDragonBeastsEveryWeek", 2, 252, 0, 150, 75000, 75000, 15, 251, 83], [83, "每周击败300只龙兽（{0}/{1}）", "Text_DefeatDragonBeastsEveryWeek", 2, 253, 0, 300, 150000, 150000, 30, 251, 84], [84, "每周击败500只龙兽（{0}/{1}）", "Text_DefeatDragonBeastsEveryWeek", 2, 254, 0, 500, 250000, 250000, 50, 251, 85], [85, "每周击败1000只龙兽（{0}/{1}）", "Text_DefeatDragonBeastsEveryWeek", 2, 255, 0, 1000, 500000, 500000, 100, 251], [86, "每周击败50只丧尸（{0}/{1}）", "Text_DefeatZombiesEveryWeek", 2, 261, 0, 50, 25000, 25000, 5, 261, 87], [87, "每周击败150只丧尸（{0}/{1}）", "Text_DefeatZombiesEveryWeek", 2, 262, 0, 150, 75000, 75000, 15, 261, 88], [88, "每周击败300只丧尸（{0}/{1}）", "Text_DefeatZombiesEveryWeek", 2, 263, 0, 300, 150000, 150000, 30, 261, 89], [89, "每周击败500只丧尸（{0}/{1}）", "Text_DefeatZombiesEveryWeek", 2, 264, 0, 500, 250000, 250000, 50, 261, 90], [90, "每周击败1000只丧尸（{0}/{1}）", "Text_DefeatZombiesEveryWeek", 2, 265, 0, 1000, 500000, 500000, 100, 261], [91, "每周击败50只变异布偶（{0}/{1}）", "Text_DefeatMutatedPuppetsEveryWeek", 2, 271, 0, 50, 25000, 25000, 5, 271, 92], [92, "每周击败150只变异布偶（{0}/{1}）", "Text_DefeatMutatedPuppetsEveryWeek", 2, 272, 0, 150, 75000, 75000, 15, 271, 93], [93, "每周击败300只变异布偶（{0}/{1}）", "Text_DefeatMutatedPuppetsEveryWeek", 2, 273, 0, 300, 150000, 150000, 30, 271, 94], [94, "每周击败500只变异布偶（{0}/{1}）", "Text_DefeatMutatedPuppetsEveryWeek", 2, 274, 0, 500, 250000, 250000, 50, 271, 95], [95, "每周击败1000只变异布偶（{0}/{1}）", "Text_DefeatMutatedPuppetsEveryWeek", 2, 275, 0, 1000, 500000, 500000, 100, 271], [96, "每周击败50名玩家（{0}/{1}）", "Text_DefeatPlayersPerWeek", 2, 281, 0, 50, 25000, 25000, 5, 281, 97], [97, "每周击败150名玩家（{0}/{1}）", "Text_DefeatPlayersPerWeek", 2, 282, 0, 150, 75000, 75000, 15, 281, 98], [98, "每周击败300名玩家（{0}/{1}）", "Text_DefeatPlayersPerWeek", 2, 283, 0, 300, 150000, 150000, 30, 281, 99], [99, "每周击败500名玩家（{0}/{1}）", "Text_DefeatPlayersPerWeek", 2, 284, 0, 500, 250000, 250000, 50, 281, 100], [100, "每周击败1000名玩家（{0}/{1}）", "Text_DefeatPlayersPerWeek", 2, 285, 0, 1000, 500000, 500000, 100, 281], [101, "每周等级提升10级（{0}/{1}）", "Text_UpgradeByLevelsPerWeek", 2, 291, 0, 10, 2500, 2500, 5, 291, 102], [102, "每周等级提升30级（{0}/{1}）", "Text_UpgradeByLevelsPerWeek", 2, 292, 0, 30, 7500, 7500, 15, 291, 103], [103, "每周等级提升60级（{0}/{1}）", "Text_UpgradeByLevelsPerWeek", 2, 293, 0, 60, 15000, 15000, 30, 291, 104], [104, "每周等级提升100级（{0}/{1}）", "Text_UpgradeByLevelsPerWeek", 2, 294, 0, 100, 25000, 25000, 50, 291, 105], [105, "每周等级提升200级（{0}/{1}）", "Text_UpgradeByLevelsPerWeek", 2, 295, 0, 200, 50000, 50000, 100, 291], [106, "每周捡到10个秘宝（{0}/{1}）", "Text_PickUpTreasuresEveryWeek", 2, 301, 0, 10, 2500, 2500, 5, 301, 107], [107, "每周捡到30个秘宝（{0}/{1}）", "Text_PickUpTreasuresEveryWeek", 2, 302, 0, 30, 7500, 7500, 15, 301, 108], [108, "每周捡到60个秘宝（{0}/{1}）", "Text_PickUpTreasuresEveryWeek", 2, 303, 0, 60, 15000, 15000, 30, 301, 109], [109, "每周捡到100个秘宝（{0}/{1}）", "Text_PickUpTreasuresEveryWeek", 2, 304, 0, 100, 25000, 25000, 50, 301, 110], [110, "每周捡到200个秘宝（{0}/{1}）", "Text_PickUpTreasuresEveryWeek", 2, 305, 0, 200, 50000, 50000, 100, 301], [111, "每周观看10次广告（{0}/{1}）", "Text_WatchAdsPerWeek", 2, 311, 0, 10, 2500, 2500, 50, 311, 112], [112, "每周观看30次广告（{0}/{1}）", "Text_WatchAdsPerWeek", 2, 312, 0, 30, 7500, 7500, 150, 311, 113], [113, "每周观看60次广告（{0}/{1}）", "Text_WatchAdsPerWeek", 2, 313, 0, 60, 15000, 15000, 300, 311, 114], [114, "每周观看100次广告（{0}/{1}）", "Text_WatchAdsPerWeek", 2, 314, 0, 100, 25000, 25000, 500, 311, 115], [115, "每周观看200次广告（{0}/{1}）", "Text_WatchAdsPerWeek", 2, 315, 0, 200, 50000, 50000, 1000, 311]];
class TaskConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$1);
    }
}

var foreign35 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    TaskConfig: TaskConfig
});

const EXCELDATA = [["id", "TriggerGuid", "ModelGuid"], ["", "", ""], [1, "02EC2335", "14DAF24C"], [2, "1686B162", "1FF9CDFC"], [3, "1CD5126B", "2D3CA1CB"]];
class TrampolineConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA);
    }
}

var foreign36 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    TrampolineConfig: TrampolineConfig
});

class GameConfig {
    /**
    * 多语言设置
    * @param languageIndex 语言索引(-1为系统默认语言)
    * @param getLanguageFun 根据key获取语言内容的方法
    */
    static initLanguage(languageIndex, getLanguageFun) {
        ConfigBase.initLanguage(languageIndex, getLanguageFun);
        this.configMap.clear();
    }
    static getConfig(ConfigClass) {
        if (!this.configMap.has(ConfigClass.name)) {
            this.configMap.set(ConfigClass.name, new ConfigClass());
        }
        return this.configMap.get(ConfigClass.name);
    }
    static get Action() { return this.getConfig(ActionConfig); }
    ;
    static get Ads() { return this.getConfig(AdsConfig); }
    ;
    static get Assets() { return this.getConfig(AssetsConfig); }
    ;
    static get BagInfo() { return this.getConfig(BagInfoConfig); }
    ;
    static get Coin() { return this.getConfig(CoinConfig); }
    ;
    static get ColdWeapon() { return this.getConfig(ColdWeaponConfig); }
    ;
    static get Color() { return this.getConfig(ColorConfig); }
    ;
    static get DressData() { return this.getConfig(DressDataConfig); }
    ;
    static get DressProgress() { return this.getConfig(DressProgressConfig); }
    ;
    static get Language() { return this.getConfig(LanguageConfig); }
    ;
    static get MonsterInfo() { return this.getConfig(MonsterInfoConfig); }
    ;
    static get Music() { return this.getConfig(MusicConfig); }
    ;
    static get NPC() { return this.getConfig(NPCConfig); }
    ;
    static get OnlineRewards() { return this.getConfig(OnlineRewardsConfig); }
    ;
    static get QuickEmoji() { return this.getConfig(QuickEmojiConfig); }
    ;
    static get QuickTalk() { return this.getConfig(QuickTalkConfig); }
    ;
    static get Task() { return this.getConfig(TaskConfig); }
    ;
    static get Trampoline() { return this.getConfig(TrampolineConfig); }
    ;
}
GameConfig.configMap = new Map();

var foreign27 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    GameConfig: GameConfig
});

let Ads = class Ads extends mw.Script {
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
        if (mw.SystemUtil.isClient()) {
            this.onStartC();
        }
        else if (mw.SystemUtil.isServer()) {
            this.onStartS();
        }
    }
    /**
     * 周期函数 每帧执行
     * 此函数执行需要将this.useUpdate赋值为true
     * @param dt 当前帧与上一帧的延迟 / 秒
     */
    onUpdate(dt) {
        if (mw.SystemUtil.isClient()) {
            this.onUpdateC(dt);
        }
        else if (mw.SystemUtil.isServer()) {
            this.onUpdateS(dt);
        }
    }
    /**----------------------------------------[客户端]---------------------------------------- */
    /**客户端的onStart */
    async onStartC() {
        await ModuleService.ready();
        GameConfig.Ads.getAllElement().forEach(async (value, index, array) => {
            let npc = await GameObject.asyncFindGameObjectById(value.Role);
            npc.displayName = value.Del;
            GeneralManager.rpcPlayEffectOnPlayer(value.EffectId, npc, mw.HumanoidSlotType.BackOrnamental, 0, value.EffectOffset, new mw.Rotation(value.EffectRot), value.EffectScale.multiply(1));
            if (value.StandbyAnimation) {
                let npcAnima = PlayerManagerExtesion.loadAnimationExtesion(npc, value.StandbyAnimation, false);
                npcAnima.loop = 0;
                npcAnima.play();
            }
            if (value.rightWeaponGuid) {
                let rightWeapon = await SpawnManager.asyncSpawn({ guid: value.rightWeaponGuid, replicates: false });
                npc.attachToSlot(rightWeapon, mw.HumanoidSlotType.RightHand);
            }
            if (value.leftWeaponGuid) {
                let leftWeapon = await SpawnManager.asyncSpawn({ guid: value.leftWeaponGuid, replicates: false });
                npc.attachToSlot(leftWeapon, mw.HumanoidSlotType.LeftHand);
            }
            let trigger = await GameObject.asyncFindGameObjectById(value.Trigger);
            trigger.onEnter.add((char) => {
                if (char != Player.localPlayer.character)
                    return;
                // if (GlobalData.isOpenIAA) {
                //     adsTipsPanel.showAdTips(value.id, AdType.WeaponSet1);
                // } else {
                //     shopModuleC.ads(value.id);
                // }
            });
        });
    }
    /**客户端的onUpdate */
    onUpdateC(dt) {
    }
    /**----------------------------------------[客户端]---------------------------------------- */
    /**----------------------------------------[服务端]---------------------------------------- */
    /**服务端的onStart */
    onStartS() {
    }
    /**服务端的onUpdate */
    onUpdateS(dt) {
    }
};
Ads = __decorate([
    Component
], Ads);
var Ads$1 = Ads;

var foreign1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: Ads$1
});

// import PlayerModuleS from "../module/PlayerModule/PlayerModuleS";
// import { PrefabEvent } from "../Prefabs/PrefabEvent";
// import { Utils } from "../Tools/utils";
// import EnemyLifebar_Generate from "../ui-generate/common/EnemyLifebar_generate";
// @Component
// export default class Boss extends Script {
//     @mw.Property({ displayName: "体型大小", group: "设置属性", range: { min: 1, max: 5, showSlider: true } })
//     private bossScale: number = 1;
//     @mw.Property({ displayName: "血量", group: "设置属性", tooltip: "血量", range: { min: 100, max: 100000, showSlider: true } })
//     private maxHp: number = 100;
//     @mw.Property({ displayName: "当前剩余血量", group: "设置属性", tooltip: "当前剩余血量", replicated: true, onChanged: "onHpChanged" })
//     private curHp: number = 0;
//     @mw.Property({ displayName: "路径", group: "设置属性", tooltip: "路径" })
//     private pathVector: mw.Vector[] = [mw.Vector.zero];
//     @mw.Property({ displayName: "移动速度", group: "设置属性", tooltip: "移动速度", range: { min: 100, max: 1000, showSlider: true } })
//     private moveSpeed: number = 100;
//     @mw.Property({ displayName: "爆炸特效", group: "设置属性", tooltip: "爆炸特效" })
//     private explosionEffect: string = "27422";
//     @mw.Property({ displayName: "重生时间", group: "设置属性", tooltip: "重生时间", range: { min: 5, max: 60, showSlider: true } })
//     private respawnTime: number = 5;
//     @mw.Property({ displayName: "重生特效", group: "设置属性", tooltip: "重生特效" })
//     private respawnEffect: string = "142750";
//     private boss: mw.Character = null;
//     /** 当脚本被实例后，会在第一帧更新前调用此函数 */
//     protected onStart(): void {
//         this.onStartCS();
//     }
//     /**onStart */
//     private async onStartCS(): Promise<void> {
//         await ModuleService.ready();
//         this.boss = this.gameObject as mw.Character;
//         await this.boss.asyncReady();
//         this.boss.displayName = "";
//         if (mw.SystemUtil.isClient()) {
//             this.onStartC();
//         } else if (mw.SystemUtil.isServer()) {
//             this.onStartS();
//         }
//     }
//     /**
//      * 周期函数 每帧执行
//      * 此函数执行需要将this.useUpdate赋值为true
//      * @param dt 当前帧与上一帧的延迟 / 秒
//      */
//     protected onUpdate(dt: number): void {
//         if (mw.SystemUtil.isClient()) {
//             this.onUpdateC(dt);
//         } else if (mw.SystemUtil.isServer()) {
//             this.onUpdateS(dt);
//         }
//     }
//     /**--------------------------------【客户端】-------------------------------- */
//     private cubeLifebar: EnemyLifebar_Generate = null;
//     private cubeLifebarWidget: mw.UIWidget = null;
//     private isInitLifebar = false;
//     /**客户端的onStart */
//     private onStartC(): void {
//         this.useUpdate = false;
//         this.initDataC();
//     }
//     private initDataC(): void {
//         this.preHp = Math.floor(this.maxHp);
//         this.initLifebar();
//     }
//     private async initLifebar(): Promise<void> {
//         this.cubeLifebar = UIService.create(EnemyLifebar_Generate);
//         this.cubeLifebarWidget = await mw.GameObject.asyncSpawn<mw.UIWidget>(
//             "UIWidget",
//             {
//                 replicates: false
//             });
//         this.cubeLifebarWidget.setTargetUIWidget(this.cubeLifebar.uiWidgetBase);
//         this.cubeLifebarWidget.widgetSpace = mw.WidgetSpaceMode.OverheadUI;
//         let boss = this.gameObject as mw.Character;
//         boss.attachToSlot(this.cubeLifebarWidget, mw.HumanoidSlotType.Rings);
//         this.cubeLifebarWidget.occlusionEnable = false;
//         this.cubeLifebarWidget.scaledByDistanceEnable = true;
//         this.cubeLifebarWidget.hideByDistanceEnable = true;
//         this.cubeLifebarWidget.headUIMaxVisibleDistance = 10000;
//         this.isInitLifebar = true;
//         this.onHpChanged();
//     }
//     /**客户端的onUpdate */
//     private onUpdateC(dt: number): void {
//     }
//     private preHp: number = 0;
//     /**
//      * 血量改变
//      */
//     private onHpChanged(): void {
//         if (!this.isInitLifebar) return;
//         if (this.preHp <= 0) this.preHp = Math.floor(this.maxHp);
//         let damage = this.preHp - this.curHp;
//         if (damage > 0) this.preHp = this.curHp;
//         this.cubeLifebar.mLifebarProgressBar.percent = this.curHp / this.maxHp;
//         this.cubeLifebar.mHpTextBlock.text = `${Math.floor(this.curHp)}/${Math.floor(this.maxHp)}`;
//         if (this.curHp <= 0) {
//             if (this.cubeLifebarWidget.getVisibility()) {
//                 this.cubeLifebarWidget.setVisibility(false);
//             }
//         } else if (this.curHp >= this.maxHp) {
//             if (!this.cubeLifebarWidget.getVisibility()) {
//                 this.cubeLifebarWidget.setVisibility(true);
//             }
//         }
//     }
//     /**--------------------------------【客户端】-------------------------------- */
//     /**--------------------------------【服务端】-------------------------------- */
//     private playerModuleS: PlayerModuleS = null;
//     private get getPlayerModuleS(): PlayerModuleS {
//         if (this.playerModuleS == null) {
//             this.playerModuleS = ModuleService.getModule(PlayerModuleS);
//         }
//         return this.playerModuleS;
//     }
//     /**服务端的onStart */
//     private onStartS(): void {
//         this.useUpdate = true;
//         this.initDataS();
//         this.initMove();
//         this.bindEventS();
//     }
//     private initDataS(): void {
//         this.maxHp = Math.floor(this.maxHp);
//         this.curHp = this.maxHp;
//         // this.boss.displayName = "";
//         this.boss.worldTransform.scale = mw.Vector.one.multiply(this.bossScale);
//         this.boss.setDescription([Utils.getBoss()]);
//     }
//     /**
//      * 绑定事件
//      */
//     private bindEventS(): void {
//         PrefabEvent.PrefabEvtFight.onHit(this.playerAtkEnemyS.bind(this));
//     }
//     /**
//      * 玩家攻击敌人
//      * @param senderGuid
//      * @param targetGuid
//      * @param damage
//      * @param hitPoint
//      * @returns
//      */
//     private playerAtkEnemyS(senderGuid: string, targetGuid: string, damage: number, hitPoint: mw.Vector): void {
//         if (this.gameObject.gameObjectId != targetGuid) return;
//         if (this.curHp <= 0) return;
//         let tmpHp = this.curHp - damage;
//         if (tmpHp >= 0) {
//             this.curHp = tmpHp;
//         } else {
//             this.curHp = 0;
//         }
//         if (this.curHp <= 0) {
//             this.dieS();
//             this.getPlayerModuleS.playerKillEnemy(senderGuid, this.maxHp);
//             TimeUtil.delaySecond(this.respawnTime).then(() => {
//                 this.curHp = this.maxHp;
//                 this.respawnS();
//             });
//         }
//         this.getPlayerModuleS.playerAtkEnemyFlyText(senderGuid, hitPoint, damage);
//     }
//     private dieS(): void {
//         this.setVisibilityS(false);
//         EffectService.playAtPosition(
//             this.explosionEffect,
//             this.gameObject.worldTransform.position,
//             {
//                 scale: mw.Vector.one.multiply(1)
//             });
//     }
//     private respawnS(): void {
//         this.boss.setDescription([Utils.getBoss()]);
//         this.setVisibilityS(true);
//         EffectService.playAtPosition(
//             this.respawnEffect,
//             this.gameObject.worldTransform.position,
//             {
//                 scale: mw.Vector.one.multiply(1)
//             });
//     }
//     /**
//      * 设置物体是否被显示
//      * @param isVisibility
//      */
//     private setVisibilityS(isVisibility: boolean): void {
//         this.boss.ragdollEnabled = !isVisibility;
//         this.useUpdate = isVisibility;
//     }
//     private initMove(): void {
//         this.targetPos = this.pathVector[this.index];
//         this.boss.maxWalkSpeed = this.moveSpeed;
//     }
//     private frameCount: number = 0;
//     private maxFrameCount: number = 1;
//     /**服务端的onUpdate */
//     private onUpdateS(dt: number): void {
//         this.frameCount++;
//         if (this.frameCount < this.maxFrameCount) return;
//         this.frameCount = 0;
//         this.updateMove();
//     }
//     private index: number = 0;
//     private pathFlag: boolean = true;
//     private curBossDir: mw.Vector = mw.Vector.zero;
//     private targetPos: mw.Vector = mw.Vector.zero;
//     private targetDistance: number = 0;
//     private updateMove(): void {
//         if (!this.pathVector || this.pathVector.length <= 1) return;
//         this.curBossDir = this.targetPos.clone().add(this.targetPos.clone().subtract(this.boss.worldTransform.position.clone()))
//         this.boss.lookAt(this.curBossDir);
//         this.boss.addMovement(mw.Vector.forward);
//         this.targetDistance = Math.sqrt(
//             Math.pow(this.boss.worldTransform.position.x - this.pathVector[this.index].x, 2) +
//             Math.pow(this.boss.worldTransform.position.y - this.pathVector[this.index].y, 2)
//         );
//         //到达寻路点
//         if (this.targetDistance > 50) return;
//         if (this.pathFlag && this.index < this.pathVector.length - 1) {
//             this.index++
//             if (this.index == this.pathVector.length - 1) this.pathFlag = false;
//         } else if (!this.pathFlag && this.index > 0) {
//             this.index--
//             if (this.index == 0) this.pathFlag = true;
//         }
//         this.targetPos = this.pathVector[this.index];
//     }
//     /**--------------------------------【服务端】-------------------------------- */
//     /** 脚本被销毁时最后一帧执行完调用此函数 */
//     protected onDestroy(): void {
//     }
// }

var foreign2 = /*#__PURE__*/Object.freeze({
    __proto__: null
});

class GlobalData {
    static get mpStr() {
        return GameConfig.Language.Text_SoulPower.Value;
    }
    static get atkStr() {
        return GameConfig.Language.Text_MartialSoul.Value;
    }
    static get weaponStr() {
        return GameConfig.Language.Text_MartialSoul.Value;
    }
    static get skinStr() {
        return GameConfig.Language.Text_SoulMaster.Value;
    }
    static get equipStr() {
        return GameConfig.Language.Text_SoulBone.Value;
    }
    static get petStr() {
        return GameConfig.Language.Text_Ayakashi.Value;
    }
    static get rarityStr1() {
        return GameConfig.Language.Text_Ordinary.Value;
    }
    static get rarityStr2() {
        return GameConfig.Language.Text_Rare.Value;
    }
    static get rarityStr3() {
        return GameConfig.Language.Text_Epic.Value;
    }
    static get rarityStr4() {
        return GameConfig.Language.Text_Legend.Value;
    }
    static get skillName_1() {
        return GameConfig.Language.Text_KillingGodDomain.Value;
    }
    static get gameName() {
        return GameConfig.Language.Text_DoushenContinent_MySoulRingUnlimitedUpgrade.Value;
    }
}
GlobalData.languageId = -1;
/**log级别"None": "0", "Log": "1", "Warn": "2", "Error": "3" */
GlobalData.logLevel = 0;
/**是否隐藏头顶UI */
GlobalData.isHideHeadUI = false;
/**是否开启IAA */
GlobalData.isOpenIAA = false;
/**是否开启截图模式 */
GlobalData.isOpenCcreenshot = false;
/**是否开启攻击范围检测可视化 */
GlobalData.isDebug = false;
GlobalData.worldRankCount = 500;
/**全局UI点击音效Guid */
GlobalData.uiClickSoundGuid = GameConfig.Assets.getElement(1).Guid;
/**爆炸金币特效Guid */
GlobalData.explosiveCoinGuid = GameConfig.Assets.getElement(11).Guid;
/**死亡墓碑Guid */
GlobalData.tombstoneGuid = GameConfig.Assets.getElement(12).Guid;
/**点击商店Item(限制) */
GlobalData.isCanClickShopItem = true;
/**On-Music-Icon */
GlobalData.onMusicIconGuid = GameConfig.Assets.getElement(3).Guid;
/**Off-Music-Icon */
GlobalData.offMusicIconGuid = GameConfig.Assets.getElement(2).Guid;
/** 每日刷新在线奖励时间格式为：时:分（0：0）*/
GlobalData.dailyRefreshOnlineRewardTime = "4:0";
/**每日刷新时间（目前是凌晨4点，格式为4:0） */
GlobalData.dailyRefreshTime = "4:0";
/**每周刷新时间（目前是每周一凌晨4点，格式为4:0） */
GlobalData.weeklyRefreshTime = "4:0";
/**NPC-Role */
// public static npcGuidStr: string = GameConfig.Assets.getElement(19).Guid + "," + GameConfig.Assets.getElement(7).Guid;
/**NPC-Weapon */
// public static weaponGuidStr: string = GameConfig.Assets.getElement(20).Guid;
/**引导线特效Guid */
GlobalData.guideEffectGuid = GameConfig.Assets.getElement(21).Guid;
/**引导目标点特效Guid */
GlobalData.targetEffectGuid = GameConfig.Assets.getElement(22).Guid;
GlobalData.atk = 0;
GlobalData.hp = 0;
GlobalData.totalBagLen = 157;
GlobalData.upgradeExpMultiple = 500;
GlobalData.monsterHurt = 200;
GlobalData.attackMp = 1;
GlobalData.skillCD_1 = 60;
GlobalData.skillMp_1 = 100;
GlobalData.skillLvLimit_1 = 90;
GlobalData.skillContinue_1 = 20;
GlobalData.baseSkillDamage = 1;
GlobalData.skillSoundId_1 = `307720`;
GlobalData.skillEffectId_1 = `113913`;
GlobalData.skillAnimation_1 = "284915";
GlobalData.skillScale_1 = 1.5;
GlobalData.pathStrMap = new Map([
    [1, "1C38507C"],
    [2, "0120DDB3"],
    [3, "08B26B13"],
    [4, "33AD2F92"],
    [5, "098050A0"],
    [6, "0118B262"]
]);
GlobalData.signInDays = 7;
GlobalData.addCoinCount = 2888888;
GlobalData.addDiamondCount = 5;
GlobalData.addBoneCount = 5;
GlobalData.arkIcon = "312541";
GlobalData.coinIcon = "151950";
GlobalData.diamondIcon = "103220";
GlobalData.boneIcon = "351119";

var foreign37 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: GlobalData
});

class Console {
    /**普通日志 */
    static log(...data) {
        if (GlobalData.logLevel < 1)
            return;
        console.log(data);
    }
    /**警告日志 */
    static warn(...data) {
        if (GlobalData.logLevel < 2)
            return;
        console.warn(data);
    }
    /**报错日志 */
    static error(...data) {
        if (GlobalData.logLevel < 3)
            return;
        console.error(data);
    }
}

var foreign98 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: Console
});

var PrefabEvent;
(function (PrefabEvent) {
    /**
     * 网络事件key
     */
    var _onEventNetKey = "PrefabEventNeyKey";
    /**
     * 本地事件key
     */
    var _onEventKey = "PrefabEvetKey";
    /**
     * 重新提交数据保存
     */
    var _retrySetCustomDataList = [];
    /**
     * 初始化事件监听器
     */
    function initEvent() {
        if (mwext["PrefabEvent"]) {
            return;
        }
        mwext["PrefabEvent"] = true;
        if (SystemUtil.isServer()) {
            DataStorage.setTemporaryStorage(mw.SystemUtil.isPIE);
            Event.addLocalListener("__setCustomDataCache", (k, v) => {
                _retrySetCustomDataList.push({ key: k, val: v });
            });
            setInterval(() => {
                let keyMap = new Map();
                _retrySetCustomDataList.forEach(e => {
                    keyMap.set(e.key, e.val);
                });
                _retrySetCustomDataList = [];
                keyMap.forEach((v, k, maps) => {
                    _retrySetCustomDataList.push({ key: k, val: v });
                });
                while (_retrySetCustomDataList.length > 0) {
                    let data = _retrySetCustomDataList.shift();
                    if (data) {
                        DataStorage.asyncSetData(data.key, data.val).then((res) => {
                            if (res != mw.DataStorageResultCode.Success) {
                                _retrySetCustomDataList.push(data);
                            }
                        }).catch((err) => {
                            _retrySetCustomDataList.push(data);
                        });
                    }
                }
            }, 6500);
        }
        var call = (clazzName, funcName, ...params) => {
            if (!PrefabEvent[clazzName]) {
                Console.error("无效协议 : " + clazzName);
                return;
            }
            if (!PrefabEvent[clazzName][funcName]) {
                Console.error("无效协议 : " + clazzName + ":" + funcName);
                return;
            }
            Console.log("调用 : " + _onEventKey + ":" + clazzName + ":" + funcName);
            Event.dispatchToLocal(_onEventKey + ":" + clazzName + ":" + funcName, ...params);
        };
        if (mw.SystemUtil.isServer()) {
            Event.addClientListener(_onEventNetKey, (player, clazzName, funcName, ...params) => {
                call(clazzName, funcName, ...params);
            });
        }
        if (mw.SystemUtil.isClient()) {
            Event.addServerListener(_onEventNetKey, (clazzName, funcName, ...params) => {
                call(clazzName, funcName, ...params);
            });
        }
    }
    /**
     * 回调客户端事件
     * @param clazzName
     * @param funcName
     * @param params
     */
    function callClientFunc(clazzName, funcName, ...params) {
        Event.dispatchToLocal(_onEventKey + ":" + clazzName + ":" + funcName, ...params);
    }
    /**
     * 回调事件
     * @param clazzName
     * @param funcName
     * @param params
     */
    function callFunc(clazzName, funcName, ...params) {
        if (mw.SystemUtil.isClient()) {
            Event.dispatchToServer(_onEventNetKey, clazzName, funcName, ...params);
        }
        if (mw.SystemUtil.isServer()) {
            Event.dispatchToAllClient(_onEventNetKey, clazzName, funcName, ...params);
        }
        Event.dispatchToLocal(_onEventKey + ":" + clazzName + ":" + funcName, ...params);
    }
    /**
     * 监听事件
     * @param clazzName
     * @param funcName
     * @param callback
     */
    function onFunc(clazzName, funcName, callback) {
        Console.log("注册 : " + _onEventKey + ":" + clazzName + ":" + funcName);
        return Event.addLocalListener(_onEventKey + ":" + clazzName + ":" + funcName, callback);
    }
    /**
     * 存档工具
     */
    class DBSaveBase {
    }
    /**
 * 存档工具
 */
    class DBServerTool {
        /**
         * 获取玩家数据缓存
         * @param playerId
         * @returns
         */
        static getPlayerDataCache(playerId) {
            let dataCache = null;
            if (mwext["PrefabEventDataCache"]) {
                dataCache = mwext["PrefabEventDataCache"];
            }
            else {
                mwext["PrefabEventDataCache"] = {};
                dataCache = mwext["PrefabEventDataCache"];
            }
            if (!dataCache[playerId]) {
                dataCache[playerId] = {};
            }
            return dataCache[playerId];
        }
        /**
         * (服务端)获取存档
         * @param playerId
         * @param key
         * @returns
         */
        static async asyncGetValue(playerId, key) {
            //Console.error("asyncGetValue : 获取存档数据开始");
            return new Promise((resolve, reject) => {
                let playerDataCache = this.getPlayerDataCache(playerId);
                let dataKey = key + "_" + playerId + "_key";
                let dataVal = null;
                let keys = Object.keys(playerDataCache);
                keys.forEach((v, i, arr) => {
                    if (v == dataKey) {
                        dataVal = playerDataCache[dataKey];
                    }
                });
                if (dataVal) {
                    let res = null;
                    let db = dataVal;
                    if (!db) {
                        resolve(null);
                        return;
                    }
                    res = JSON.parse(db);
                    resolve(res.value);
                    return;
                }
                GeneralManager.asyncRpcGetData(dataKey).then((v) => {
                    let res = null;
                    let db = v;
                    if (!db) {
                        resolve(null);
                    }
                    res = JSON.parse(db);
                    playerDataCache[dataKey] = db;
                    //Console.error("asyncGetValue : 获取存档数据成功");
                    resolve(res.value);
                }).catch(err => {
                    Console.log(err);
                    reject("不存在这份存档，可能是新玩家");
                });
            });
        }
        /**
         * (服务端)设置存档
         * @param playerId
         * @param key
         * @param val
         */
        static async asyncSetValue(playerId, key, val) {
            return new Promise((resolve, reject) => {
                let data = new DBSaveBase();
                data.value = val;
                let dataStr = JSON.stringify(data);
                let playerDataCache = this.getPlayerDataCache(playerId);
                let dataKey = key + "_" + playerId + "_key";
                if (playerDataCache[dataKey] == dataStr) {
                    resolve();
                    return;
                }
                playerDataCache[dataKey] = dataStr;
                Event.dispatchToLocal("__setCustomDataCache", key + "_" + playerId + "_key", dataStr);
                resolve();
            });
        }
    }
    PrefabEvent.DBServerTool = DBServerTool;
    (function (AttrType) {
        /** 最大血量  */
        AttrType[AttrType["MaxHp"] = 0] = "MaxHp";
        /** 最大蓝量 */
        AttrType[AttrType["MaxMp"] = 1] = "MaxMp";
        /** 攻击力 */
        AttrType[AttrType["Attack"] = 2] = "Attack";
        /** 魔法力 */
        AttrType[AttrType["Magic"] = 3] = "Magic";
        /** 防御力 */
        AttrType[AttrType["Def"] = 4] = "Def";
        /** 魔法防御力 */
        AttrType[AttrType["MDef"] = 5] = "MDef";
        /** 速度 */
        AttrType[AttrType["Speed"] = 6] = "Speed";
        /** 跳跃力 */
        AttrType[AttrType["Jump"] = 7] = "Jump";
        /** 攻击速度 */
        AttrType[AttrType["AttackSpeed"] = 8] = "AttackSpeed";
        /** 攻击距离 */
        AttrType[AttrType["AttackDistance"] = 9] = "AttackDistance";
    })(PrefabEvent.AttrType || (PrefabEvent.AttrType = {}));
    /**
     * 属性协议
     */
    class PrefabEvtAttr {
        /**
         * (双端)添加属性
         * @param senderGuid 发起对象Guid
         * @param targetGuid 目标对象Guid
         * @param val 值
         * @param attrType 属性类型
         */
        static addAttrVal(senderGuid, targetGuid, val, attrType) {
            callFunc(this.name, this.onAddAttrVal.name, senderGuid, targetGuid, val, attrType);
        }
        /**
         * (双端)监听属性改变
         * @param callback 回调
         * @returns
         */
        static onAddAttrVal(callback) {
            return onFunc(this.name, this.onAddAttrVal.name, callback);
        }
    }
    PrefabEvent.PrefabEvtAttr = PrefabEvtAttr;
    (function (EquipSlot) {
        /** 武器 */
        EquipSlot[EquipSlot["Weapon"] = 1] = "Weapon";
    })(PrefabEvent.EquipSlot || (PrefabEvent.EquipSlot = {}));
    /**
     * 装备协议
     */
    class PrefabEvtEquip {
        /**
         * (双端) 穿戴装备
         * @param targetGuid 对象Guid
         * @param slot 槽位
         * @param equipGuid 装备Guid
         */
        static equip(targetGuid, slot, equipGuid) {
            callFunc(this.name, this.onEquip.name, targetGuid, slot, equipGuid);
        }
        /**
         * (双端)监听装备改变
         * @param callback
         * @returns
         */
        static onEquip(callback) {
            return onFunc(this.name, this.onEquip.name, callback);
        }
    }
    PrefabEvent.PrefabEvtEquip = PrefabEvtEquip;
    /**
     * 玩家信息类型
     */
    let PlayerInfoType;
    (function (PlayerInfoType) {
        /** 名字 */
        PlayerInfoType[PlayerInfoType["Name"] = 0] = "Name";
        /** 等级 */
        PlayerInfoType[PlayerInfoType["Level"] = 1] = "Level";
        /** 经验 */
        PlayerInfoType[PlayerInfoType["Exp"] = 2] = "Exp";
        /** 金币 */
        PlayerInfoType[PlayerInfoType["Gold"] = 3] = "Gold";
        /** 积分 */
        PlayerInfoType[PlayerInfoType["Score"] = 4] = "Score";
        /** 关卡 */
        PlayerInfoType[PlayerInfoType["Stage"] = 5] = "Stage";
        /** 人气 */
        PlayerInfoType[PlayerInfoType["Popularity"] = 6] = "Popularity";
    })(PlayerInfoType = PrefabEvent.PlayerInfoType || (PrefabEvent.PlayerInfoType = {}));
    /**
     * 玩家信息协议
     */
    class PrefabEvtPlayerInfo {
        /**
         * (双端)设置属性
         * @param senderGuid 发起对象Guid
         * @param targetGuid 目标对象Guid
         * @param val 值
         * @param infoType 信息类型
         */
        static setPlayerInfo(senderGuid, targetGuid, val, infoType) {
            callFunc(this.name, this.onSetPlayerInfo.name, senderGuid, targetGuid, val, infoType);
        }
        /**
         * (双端)监听属性改变
         * @param callback 回调
         * @returns
         */
        static onSetPlayerInfo(callback) {
            return onFunc(this.name, this.onSetPlayerInfo.name, callback);
        }
        /**
         * (双端)添加属性
         * @param senderGuid 发起对象Guid
         * @param targetGuid 目标对象Guid
         * @param val 值
         * @param infoType 信息类型
         */
        static addPlayerInfo(senderGuid, targetGuid, val, attrType) {
            callFunc(this.name, this.onAddPlayerInfo.name, senderGuid, targetGuid, val, PlayerInfoType);
        }
        /**
         * (双端)监听属性改变
         * @param callback 回调
         * @returns
         */
        static onAddPlayerInfo(callback) {
            return onFunc(this.name, this.onAddPlayerInfo.name, callback);
        }
        /**
         * (双端) 设置玩家名字
         * @param senderGuid 发起者Guid
         * @param targetGuid 目标对象Guid (玩家character)
         * @param name 名字
         */
        static setPlayerName(senderGuid, targetGuid, name) {
            callFunc(this.name, this.onSetPlayerName.name, senderGuid, targetGuid, name);
        }
        /**
         * (双端)监听玩家名字改变
         * @param callback 回调
         * @returns
         */
        static onSetPlayerName(callback) {
            return onFunc(this.name, this.onSetPlayerName.name, callback);
        }
    }
    PrefabEvent.PrefabEvtPlayerInfo = PrefabEvtPlayerInfo;
    /**
     * 攻击协议
     */
    class PrefabEvtFight {
        /**
         * (双端)击中目标
         * @param attackerGuid 发起对象Guid
         * @param targetGuid 目标对象Guid
         * @param damage 伤害
         * @param hitPoint 击中点
         */
        static hit(senderGuid, targetGuid, damage, hitPoint) {
            callFunc(this.name, this.onHit.name, senderGuid, targetGuid, damage, hitPoint);
        }
        /**
         * (双端)监听击中目标
         * @param callback 回调
         * @returns
         */
        static onHit(callback) {
            return onFunc(this.name, this.onHit.name, callback);
        }
        /**
         * (双端)发起伤害
         * @param attackerGuid 发起对象Guid
         * @param targetGuid 目标对象Guid
         * @param damage 伤害
         */
        static hurt(senderGuid, targetGuid, damage) {
            callFunc(this.name, this.onHurt.name, senderGuid, targetGuid, damage);
        }
        /**
         * (双端)监听受到伤害
         * @param callback 回调
         * @returns
         */
        static onHurt(callback) {
            return onFunc(this.name, this.onHurt.name, callback);
        }
        /**
         * (双端)发起治疗
         * @param attackerGuid 发起对象Guid
         * @param targetGuid 目标对象Guid
         * @param cureVal 治疗数值
         */
        static cure(senderGuid, targetGuid, cureVal) {
            callFunc(this.name, this.onCure.name, senderGuid, targetGuid, cureVal);
        }
        /**
         * (双端)监听受到治疗
         * @param callback 回调
         * @returns
         */
        static onCure(callback) {
            return onFunc(this.name, this.onCure.name, callback);
        }
        /**
         * (双端)发起死亡
         * @param targetGuid
         */
        static die(targetGuid) {
            callFunc(this.name, this.onDie.name, targetGuid);
        }
        /**
         * (双端)监听对象死亡
         * @param callback
         * @returns
         */
        static onDie(callback) {
            return onFunc(this.name, this.onDie.name, callback);
        }
        /**
         * (双端)通知复活
         * @param targetGuid 对象id
         */
        static revive(targetGuid) {
            callFunc(this.name, this.onRevive.name, targetGuid);
        }
        /**
         * (双端)监听复活
         * @param callback 回调
         * @returns
         */
        static onRevive(callback) {
            return onFunc(this.name, this.onRevive.name, callback);
        }
    }
    PrefabEvent.PrefabEvtFight = PrefabEvtFight;
    /**
     * 记录点协议
     */
    class PrefabEvtRecordPoint {
        /**
         * (双端)设置关卡
         * @param senderGuid 发送者Guid
         * @param targetGuid 目标Guid
         * @param recordPointId 记录点id
         */
        static setRecordPoint(senderGuid, targetGuid, recordPointId) {
            callFunc(this.name, this.onSetRecordPoint.name, senderGuid, targetGuid, recordPointId);
        }
        /**
         * (双端)监听设置关卡
         * @param callback 回调
         * @returns
         */
        static onSetRecordPoint(callback) {
            return onFunc(this.name, this.onSetRecordPoint.name, callback);
        }
        /**
         * (双端)返回存档记录点
         * @param senderGuid 发送者guid
         */
        static backCurrentRecordPoint(senderGuid) {
            callFunc(this.name, this.onBackCurrentRecordPoint.name, senderGuid);
        }
        /**
         * (双端)监听回到存档记录点
         * @param callback 回调
         */
        static onBackCurrentRecordPoint(callback) {
            return onFunc(this.name, this.onBackCurrentRecordPoint.name, callback);
        }
        /**
         * (双端)返回记录点
         * @param senderGuid 发送者guid
         * @param recordPointId 记录点id
         */
        static backRecordPoint(senderGuid, recordPointId) {
            callFunc(this.name, this.onBackRecordPoint.name, senderGuid, recordPointId);
        }
        /**
         * (双端)监听回到记录点
         * @param callback 回调
         */
        static onBackRecordPoint(callback) {
            return onFunc(this.name, this.onBackRecordPoint.name, callback);
        }
    }
    PrefabEvent.PrefabEvtRecordPoint = PrefabEvtRecordPoint;
    /**
     * 通知协议
     */
    class PrefabEvtNotify {
        /**
         * (客户端)本地通知
         * @param text
         */
        static notifyLocal(text) {
            callClientFunc(this.name, this.onNotify.name, text);
        }
        /**
         * (双端)全局通知
         * @param text 信息
         */
        static notify(text) {
            callFunc(this.name, this.onNotify.name, text);
        }
        /**
         * (双端)监听通知
         * @param callback
         * @returns
         */
        static onNotify(callback) {
            return onFunc(this.name, this.onNotify.name, callback);
        }
    }
    PrefabEvent.PrefabEvtNotify = PrefabEvtNotify;
    /**
     * 排行榜协议
     */
    class PrefabEvtRank {
        /**
         * (客户端)打开排行榜UI
         */
        static openRank() {
            callClientFunc(this.name, this.onOpenRank.name);
        }
        /**
         * (客户端)监听打开排行榜UI
         * @param callback 回调
         * @returns
         */
        static onOpenRank(callback) {
            return onFunc(this.name, this.onOpenRank.name, callback);
        }
        /**
         * (双端)设置排行榜数据
         * @param senderGuid
         * @param score
         * @param typeName
         */
        static setRankData(senderGuid, name, score, typeName) {
            callFunc(this.name, this.onSetRankData.name, senderGuid, name, score, typeName);
        }
        /**
         * (双端)监听设置排行榜数据
         * @param callback
         * @returns
         */
        static onSetRankData(callback) {
            return onFunc(this.name, this.onSetRankData.name, callback);
        }
        /**
         * (双端)删除排行榜数据
         * @param senderGuid
         */
        static delRankData(senderGuid) {
            callFunc(this.name, this.onDelRankData.name, senderGuid);
        }
        /**
         * (双端)监听删除排行榜数据
         * @param callback
         * @returns
         */
        static onDelRankData(callback) {
            return onFunc(this.name, this.onDelRankData.name, callback);
        }
    }
    PrefabEvent.PrefabEvtRank = PrefabEvtRank;
    /**
     * 换装协议
     */
    class PrefabEvtCloth {
        /**
         * (客户端)加载角色体型
         * @param senderGuid 发送者Guid
         * @param targetGuid 目标对象Guid
         * @param dressResGuid 装扮资源Guid
         */
        static loadRole(senderGuid, targetGuid, dressResGuid) {
            callClientFunc(this.name, this.onLoadRole.name, senderGuid, targetGuid, dressResGuid);
        }
        /**
         * (客户端)监听加载角色体型协议
         * @param callback 回调
         * @returns
         */
        static onLoadRole(callback) {
            return onFunc(this.name, this.onLoadRole.name, callback);
        }
        /**
         * (客户端)加载装扮
         * @param senderGuid 发送者Guid
         * @param targetGuid 目标对象Guid
         * @param dressResGuid 装扮资源Guid
         */
        static loadCloth(senderGuid, targetGuid, dressResGuid) {
            callClientFunc(this.name, this.onLoadCloth.name, senderGuid, targetGuid, dressResGuid);
        }
        /**
         * (客户端)监听加载装扮
         * @param callback
         * @returns
         */
        static onLoadCloth(callback) {
            return onFunc(this.name, this.onLoadCloth.name, callback);
        }
        /**
         * (客户端)加载插槽资源
         * @param senderGuid 发送者Guid
         * @param targetGuid 目标对象Guid
         * @param slotResGuid 插槽资源Guid
         */
        static loadSlot(senderGuid, targetGuid, slotResGuid) {
            callClientFunc(this.name, this.onLoadSlot.name, senderGuid, targetGuid, slotResGuid);
        }
        /**
         * (客户端)监听加载插槽资源
         * @param callback
         * @returns
         */
        static onLoadSlot(callback) {
            return onFunc(this.name, this.onLoadSlot.name, callback);
        }
    }
    PrefabEvent.PrefabEvtCloth = PrefabEvtCloth;
    /**
     * 收集物协议
     */
    class PrefabEvtCollection {
        /**
         * (客户端)打开收集物UI
         */
        static openCollectionUI() {
            callClientFunc(this.name, this.onOpenCollectionUI.name);
        }
        /**
         * (客户端)监听收集物UI被打开
         * @param callback
         * @returns
         */
        static onOpenCollectionUI(callback) {
            return onFunc(this.name, this.onOpenCollectionUI.name, callback);
        }
        /**
         * (双端)获得收集物
         * @param senderGuid
         * @param targetGuid
         * @param atlasId
         */
        static addCollection(atlasId, playerId) {
            callFunc(this.name, this.onAddCollection.name, atlasId, playerId);
        }
        /**
         * (双端)监听获得收集物
         * @param callback 回调
         * @returns
         */
        static onAddCollection(callback) {
            return onFunc(this.name, this.onAddCollection.name, callback);
        }
    }
    PrefabEvent.PrefabEvtCollection = PrefabEvtCollection;
    initEvent();
})(PrefabEvent || (PrefabEvent = {}));

var foreign97 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    get PrefabEvent () { return PrefabEvent; }
});

let Tween$2 = class Tween extends mw.Tween {
};
class Utils {
    /**
      * 随机获取指定范围内的整数
      * @param Min 起始值
      * @param Max 最大值
      * @returns 随机整数[min, max]
      */
    static getRandomInteger(min, max) {
        let Range = max - min;
        let Rand = Math.random();
        return (min + Math.round(Rand * Range));
    }
    /**
     * 获取指定范围内的随机数, decimalNum指小数保留多少位
     * @param maxNum 最大值
     * @param minNum 最小值
     * @param decimalNum 保留几位数
     * @returns 随机数[min, max]
     */
    static getRandomDecimals(maxNum = 0, minNum = 0, decimalNum = 0) {
        let max = 0;
        let min = 0;
        minNum <= maxNum ? (min = minNum, max = maxNum) : (min = maxNum, max = minNum);
        switch (arguments.length) {
            case 1:
                return Math.floor(Math.random() * (max + 1));
            case 2:
                return Math.floor(Math.random() * (max - min + 1) + min);
            case 3:
                return Number((Math.random() * (max - min) + min).toFixed(decimalNum));
            default:
                return Math.random();
        }
    }
    /**
     * 获取贝塞尔曲线的点的集合
     * @param points 点的集合, 至少包含起点和终点
     * @param num 想要生成多少点
     * @returns
     */
    static getCurvePointsInNum(points, num) {
        let result = new Array();
        for (let i = 0; i < num; i++) {
            let t = i / (num - 1);
            let point = this.getKeyPoint(points, t);
            result.push(point);
        }
        return result;
    }
    static getKeyPoint(points, t) {
        if (points.length > 1) {
            let dirs = new Array();
            for (let i = 0; i < points.length - 1; ++i) {
                dirs.push(new mw.Vector(points[i + 1].x - points[i].x, points[i + 1].y - points[i].y, points[i + 1].z - points[i].z));
            }
            let points2 = new Array();
            for (let j = 0; j < dirs.length; j++) {
                points2.push(new mw.Vector(points[j].x + dirs[j].x * t, points[j].y + dirs[j].y * t, points[j].z + dirs[j].z * t));
            }
            return this.getKeyPoint(points2, t);
        }
        else {
            return new mw.Vector(points[0].x, points[0].y, points[0].z);
        }
    }
    /**
     * 震荡函数
     * @param x
     * @param speed 震荡衰减/增益的速度
     * @param frequency 震荡的频率
     * @param amplitude 震荡的幅度
     * @returns
     */
    static shakeFunc(x, speed, frequency, amplitude) {
        return (Math.pow(speed, -x) * Math.sin(2 * frequency * Math.PI * x)) / amplitude;
    }
    /**
     * 获取三维向量的夹角(点乘 - dot product)
     * @param center 夹角中心点
     * @param start 起始点
     * @param end 结束点
     * @returns 返回夹角
     */
    static getTdAngle(center, start, end) {
        let x1 = start.x - center.x, y1 = start.y - center.y, z1 = start.z - center.z;
        let x2 = end.x - center.x, y2 = end.y - center.y, z2 = end.z - center.z;
        let vectorDot = x1 * x2 + y1 * y2 + z1 * z2;
        let vectorMold1 = Math.sqrt(Math.pow(x1, 2) + Math.pow(y1, 2) + Math.pow(z1, 2));
        let vectorMold2 = Math.sqrt(Math.pow(x2, 2) + Math.pow(y2, 2) + Math.pow(z2, 2));
        let cosAngle = vectorDot / (vectorMold1 * vectorMold2);
        let radian = Math.acos(cosAngle);
        return (180 / Math.PI * radian);
    }
    /**
    * 获取两个向量围成的面积（叉乘 - multiplication cross）
    * @param center 夹角中心点
    * @param start 起始点
    * @param end 结束点
    * @returns 面积
    */
    static getmsArea(center, start, end) {
        let x1 = start.x - center.x, y1 = start.y - center.y, z1 = start.z - center.z;
        let x2 = end.x - center.x, y2 = end.y - center.y, z2 = end.z - center.z;
        let vectorMultiplication = new mw.Vector(y1 * z2 - z1 * y2, z1 * x2 - x1 * z2, x1 * y2 - y1 * x2);
        Console.error("[叉乘 - vectorMultiplication]" + vectorMultiplication);
        let area = Math.sqrt(Math.pow(vectorMultiplication.x, 2) + Math.pow(vectorMultiplication.y, 2) + Math.pow(vectorMultiplication.z, 2));
        return area;
    }
    static setWidgetVisibility(ui, visibility) {
        if (ui.visibility != visibility)
            ui.visibility = visibility;
    }
    /**得到今天日期 */
    static getDay() {
        let day = "";
        day += new Date().getFullYear();
        day += (new Date().getMonth() + 1);
        day += new Date().getDate();
        return day;
    }
    /**今天是星期几 */
    // public static getWhatDay(): string {
    //     let whatDay = "7123456".charAt(new Date().getDay());
    //     Console.error("whatDay = [" + whatDay + "]");
    //     return whatDay;
    // }
    /**
     * 随机从数组中取出num个数据
     * @param arr 数组
     * @param num 多少个
     * @returns 数组
     */
    static getRandomArr(arr, num) {
        let len = arr.length;
        for (let i = len - 1; i >= 0; --i) {
            let randomIndex = Math.floor(Math.random() * (i + 1));
            let itemIndex = arr[randomIndex];
            arr[randomIndex] = arr[i];
            arr[i] = itemIndex;
        }
        let arrList = [];
        for (let i = 0; i < num; ++i) {
            arrList.push(arr[i]);
        }
        return arrList;
    }
    static circularRandomCoordinates(point, radius, centerZ) {
        const u = Math.random();
        const theta = Math.random() * 2 * Math.PI;
        const r = Math.sqrt(u);
        return new mw.Vector(point.x + r * Math.cos(theta) * radius, point.y + r * Math.sin(theta) * radius, centerZ);
    }
    /**随机两个不一样的颜色 */
    static randomColor() {
        let colors = [mw.LinearColor.red, mw.LinearColor.green, mw.LinearColor.blue,
            mw.LinearColor.yellow, new mw.LinearColor(1, 0, 1, 1), new mw.LinearColor(0, 1, 1, 1), mw.LinearColor.white];
        let fontColor = colors[this.getRandomInteger(0, colors.length - 1)];
        let outlineColor = colors[this.getRandomInteger(0, colors.length - 1)];
        while (fontColor.a == outlineColor.a && fontColor.r == outlineColor.r
            && fontColor.g == outlineColor.g && fontColor.b == outlineColor.b) {
            outlineColor = colors[this.getRandomInteger(0, colors.length - 1)];
            Console.error("颜色重复");
        }
        return [fontColor, outlineColor];
    }
    /**
    * 返回当前时间（例 13：15）。
    * @returns
    */
    static getCurrentTime() {
        let date = new Date();
        return date.getHours() + ":" + date.getMinutes();
    }
    /**
     * 今天是星期几
     * @returns
     */
    static getWhatDay() {
        let whatDay = "7123456".charAt(new Date().getDay());
        return whatDay;
    }
    /**
     * 返回上次登录是周几
     * @param day
     * @returns
     */
    static getLastDay(day) {
        let whatDay = "7123456".charAt(day);
        return whatDay;
    }
    /**
     * 判断是否同一周
     * @param date1
     * @param date2
     * @returns
     */
    static iSameWeek(date1, date2) {
        let dt1 = new Date();
        dt1.setTime(date1);
        let dt2 = new Date();
        dt2.setTime(date2);
        let md1 = this.tmonday(dt1);
        let md2 = this.tmonday(dt2);
        return md1 === md2;
    }
    static tmonday(dtm) {
        let dte = new Date(dtm);
        let day = dte.getDay();
        let dty = dte.getDate();
        if (day === 0) {
            day = 7;
        }
        dte.setDate(dty - day + 1);
        return dte.getFullYear() + '-' + dte.getMonth() + '-' + dte.getDate();
    }
    /**
     * 开打UI缓动
     * @param mCanvas
     * @param onStart
     * @param onComplete
     */
    static openUITween(mCanvas, onStart, onComplete) {
        let tmpX = 0;
        let tmpY = 0;
        if (this.getRandomInteger(0, 1) == 0) {
            if (this.getRandomInteger(0, 1)) {
                tmpX = mCanvas.size.x;
            }
            else {
                tmpX = -mCanvas.size.x;
            }
            tmpY = this.getRandomInteger(-mCanvas.size.y, mCanvas.size.y);
            Console.error("wfz - A - tmpX = " + tmpX + "\ntmpY = " + tmpY);
        }
        else {
            tmpX = this.getRandomInteger(-mCanvas.size.x, mCanvas.size.x);
            if (this.getRandomInteger(0, 1)) {
                tmpY = mCanvas.size.y;
            }
            else {
                tmpY = -mCanvas.size.y;
            }
            Console.error("wfz - A - tmpX = " + tmpX + "\ntmpY = " + tmpY);
        }
        new mw.Tween({ x: tmpX, y: tmpY })
            .to({ x: 0, y: 0 }, 0.5 * 1000)
            .onStart(() => {
            mCanvas.position = new mw.Vector2(tmpX, tmpY);
            if (onStart)
                onStart();
        })
            .onUpdate((v) => {
            mCanvas.position = new mw.Vector2(v.x, v.y);
        })
            .easing(cubicBezier(.75, 2.9, .46, -0.18))
            .onComplete(() => {
            mCanvas.position = mw.Vector2.zero;
            if (onComplete)
                onComplete();
        })
            .start();
        let scaleType = this.getRandomInteger(0, 2);
        new mw.Tween({ x: 0, y: 0 })
            .to({ x: 1, y: 1 }, 0.5 * 1000)
            .onStart(() => {
            switch (scaleType) {
                case 0:
                    mCanvas.renderScale = new mw.Vector2(1, 0);
                    break;
                case 1:
                    mCanvas.renderScale = new mw.Vector2(0, 1);
                    break;
                case 2:
                    mCanvas.renderScale = new mw.Vector2(1, 1);
                    break;
            }
        })
            .onUpdate((v) => {
            switch (scaleType) {
                case 0:
                    mCanvas.renderScale = new mw.Vector2(1, v.y);
                    break;
                case 1:
                    mCanvas.renderScale = new mw.Vector2(v.x, 1);
                    break;
                case 2:
                    mCanvas.renderScale = new mw.Vector2(v.x, v.y);
                    break;
            }
        })
            .onComplete(() => {
            mCanvas.renderScale = mw.Vector2.one;
        })
            .start();
    }
    /**
     * 开打UI缓动
     * @param mCanvas
     * @param onStart
     * @param onComplete
     */
    static openUITween1(mCanvas, onStart, onComplete) {
        let scaleType = this.getRandomInteger(0, 2);
        new mw.Tween({ x: 0, y: 0 })
            .to({ x: 1, y: 1 }, 0.5 * 1000)
            .onStart(() => {
            if (onStart) {
                onStart();
            }
            switch (scaleType) {
                case 0:
                    mCanvas.renderScale = new mw.Vector2(1, 0);
                    break;
                case 1:
                    mCanvas.renderScale = new mw.Vector2(0, 1);
                    break;
                case 2:
                    mCanvas.renderScale = new mw.Vector2(1, 1);
                    break;
            }
        })
            .onUpdate((v) => {
            switch (scaleType) {
                case 0:
                    mCanvas.renderScale = new mw.Vector2(1, v.y);
                    break;
                case 1:
                    mCanvas.renderScale = new mw.Vector2(v.x, 1);
                    break;
                case 2:
                    mCanvas.renderScale = new mw.Vector2(v.x, v.y);
                    break;
            }
        })
            .onComplete(() => {
            if (onComplete) {
                onComplete();
            }
            mCanvas.renderScale = mw.Vector2.one;
        })
            .start();
    }
    /**
     * 关闭UI缓动
     * @param mCanvas
     * @param onStart
     * @param onComplete
     * @param */
    static closeUITween(mCanvas, onStart, onComplete) {
        let scaleType = this.getRandomInteger(0, 2);
        new mw.Tween({ x: 1, y: 1 })
            .to({ x: 0, y: 0 }, 0.5 * 1000)
            .onStart(() => {
            if (onStart)
                onStart();
            mCanvas.renderScale = new mw.Vector2(1, 1);
        })
            .onUpdate((v) => {
            switch (scaleType) {
                case 0:
                    mCanvas.renderScale = new mw.Vector2(1, v.y);
                    break;
                case 1:
                    mCanvas.renderScale = new mw.Vector2(v.x, 1);
                    break;
                case 2:
                    mCanvas.renderScale = new mw.Vector2(v.x, v.y);
                    break;
            }
        })
            .onComplete(() => {
            if (onComplete)
                onComplete();
            switch (scaleType) {
                case 0:
                    mCanvas.renderScale = new mw.Vector2(1, 0);
                    break;
                case 1:
                    mCanvas.renderScale = new mw.Vector2(0, 1);
                    break;
                case 2:
                    mCanvas.renderScale = new mw.Vector2(0, 0);
                    break;
            }
        })
            .start();
    }
    /**
     * 得到等级名字
     * @param lv
     * @returns
     */
    // public static getLvText(lv: number): string {
    //     let lvText = "";
    //     let lvType = Math.floor(lv / 10);
    //     switch (lvType) {
    //         case 0:
    //             lvText = "坚韧黑铁";
    //             break;
    //         case 1:
    //             lvText = "英勇青铜";
    //             break;
    //         case 2:
    //             lvText = "不屈白银";
    //             break;
    //         case 3:
    //             lvText = "荣耀黄金";
    //             break;
    //         case 4:
    //             lvText = "华贵铂金";
    //             break;
    //         case 5:
    //             lvText = "流光翡翠";
    //             break;
    //         case 6:
    //             lvText = "璀璨钻石";
    //             break;
    //         case 7:
    //             lvText = "超凡大师";
    //             break;
    //         case 8:
    //             lvText = "傲世宗师";
    //             break;
    //         case 9:
    //             lvText = "最强王者";
    //             break;
    //         default:
    //             lvText = "最强王者";
    //             break;
    //     }
    //     return lvText;
    // }
    static async getLvText(lv, userId) {
        let level = Math.floor(lv / 10);
        switch (level) {
            case 0:
                return StringUtil.format(GameConfig.Language.Text_LevelSoulMaster1.Value, lv);
            case 1:
                return StringUtil.format(GameConfig.Language.Text_LevelSoulMaster2.Value, lv);
            case 2:
                return StringUtil.format(GameConfig.Language.Text_LevelSoulMaster3.Value, lv);
            case 3:
                return StringUtil.format(GameConfig.Language.Text_LevelSoulSovereign.Value, lv);
            case 4:
                return StringUtil.format(GameConfig.Language.Text_LevelSoulSect.Value, lv);
            case 5:
                return StringUtil.format(GameConfig.Language.Text_LevelSoulKing.Value, lv);
            case 6:
                return StringUtil.format(GameConfig.Language.Text_LevelSoulEmperor.Value, lv);
            case 7:
                return StringUtil.format(GameConfig.Language.Text_LevelSoulSaint.Value, lv);
            case 8:
                return StringUtil.format(GameConfig.Language.Text_LevelContra.Value, lv);
            case 9:
                if (lv <= 94)
                    return StringUtil.format(GameConfig.Language.Text_LevelBannedDouluo.Value, lv);
                if (lv <= 98)
                    return StringUtil.format(GameConfig.Language.Text_LevelPeakDouluo.Value, lv);
                if (lv == 99)
                    return StringUtil.format(GameConfig.Language.Text_LevelDemigod.Value, lv);
            case 10:
                return StringUtil.format(GameConfig.Language.Text_LevelDivineOfficer.Value, lv);
            case 11:
                return StringUtil.format(GameConfig.Language.Text_LevelTrueGodLevel.Value, lv);
            case 12:
            case 13:
                return StringUtil.format(GameConfig.Language.Text_LevelSuperGodLevel.Value, lv);
            case 14:
                return StringUtil.format(GameConfig.Language.Text_LevelSuperGodPeak.Value, lv);
            case 15:
                return StringUtil.format(GameConfig.Language.Text_LevelDivineKing.Value, lv);
            case 16:
                return StringUtil.format(GameConfig.Language.Text_LevelEternalImmortalEmperor.Value, lv);
            default:
                if (level >= 17) {
                    if (GlobalData.languageId == 0) {
                        return StringUtil.format(GameConfig.Language.Text_LevelEternalImmortalEmperor.Value, lv);
                    }
                    else {
                        let titleName = await this.getTitleNameByUserId(userId);
                        if (titleName == "-1")
                            titleName = GameConfig.Language.Text_EternalImmortalEmperor.Value;
                        return `${lv}${GameConfig.Language.Text_Level.Value} ${titleName}`;
                    }
                }
        }
    }
    static getWorldLocation() {
        return this.locs[this.getRandomInteger(0, this.locs.length - 1)];
    }
    static getBoss() {
        return this.boss[this.getRandomInteger(0, this.boss.length - 1)];
    }
    static randomNpcName(monsterId) {
        switch (monsterId) {
            case 1:
                return `Text_WarcraftMedusa`;
            case 2:
                return `Text_WarcraftColorfulSpider`;
            case 3:
                return `Text_WarcraftSpiderSpirit`;
            case 4:
                return `Text_DragonSWarcraft`;
            case 5:
                return `Text_Zombies`;
            case 6:
                return `Text_MutatedPuppet`;
            case 100:
                return `Text_BlackWukong`;
        }
        // switch (monsterId) {
        //     case 1:
        //         return GameConfig.Language.Text_WarcraftMedusa.Value;
        //     case 2:
        //         return GameConfig.Language.Text_WarcraftColorfulSpider.Value;
        //     case 3:
        //         return GameConfig.Language.Text_WarcraftSpiderSpirit.Value;
        //     case 4:
        //         return GameConfig.Language.Text_DragonSWarcraft.Value;
        //     case 5:
        //         return GameConfig.Language.Text_Zombies.Value;
        //     case 6:
        //         return GameConfig.Language.Text_MutatedPuppet.Value;
        //     case 100:
        //         return GameConfig.Language.Text_BlackWukong.Value;
        // }
        // if (GlobalData.languageId == 0) {
        //     return GameConfig.Language.Text_MickeyMouse.Value;
        // } else {
        //     return this.npcNames[this.getRandomInteger(0, this.npcNames.length - 1)];
        // }
    }
    // private static tens: string[] = ["", "一", "二", "三", "四", "五", "六", "七", "八", "九", "十"];
    // private static digitalUnits: string[] = ["", '十', '百', '千', '万', '亿', '十', '百', '千'];
    /**根据数字获取汉字*/
    // public static numChangeToCN(num: number): string {
    //     if (this.tens[num]) {
    //         return this.tens[num];
    //     } else if (num > 10 && num < 20) {
    //         let numStr = num.toString();
    //         let n = numStr.substring(1, 2);
    //         let result = this.digitalUnits[1] + this.tens[n];
    //         return result;
    //     } else if (num > 10) {
    //         let result = "";
    //         let numStr = num.toString();
    //         for (var i = 0; i < numStr.length; ++i) {
    //             let n = numStr.substring(i, i + 1);
    //             let m = numStr.length - i - 1;
    //             result += this.tens[n] + this.digitalUnits[m];
    //         }
    //         return result;
    //     }
    //     else return "零";
    // }
    static getHp(lv) {
        return 100 + (lv * 100);
    }
    static getAtk(lv) {
        return 50 + (lv * 50);
    }
    static getMultipleByRarity(rarity) {
        if (rarity < 0 || isNaN(rarity))
            rarity = 0;
        return (rarity + 1) * 0.1;
    }
    static setImageByAssetIconData(image, icon) {
        if (this.assetIconDataMap.has(icon)) {
            image.setImageByAssetIconData(this.assetIconDataMap.get(icon));
        }
        else {
            mw.assetIDChangeIconUrlRequest([icon]).then(() => {
                try {
                    let assetIconData = mw.getAssetIconDataByAssetID(icon);
                    image.setImageByAssetIconData(assetIconData);
                    this.assetIconDataMap.set(icon, assetIconData);
                }
                catch (error) { }
            });
        }
    }
    static getPathIndex(length) {
        if (this.pathIndex <= length - 1)
            return this.pathIndex++;
        if (this.pathIndex >= length) {
            this.pathIndex = 0;
            return this.pathIndex;
        }
        return this.getRandomInteger(0, length - 1);
    }
    static async getTitleNameByUserId(userId) {
        if (!this.worldConfigDataMap || this.worldConfigDataMap.size == 0) {
            await TimeUtil.delaySecond(10);
        }
        if (this.worldConfigDataMap.has(userId)) {
            if (this.worldConfigDataMap.get(userId).titleName != "-1") {
                return this.worldConfigDataMap.get(userId).titleName;
            }
        }
        return "-1";
    }
    static setWorldConfigData(worldConfigDatas) {
        for (let i = 0; i < worldConfigDatas.length; ++i) {
            this.worldConfigDataMap.set(worldConfigDatas[i].userId, worldConfigDatas[i]);
        }
    }
    static async asyncDownloadAsset(InAssetId) {
        if (!mw.AssetUtil.assetLoaded(InAssetId)) {
            await mw.AssetUtil.asyncDownloadAsset(InAssetId);
        }
    }
    static integerUnitConversionStr(num) {
        if (GlobalData.languageId == 0) {
            return `${num}`;
        }
        else {
            if (num <= 9999) {
                return `${num}`;
            }
            else {
                if (num <= 99999999) {
                    return `${(num / 10000).toFixed(2)}万`;
                }
                else {
                    if (num <= 999999999999) {
                        return `${(num / 100000000).toFixed(2)}亿`;
                    }
                    else {
                        if (num <= 9999999999999999) {
                            return `${(num / 1000000000000).toFixed(2)}万亿`;
                        }
                        else {
                            return `${(num / 10000000000000000).toFixed(2)}亿亿`;
                        }
                    }
                }
            }
        }
    }
    static setGraphicsLevel() {
        let defaultGraphicsLevel = mw.GraphicsSettings.getDefaultGPULevel();
        let targetGraphicsLevel = Math.ceil(defaultGraphicsLevel / 2);
        mw.GraphicsSettings.setGraphicsCPULevel(targetGraphicsLevel);
        mw.GraphicsSettings.setGraphicsGPULevel(targetGraphicsLevel);
    }
}
/**
* 得到等级名字
* @param lv
* @returns
*/
// public static getLvText(lv: number): string {
//     let starLevel = lv % 10;
//     let level = Math.floor(lv / 10);
//     Console.error("操蛋#" + starLevel + "#" + level);
//     let playerLevelTxt = "";
//     switch (level) {
//         case 0:
//             playerLevelTxt = starLevel + " 段斗之气";
//             break;
//         case 1:
//             playerLevelTxt = starLevel + " 星斗者";
//             break;
//         case 2:
//             playerLevelTxt = starLevel + " 星斗师";
//             break;
//         case 3:
//             playerLevelTxt = starLevel + " 星大斗师";
//             break;
//         case 4:
//             playerLevelTxt = starLevel + " 星斗灵";
//             break;
//         case 5:
//             playerLevelTxt = starLevel + " 星斗王";
//             break;
//         case 6:
//             playerLevelTxt = starLevel + " 星斗皇";
//             break;
//         case 7:
//             playerLevelTxt = starLevel + " 星斗宗";
//             break;
//         case 8:
//             playerLevelTxt = starLevel + " 星斗尊";
//             break;
//         case 9:
//             playerLevelTxt = starLevel + " 星斗圣";
//             break;
//         default:
//             playerLevelTxt = (lv - 100) + " 星斗帝";
//             break;
//     }
//     return playerLevelTxt;
// }
Utils.locs = [
    new mw.Vector(-4065, 6446, 2000),
    new mw.Vector(-2596, 7032, 2000),
    new mw.Vector(-930, 7584, 2000),
    new mw.Vector(1277, 8205, 2000),
    new mw.Vector(-3479, 6635, 2000),
    new mw.Vector(-3836, 6980, 2000),
    new mw.Vector(-4255, 7299, 2000),
    new mw.Vector(-3640, 7440, 2000),
    new mw.Vector(-3106, 7545, 2000),
    new mw.Vector(-4459, 6234, 2000)
];
Utils.boss = [
    "219915",
    "141618",
    "142272",
    "142255",
    "219912",
    "226915",
    "226913",
    "142153",
    "219909",
    "142396",
    "142397"
];
Utils.npcNames = ["张吉惟", "林国瑞", "林玫书", "林雅南", "江奕云", "刘柏宏", "阮建安", "林子帆", "夏志豪", "吉茹定", "李中冰", "谢彦文", "傅智翔", "洪振霞", "刘姿婷", "荣姿康", "吕致盈", "方一强", "黎芸贵", "郑伊雯", "雷进宝", "吴美隆", "吴心真", "王美珠", "郭芳天", "李雅惠", "陈文婷", "曹敏侑", "王依婷", "陈婉璇", "吴美玉", "蔡依婷", "郑昌梦", "林家纶", "黄丽昆", "李育泉", "黄芸欢", "吴韵如", "李肇芬", "卢木仲", "李成白", "方兆玉", "刘翊惠", "丁汉臻", "吴佳瑞", "舒绿珮", "周白芷", "张姿妤", "张虹伦", "周琼玫", "倪怡芳", "郭贵妃", "杨佩芳", "黄盛玫", "郑丽青", "许智云", "张孟涵", "李小爱", "王恩龙", "朱政廷", "邓诗涵", "陈政倩", "吴俊伯", "阮馨学", "翁惠珠", "吴思翰", "林佩玲", "邓海来", "陈翊依", "李建智", "武淑芬", "金雅琪", "赖怡宜", "黄育霖", "张仪湖", "王俊民", "张诗刚", "林慧颖", "沈俊君", "陈淑妤", "李姿伶", "高咏钰", "黄彦宜", "周孟儒", "潘欣臻", "李祯韵", "叶洁启", "梁哲宇", "黄晓萍", "杨雅萍", "卢志铭", "张茂以", "林婉婷", "蔡宜芸", "林珮瑜", "黄柏仪", "周逸珮", "夏雅惠", "王采珮", "林孟霖", "林竹水", "王怡乐", "王爱乐", "金佳蓉", "韩健毓", "李士杰", "陈董珍", "苏姿婷", "张政霖", "李志宏", "陈素达", "陈虹荣", "何美玲", "李仪琳", "张俞幸", "黄秋萍", "潘吉维"];
Utils.assetIconDataMap = new Map();
Utils.pathIndex = 0;
Utils.worldConfigDataMap = new Map();
/**贝塞尔曲线 */
function cubicBezier(p1x, p1y, p2x, p2y) {
    const ZERO_LIMIT = 1e-6;
    const ax = 3 * p1x - 3 * p2x + 1;
    const bx = 3 * p2x - 6 * p1x;
    const cx = 3 * p1x;
    const ay = 3 * p1y - 3 * p2y + 1;
    const by = 3 * p2y - 6 * p1y;
    const cy = 3 * p1y;
    function sampleCurveDerivativeX(t) {
        return (3 * ax * t + 2 * bx) * t + cx;
    }
    function sampleCurveX(t) {
        return ((ax * t + bx) * t + cx) * t;
    }
    function sampleCurveY(t) {
        return ((ay * t + by) * t + cy) * t;
    }
    function solveCurveX(x) {
        let t2 = x;
        let derivative;
        let x2;
        for (let i = 0; i < 8; i++) {
            x2 = sampleCurveX(t2) - x;
            if (Math.abs(x2) < ZERO_LIMIT) {
                return t2;
            }
            derivative = sampleCurveDerivativeX(t2);
            if (Math.abs(derivative) < ZERO_LIMIT) {
                break;
            }
            t2 -= x2 / derivative;
        }
        let t1 = 1;
        let t0 = 0;
        t2 = x;
        while (t1 > t0) {
            x2 = sampleCurveX(t2) - x;
            if (Math.abs(x2) < ZERO_LIMIT) {
                return t2;
            }
            if (x2 > 0) {
                t1 = t2;
            }
            else {
                t0 = t2;
            }
            t2 = (t1 + t0) / 2;
        }
        return t2;
    }
    function solve(x) {
        return sampleCurveY(solveCurveX(x));
    }
    return solve;
}

var foreign103 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    Tween: Tween$2,
    Utils: Utils,
    cubicBezier: cubicBezier
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/common/Loading.ui
 * TIME: 2024.11.04-19.49.51
 */
let Loading_Generate = class Loading_Generate extends UIScript {
    get mImage() {
        if (!this.mImage_Internal && this.uiWidgetBase) {
            this.mImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mImage');
        }
        return this.mImage_Internal;
    }
    get mProgressBar() {
        if (!this.mProgressBar_Internal && this.uiWidgetBase) {
            this.mProgressBar_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mImage/mProgressBar');
        }
        return this.mProgressBar_Internal;
    }
    get mTipsTextBlock() {
        if (!this.mTipsTextBlock_Internal && this.uiWidgetBase) {
            this.mTipsTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mImage/mProgressBar/mTipsTextBlock');
        }
        return this.mTipsTextBlock_Internal;
    }
    get mTextBlock_1() {
        if (!this.mTextBlock_1_Internal && this.uiWidgetBase) {
            this.mTextBlock_1_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mImage/mProgressBar/mTextBlock_1');
        }
        return this.mTextBlock_1_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mTipsTextBlock);
        this.initLanguage(this.mTextBlock_1);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
Loading_Generate = __decorate([
    UIBind('UI/common/Loading.ui')
], Loading_Generate);
var Loading_Generate$1 = Loading_Generate;

var foreign105 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: Loading_Generate$1
});

/**
 * AUTHOR: 爱玩游戏的小胖子
 * TIME: 2024.08.03-12.18.21
 * ATTENTION: onStart 等UI脚本自带函数不可改写为异步执行，有需求的异步逻辑请使用函数封装，通过函数接口在内部使用
 */
class Loading extends Loading_Generate$1 {
    constructor() {
        super(...arguments);
        this.ids = ["170765", "108502", "74319", "381622"];
        this.id = null;
        this.index = 0;
    }
    /**
     * 构造UI文件成功后，在合适的时机最先初始化一次
     */
    onStart() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = UILayerMiddle;
        this.initTextBlock();
    }
    initTextBlock() {
        this.mTipsTextBlock.text = GameConfig.Language.Text_LoadingMapResourcesPleaseBePatient.Value;
    }
    onShow(...params) {
        this.index = 0;
        this.mImage.imageGuid = this.ids[this.index++];
        this.id = TimeUtil.setInterval(() => {
            if (this.index >= this.ids.length)
                this.index = 0;
            this.mImage.imageGuid = this.ids[this.index++];
        }, 1.5);
    }
    onHide() {
        TimeUtil.clearInterval(this.id);
    }
    updateBar(value) {
        this.mTextBlock_1.text = `${((value / 100) * 100).toFixed(0)}%`;
        this.mProgressBar.currentValue = value / 100;
    }
}

var foreign7 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: Loading
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/common/notice/NoticeView.ui
 * TIME: 2024.11.04-19.49.51
 */
let NoticeView_Generate = class NoticeView_Generate extends UIScript {
    get con_top_notice() {
        if (!this.con_top_notice_Internal && this.uiWidgetBase) {
            this.con_top_notice_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/con_top_notice');
        }
        return this.con_top_notice_Internal;
    }
    get con_second_notice() {
        if (!this.con_second_notice_Internal && this.uiWidgetBase) {
            this.con_second_notice_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/con_second_notice');
        }
        return this.con_second_notice_Internal;
    }
    get con_top_notice_2() {
        if (!this.con_top_notice_2_Internal && this.uiWidgetBase) {
            this.con_top_notice_2_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/con_top_notice_2');
        }
        return this.con_top_notice_2_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        //按钮多语言
        //文本多语言
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
NoticeView_Generate = __decorate([
    UIBind('UI/common/notice/NoticeView.ui')
], NoticeView_Generate);
var NoticeView_Generate$1 = NoticeView_Generate;

var foreign106 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: NoticeView_Generate$1
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/common/notice/TopNoticeItem.ui
 * TIME: 2024.11.04-19.49.51
 */
let TopNoticeItem_Generate = class TopNoticeItem_Generate extends UIScript {
    get txt_context() {
        if (!this.txt_context_Internal && this.uiWidgetBase) {
            this.txt_context_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/txt_context');
        }
        return this.txt_context_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        //按钮多语言
        //文本多语言
        this.initLanguage(this.txt_context);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
TopNoticeItem_Generate = __decorate([
    UIBind('UI/common/notice/TopNoticeItem.ui')
], TopNoticeItem_Generate);
var TopNoticeItem_Generate$1 = TopNoticeItem_Generate;

var foreign107 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: TopNoticeItem_Generate$1
});

/**
 * The Ease class provides a collection of easing functions for use with tween.js.
 */
const Easing = {
    Linear: {
        None: function (amount) {
            return amount;
        },
    },
    Quadratic: {
        In: function (amount) {
            return amount * amount;
        },
        Out: function (amount) {
            return amount * (2 - amount);
        },
        InOut: function (amount) {
            if ((amount *= 2) < 1) {
                return 0.5 * amount * amount;
            }
            return -0.5 * (--amount * (amount - 2) - 1);
        },
    },
    Cubic: {
        In: function (amount) {
            return amount * amount * amount;
        },
        Out: function (amount) {
            return --amount * amount * amount + 1;
        },
        InOut: function (amount) {
            if ((amount *= 2) < 1) {
                return 0.5 * amount * amount * amount;
            }
            return 0.5 * ((amount -= 2) * amount * amount + 2);
        },
    },
    Quartic: {
        In: function (amount) {
            return amount * amount * amount * amount;
        },
        Out: function (amount) {
            return 1 - --amount * amount * amount * amount;
        },
        InOut: function (amount) {
            if ((amount *= 2) < 1) {
                return 0.5 * amount * amount * amount * amount;
            }
            return -0.5 * ((amount -= 2) * amount * amount * amount - 2);
        },
    },
    Quintic: {
        In: function (amount) {
            return amount * amount * amount * amount * amount;
        },
        Out: function (amount) {
            return --amount * amount * amount * amount * amount + 1;
        },
        InOut: function (amount) {
            if ((amount *= 2) < 1) {
                return 0.5 * amount * amount * amount * amount * amount;
            }
            return 0.5 * ((amount -= 2) * amount * amount * amount * amount + 2);
        },
    },
    Sinusoidal: {
        In: function (amount) {
            return 1 - Math.sin(((1.0 - amount) * Math.PI) / 2);
        },
        Out: function (amount) {
            return Math.sin((amount * Math.PI) / 2);
        },
        InOut: function (amount) {
            return 0.5 * (1 - Math.sin(Math.PI * (0.5 - amount)));
        },
    },
    Exponential: {
        In: function (amount) {
            return amount === 0 ? 0 : Math.pow(1024, amount - 1);
        },
        Out: function (amount) {
            return amount === 1 ? 1 : 1 - Math.pow(2, -10 * amount);
        },
        InOut: function (amount) {
            if (amount === 0) {
                return 0;
            }
            if (amount === 1) {
                return 1;
            }
            if ((amount *= 2) < 1) {
                return 0.5 * Math.pow(1024, amount - 1);
            }
            return 0.5 * (-Math.pow(2, -10 * (amount - 1)) + 2);
        },
    },
    Circular: {
        In: function (amount) {
            return 1 - Math.sqrt(1 - amount * amount);
        },
        Out: function (amount) {
            return Math.sqrt(1 - --amount * amount);
        },
        InOut: function (amount) {
            if ((amount *= 2) < 1) {
                return -0.5 * (Math.sqrt(1 - amount * amount) - 1);
            }
            return 0.5 * (Math.sqrt(1 - (amount -= 2) * amount) + 1);
        },
    },
    Elastic: {
        In: function (amount) {
            if (amount === 0) {
                return 0;
            }
            if (amount === 1) {
                return 1;
            }
            return -Math.pow(2, 10 * (amount - 1)) * Math.sin((amount - 1.1) * 5 * Math.PI);
        },
        Out: function (amount) {
            if (amount === 0) {
                return 0;
            }
            if (amount === 1) {
                return 1;
            }
            return Math.pow(2, -10 * amount) * Math.sin((amount - 0.1) * 5 * Math.PI) + 1;
        },
        InOut: function (amount) {
            if (amount === 0) {
                return 0;
            }
            if (amount === 1) {
                return 1;
            }
            amount *= 2;
            if (amount < 1) {
                return -0.5 * Math.pow(2, 10 * (amount - 1)) * Math.sin((amount - 1.1) * 5 * Math.PI);
            }
            return 0.5 * Math.pow(2, -10 * (amount - 1)) * Math.sin((amount - 1.1) * 5 * Math.PI) + 1;
        },
    },
    Back: {
        In: function (amount) {
            const s = 1.70158;
            return amount === 1 ? 1 : amount * amount * ((s + 1) * amount - s);
        },
        Out: function (amount) {
            const s = 1.70158;
            return amount === 0 ? 0 : --amount * amount * ((s + 1) * amount + s) + 1;
        },
        InOut: function (amount) {
            const s = 1.70158 * 1.525;
            if ((amount *= 2) < 1) {
                return 0.5 * (amount * amount * ((s + 1) * amount - s));
            }
            return 0.5 * ((amount -= 2) * amount * ((s + 1) * amount + s) + 2);
        },
    },
    Bounce: {
        In: function (amount) {
            return 1 - Easing.Bounce.Out(1 - amount);
        },
        Out: function (amount) {
            if (amount < 1 / 2.75) {
                return 7.5625 * amount * amount;
            }
            else if (amount < 2 / 2.75) {
                return 7.5625 * (amount -= 1.5 / 2.75) * amount + 0.75;
            }
            else if (amount < 2.5 / 2.75) {
                return 7.5625 * (amount -= 2.25 / 2.75) * amount + 0.9375;
            }
            else {
                return 7.5625 * (amount -= 2.625 / 2.75) * amount + 0.984375;
            }
        },
        InOut: function (amount) {
            if (amount < 0.5) {
                return Easing.Bounce.In(amount * 2) * 0.5;
            }
            return Easing.Bounce.Out(amount * 2 - 1) * 0.5 + 0.5;
        },
    },
    generatePow: function (power = 4) {
        power = power < Number.EPSILON ? Number.EPSILON : power;
        power = power > 10000 ? 10000 : power;
        return {
            In: function (amount) {
                return amount ** power;
            },
            Out: function (amount) {
                return 1 - (1 - amount) ** power;
            },
            InOut: function (amount) {
                if (amount < 0.5) {
                    return (amount * 2) ** power / 2;
                }
                return (1 - (2 - amount * 2) ** power) / 2 + 0.5;
            },
        };
    },
};
/**
 *
 */
const Interpolation = {
    Linear: function (v, k) {
        const m = v.length - 1;
        const f = m * k;
        const i = Math.floor(f);
        const fn = Interpolation.Utils.Linear;
        if (k < 0) {
            return fn(v[0], v[1], f);
        }
        if (k > 1) {
            return fn(v[m], v[m - 1], m - f);
        }
        return fn(v[i], v[i + 1 > m ? m : i + 1], f - i);
    },
    Bezier: function (v, k) {
        let b = 0;
        const n = v.length - 1;
        const pw = Math.pow;
        const bn = Interpolation.Utils.Bernstein;
        for (let i = 0; i <= n; i++) {
            b += pw(1 - k, n - i) * pw(k, i) * v[i] * bn(n, i);
        }
        return b;
    },
    CatmullRom: function (v, k) {
        const m = v.length - 1;
        let f = m * k;
        let i = Math.floor(f);
        const fn = Interpolation.Utils.CatmullRom;
        if (v[0] === v[m]) {
            if (k < 0) {
                i = Math.floor((f = m * (1 + k)));
            }
            return fn(v[(i - 1 + m) % m], v[i], v[(i + 1) % m], v[(i + 2) % m], f - i);
        }
        else {
            if (k < 0) {
                return v[0] - (fn(v[0], v[0], v[1], v[1], -f) - v[0]);
            }
            if (k > 1) {
                return v[m] - (fn(v[m], v[m], v[m - 1], v[m - 1], f - m) - v[m]);
            }
            return fn(v[i ? i - 1 : 0], v[i], v[m < i + 1 ? m : i + 1], v[m < i + 2 ? m : i + 2], f - i);
        }
    },
    Utils: {
        Linear: function (p0, p1, t) {
            return (p1 - p0) * t + p0;
        },
        Bernstein: function (n, i) {
            const fc = Interpolation.Utils.Factorial;
            return fc(n) / fc(i) / fc(n - i);
        },
        Factorial: (function () {
            const a = [1];
            return function (n) {
                let s = 1;
                if (a[n]) {
                    return a[n];
                }
                for (let i = n; i > 1; i--) {
                    s *= i;
                }
                a[n] = s;
                return s;
            };
        })(),
        CatmullRom: function (p0, p1, p2, p3, t) {
            const v0 = (p2 - p0) * 0.5;
            const v1 = (p3 - p1) * 0.5;
            const t2 = t * t;
            const t3 = t * t2;
            return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;
        },
    },
};
class Sequence {
    static nextId() {
        return Sequence._nextId++;
    }
}
Sequence._nextId = 0;
class Group {
    constructor() {
        this._tweens = {};
        this._tweensAddedDuringUpdate = {};
    }
    getAll() {
        return Object.keys(this._tweens).map(tweenId => {
            return this._tweens[tweenId];
        });
    }
    removeAll() {
        this._tweens = {};
    }
    add(tween) {
        this._tweens[tween.getId()] = tween;
        this._tweensAddedDuringUpdate[tween.getId()] = tween;
    }
    remove(tween) {
        delete this._tweens[tween.getId()];
        delete this._tweensAddedDuringUpdate[tween.getId()];
    }
    update(time = now(), preserve = false) {
        let tweenIds = Object.keys(this._tweens);
        if (tweenIds.length === 0) {
            return false;
        }
        // Tweens are updated in "batches". If you add a new tween during an
        // update, then the new tween will be updated in the next batch.
        // If you remove a tween during an update, it may or may not be updated.
        // However, if the removed tween was added during the current batch,
        // then it will not be updated.
        while (tweenIds.length > 0) {
            this._tweensAddedDuringUpdate = {};
            for (let i = 0; i < tweenIds.length; i++) {
                const tween = this._tweens[tweenIds[i]];
                const autoStart = !preserve;
                if (tween && tween.update(time, autoStart) === false && !preserve) {
                    delete this._tweens[tweenIds[i]];
                }
            }
            tweenIds = Object.keys(this._tweensAddedDuringUpdate);
        }
        return true;
    }
}
const mainGroup = new Group();
const now = function () {
    return Date.now();
};
let Tween$1 = class Tween {
    constructor(_object, _group = mainGroup) {
        this._object = _object;
        this._group = _group;
        this._isPaused = false;
        this._pauseStart = 0;
        this._valuesStart = {};
        this._valuesEnd = {};
        this._valuesStartRepeat = {};
        this._duration = 1000;
        this._initialRepeat = 0;
        this._repeat = 0;
        this._yoyo = false;
        this._isPlaying = false;
        this._reversed = false;
        this._delayTime = 0;
        this._startTime = 0;
        this._easingFunction = Easing.Linear.None;
        this._interpolationFunction = Interpolation.Linear;
        // eslint-disable-next-line
        this._chainedTweens = [];
        this._onStartCallbackFired = false;
        this._id = Sequence.nextId();
        this._isChainStopped = false;
        this._goToEnd = false;
    }
    getId() {
        return this._id;
    }
    isPlaying() {
        return this._isPlaying;
    }
    isPaused() {
        return this._isPaused;
    }
    to(properties, duration) {
        // TODO? restore this, then update the 07_dynamic_to example to set fox
        // tween's to on each update. That way the behavior is opt-in (there's
        // currently no opt-out).
        // for (const prop in properties) this._valuesEnd[prop] = properties[prop]
        this._valuesEnd = Object.create(properties);
        if (duration !== undefined) {
            this._duration = duration;
        }
        return this;
    }
    duration(d = 1000) {
        this._duration = d;
        return this;
    }
    start(time = now()) {
        if (this._isPlaying) {
            return this;
        }
        // eslint-disable-next-line
        this._group && this._group.add(this);
        this._repeat = this._initialRepeat;
        if (this._reversed) {
            // If we were reversed (f.e. using the yoyo feature) then we need to
            // flip the tween direction back to forward.
            this._reversed = false;
            for (const property in this._valuesStartRepeat) {
                this._swapEndStartRepeatValues(property);
                this._valuesStart[property] = this._valuesStartRepeat[property];
            }
        }
        this._isPlaying = true;
        this._isPaused = false;
        this._onStartCallbackFired = false;
        this._isChainStopped = false;
        this._startTime = time;
        this._startTime += this._delayTime;
        this._setupProperties(this._object, this._valuesStart, this._valuesEnd, this._valuesStartRepeat);
        return this;
    }
    _setupProperties(_object, _valuesStart, _valuesEnd, _valuesStartRepeat) {
        for (const property in _valuesEnd) {
            const startValue = _object[property];
            const startValueIsArray = Array.isArray(startValue);
            const propType = startValueIsArray ? 'array' : typeof startValue;
            const isInterpolationList = !startValueIsArray && Array.isArray(_valuesEnd[property]);
            // If `to()` specifies a property that doesn't exist in the source object,
            // we should not set that property in the object
            if (propType === 'undefined' || propType === 'function') {
                continue;
            }
            // Check if an Array was provided as property value
            if (isInterpolationList) {
                let endValues = _valuesEnd[property];
                if (endValues.length === 0) {
                    continue;
                }
                // handle an array of relative values
                endValues = endValues.map(this._handleRelativeValue.bind(this, startValue));
                // Create a local copy of the Array with the start value at the front
                _valuesEnd[property] = [startValue].concat(endValues);
            }
            // handle the deepness of the values
            if ((propType === 'object' || startValueIsArray) && startValue && !isInterpolationList) {
                _valuesStart[property] = startValueIsArray ? [] : {};
                // eslint-disable-next-line
                for (const prop in startValue) {
                    // eslint-disable-next-line
                    // @ts-ignore FIXME?
                    _valuesStart[property][prop] = startValue[prop];
                }
                _valuesStartRepeat[property] = startValueIsArray ? [] : {}; // TODO? repeat nested values? And yoyo? And array values?
                // eslint-disable-next-line
                // @ts-ignore FIXME?
                this._setupProperties(startValue, _valuesStart[property], _valuesEnd[property], _valuesStartRepeat[property]);
            }
            else {
                // Save the starting value, but only once.
                if (typeof _valuesStart[property] === 'undefined') {
                    _valuesStart[property] = startValue;
                }
                if (!startValueIsArray) {
                    // eslint-disable-next-line
                    // @ts-ignore FIXME?
                    _valuesStart[property] *= 1.0; // Ensures we're using numbers, not strings
                }
                if (isInterpolationList) {
                    // eslint-disable-next-line
                    // @ts-ignore FIXME?
                    _valuesStartRepeat[property] = _valuesEnd[property].slice().reverse();
                }
                else {
                    _valuesStartRepeat[property] = _valuesStart[property] || 0;
                }
            }
        }
    }
    stop() {
        if (!this._isChainStopped) {
            this._isChainStopped = true;
            this.stopChainedTweens();
        }
        if (!this._isPlaying) {
            return this;
        }
        // eslint-disable-next-line
        this._group && this._group.remove(this);
        this._isPlaying = false;
        this._isPaused = false;
        if (this._onStopCallback) {
            this._onStopCallback(this._object);
        }
        return this;
    }
    end() {
        this._goToEnd = true;
        this.update(Infinity);
        return this;
    }
    pause(time = now()) {
        if (this._isPaused || !this._isPlaying) {
            return this;
        }
        this._isPaused = true;
        this._pauseStart = time;
        // eslint-disable-next-line
        this._group && this._group.remove(this);
        return this;
    }
    resume(time = now()) {
        if (!this._isPaused || !this._isPlaying) {
            return this;
        }
        this._isPaused = false;
        this._startTime += time - this._pauseStart;
        this._pauseStart = 0;
        // eslint-disable-next-line
        this._group && this._group.add(this);
        return this;
    }
    stopChainedTweens() {
        for (let i = 0, numChainedTweens = this._chainedTweens.length; i < numChainedTweens; i++) {
            this._chainedTweens[i].stop();
        }
        return this;
    }
    group(group = mainGroup) {
        this._group = group;
        return this;
    }
    delay(amount = 0) {
        this._delayTime = amount;
        return this;
    }
    repeat(times = 0) {
        this._initialRepeat = times;
        this._repeat = times;
        return this;
    }
    repeatDelay(amount) {
        this._repeatDelayTime = amount;
        return this;
    }
    yoyo(yoyo = false) {
        this._yoyo = yoyo;
        return this;
    }
    easing(easingFunction = Easing.Linear.None) {
        this._easingFunction = easingFunction;
        return this;
    }
    interpolation(interpolationFunction = Interpolation.Linear) {
        this._interpolationFunction = interpolationFunction;
        return this;
    }
    // eslint-disable-next-line
    chain(...tweens) {
        this._chainedTweens = tweens;
        return this;
    }
    onStart(callback) {
        this._onStartCallback = callback;
        return this;
    }
    onUpdate(callback) {
        this._onUpdateCallback = callback;
        return this;
    }
    onRepeat(callback) {
        this._onRepeatCallback = callback;
        return this;
    }
    onComplete(callback) {
        this._onCompleteCallback = callback;
        return this;
    }
    onStop(callback) {
        this._onStopCallback = callback;
        return this;
    }
    /**
     * @returns true if the tween is still playing after the update, false
     * otherwise (calling update on a paused tween still returns true because
     * it is still playing, just paused).
     */
    update(time = now(), autoStart = true) {
        if (this._isPaused)
            return true;
        let property;
        let elapsed;
        const endTime = this._startTime + this._duration;
        if (!this._goToEnd && !this._isPlaying) {
            if (time > endTime)
                return false;
            if (autoStart)
                this.start(time);
        }
        this._goToEnd = false;
        if (time < this._startTime) {
            return true;
        }
        if (this._onStartCallbackFired === false) {
            if (this._onStartCallback) {
                this._onStartCallback(this._object);
            }
            this._onStartCallbackFired = true;
        }
        elapsed = (time - this._startTime) / this._duration;
        elapsed = this._duration === 0 || elapsed > 1 ? 1 : elapsed;
        const value = this._easingFunction(elapsed);
        // properties transformations
        this._updateProperties(this._object, this._valuesStart, this._valuesEnd, value);
        if (this._onUpdateCallback) {
            this._onUpdateCallback(this._object, elapsed);
        }
        if (elapsed === 1) {
            if (this._repeat > 0) {
                if (isFinite(this._repeat)) {
                    this._repeat--;
                }
                // Reassign starting values, restart by making startTime = now
                for (property in this._valuesStartRepeat) {
                    if (!this._yoyo && typeof this._valuesEnd[property] === 'string') {
                        this._valuesStartRepeat[property] =
                            // eslint-disable-next-line
                            // @ts-ignore FIXME?
                            this._valuesStartRepeat[property] + parseFloat(this._valuesEnd[property]);
                    }
                    if (this._yoyo) {
                        this._swapEndStartRepeatValues(property);
                    }
                    this._valuesStart[property] = this._valuesStartRepeat[property];
                }
                if (this._yoyo) {
                    this._reversed = !this._reversed;
                }
                if (this._repeatDelayTime !== undefined) {
                    this._startTime = time + this._repeatDelayTime;
                }
                else {
                    this._startTime = time + this._delayTime;
                }
                if (this._onRepeatCallback) {
                    this._onRepeatCallback(this._object);
                }
                return true;
            }
            else {
                if (this._onCompleteCallback) {
                    this._onCompleteCallback(this._object);
                }
                for (let i = 0, numChainedTweens = this._chainedTweens.length; i < numChainedTweens; i++) {
                    // Make the chained tweens start exactly at the time they should,
                    // even if the `update()` method was called way past the duration of the tween
                    this._chainedTweens[i].start(this._startTime + this._duration);
                }
                this._isPlaying = false;
                return false;
            }
        }
        return true;
    }
    _updateProperties(_object, _valuesStart, _valuesEnd, value) {
        for (const property in _valuesEnd) {
            // Don't update properties that do not exist in the source object
            if (_valuesStart[property] === undefined) {
                continue;
            }
            const start = _valuesStart[property] || 0;
            let end = _valuesEnd[property];
            const startIsArray = Array.isArray(_object[property]);
            const endIsArray = Array.isArray(end);
            const isInterpolationList = !startIsArray && endIsArray;
            if (isInterpolationList) {
                _object[property] = this._interpolationFunction(end, value);
            }
            else if (typeof end === 'object' && end) {
                // eslint-disable-next-line
                // @ts-ignore FIXME?
                this._updateProperties(_object[property], start, end, value);
            }
            else {
                // Parses relative end values with start as base (e.g.: +10, -3)
                end = this._handleRelativeValue(start, end);
                // Protect against non numeric properties.
                if (typeof end === 'number') {
                    // eslint-disable-next-line
                    // @ts-ignore FIXME?
                    _object[property] = start + (end - start) * value;
                }
            }
        }
    }
    _handleRelativeValue(start, end) {
        if (typeof end !== 'string') {
            return end;
        }
        if (end.charAt(0) === '+' || end.charAt(0) === '-') {
            return start + parseFloat(end);
        }
        else {
            return parseFloat(end);
        }
    }
    _swapEndStartRepeatValues(property) {
        const tmp = this._valuesStartRepeat[property];
        const endValue = this._valuesEnd[property];
        if (typeof endValue === 'string') {
            this._valuesStartRepeat[property] = this._valuesStartRepeat[property] + parseFloat(endValue);
        }
        else {
            this._valuesStartRepeat[property] = this._valuesEnd[property];
        }
        this._valuesEnd[property] = tmp;
    }
};
const nextId = Sequence.nextId;
/**
 * Controlling groups of tweens
 *
 * Using the TWEEN singleton to manage your tweens can cause issues in large apps with many components.
 * In these cases, you may want to create your own smaller groups of tweens.
 */
const TWEEN = mainGroup;
// This is the best way to export things in a way that's compatible with both ES
// Modules and CommonJS, without build hacks, and so as not to break the
// existing API.
// https://github.com/rollup/rollup/issues/1961#issuecomment-423037881
const getAll = TWEEN.getAll.bind(TWEEN);
const removeAll = TWEEN.removeAll.bind(TWEEN);
const add = TWEEN.add.bind(TWEEN);
const remove = TWEEN.remove.bind(TWEEN);
const update = TWEEN.update.bind(TWEEN);

var foreign12 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    Easing: Easing,
    Group: Group,
    Interpolation: Interpolation,
    Sequence: Sequence,
    Tween: Tween$1,
    add: add,
    getAll: getAll,
    nextId: nextId,
    now: now,
    remove: remove,
    removeAll: removeAll,
    update: update
});

class UIPool {
    constructor(creator) {
        this.pool = [];
        this.creator = creator;
    }
    get count() {
        return this.pool ? this.pool.length : 0;
    }
    get firstActiveItem() {
        for (let t of this.pool) {
            if (t.uiObject.visibility == mw.SlateVisibility.Hidden)
                continue;
            return t;
        }
    }
    byIndex(index) {
        return this.pool[index];
    }
    setCreator(func) {
        this.creator = func;
    }
    // 重新激活处理
    setPoolGetFunction(func) {
        this.poolGetFunction = func;
    }
    setResetItemFunction(resetItemFunction) {
        this.resetItemFunction = resetItemFunction;
    }
    get() {
        for (let item of this.pool) {
            if (item.uiObject.visibility == mw.SlateVisibility.Hidden) {
                item.uiObject.visibility = mw.SlateVisibility.SelfHitTestInvisible;
                if (this.poolGetFunction)
                    this.poolGetFunction(item);
                return item;
            }
        }
        let result = this.creator();
        this.pool.push(result);
        return result;
    }
    giveBack(item) {
        if (this.resetItemFunction)
            this.resetItemFunction(item);
        item.uiObject.visibility = (mw.SlateVisibility.Hidden);
    }
    resetAll() {
        for (let item of this.pool) {
            this.giveBack(item);
        }
    }
    eachVisibleItem(action) {
        for (let t of this.pool) {
            if (t.uiObject.visibility == mw.SlateVisibility.Hidden)
                continue;
            action(t);
        }
    }
    eachVisibleItemWithoutFocus(action, focus) {
        for (let t of this.pool) {
            if (t.uiObject.visibility == mw.SlateVisibility.Hidden)
                continue;
            if (t == focus)
                continue;
            action(t);
        }
    }
}
class UIElementPool {
    constructor() {
        this.pool = [];
    }
    get count() {
        return this.pool ? this.pool.length : 0;
    }
    get firstActiveItem() {
        for (let t of this.pool) {
            if (t.visibility == mw.SlateVisibility.Hidden)
                continue;
            return t;
        }
    }
    setCreator(func) {
        this.creator = func;
    }
    get() {
        for (let i of this.pool) {
            if (i.visibility == mw.SlateVisibility.Hidden) {
                i.visibility = mw.SlateVisibility.SelfHitTestInvisible;
                return i;
            }
        }
        let result = this.creator();
        this.pool.push(result);
        return result;
    }
    giveBack(item) {
        item.visibility = (mw.SlateVisibility.Hidden);
    }
    resetAll() {
        for (let item of this.pool) {
            this.giveBack(item);
        }
    }
    eachVisibleItem(action) {
        for (let t of this.pool) {
            if (t.visibility == mw.SlateVisibility.Hidden)
                continue;
            action(t);
        }
    }
}
class WorldUIPool {
    constructor(creatorFunc) {
        this.pool = [];
        if (creatorFunc)
            this.creator = creatorFunc;
    }
    setCreator(func) {
        this.creator = func;
    }
    setPoolGetFunction(func) {
        this.poolGetFunction = func;
    }
    setResetItemFunction(resetItemFunction) {
        this.resetItemFunction = resetItemFunction;
    }
    eachVisibleItem(action) {
        for (let t of this.pool) {
            if (!t.stage)
                continue;
            action(t);
        }
    }
    get() {
        for (let item of this.pool) {
            if (item.stage)
                continue;
            if (this.poolGetFunction)
                this.poolGetFunction(item);
            item.uiWidget.setVisibility(mw.PropertyStatus.On);
            item.stage = true;
            return item;
        }
        let result = this.creator();
        result.stage = true;
        this.pool.push(result);
        return result;
    }
    giveBack(item) {
        if (this.resetItemFunction)
            this.resetItemFunction(item);
        item.stage = false;
        item.uiWidget.setVisibility(mw.PropertyStatus.Off);
    }
    resetAll() {
        for (let item of this.pool) {
            this.giveBack(item);
        }
    }
}

var foreign13 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    UIElementPool: UIElementPool,
    UIPool: UIPool,
    WorldUIPool: WorldUIPool
});

var updater;
(function (updater) {
    // 将函数注册到onUpdate函数里
    updater.updateByFrameInterval = (interval, targetFunctionName) => {
        return function (target, prototypeKey, prototypeDescriptor) {
            // 注册interval变量
            let intervalVaryingName = `${prototypeKey.toString()}_current_interval`;
            let targetIntervalVaryingName = `${prototypeKey.toString()}_target_interval`;
            target[intervalVaryingName] = 0;
            target[targetIntervalVaryingName] = interval;
            // 将函数放到onUpdate里面
            let updateFunc = target[targetFunctionName || 'onUpdate'];
            let targetFunc = prototypeDescriptor.value;
            target[targetFunctionName || 'onUpdate'] = function (...args) {
                target[intervalVaryingName]++;
                if (target[intervalVaryingName] >= target[targetIntervalVaryingName]) {
                    targetFunc.apply(this, args);
                    target[intervalVaryingName] = 0;
                }
                updateFunc.apply(this, args);
            };
        };
    };
})(updater || (updater = {}));

var foreign14 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    get updater () { return updater; }
});

class Notice {
    static showDownNotice(context) {
        this.checkView();
        this.view.topNoticeComponent2.insert(notice => {
            notice.setInfo(context);
        });
    }
    static checkView() {
        if (this.view)
            return;
        this.view = mw.UIService.show(NoticeView);
    }
}
class TopNoticeComponent {
    init(targetCanvas) {
        this.visibleNotice = [];
        this.pendingQueue = [];
        this.targetCanvas = targetCanvas;
        this.noticeCanvasHeight = this.targetCanvas.size.y;
        this.insertItemTempLocation = new mw.Vector2();
        this.noticeItemPool = new UIPool(() => {
            let item = mw.UIService.create(TopNoticeItem);
            this.targetCanvas.addChild(item.uiObject);
            item.uiObject.size = new mw.Vector2(700, 60);
            return item;
        });
    }
    insert(initAction) {
        this.pendingQueue.push(initAction);
    }
    update() {
        if (this.visibleNotice.length == 0)
            return;
        for (let item of this.visibleNotice) {
            item.lifeTime += 0.03;
        }
        let first = this.visibleNotice[0];
        if (first.lifeTime >= TopNoticeComponent.NoticeItemLifeTime) {
            this.fadeoutNoticeElement();
        }
        this.noticeItemPool.eachVisibleItem(item => {
            if (item.targetHeight >= item.position.y)
                return;
            item.setLocation(item.position.x, item.position.y - TopNoticeComponent.NoticeMoveStepCount);
        });
    }
    insertPendingNotice(initAction) {
        // 超出显示长度,旧的元素隐藏
        if (this.visibleNotice.length >= TopNoticeComponent.NoticeItemMaxCount) {
            this.fadeoutNoticeElement();
        }
        // 已显示元素上推
        for (let i = 0; i < this.visibleNotice.length; i++) {
            const element = this.visibleNotice[i];
            element.targetHeight =
                (this.noticeCanvasHeight - TopNoticeComponent.NoticeItemIntervalSpace) -
                    ((this.visibleNotice.length - i) * TopNoticeComponent.NoticeItemIntervalSpace);
        }
        // 插入新的元素
        let recent = this.noticeItemPool.get();
        this.visibleNotice.push(recent);
        initAction(recent);
        recent.lifeTime = 0;
        this.insertItemTempLocation.x = (this.targetCanvas.size.x / 2) - (recent.uiObject.size.x / 2);
        this.insertItemTempLocation.y = this.targetCanvas.size.y - TopNoticeComponent.NoticeItemIntervalSpace;
        recent.setLocation(this.insertItemTempLocation.x, this.insertItemTempLocation.y);
        recent.targetHeight = this.insertItemTempLocation.y;
        recent.uiObject.renderOpacity = 0;
        // 插入动效
        new Tween$1({ alpha: 0 })
            .to({ alpha: 1 }, 250)
            .onUpdate(arg => {
            recent.uiObject.renderOpacity = arg.alpha;
        })
            .start();
    }
    fadeoutNoticeElement() {
        let item = this.visibleNotice.shift();
        new Tween$1({ alpha: 1 })
            .to({ alpha: 0 }, 250)
            .onUpdate(arg => {
            item.uiObject.renderOpacity = arg.alpha;
        })
            .onComplete(() => {
            this.noticeItemPool.giveBack(item);
        })
            .start();
    }
    checkPendingNotice() {
        if (this.pendingQueue.length < 1)
            return;
        this.insertPendingNotice(this.pendingQueue.shift());
    }
}
TopNoticeComponent.NoticeItemLifeTime = 2;
TopNoticeComponent.NoticeItemMaxCount = 3;
TopNoticeComponent.NoticeMoveStepCount = 15;
TopNoticeComponent.NoticeItemIntervalSpace = 75;
__decorate([
    updater.updateByFrameInterval(15, 'update')
], TopNoticeComponent.prototype, "checkPendingNotice", null);
class TopNoticeComponent2 {
    constructor() {
        this.isLeft = false;
        this.isRemoveing = false;
        this.needmovingNotice = [];
        this.isinsert = false;
    }
    init(targetCanvas) {
        this.visibleNotice = [];
        this.targetCanvas = targetCanvas;
        this.noticeCanvasHeight = this.targetCanvas.size.y;
        this.insertItemTempLocation = new mw.Vector2();
        this.noticeItemPool = new UIPool(() => {
            let item = mw.UIService.create(TopNoticeItem);
            this.targetCanvas.addChild(item.uiObject);
            item.uiObject.size = new mw.Vector2(item.uiObject.size.x, item.uiObject.size.y);
            return item;
        });
    }
    insert(initAction) {
        this.insertPendingNotice(initAction);
    }
    update() {
        if (this.visibleNotice.length == 0)
            return;
        for (let item of this.visibleNotice) {
            item.lifeTime += 0.03;
            if (item.lifeTime >= TopNoticeComponent2.NoticeItemLifeTime) {
                if (!this.needmovingNotice.includes(item)) {
                    this.needmovingNotice.push(item);
                }
            }
        }
        this.eachLeftRightItem();
        this.noticeItemPool.eachVisibleItem(item => {
            if (item.targetHeight >= item.position.y)
                return;
            item.setLocation(item.position.x, item.position.y - TopNoticeComponent2.NoticeMoveStepCount);
        });
    }
    insertPendingNotice(initAction) {
        this.isinsert = true;
        // 超出显示长度,旧的元素隐藏
        if (this.visibleNotice.length >= TopNoticeComponent2.NoticeItemMaxCount) {
            //限制最多显示10个
            for (let index = 0; index < this.visibleNotice.length; index++) {
                let element = this.visibleNotice[index];
                if (index <= (this.visibleNotice.length - TopNoticeComponent2.NoticeItemMaxCount)) {
                    element.lifeTime += TopNoticeComponent2.NoticeItemLifeTime;
                }
            }
        }
        // 信息越多的时候，消失速度再快一点 （ 3个 1-3 每个加 0.3  5个每个加0.5  10个每个加1）
        if (this.visibleNotice.length >= TopNoticeComponent2.NoticeSameItemMaxCount) {
            let count = this.visibleNotice.length;
            for (let index = 0; index < count; index++) {
                let element = this.visibleNotice[index];
                element.lifeTime += count * TopNoticeComponent2.everydiveidetime;
            }
        }
        this.eachLeftRightItem();
        // 已显示元素
        for (let i = 0; i < this.visibleNotice.length; i++) {
            const element = this.visibleNotice[i];
            element.targetHeight = (TopNoticeComponent2.NoticeItemIntervalSpace) + ((i) * TopNoticeComponent2.NoticeItemIntervalSpace);
            element.setLocation(this.insertItemTempLocation.x, element.targetHeight);
        }
        // 插入新的元素
        let recent = this.noticeItemPool.get();
        this.visibleNotice.push(recent);
        initAction(recent);
        recent.lifeTime = 0;
        this.insertItemTempLocation.x = (this.targetCanvas.size.x / 2) - (recent.uiObject.size.x / 2);
        let targetHeight = (TopNoticeComponent2.NoticeItemIntervalSpace) + ((this.visibleNotice.length - 1) * TopNoticeComponent2.NoticeItemIntervalSpace);
        this.insertItemTempLocation.y = targetHeight;
        recent.targetHeight = this.insertItemTempLocation.y;
        recent.uiObject.renderOpacity = 0;
        recent.setLocation(this.insertItemTempLocation.x, -500);
        recent.uiObject.renderOpacity = 1;
        new Tween$1({ posy: -500 })
            .to({ posy: this.insertItemTempLocation.y }, 500)
            .onUpdate(arg => {
            recent.setLocation(this.insertItemTempLocation.x, arg.posy);
        })
            .start()
            .easing(Easing.Linear.None);
        this.isinsert = false;
    }
    eachLeftRightItem() {
        if (this.needmovingNotice.length <= 0) {
            return;
        }
        if (this.isRemoveing) {
            return;
        }
        this.isRemoveing = true;
        //计时
        new Tween$1({ posX: 0 })
            .to({ posX: 1 }, 500)
            .onComplete(() => {
            this.isRemoveing = false;
        }).start();
        // 已显示元素位置 
        let arr = this.visibleNotice.filter(e => !this.needmovingNotice.includes(e));
        for (let i = 0; i < arr.length; i++) {
            const element = arr[i];
            element.targetHeight = (TopNoticeComponent2.NoticeItemIntervalSpace) + ((i) * TopNoticeComponent2.NoticeItemIntervalSpace);
            new Tween$1({ posy: element.uiObject.position.y })
                .to({ posy: element.targetHeight }, 500)
                .onUpdate(arg => {
                element.setLocation(this.insertItemTempLocation.x, arg.posy);
            })
                .onComplete(() => {
            })
                .easing(Easing.Linear.None)
                .start();
        }
        // 插入动效
        while (this.needmovingNotice.length > 0) {
            let item = this.needmovingNotice.shift();
            let pos = item.uiObject.position;
            this.isLeft = !this.isLeft;
            let target = new mw.Vector(0, pos.y);
            new Tween$1({ posX: 0 })
                .to({ posX: this.isLeft ? 3000 : -3000 }, 250)
                .onUpdate(arg => {
                target.x = arg.posX;
                item.uiObject.position = target;
            })
                .onComplete(() => {
                this.noticeItemPool.giveBack(item);
            })
                .easing(Easing.Linear.None)
                .start();
            let index = this.visibleNotice.findIndex(ele => item);
            if (index != -1) {
                this.visibleNotice.splice(index, 1);
            }
        }
    }
}
//Notice提示存在时间
TopNoticeComponent2.NoticeItemLifeTime = 2;
//Notice提示最多存在数量
TopNoticeComponent2.NoticeItemMaxCount = 5;
//Notice提示ui垂直间隔
TopNoticeComponent2.NoticeItemIntervalSpace = 65;
//Notice提示同类型最多存在数量
TopNoticeComponent2.NoticeSameItemMaxCount = 3;
//Notice提示移动步长
TopNoticeComponent2.NoticeMoveStepCount = 15;
//Notice提示 间隔时间
TopNoticeComponent2.everydiveidetime = 0;
class NoticeView extends NoticeView_Generate$1 {
    onStart() {
        this.topNoticeComponent = new TopNoticeComponent();
        this.topNoticeComponent.init(this.con_top_notice);
        this.topNoticeComponent2 = new TopNoticeComponent2();
        this.topNoticeComponent2.init(this.con_top_notice_2);
        this.canUpdate = true;
        this.layer = mw.UILayerSystem;
    }
    onUpdate() {
        this.topNoticeComponent.update();
        this.topNoticeComponent2.update();
    }
}
class TopNoticeItem extends TopNoticeItem_Generate$1 {
    setLocation(x, y) {
        if (!this.position) {
            this.position = new mw.Vector2(x, y);
        }
        else {
            this.position.x = x;
            this.position.y = y;
        }
        this.uiObject.position = this.position;
    }
    setInfo(context) {
        this.txt_context.text = context;
    }
}

var foreign11 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    Notice: Notice
});

/*
 * @Author: yukun.gao yukun.gao@appshahe.com
 * @Date: 2022-09-02 11:09:24
 * @LastEditors: yukun.gao yukun.gao@appshahe.com
 * @LastEditTime: 2022-11-13 17:53:57
 * @FilePath: \LibWeapon\Prefabs\test\Script\WeaponDef.ts
 * @Description: 这是默认设置,请设置`customMade`, 打开koroFileHeader查看配置 进行设置: https://github.com/OBKoro1/koro1FileHeader/wiki/%E9%85%8D%E7%BD%AE
 */
/** 冷兵器节点类型 */
var NodeType;
(function (NodeType) {
    /** 动画 */
    NodeType[NodeType["Animation"] = 1] = "Animation";
    /** 特效 */
    NodeType[NodeType["Eff"] = 2] = "Eff";
    /** 移动 */
    NodeType[NodeType["Move"] = 3] = "Move";
    /** 音效 */
    NodeType[NodeType["Audio"] = 4] = "Audio";
    /** 技能判定区域 */
    NodeType[NodeType["SkillRect"] = 5] = "SkillRect";
})(NodeType || (NodeType = {}));
/** 节点信息 */
class NodeInfo {
    constructor() {
        /** 节点类型 */
        this.type = "";
        /** 节点Guid */
        this.guid = "";
        /** 持续时间 */
        this.duration = "";
        /** 击打时间 */
        this.hitLength = "";
        /** 前摇时间  */
        this.frontRockLength = "";
        /** 是否蓄力 */
        this.isCharge = "0";
        /** 是否自动播放 */
        this.isAutoPlay = "0";
        /** 延迟播放时间 */
        this.delayPlayTime = "";
        /** 插槽位置 */
        this.slotIndex = "-1";
        /** 停止时间 */
        this.stopTime = "";
        /** 偏移坐标 */
        this.offsetPos = ["0", "0", "0"];
        /** 偏移旋转 */
        this.offsetRotation = ["0", "0", "0"];
        /** 偏移缩放 */
        this.offsetScale = ["0", "0", "0"];
        /** 特效颜色偏移 */
        this.colorHex = "";
        /** 移动参数 */
        /** 是否瞬移 1 瞬移 其它 插值 */
        this.isToPos = "";
        /** 移动朝向 1 前 -1 后*/
        this.moveDir = "";
        /** 移动距离 */
        this.moveDistance = "";
        /** 技能判定参数 */
        /** 角度 */
        this.skillAngle = "0";
        /** 偏移距离 */
        this.skillOffsetDis = "0";
        /** 半径 */
        this.skillRadius = "0";
        /** 高度 */
        this.skillHeight = "0";
        /** 长度 */
        this.skillLength = "0";
        /** 宽度 */
        this.skillWidth = "0";
    }
}
/**
 * 所有节点信息
 */
let AnimationInfo$2 = class AnimationInfo {
    constructor() {
        /** 战斗待机动画 */
        this.charFightIdelAniId = "";
        /** 动画信息 */
        this.infos = [];
    }
};
/** 冷兵器预定义类 */
class WeaponPreDefine extends mw.Script {
    constructor() {
        super(...arguments);
        /** 所有需要更新的回调 */
        this.allUpdateCallback = [];
    }
}
/** 冷兵器数据层 */
class WeaponData extends WeaponPreDefine {
    constructor() {
        /** 预加载资源 */
        // @mw.Property({ displayName: "预加载资源" })
        // public preloadAssets: string = "";
        super(...arguments);
        /** 动画json */
        this.animationJsons = [];
        /** 动画信息 */
        this.animationInfo = [];
        /** timer */
        this.allTimer = [];
        /** 宿主角色 */
        this.charGuid = "";
        /** 是否初始化完成 */
        this._isInit = false;
    }
    /** 启动所有需要更新的回调 */
    startUpdateInterval(callback) {
        this.allUpdateCallback.push(callback);
    }
    /** 停止所有定时器 */
    stopAllTimer() {
        this.allTimer.forEach(e => {
            clearTimeout(e);
            clearInterval(e);
        });
        this.server_StopAllTimer();
        this.allTimer = [];
        this.allUpdateCallback = [];
    }
    /**
     * 初始化角色对象
     * @param character 角色
     * @param onInitComplateCall 初始化完成回调
     * @returns
     */
    initCharacter(character, onInitComplateCall) {
        this.char = character;
        this.server_setChar(this.char.gameObjectId);
        this._onInitComplateCall = onInitComplateCall;
        if (this._isInit) {
            this._onInitComplateCall();
        }
        return true;
    }
    onStart() {
        super.onStart();
        //Console.error("创建完成 weapon");
        this.animationInfo = [];
        this.animationJsons.forEach(e => {
            let info = JSON.parse(e);
            let newInfo = new AnimationInfo$2();
            if (info) {
                Object.keys(info).forEach(e => {
                    if (info[e] instanceof Object) {
                        return;
                    }
                    newInfo[e] = info[e];
                });
                info.infos.forEach(e => {
                    let nodeInfo = new NodeInfo();
                    Object.keys(e).forEach(k => {
                        nodeInfo[k] = e[k];
                    });
                    Console.error(nodeInfo);
                    newInfo.infos.push(nodeInfo);
                });
                this.animationInfo.push(newInfo);
            }
            else {
                Console.error("解析json错误 : " + e);
            }
        });
        if (this.animationInfo.length != this.animationJsons.length) {
            Console.error("解析json错误 : 动画数量和解析数量不一致");
        }
        Console.error(this.animationInfo);
        if (!this._isInit) {
            this._isInit = true;
            if (this._onInitComplateCall)
                this._onInitComplateCall();
        }
    }
    onUpdate(dt) {
        super.onUpdate(dt);
        let newList = [];
        let updateList = false;
        this.allUpdateCallback.forEach(e => {
            let res = e(dt);
            if (res) {
                newList.push(e);
            }
            else {
                updateList = true;
            }
        });
        if (updateList)
            this.allUpdateCallback = newList;
    }
}
__decorate([
    mw.Property({ displayName: "动作数据", arrayDefault: ["{\"infos\":[{\"type\":\"1\",\"guid\":\"85955\",\"duration\":\"2000\",\"hitLength\":\"600\",\"frontRockLength\":\"600\",\"delayPlayTime\":\"\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"]},{\"type\":\"1\",\"guid\":\"85960\",\"duration\":\"2000\",\"hitLength\":\"600\",\"frontRockLength\":\"600\",\"delayPlayTime\":\"\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"]},{\"type\":\"1\",\"guid\":\"85959\",\"duration\":\"2000\",\"hitLength\":\"600\",\"frontRockLength\":\"600\",\"delayPlayTime\":\"\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"]},{\"type\":\"1\",\"guid\":\"85957\",\"duration\":\"2000\",\"hitLength\":\"600\",\"frontRockLength\":\"600\",\"delayPlayTime\":\"\",\"slotIndex\":\"-1\",\"stopTime\":\"\",\"offsetPos\":[\"0\",\"0\",\"0\"],\"offsetRotation\":[\"0\",\"0\",\"0\"],\"offsetScale\":[\"0\",\"0\",\"0\"]}]}"] })
], WeaponData.prototype, "animationJsons", void 0);
__decorate([
    mw.Property({ replicated: true, onChanged: "client_OnChangeCharGuid" })
], WeaponData.prototype, "charGuid", void 0);

var foreign94 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    AnimationInfo: AnimationInfo$2,
    NodeInfo: NodeInfo,
    get NodeType () { return NodeType; },
    WeaponData: WeaponData,
    WeaponPreDefine: WeaponPreDefine
});

/** 技能区域检测 */
class SkillRectCheck {
    /** 检测节点标识区域信息 */
    static checkNodes(char, nodeInfo) {
        let res = [];
        nodeInfo.forEach(e => {
            if (e.type != NodeType.SkillRect.toString()) {
                return;
            }
            let angle = parseInt(e.skillAngle);
            let offsetDis = parseInt(e.skillOffsetDis);
            let radius = parseInt(e.skillRadius);
            let height = parseInt(e.skillHeight);
            let length = parseInt(e.skillLength);
            let width = parseInt(e.skillWidth);
            let charLocation = mw.Vector.add(mw.Vector.zero, char.worldTransform.position);
            let dir = char.worldTransform.getForwardVector();
            if (offsetDis != 0) {
                charLocation.add(mw.Vector.multiply(dir, offsetDis));
            }
            if (radius > 0 && height > 0) {
                //radius check
                res = this.checkRadius(char, charLocation, radius, height);
            }
            else if (height > 0 && length > 0 && width > 0) {
                //box check
                let endLocation = mw.Vector.add(charLocation, mw.Vector.multiply(dir, length));
                res = this.checkBox(char, charLocation, endLocation, width, height);
            }
            if (angle > 0) {
                //angle check
                res = this.checkAngle(charLocation, dir, angle, res);
            }
            res = res.filter(e => { return e.guid != char.gameObjectId; });
        });
        return res;
    }
    /**
     * 角度检测
     * @param charLocation
     * @param dir
     * @param angle
     * @param targets
     * @returns
     */
    static checkAngle(charLocation, dir, angle, targets) {
        let res = [];
        targets.forEach(e => {
            if (MathUtil.angleCheck(charLocation, dir, e.worldTransform.position, angle)) {
                res.push(e);
            }
        });
        return res;
    }
    /** 半径检查 */
    static checkRadius(char, charLocation, radius, height) {
        let res = QueryUtil.capsuleOverlap(charLocation, radius, height, SkillRectCheck.showRect);
        return res;
    }
    /** 矩形盒子检测 */
    static checkBox(char, charLocation, endLocation, width, height) {
        let res = GeneralManager.modifyboxOverlapInLevel(charLocation, endLocation, width, height, SkillRectCheck.showRect);
        return res;
    }
}
SkillRectCheck.showRect = true;

var foreign91 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    SkillRectCheck: SkillRectCheck
});

/** 冷兵器管理器预定义数据 */
class WeaponManagerPreDefine {
    constructor() {
        /** 网络事件id，区分返回值使用 */
        this.netActionId = 1;
        /** 网络事件返回监听 */
        this.netEventRet = new Map();
        /** PrefabGuid */
        this.prefabGuid = "";
    }
}
/** 冷兵器管理器客户端实现 */
class WeaponManagerCli extends WeaponManagerPreDefine {
    init() {
        if (mw.SystemUtil.isClient()) {
            /** 监听服务器初始化冷兵器完成 */
            Event.addServerListener(this.onServerInitWeaponCompalte.name, this.onServerInitWeaponCompalte.bind(this));
        }
    }
    /**
     * 服务器初始化冷兵器完成
     * @param netActionId 网络事件id
     * @param objGuid 对象guid
     * @param scriptGuid 脚本guid
     * @param charGuid 角色guid
     * @returns
     */
    async onServerInitWeaponCompalte(netActionId, objGuid, scriptGuid, charGuid) {
        if (this.netEventRet.has(netActionId)) {
            if (objGuid == "" || scriptGuid == "") {
                this.netEventRet.get(netActionId)(null);
                return;
            }
            let script = await mw.ScriptManager.asyncFindScript(scriptGuid);
            let charObj = await GameObject.asyncFindGameObjectById(charGuid);
            let char = null;
            if (PlayerManagerExtesion.isCharacter(charObj)) {
                char = charObj;
            }
            else if (PlayerManagerExtesion.isNpc(charObj)) {
                char = charObj;
            }
            if (script != null) {
                let weapon = script;
                weapon.initCharacter(char, () => {
                    this.netEventRet.get(netActionId)(weapon);
                    this.netEventRet.delete(netActionId);
                });
            }
        }
    }
    /**
     * 客户端请求获取一个冷兵器
     * @param player 玩家类
     * @param netActionId 网络事件id
     * @param charGuid 角色guid
     * @param prefabId 预制件id
     * @returns
     */
    client_AsyncGetWeapon(prefabGuid, char, reqPlayer, netActionId = 0) {
        if (mw.SystemUtil.isClient()) {
            return new Promise((resolve, reject) => {
                let actionId = this.netActionId++;
                this.netEventRet.set(actionId, resolve);
                Event.dispatchToServer(this.onClientGetWeapon.name, actionId, char.gameObjectId, this.prefabGuid);
            });
        }
    }
}
/** 冷兵器管理器服务端实现 */
class WeaponManagerSvr extends WeaponManagerCli {
    constructor() {
        super(...arguments);
        /** 缓存玩家绑定的冷兵器 */
        this.cacheWeapon = new Map();
    }
    init() {
        super.init();
        if (mw.SystemUtil.isServer()) {
            Player.onPlayerLeave.add(this.server_OnDeleteWeapon.bind(this));
            Event.addClientListener(this.onClientGetWeapon.name, this.onClientGetWeapon.bind(this));
            Event.addClientListener(this.server_OnDeleteWeaponByGuid.name, this.server_OnDeleteWeaponByGuid.bind(this));
        }
    }
    /**
     * 服务器删除一个冷兵器
     * @param player 玩家
     */
    server_OnDeleteWeapon(player) {
        let charGuid = player.character.gameObjectId;
        if (this.cacheWeapon.has(charGuid)) {
            let weapon = this.cacheWeapon.get(charGuid);
            let go = weapon.gameObject;
            weapon.destroy();
            go.destroy();
            this.cacheWeapon.delete(charGuid);
        }
    }
    /**
     * 服务器删除一个冷兵器
     * @param weaponGuid 冷兵器guid
     */
    async server_OnDeleteWeaponByGuid(weaponGuid) {
        let weapon = await mw.ScriptManager.asyncFindScript(weaponGuid);
        if (weapon) {
            let go = weapon.gameObject;
            this.cacheWeapon.delete(weapon["charGuid"]);
            weapon.destroy();
            go.destroy();
        }
    }
    /**
     * 客户端请求获取一个冷兵器
     * @param player 玩家类
     * @param netActionId 网络事件id
     * @param charGuid 角色guid
     * @param prefabId 预制件id
     * @returns
     */
    async onClientGetWeapon(player, netActionId, charGuid, prefabId) {
        let char = await GameObject.asyncFindGameObjectById(charGuid);
        if (char == null) {
            Event.dispatchToClient(player, this.onServerInitWeaponCompalte.name, netActionId, "", "");
            return;
        }
        if (PlayerManagerExtesion.isCharacter(char)) {
            this.client_AsyncGetWeapon(prefabId, char, player, netActionId);
        }
        else if (PlayerManagerExtesion.isNpc(char)) {
            this.client_AsyncGetWeapon(prefabId, char, player, netActionId);
        }
    }
    /**
     * 获取一个冷兵器
     * @param prefabGuid 冷兵器预制件id
     * @param char 角色对象
     * @param reqPlayer 玩家对象
     * @param netActionId 网络事件id
     * @returns
     */
    async client_AsyncGetWeapon(prefabGuid, char, reqPlayer, netActionId) {
        if (mw.SystemUtil.isClient()) {
            return super.client_AsyncGetWeapon(prefabGuid, char, reqPlayer, netActionId);
        }
        if (mw.SystemUtil.isServer()) {
            let test = await SpawnManager.wornAsyncSpawn(this.prefabGuid, true);
            let script = await test.getScriptByName("Weapon");
            let testWeapon = script;
            testWeapon.initCharacter(char, (() => {
                this.cacheWeapon.set(char.gameObjectId, testWeapon);
                Event.dispatchToClient(reqPlayer, this.onServerInitWeaponCompalte.name, netActionId, test.gameObjectId, testWeapon.guid, char.gameObjectId);
            }).bind(this));
            return null;
        }
        return null;
    }
}
/**
 * 冷兵器管理器
 */
class WeaponManager extends WeaponManagerSvr {
    /** 获取冷兵器管理实例 */
    static GetInstance() {
        if (WeaponManager._Instance == null) {
            this._Instance = new WeaponManager();
            this._Instance.init();
        }
        return this._Instance;
    }
    init() {
        super.init();
    }
    /**
     * 获取一个冷兵器
     * @param prefabGuid 冷兵器预制件Guid
     * @param char 绑定角色对象
     * @param reqPlayer 请求玩家
     * @returns
     */
    async client_AsyncGetWeapon(prefabGuid, char, reqPlayer, netActionId = 0) {
        this.prefabGuid = prefabGuid;
        return super.client_AsyncGetWeapon(prefabGuid, char, reqPlayer, netActionId);
    }
    /**
     * 销毁一个冷兵器实例
     * @param weapon 实例
     */
    client_DestroyWeapon(weapon) {
        weapon.stopPlay();
        Event.dispatchToServer(this.server_OnDeleteWeaponByGuid.name, weapon.guid);
    }
}
WeaponManager._Instance = null;
WeaponManager.GetInstance();

var foreign95 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    WeaponManager: WeaponManager
});

class ColdWeapon {
    constructor() {
        /** 当前连击时间 */
        this._curComboTime = 0;
        /** 结束蓄力回调 */
        this._endChargeResolve = null;
        /** 伤害 */
        this._hitDamage = 10;
        /** 是否持有武器 */
        this._isKeepWeapon = false;
    }
    get isKeepWeapon() {
        return this._isKeepWeapon;
    }
    static getInstance() {
        if (this.instance == null) {
            this.instance = new ColdWeapon();
            PrefabEvent.PrefabEvtEquip.onEquip((targetGuid, slot, equipGuid) => {
                const player = Player.localPlayer;
                if (targetGuid == player.character.gameObjectId) {
                    if (slot == PrefabEvent.EquipSlot.Weapon && this.instance._weapon && equipGuid != this.instance._weapon.guid) {
                        if (this.instance._isKeepWeapon) {
                            this.instance.releseHandle();
                        }
                    }
                }
            });
        }
        return this.instance;
    }
    /**
     * 注册
     * @param pick 数据来源
     * @param meleeWeaponPrefabGuid 冷兵器预制件Guid
     */
    async register(pick) {
        if (this._isKeepWeapon) {
            this.releseHandle();
        }
        const player = Player.localPlayer;
        if (this._weapon == null) {
            this._weapon = await WeaponManager.GetInstance().client_AsyncGetWeapon("06CF775D428E2DA13FC4B8A9B7E05D44", player.character, player, 0);
            SkillRectCheck.showRect = SystemUtil.isPIE;
        }
        //初始化打击特效，装备武器
        this._onHitEffGuid = pick.hitEffect;
        this._onHitAnimation = pick.hitAnimation;
        // this._hitDamage = pick.hitDamage;
        this._weapon.reWriteAnimationJson([pick.jsons]);
        if (pick.rightWeaponGuid != null) {
            this._weapon.equipWeapon_Hand(pick.rightWeaponGuid, true);
        }
        if (pick.leftWeaponGuid != null) {
            this._weapon.equipWeapon_Hand(pick.leftWeaponGuid, false);
        }
        this._isKeepWeapon = true;
        this.isPlaying = false;
        PrefabEvent.PrefabEvtEquip.equip(player.character.gameObjectId, PrefabEvent.EquipSlot.Weapon, this._weapon.guid);
    }
    releseHandle() {
        this._weapon.unequipWeapon_Hand(true);
        this._weapon.unequipWeapon_Hand(false);
        this._isKeepWeapon = false;
    }
    /**
     * 冷武器进攻
     * @param index 对应的序列号
     */
    attack(index) {
        if (!this._weapon) {
            Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_NotEquippedWithYetGoFind.Value, GlobalData.atkStr, GlobalData.atkStr));
            return;
        }
        this.isPlaying = true;
        this._weapon.playAnimation(index, //播放完成
        (curActionIndex, maxIndex) => {
            this._curComboTime = 0;
            Event.dispatchToLocal("AttackMp");
        }, 
        //到达打击点
        this.hitTargets.bind(this), 
        //可以开始combo
        (milSec) => {
            this.isPlaying = false;
            this._curComboTime = milSec;
        }, 
        //蓄能
        (curIndex, maxIndex, endChargeResolve) => {
            this._endChargeResolve = endChargeResolve;
        });
    }
    hitTargets(curActionIndex, maxIndex, hitObjs) {
        hitObjs.forEach(async (e) => {
            // if (e.tag == "Obj-Impulse") {
            // Console.error("攻击到了 guid = " + e.guid);
            // ModuleService.getModule(ObjImpulseModuleC).addImpulseToObj(e.guid, 1000);
            // return;
            // }
            if (!(PlayerManagerExtesion.isCharacter(e)) && !(PlayerManagerExtesion.isNpc(e))) {
                return;
            }
            if (Player.localPlayer.character.gameObjectId == e.gameObjectId)
                return;
            if (this._onHitEffGuid != "") {
                if (e && e.worldTransform) {
                    let eff = await SpawnManager.wornAsyncSpawn(this._onHitEffGuid, false);
                    eff.worldTransform.position = e.worldTransform.position.clone();
                    eff.loop = (false);
                    eff.play(() => {
                        eff.destroy();
                    });
                }
            }
            if (this._onHitAnimation != "" && (PlayerManagerExtesion.isCharacter(e) || PlayerManagerExtesion.isNpc(e))) {
                const character = e;
                PlayerManagerExtesion.rpcPlayAnimation(character, this._onHitAnimation);
            }
            Console.log("使用冷兵器攻击了" + e.gameObjectId);
            // PrefabEvent.PrefabEvtFight.hurt(Player.localPlayer.character.guid, e.guid, this._hitDamage);
            PrefabEvent.PrefabEvtFight.hit(Player.localPlayer.character.gameObjectId, e.gameObjectId, this._hitDamage * GlobalData.baseSkillDamage, e.worldTransform.position);
        });
    }
    updateHitDamage(value) {
        this._hitDamage = value;
    }
    /**
     * 结束（取消）蓄力
     * @param isConfirm true为结束蓄力，false为取消蓄力
     */
    endCharge(isConfirm) {
        if (this._endChargeResolve) {
            this._endChargeResolve(isConfirm);
            this._endChargeResolve = null;
        }
    }
    /** 获取当前连击时间 */
    getCurComboTime() {
        return this._curComboTime;
    }
}

var foreign90 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ColdWeapon: ColdWeapon
});

/**
 * MapEx(可序列化)
 */
var MapEx;
(function (MapEx) {
    /**
     * 是否为空
     * @param map
     * @returns 是/否
     */
    function isNull(map) {
        return !map || map == null || map == undefined;
    }
    MapEx.isNull = isNull;
    /**
     * 获取对象
     * @param map
     * @param key
     * @returns
     */
    function get(map, key) {
        if (map[key]) {
            return map[key];
        }
        let has = false;
        let keys = Object.keys(map);
        for (let i = 0; i < keys.length; ++i) {
            if (keys[i] == key) {
                has = true;
                break;
            }
        }
        if (has) {
            return map[key];
        }
        return null;
    }
    MapEx.get = get;
    /**
     * 设置对象
     * @param map
     * @param key
     * @param val
     */
    function set(map, key, val) {
        map[key] = val;
    }
    MapEx.set = set;
    /**
     * 删除对象
     * @param map
     * @param key
     * @returns 成功/失败
     */
    function del(map, key) {
        if (map[key]) {
            delete map[key];
            return true;
        }
        let has = false;
        let keys = Object.keys(map);
        for (let i = 0; i < keys.length; ++i) {
            if (keys[i] == key) {
                has = true;
                break;
            }
        }
        if (has) {
            delete map[key];
            return true;
        }
        return false;
    }
    MapEx.del = del;
    /**
     * 是否有指定对象
     * @param map
     * @param key
     * @returns
     */
    function has(map, key) {
        if (map[key]) {
            return true;
        }
        let has = false;
        let keys = Object.keys(map);
        for (let i = 0; i < keys.length; ++i) {
            if (keys[i] == key) {
                has = true;
                break;
            }
        }
        if (has) {
            return true;
        }
        return false;
    }
    MapEx.has = has;
    /**
     * 获取count数量
     * @param map
     * @param key
     * @returns
     */
    function count(map) {
        let res = 0;
        forEach(map, e => {
            ++res;
        });
        return res;
    }
    MapEx.count = count;
    /**
     * 遍历map
     * @param map
     * @param callback
     */
    function forEach(map, callback) {
        for (let key in map) {
            if (map[key]) {
                callback(key, map[key]);
            }
        }
    }
    MapEx.forEach = forEach;
    /**
     * 拷贝，Val还是引用出来的，只是Map换了
     * @param map
     * @returns
     */
    function copy(map) {
        let res = {};
        for (let key in map) {
            res[key] = map[key];
        }
        return res;
    }
    MapEx.copy = copy;
})(MapEx || (MapEx = {}));

var foreign101 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    get MapEx () { return MapEx; }
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/BagModule/BagInfoPanel.ui
 * TIME: 2024.11.04-19.49.52
 */
let BagInfoPanel_Generate = class BagInfoPanel_Generate extends UIScript {
    get mIconImage() {
        if (!this.mIconImage_Internal && this.uiWidgetBase) {
            this.mIconImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/mIconImage');
        }
        return this.mIconImage_Internal;
    }
    get mTitleTextBlock() {
        if (!this.mTitleTextBlock_Internal && this.uiWidgetBase) {
            this.mTitleTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/mTitleTextBlock');
        }
        return this.mTitleTextBlock_Internal;
    }
    get mNameTextBlock() {
        if (!this.mNameTextBlock_Internal && this.uiWidgetBase) {
            this.mNameTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/mNameTextBlock');
        }
        return this.mNameTextBlock_Internal;
    }
    get mInfoTextBlock() {
        if (!this.mInfoTextBlock_Internal && this.uiWidgetBase) {
            this.mInfoTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/mInfoTextBlock');
        }
        return this.mInfoTextBlock_Internal;
    }
    get mUseButton() {
        if (!this.mUseButton_Internal && this.uiWidgetBase) {
            this.mUseButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/Canvas/mUseButton');
        }
        return this.mUseButton_Internal;
    }
    get mUseTextBlock() {
        if (!this.mUseTextBlock_Internal && this.uiWidgetBase) {
            this.mUseTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/Canvas/mUseButton/mUseTextBlock');
        }
        return this.mUseTextBlock_Internal;
    }
    get mPriceButton() {
        if (!this.mPriceButton_Internal && this.uiWidgetBase) {
            this.mPriceButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/Canvas/mPriceButton');
        }
        return this.mPriceButton_Internal;
    }
    get mPreceTextBlock() {
        if (!this.mPreceTextBlock_Internal && this.uiWidgetBase) {
            this.mPreceTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/Canvas/mPriceButton/mPreceTextBlock');
        }
        return this.mPreceTextBlock_Internal;
    }
    get mAdsButton() {
        if (!this.mAdsButton_Internal && this.uiWidgetBase) {
            this.mAdsButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/Canvas/mAdsButton');
        }
        return this.mAdsButton_Internal;
    }
    get mCloseButton() {
        if (!this.mCloseButton_Internal && this.uiWidgetBase) {
            this.mCloseButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/mCloseButton');
        }
        return this.mCloseButton_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        this.mUseButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mUseButton");
        });
        this.mUseButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mPriceButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mPriceButton");
        });
        this.mPriceButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mCloseButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mCloseButton");
        });
        this.mCloseButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mTitleTextBlock);
        this.initLanguage(this.mNameTextBlock);
        this.initLanguage(this.mInfoTextBlock);
        this.initLanguage(this.mUseTextBlock);
        this.initLanguage(this.mPreceTextBlock);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
BagInfoPanel_Generate = __decorate([
    UIBind('UI/module/BagModule/BagInfoPanel.ui')
], BagInfoPanel_Generate);
var BagInfoPanel_Generate$1 = BagInfoPanel_Generate;

var foreign122 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: BagInfoPanel_Generate$1
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/BagModule/BagItem.ui
 * TIME: 2024.11.04-19.49.52
 */
let BagItem_Generate = class BagItem_Generate extends UIScript {
    get mBgImage() {
        if (!this.mBgImage_Internal && this.uiWidgetBase) {
            this.mBgImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mBgImage');
        }
        return this.mBgImage_Internal;
    }
    get mIconImage() {
        if (!this.mIconImage_Internal && this.uiWidgetBase) {
            this.mIconImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mBgImage/mIconImage');
        }
        return this.mIconImage_Internal;
    }
    get mNameTextBlock() {
        if (!this.mNameTextBlock_Internal && this.uiWidgetBase) {
            this.mNameTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mBgImage/mNameTextBlock');
        }
        return this.mNameTextBlock_Internal;
    }
    get mClickButton() {
        if (!this.mClickButton_Internal && this.uiWidgetBase) {
            this.mClickButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mBgImage/mClickButton');
        }
        return this.mClickButton_Internal;
    }
    get mHasTextBlock() {
        if (!this.mHasTextBlock_Internal && this.uiWidgetBase) {
            this.mHasTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mBgImage/mHasTextBlock');
        }
        return this.mHasTextBlock_Internal;
    }
    get mHasTextBlock_1() {
        if (!this.mHasTextBlock_1_Internal && this.uiWidgetBase) {
            this.mHasTextBlock_1_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mBgImage/mHasTextBlock_1');
        }
        return this.mHasTextBlock_1_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        this.mClickButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mClickButton");
        });
        this.mClickButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mNameTextBlock);
        this.initLanguage(this.mHasTextBlock);
        this.initLanguage(this.mHasTextBlock_1);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
BagItem_Generate = __decorate([
    UIBind('UI/module/BagModule/BagItem.ui')
], BagItem_Generate);
var BagItem_Generate$1 = BagItem_Generate;

var foreign123 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: BagItem_Generate$1
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/BagModule/BagPanel.ui
 * TIME: 2024.11.04-19.49.52
 */
let BagPanel_Generate = class BagPanel_Generate extends UIScript {
    get mProgressBar() {
        if (!this.mProgressBar_Internal && this.uiWidgetBase) {
            this.mProgressBar_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/mProgressBar');
        }
        return this.mProgressBar_Internal;
    }
    get mBarTextBlock() {
        if (!this.mBarTextBlock_Internal && this.uiWidgetBase) {
            this.mBarTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/mProgressBar/mBarTextBlock');
        }
        return this.mBarTextBlock_Internal;
    }
    get mTabCanvas() {
        if (!this.mTabCanvas_Internal && this.uiWidgetBase) {
            this.mTabCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/TitleBgImage/mTabCanvas');
        }
        return this.mTabCanvas_Internal;
    }
    get mTabContentCanvas() {
        if (!this.mTabContentCanvas_Internal && this.uiWidgetBase) {
            this.mTabContentCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/TitleBgImage/mTabCanvas/mTabContentCanvas');
        }
        return this.mTabContentCanvas_Internal;
    }
    get mScrollBox() {
        if (!this.mScrollBox_Internal && this.uiWidgetBase) {
            this.mScrollBox_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/mScrollBox');
        }
        return this.mScrollBox_Internal;
    }
    get mContentCanvas() {
        if (!this.mContentCanvas_Internal && this.uiWidgetBase) {
            this.mContentCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/mScrollBox/mContentCanvas');
        }
        return this.mContentCanvas_Internal;
    }
    get mCloseButtons() {
        if (!this.mCloseButtons_Internal && this.uiWidgetBase) {
            this.mCloseButtons_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/mCloseButtons');
        }
        return this.mCloseButtons_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        this.mCloseButtons.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mCloseButtons");
        });
        this.mCloseButtons.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mBarTextBlock);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
BagPanel_Generate = __decorate([
    UIBind('UI/module/BagModule/BagPanel.ui')
], BagPanel_Generate);
var BagPanel_Generate$1 = BagPanel_Generate;

var foreign124 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: BagPanel_Generate$1
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/BagModule/BagTab.ui
 * TIME: 2024.11.04-19.49.52
 */
let BagTab_Generate = class BagTab_Generate extends UIScript {
    get mButton() {
        if (!this.mButton_Internal && this.uiWidgetBase) {
            this.mButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mButton');
        }
        return this.mButton_Internal;
    }
    get mTextBlock() {
        if (!this.mTextBlock_Internal && this.uiWidgetBase) {
            this.mTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mButton/mTextBlock');
        }
        return this.mTextBlock_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        this.mButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mButton");
        });
        this.mButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mTextBlock);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
BagTab_Generate = __decorate([
    UIBind('UI/module/BagModule/BagTab.ui')
], BagTab_Generate);
var BagTab_Generate$1 = BagTab_Generate;

var foreign125 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: BagTab_Generate$1
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/AdsModule/AdsTipsPanel.ui
 * TIME: 2024.11.04-19.49.53
 */
let AdsTipsPanel_Generate = class AdsTipsPanel_Generate extends UIScript {
    get mTitleTxt() {
        if (!this.mTitleTxt_Internal && this.uiWidgetBase) {
            this.mTitleTxt_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/Canvas_1/mTitleTxt');
        }
        return this.mTitleTxt_Internal;
    }
    get mContentTxt() {
        if (!this.mContentTxt_Internal && this.uiWidgetBase) {
            this.mContentTxt_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/Canvas_1/mContentTxt');
        }
        return this.mContentTxt_Internal;
    }
    get mNoBtn() {
        if (!this.mNoBtn_Internal && this.uiWidgetBase) {
            this.mNoBtn_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/Canvas_1/mNoBtn');
        }
        return this.mNoBtn_Internal;
    }
    get mYesBtn() {
        if (!this.mYesBtn_Internal && this.uiWidgetBase) {
            this.mYesBtn_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/Canvas_1/mYesBtn');
        }
        return this.mYesBtn_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        this.mNoBtn.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mNoBtn");
        });
        this.initLanguage(this.mNoBtn);
        this.mNoBtn.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        //按钮添加点击
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mTitleTxt);
        this.initLanguage(this.mContentTxt);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
AdsTipsPanel_Generate = __decorate([
    UIBind('UI/module/AdsModule/AdsTipsPanel.ui')
], AdsTipsPanel_Generate);
var AdsTipsPanel_Generate$1 = AdsTipsPanel_Generate;

var foreign117 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: AdsTipsPanel_Generate$1
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/AdsModule/UpPanel.ui
 * TIME: 2024.11.04-19.49.53
 */
let UpPanel_Generate = class UpPanel_Generate extends UIScript {
    get mTitleTxt() {
        if (!this.mTitleTxt_Internal && this.uiWidgetBase) {
            this.mTitleTxt_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/Canvas_1/mTitleTxt');
        }
        return this.mTitleTxt_Internal;
    }
    get mContentTxt() {
        if (!this.mContentTxt_Internal && this.uiWidgetBase) {
            this.mContentTxt_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/Canvas_1/mContentTxt');
        }
        return this.mContentTxt_Internal;
    }
    get mContentTxt_1() {
        if (!this.mContentTxt_1_Internal && this.uiWidgetBase) {
            this.mContentTxt_1_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/Canvas_1/mContentTxt_1');
        }
        return this.mContentTxt_1_Internal;
    }
    get mNoBtn() {
        if (!this.mNoBtn_Internal && this.uiWidgetBase) {
            this.mNoBtn_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/Canvas_1/mNoBtn');
        }
        return this.mNoBtn_Internal;
    }
    get mYesBtn() {
        if (!this.mYesBtn_Internal && this.uiWidgetBase) {
            this.mYesBtn_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/Canvas_1/mYesBtn');
        }
        return this.mYesBtn_Internal;
    }
    get mUpBtn() {
        if (!this.mUpBtn_Internal && this.uiWidgetBase) {
            this.mUpBtn_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/Canvas_1/mUpBtn');
        }
        return this.mUpBtn_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        this.mNoBtn.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mNoBtn");
        });
        this.initLanguage(this.mNoBtn);
        this.mNoBtn.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mUpBtn.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mUpBtn");
        });
        this.initLanguage(this.mUpBtn);
        this.mUpBtn.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        //按钮添加点击
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mTitleTxt);
        this.initLanguage(this.mContentTxt);
        this.initLanguage(this.mContentTxt_1);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
UpPanel_Generate = __decorate([
    UIBind('UI/module/AdsModule/UpPanel.ui')
], UpPanel_Generate);
var UpPanel_Generate$1 = UpPanel_Generate;

var foreign118 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: UpPanel_Generate$1
});

class UpPanel extends UpPanel_Generate$1 {
    constructor() {
        super(...arguments);
        this.taskModuleC = null;
        this.isCanUp = true;
        this.yesCallback = null;
        this.upCallback = null;
    }
    get getTaskModuleC() {
        if (!this.taskModuleC) {
            this.taskModuleC = ModuleService.getModule(TaskModuleC);
        }
        return this.taskModuleC;
    }
    onStart() {
        this.canUpdate = false;
        this.layer = mw.UILayerDialog;
        this.initTextBlock();
        this.bindButtons();
    }
    initTextBlock() {
        this.mTitleTxt.text = GameConfig.Language.Text_AdvertisingRewards.Value;
        if (GlobalData.languageId == 0) {
            this.mTitleTxt.fontSize = 20;
            this.mContentTxt.fontSize = 30;
            this.mContentTxt_1.fontSize = 30;
        }
        else {
            this.mTitleTxt.fontSize = 35;
            this.mContentTxt.fontSize = 35;
            this.mContentTxt_1.fontSize = 35;
        }
    }
    bindButtons() {
        this.mYesBtn.onClose.add(this.onClickYesButton.bind(this));
        this.mUpBtn.onClicked.add(this.onClickUpButton.bind(this));
        this.mNoBtn.onClicked.add(this.onClickNoButton.bind(this));
    }
    onClickYesButton(isSuccess) {
        if (!isSuccess) {
            Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_FailedPleaseTryAgain.Value, this.mYesBtn.text));
            return;
        }
        if (this.yesCallback) {
            this.yesCallback();
            this.getTaskModuleC.ads();
        }
    }
    onClickUpButton() {
        if (!this.isCanUp) {
            Notice.showDownNotice(GameConfig.Language.Text_DontClickTooFastItWillGetStuck.Value);
            return;
        }
        this.isCanUp = false;
        TimeUtil.delaySecond(1).then(() => { this.isCanUp = true; });
        if (this.upCallback) {
            this.upCallback();
        }
    }
    onClickNoButton() {
        this.hideAdPanel();
    }
    showRewardAd(yesCallback, upCallback, titleName, contentText, contentText_1, noText, yesText, upText) {
        this.yesCallback = yesCallback;
        this.upCallback = upCallback;
        this.mTitleTxt.text = titleName;
        this.mContentTxt.text = contentText;
        this.mContentTxt_1.text = contentText_1;
        this.mNoBtn.text = noText;
        this.mYesBtn.text = yesText;
        this.mUpBtn.text = upText;
        this.showAdPanel();
    }
    showAdPanel() {
        if (this.visible)
            return;
        this.show();
    }
    hideAdPanel() {
        if (!this.visible)
            return;
        Utils.closeUITween(this.rootCanvas, null, () => {
            this.hide();
        });
    }
    onShow(...params) {
        Utils.openUITween(this.rootCanvas, null, null);
    }
}

var foreign46 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: UpPanel
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/FlyModule/SwordItem.ui
 * TIME: 2024.11.04-19.49.52
 */
let SwordItem_Generate = class SwordItem_Generate extends UIScript {
    get mNameTextBlock() {
        if (!this.mNameTextBlock_Internal && this.uiWidgetBase) {
            this.mNameTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/mNameTextBlock');
        }
        return this.mNameTextBlock_Internal;
    }
    get mIconImage() {
        if (!this.mIconImage_Internal && this.uiWidgetBase) {
            this.mIconImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/mIconImage');
        }
        return this.mIconImage_Internal;
    }
    get mDiamondCanvas() {
        if (!this.mDiamondCanvas_Internal && this.uiWidgetBase) {
            this.mDiamondCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/mDiamondCanvas');
        }
        return this.mDiamondCanvas_Internal;
    }
    get mDiamondIconImage() {
        if (!this.mDiamondIconImage_Internal && this.uiWidgetBase) {
            this.mDiamondIconImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/mDiamondCanvas/DiamondBgImage/mDiamondIconImage');
        }
        return this.mDiamondIconImage_Internal;
    }
    get mDiamondTextBlock() {
        if (!this.mDiamondTextBlock_Internal && this.uiWidgetBase) {
            this.mDiamondTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/mDiamondCanvas/DiamondBgImage/mDiamondTextBlock');
        }
        return this.mDiamondTextBlock_Internal;
    }
    get mArkCanvas() {
        if (!this.mArkCanvas_Internal && this.uiWidgetBase) {
            this.mArkCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/mArkCanvas');
        }
        return this.mArkCanvas_Internal;
    }
    get mArkIconImage() {
        if (!this.mArkIconImage_Internal && this.uiWidgetBase) {
            this.mArkIconImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/mArkCanvas/mArkIconImage');
        }
        return this.mArkIconImage_Internal;
    }
    get mArkTextBlock() {
        if (!this.mArkTextBlock_Internal && this.uiWidgetBase) {
            this.mArkTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/mArkCanvas/mArkTextBlock');
        }
        return this.mArkTextBlock_Internal;
    }
    get mHasCanvas() {
        if (!this.mHasCanvas_Internal && this.uiWidgetBase) {
            this.mHasCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/mHasCanvas');
        }
        return this.mHasCanvas_Internal;
    }
    get mMaskImage() {
        if (!this.mMaskImage_Internal && this.uiWidgetBase) {
            this.mMaskImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/mHasCanvas/mMaskImage');
        }
        return this.mMaskImage_Internal;
    }
    get mMaskBgImage() {
        if (!this.mMaskBgImage_Internal && this.uiWidgetBase) {
            this.mMaskBgImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/mHasCanvas/mMaskBgImage');
        }
        return this.mMaskBgImage_Internal;
    }
    get mHasTextBlock() {
        if (!this.mHasTextBlock_Internal && this.uiWidgetBase) {
            this.mHasTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/mHasCanvas/mMaskBgImage/mHasTextBlock');
        }
        return this.mHasTextBlock_Internal;
    }
    get mClickButton() {
        if (!this.mClickButton_Internal && this.uiWidgetBase) {
            this.mClickButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/mClickButton');
        }
        return this.mClickButton_Internal;
    }
    get mRarityTextBlock() {
        if (!this.mRarityTextBlock_Internal && this.uiWidgetBase) {
            this.mRarityTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/mRarityTextBlock');
        }
        return this.mRarityTextBlock_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        this.mClickButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mClickButton");
        });
        this.mClickButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mNameTextBlock);
        this.initLanguage(this.mDiamondTextBlock);
        this.initLanguage(this.mArkTextBlock);
        this.initLanguage(this.mHasTextBlock);
        this.initLanguage(this.mRarityTextBlock);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
SwordItem_Generate = __decorate([
    UIBind('UI/module/FlyModule/SwordItem.ui')
], SwordItem_Generate);
var SwordItem_Generate$1 = SwordItem_Generate;

var foreign126 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: SwordItem_Generate$1
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/FlyModule/SwordPanel.ui
 * TIME: 2024.11.04-19.49.52
 */
let SwordPanel_Generate = class SwordPanel_Generate extends UIScript {
    get mTitleTextBlock() {
        if (!this.mTitleTextBlock_Internal && this.uiWidgetBase) {
            this.mTitleTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/TitleBgImage/mTitleTextBlock');
        }
        return this.mTitleTextBlock_Internal;
    }
    get mScrollBox() {
        if (!this.mScrollBox_Internal && this.uiWidgetBase) {
            this.mScrollBox_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mScrollBox');
        }
        return this.mScrollBox_Internal;
    }
    get mCanvas() {
        if (!this.mCanvas_Internal && this.uiWidgetBase) {
            this.mCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mScrollBox/mCanvas');
        }
        return this.mCanvas_Internal;
    }
    get mMoneyCanvas() {
        if (!this.mMoneyCanvas_Internal && this.uiWidgetBase) {
            this.mMoneyCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMoneyCanvas');
        }
        return this.mMoneyCanvas_Internal;
    }
    get mIconDiamondImage() {
        if (!this.mIconDiamondImage_Internal && this.uiWidgetBase) {
            this.mIconDiamondImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMoneyCanvas/MoneyCanvas/DiamondCanvas/mIconDiamondImage');
        }
        return this.mIconDiamondImage_Internal;
    }
    get mDiamondCountTextBlock() {
        if (!this.mDiamondCountTextBlock_Internal && this.uiWidgetBase) {
            this.mDiamondCountTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMoneyCanvas/MoneyCanvas/DiamondCanvas/mDiamondCountTextBlock');
        }
        return this.mDiamondCountTextBlock_Internal;
    }
    get mIconArkImage() {
        if (!this.mIconArkImage_Internal && this.uiWidgetBase) {
            this.mIconArkImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMoneyCanvas/MoneyCanvas/ArkCanvas/mIconArkImage');
        }
        return this.mIconArkImage_Internal;
    }
    get mArkCountTextBlock() {
        if (!this.mArkCountTextBlock_Internal && this.uiWidgetBase) {
            this.mArkCountTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMoneyCanvas/MoneyCanvas/ArkCanvas/mArkCountTextBlock');
        }
        return this.mArkCountTextBlock_Internal;
    }
    get mTotalRarityTextBlock() {
        if (!this.mTotalRarityTextBlock_Internal && this.uiWidgetBase) {
            this.mTotalRarityTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mTotalRarityTextBlock');
        }
        return this.mTotalRarityTextBlock_Internal;
    }
    get mCloseButton() {
        if (!this.mCloseButton_Internal && this.uiWidgetBase) {
            this.mCloseButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mCloseButton');
        }
        return this.mCloseButton_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        this.mCloseButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mCloseButton");
        });
        this.mCloseButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mTitleTextBlock);
        this.initLanguage(this.mDiamondCountTextBlock);
        this.initLanguage(this.mArkCountTextBlock);
        this.initLanguage(this.mTotalRarityTextBlock);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
SwordPanel_Generate = __decorate([
    UIBind('UI/module/FlyModule/SwordPanel.ui')
], SwordPanel_Generate);
var SwordPanel_Generate$1 = SwordPanel_Generate;

var foreign127 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: SwordPanel_Generate$1
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/FlyModule/SwordTipsPanel.ui
 * TIME: 2024.11.04-19.49.52
 */
let SwordTipsPanel_Generate = class SwordTipsPanel_Generate extends UIScript {
    get mCloseButton() {
        if (!this.mCloseButton_Internal && this.uiWidgetBase) {
            this.mCloseButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/BgImage/mCloseButton');
        }
        return this.mCloseButton_Internal;
    }
    get mContentTextBlock_0() {
        if (!this.mContentTextBlock_0_Internal && this.uiWidgetBase) {
            this.mContentTextBlock_0_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/BgImage/mContentTextBlock_0');
        }
        return this.mContentTextBlock_0_Internal;
    }
    get mContentTextBlock_1() {
        if (!this.mContentTextBlock_1_Internal && this.uiWidgetBase) {
            this.mContentTextBlock_1_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/BgImage/mContentTextBlock_1');
        }
        return this.mContentTextBlock_1_Internal;
    }
    get mContentTextBlock_2() {
        if (!this.mContentTextBlock_2_Internal && this.uiWidgetBase) {
            this.mContentTextBlock_2_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/BgImage/mContentTextBlock_2');
        }
        return this.mContentTextBlock_2_Internal;
    }
    get mDiamondButton() {
        if (!this.mDiamondButton_Internal && this.uiWidgetBase) {
            this.mDiamondButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/BgImage/mDiamondButton');
        }
        return this.mDiamondButton_Internal;
    }
    get mDiamondTextBlock() {
        if (!this.mDiamondTextBlock_Internal && this.uiWidgetBase) {
            this.mDiamondTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/BgImage/mDiamondButton/mDiamondTextBlock');
        }
        return this.mDiamondTextBlock_Internal;
    }
    get mArkButton() {
        if (!this.mArkButton_Internal && this.uiWidgetBase) {
            this.mArkButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/BgImage/mArkButton');
        }
        return this.mArkButton_Internal;
    }
    get mArkTextBlock() {
        if (!this.mArkTextBlock_Internal && this.uiWidgetBase) {
            this.mArkTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/BgImage/mArkButton/mArkTextBlock');
        }
        return this.mArkTextBlock_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        this.mCloseButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mCloseButton");
        });
        this.mCloseButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mDiamondButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mDiamondButton");
        });
        this.mDiamondButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mArkButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mArkButton");
        });
        this.mArkButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mContentTextBlock_0);
        this.initLanguage(this.mContentTextBlock_1);
        this.initLanguage(this.mContentTextBlock_2);
        this.initLanguage(this.mDiamondTextBlock);
        this.initLanguage(this.mArkTextBlock);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
SwordTipsPanel_Generate = __decorate([
    UIBind('UI/module/FlyModule/SwordTipsPanel.ui')
], SwordTipsPanel_Generate);
var SwordTipsPanel_Generate$1 = SwordTipsPanel_Generate;

var foreign128 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: SwordTipsPanel_Generate$1
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/HUDModule/HUDPanel.ui
 * TIME: 2024.11.04-19.49.52
 */
let HUDPanel_Generate = class HUDPanel_Generate extends UIScript {
    get mVirtualJoystickPanel() {
        if (!this.mVirtualJoystickPanel_Internal && this.uiWidgetBase) {
            this.mVirtualJoystickPanel_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/ContrrollerCanvas/mVirtualJoystickPanel');
        }
        return this.mVirtualJoystickPanel_Internal;
    }
    get mTouchPad() {
        if (!this.mTouchPad_Internal && this.uiWidgetBase) {
            this.mTouchPad_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/ContrrollerCanvas/mTouchPad');
        }
        return this.mTouchPad_Internal;
    }
    get mAtkCanvas() {
        if (!this.mAtkCanvas_Internal && this.uiWidgetBase) {
            this.mAtkCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mAtkCanvas');
        }
        return this.mAtkCanvas_Internal;
    }
    get mAtkButton() {
        if (!this.mAtkButton_Internal && this.uiWidgetBase) {
            this.mAtkButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mAtkCanvas/mAtkButton');
        }
        return this.mAtkButton_Internal;
    }
    get mJumpCanvas() {
        if (!this.mJumpCanvas_Internal && this.uiWidgetBase) {
            this.mJumpCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mJumpCanvas');
        }
        return this.mJumpCanvas_Internal;
    }
    get mJumpButton() {
        if (!this.mJumpButton_Internal && this.uiWidgetBase) {
            this.mJumpButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mJumpCanvas/mJumpButton');
        }
        return this.mJumpButton_Internal;
    }
    get mSprintCanvas() {
        if (!this.mSprintCanvas_Internal && this.uiWidgetBase) {
            this.mSprintCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mSprintCanvas');
        }
        return this.mSprintCanvas_Internal;
    }
    get mSprintButton() {
        if (!this.mSprintButton_Internal && this.uiWidgetBase) {
            this.mSprintButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mSprintCanvas/mSprintButton');
        }
        return this.mSprintButton_Internal;
    }
    get mOnOffRingSoulCanvas() {
        if (!this.mOnOffRingSoulCanvas_Internal && this.uiWidgetBase) {
            this.mOnOffRingSoulCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mOnOffRingSoulCanvas');
        }
        return this.mOnOffRingSoulCanvas_Internal;
    }
    get mOnOffRingSoulButton() {
        if (!this.mOnOffRingSoulButton_Internal && this.uiWidgetBase) {
            this.mOnOffRingSoulButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mOnOffRingSoulCanvas/mOnOffRingSoulButton');
        }
        return this.mOnOffRingSoulButton_Internal;
    }
    get mOnOffRingSoulTextBlock() {
        if (!this.mOnOffRingSoulTextBlock_Internal && this.uiWidgetBase) {
            this.mOnOffRingSoulTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mOnOffRingSoulCanvas/mOnOffRingSoulTextBlock');
        }
        return this.mOnOffRingSoulTextBlock_Internal;
    }
    get mFlyCanvas() {
        if (!this.mFlyCanvas_Internal && this.uiWidgetBase) {
            this.mFlyCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mFlyCanvas');
        }
        return this.mFlyCanvas_Internal;
    }
    get mFlyButton() {
        if (!this.mFlyButton_Internal && this.uiWidgetBase) {
            this.mFlyButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mFlyCanvas/mFlyButton');
        }
        return this.mFlyButton_Internal;
    }
    get mFlyTextBlock() {
        if (!this.mFlyTextBlock_Internal && this.uiWidgetBase) {
            this.mFlyTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mFlyCanvas/mFlyTextBlock');
        }
        return this.mFlyTextBlock_Internal;
    }
    get mSkillCanvas_1() {
        if (!this.mSkillCanvas_1_Internal && this.uiWidgetBase) {
            this.mSkillCanvas_1_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mSkillCanvas_1');
        }
        return this.mSkillCanvas_1_Internal;
    }
    get mSkillMaskButton_1() {
        if (!this.mSkillMaskButton_1_Internal && this.uiWidgetBase) {
            this.mSkillMaskButton_1_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mSkillCanvas_1/mSkillMaskButton_1');
        }
        return this.mSkillMaskButton_1_Internal;
    }
    get mSkillTextBlock_1() {
        if (!this.mSkillTextBlock_1_Internal && this.uiWidgetBase) {
            this.mSkillTextBlock_1_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mSkillCanvas_1/mSkillTextBlock_1');
        }
        return this.mSkillTextBlock_1_Internal;
    }
    get mSkillCDTextBlock_1() {
        if (!this.mSkillCDTextBlock_1_Internal && this.uiWidgetBase) {
            this.mSkillCDTextBlock_1_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mSkillCanvas_1/mSkillCDTextBlock_1');
        }
        return this.mSkillCDTextBlock_1_Internal;
    }
    get mAutoAtkCanvas() {
        if (!this.mAutoAtkCanvas_Internal && this.uiWidgetBase) {
            this.mAutoAtkCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mAutoAtkCanvas');
        }
        return this.mAutoAtkCanvas_Internal;
    }
    get mAutoAtkButton() {
        if (!this.mAutoAtkButton_Internal && this.uiWidgetBase) {
            this.mAutoAtkButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mAutoAtkCanvas/mAutoAtkButton');
        }
        return this.mAutoAtkButton_Internal;
    }
    get mAutoAtkTextBlock() {
        if (!this.mAutoAtkTextBlock_Internal && this.uiWidgetBase) {
            this.mAutoAtkTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mAutoAtkCanvas/mAutoAtkTextBlock');
        }
        return this.mAutoAtkTextBlock_Internal;
    }
    get mPlayerButton() {
        if (!this.mPlayerButton_Internal && this.uiWidgetBase) {
            this.mPlayerButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RightTopCanvas/PlayerCanvas/mPlayerButton');
        }
        return this.mPlayerButton_Internal;
    }
    get mPlayerTextBlock() {
        if (!this.mPlayerTextBlock_Internal && this.uiWidgetBase) {
            this.mPlayerTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RightTopCanvas/PlayerCanvas/mPlayerTextBlock');
        }
        return this.mPlayerTextBlock_Internal;
    }
    get mMusicButton() {
        if (!this.mMusicButton_Internal && this.uiWidgetBase) {
            this.mMusicButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RightTopCanvas/MusicCanvas/mMusicButton');
        }
        return this.mMusicButton_Internal;
    }
    get mMusicTextBlock() {
        if (!this.mMusicTextBlock_Internal && this.uiWidgetBase) {
            this.mMusicTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RightTopCanvas/MusicCanvas/mMusicTextBlock');
        }
        return this.mMusicTextBlock_Internal;
    }
    get mHomeButton() {
        if (!this.mHomeButton_Internal && this.uiWidgetBase) {
            this.mHomeButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RightTopCanvas/HomeCanvas/mHomeButton');
        }
        return this.mHomeButton_Internal;
    }
    get mHomeTextBlock() {
        if (!this.mHomeTextBlock_Internal && this.uiWidgetBase) {
            this.mHomeTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RightTopCanvas/HomeCanvas/mHomeTextBlock');
        }
        return this.mHomeTextBlock_Internal;
    }
    get mShopButton() {
        if (!this.mShopButton_Internal && this.uiWidgetBase) {
            this.mShopButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RightTopCanvas/ShopCanvas/mShopButton');
        }
        return this.mShopButton_Internal;
    }
    get mShopTextBlock() {
        if (!this.mShopTextBlock_Internal && this.uiWidgetBase) {
            this.mShopTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RightTopCanvas/ShopCanvas/mShopTextBlock');
        }
        return this.mShopTextBlock_Internal;
    }
    get mRankButton() {
        if (!this.mRankButton_Internal && this.uiWidgetBase) {
            this.mRankButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RightTopCanvas/RankCanvas/mRankButton');
        }
        return this.mRankButton_Internal;
    }
    get mRankTextBlock() {
        if (!this.mRankTextBlock_Internal && this.uiWidgetBase) {
            this.mRankTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RightTopCanvas/RankCanvas/mRankTextBlock');
        }
        return this.mRankTextBlock_Internal;
    }
    get mLotteryButton() {
        if (!this.mLotteryButton_Internal && this.uiWidgetBase) {
            this.mLotteryButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RightTopCanvas/LotteryCanvas/mLotteryButton');
        }
        return this.mLotteryButton_Internal;
    }
    get mLotteryTextBlock() {
        if (!this.mLotteryTextBlock_Internal && this.uiWidgetBase) {
            this.mLotteryTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RightTopCanvas/LotteryCanvas/mLotteryTextBlock');
        }
        return this.mLotteryTextBlock_Internal;
    }
    get mLotteryPointImage() {
        if (!this.mLotteryPointImage_Internal && this.uiWidgetBase) {
            this.mLotteryPointImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RightTopCanvas/LotteryCanvas/mLotteryPointImage');
        }
        return this.mLotteryPointImage_Internal;
    }
    get mOnlineRewardButton() {
        if (!this.mOnlineRewardButton_Internal && this.uiWidgetBase) {
            this.mOnlineRewardButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RightTopCanvas/OnlineRewardCanvas/mOnlineRewardButton');
        }
        return this.mOnlineRewardButton_Internal;
    }
    get mOnlineRewardTextBlock() {
        if (!this.mOnlineRewardTextBlock_Internal && this.uiWidgetBase) {
            this.mOnlineRewardTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RightTopCanvas/OnlineRewardCanvas/mOnlineRewardTextBlock');
        }
        return this.mOnlineRewardTextBlock_Internal;
    }
    get mPointImage() {
        if (!this.mPointImage_Internal && this.uiWidgetBase) {
            this.mPointImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RightTopCanvas/OnlineRewardCanvas/mPointImage');
        }
        return this.mPointImage_Internal;
    }
    get mTaskButton() {
        if (!this.mTaskButton_Internal && this.uiWidgetBase) {
            this.mTaskButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RightTopCanvas/TaskCanvas/mTaskButton');
        }
        return this.mTaskButton_Internal;
    }
    get mTaskTextBlock() {
        if (!this.mTaskTextBlock_Internal && this.uiWidgetBase) {
            this.mTaskTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RightTopCanvas/TaskCanvas/mTaskTextBlock');
        }
        return this.mTaskTextBlock_Internal;
    }
    get mTaskPointImage() {
        if (!this.mTaskPointImage_Internal && this.uiWidgetBase) {
            this.mTaskPointImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RightTopCanvas/TaskCanvas/mTaskPointImage');
        }
        return this.mTaskPointImage_Internal;
    }
    get mSignInButton() {
        if (!this.mSignInButton_Internal && this.uiWidgetBase) {
            this.mSignInButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RightTopCanvas/SignInCanvas/mSignInButton');
        }
        return this.mSignInButton_Internal;
    }
    get mSignInTextBlock() {
        if (!this.mSignInTextBlock_Internal && this.uiWidgetBase) {
            this.mSignInTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RightTopCanvas/SignInCanvas/mSignInTextBlock');
        }
        return this.mSignInTextBlock_Internal;
    }
    get mSignInImage() {
        if (!this.mSignInImage_Internal && this.uiWidgetBase) {
            this.mSignInImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RightTopCanvas/SignInCanvas/mSignInImage');
        }
        return this.mSignInImage_Internal;
    }
    get mAdsButton() {
        if (!this.mAdsButton_Internal && this.uiWidgetBase) {
            this.mAdsButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RightTopCanvas/AdsCanvas/mAdsButton');
        }
        return this.mAdsButton_Internal;
    }
    get mAdsTextBlock() {
        if (!this.mAdsTextBlock_Internal && this.uiWidgetBase) {
            this.mAdsTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RightTopCanvas/AdsCanvas/mAdsTextBlock');
        }
        return this.mAdsTextBlock_Internal;
    }
    get mArkButton() {
        if (!this.mArkButton_Internal && this.uiWidgetBase) {
            this.mArkButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RightTopCanvas/ArkCanvas/mArkButton');
        }
        return this.mArkButton_Internal;
    }
    get mArkTextBlock() {
        if (!this.mArkTextBlock_Internal && this.uiWidgetBase) {
            this.mArkTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RightTopCanvas/ArkCanvas/mArkTextBlock');
        }
        return this.mArkTextBlock_Internal;
    }
    get mArkImage() {
        if (!this.mArkImage_Internal && this.uiWidgetBase) {
            this.mArkImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RightTopCanvas/ArkCanvas/mArkImage');
        }
        return this.mArkImage_Internal;
    }
    get mGetButton() {
        if (!this.mGetButton_Internal && this.uiWidgetBase) {
            this.mGetButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RightTopCanvas/GetCanvas/mGetButton');
        }
        return this.mGetButton_Internal;
    }
    get mGetTextBlock() {
        if (!this.mGetTextBlock_Internal && this.uiWidgetBase) {
            this.mGetTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RightTopCanvas/GetCanvas/mGetTextBlock');
        }
        return this.mGetTextBlock_Internal;
    }
    get mRingSoulButton() {
        if (!this.mRingSoulButton_Internal && this.uiWidgetBase) {
            this.mRingSoulButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RightTopCanvas/RingSoulCanvas/mRingSoulButton');
        }
        return this.mRingSoulButton_Internal;
    }
    get mRingSoulTextBlock() {
        if (!this.mRingSoulTextBlock_Internal && this.uiWidgetBase) {
            this.mRingSoulTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RightTopCanvas/RingSoulCanvas/mRingSoulTextBlock');
        }
        return this.mRingSoulTextBlock_Internal;
    }
    get mRingSoulPointImage() {
        if (!this.mRingSoulPointImage_Internal && this.uiWidgetBase) {
            this.mRingSoulPointImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RightTopCanvas/RingSoulCanvas/mRingSoulPointImage');
        }
        return this.mRingSoulPointImage_Internal;
    }
    get mNewPeopleButton() {
        if (!this.mNewPeopleButton_Internal && this.uiWidgetBase) {
            this.mNewPeopleButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RightTopCanvas/NewPeopleCanvas/mNewPeopleButton');
        }
        return this.mNewPeopleButton_Internal;
    }
    get mNewPeopleTextBlock() {
        if (!this.mNewPeopleTextBlock_Internal && this.uiWidgetBase) {
            this.mNewPeopleTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RightTopCanvas/NewPeopleCanvas/mNewPeopleTextBlock');
        }
        return this.mNewPeopleTextBlock_Internal;
    }
    get mNewPeoplePointImage() {
        if (!this.mNewPeoplePointImage_Internal && this.uiWidgetBase) {
            this.mNewPeoplePointImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RightTopCanvas/NewPeopleCanvas/mNewPeoplePointImage');
        }
        return this.mNewPeoplePointImage_Internal;
    }
    get mSwordButton() {
        if (!this.mSwordButton_Internal && this.uiWidgetBase) {
            this.mSwordButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RightTopCanvas/SwordCanvas/mSwordButton');
        }
        return this.mSwordButton_Internal;
    }
    get mSwordTextBlock() {
        if (!this.mSwordTextBlock_Internal && this.uiWidgetBase) {
            this.mSwordTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RightTopCanvas/SwordCanvas/mSwordTextBlock');
        }
        return this.mSwordTextBlock_Internal;
    }
    get mSoulBoneButton() {
        if (!this.mSoulBoneButton_Internal && this.uiWidgetBase) {
            this.mSoulBoneButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RightTopCanvas/SoulBoneCanvas/mSoulBoneButton');
        }
        return this.mSoulBoneButton_Internal;
    }
    get mSoulBoneTextBlock() {
        if (!this.mSoulBoneTextBlock_Internal && this.uiWidgetBase) {
            this.mSoulBoneTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RightTopCanvas/SoulBoneCanvas/mSoulBoneTextBlock');
        }
        return this.mSoulBoneTextBlock_Internal;
    }
    get mSoulBonePointImage() {
        if (!this.mSoulBonePointImage_Internal && this.uiWidgetBase) {
            this.mSoulBonePointImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RightTopCanvas/SoulBoneCanvas/mSoulBonePointImage');
        }
        return this.mSoulBonePointImage_Internal;
    }
    get mMusicCanvas() {
        if (!this.mMusicCanvas_Internal && this.uiWidgetBase) {
            this.mMusicCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mMusicCanvas');
        }
        return this.mMusicCanvas_Internal;
    }
    get mCloseMusicBtn() {
        if (!this.mCloseMusicBtn_Internal && this.uiWidgetBase) {
            this.mCloseMusicBtn_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mMusicCanvas/mCloseMusicBtn');
        }
        return this.mCloseMusicBtn_Internal;
    }
    get mJumpyImage_1() {
        if (!this.mJumpyImage_1_Internal && this.uiWidgetBase) {
            this.mJumpyImage_1_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mMusicCanvas/Canvas/mJumpyImage_1');
        }
        return this.mJumpyImage_1_Internal;
    }
    get mMusicText() {
        if (!this.mMusicText_Internal && this.uiWidgetBase) {
            this.mMusicText_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mMusicCanvas/Canvas/mMusicText');
        }
        return this.mMusicText_Internal;
    }
    get mLeftMusicBtn() {
        if (!this.mLeftMusicBtn_Internal && this.uiWidgetBase) {
            this.mLeftMusicBtn_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mMusicCanvas/Canvas/mLeftMusicBtn');
        }
        return this.mLeftMusicBtn_Internal;
    }
    get mOnOffMusicBtn() {
        if (!this.mOnOffMusicBtn_Internal && this.uiWidgetBase) {
            this.mOnOffMusicBtn_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mMusicCanvas/Canvas/mOnOffMusicBtn');
        }
        return this.mOnOffMusicBtn_Internal;
    }
    get mRightMusicBtn() {
        if (!this.mRightMusicBtn_Internal && this.uiWidgetBase) {
            this.mRightMusicBtn_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mMusicCanvas/Canvas/mRightMusicBtn');
        }
        return this.mRightMusicBtn_Internal;
    }
    get mJumpyImage_2() {
        if (!this.mJumpyImage_2_Internal && this.uiWidgetBase) {
            this.mJumpyImage_2_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mMusicCanvas/Canvas/mJumpyImage_2');
        }
        return this.mJumpyImage_2_Internal;
    }
    get mRoleCanvas_G() {
        if (!this.mRoleCanvas_G_Internal && this.uiWidgetBase) {
            this.mRoleCanvas_G_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mRoleCanvas_G');
        }
        return this.mRoleCanvas_G_Internal;
    }
    get mRoleCanvas() {
        if (!this.mRoleCanvas_Internal && this.uiWidgetBase) {
            this.mRoleCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mRoleCanvas_G/mRoleCanvas');
        }
        return this.mRoleCanvas_Internal;
    }
    get mRoleIconImage() {
        if (!this.mRoleIconImage_Internal && this.uiWidgetBase) {
            this.mRoleIconImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mRoleCanvas_G/mRoleCanvas/mRoleIconImage');
        }
        return this.mRoleIconImage_Internal;
    }
    get mAtkTextBlock() {
        if (!this.mAtkTextBlock_Internal && this.uiWidgetBase) {
            this.mAtkTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mRoleCanvas_G/mAtkTextBlock');
        }
        return this.mAtkTextBlock_Internal;
    }
    get mLvTextBlock() {
        if (!this.mLvTextBlock_Internal && this.uiWidgetBase) {
            this.mLvTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mRoleCanvas_G/mLvTextBlock');
        }
        return this.mLvTextBlock_Internal;
    }
    get mHpCanvas() {
        if (!this.mHpCanvas_Internal && this.uiWidgetBase) {
            this.mHpCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mRoleCanvas_G/mHpCanvas');
        }
        return this.mHpCanvas_Internal;
    }
    get mHpProgressBar() {
        if (!this.mHpProgressBar_Internal && this.uiWidgetBase) {
            this.mHpProgressBar_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mRoleCanvas_G/mHpCanvas/mHpProgressBar');
        }
        return this.mHpProgressBar_Internal;
    }
    get mHpTextBlock() {
        if (!this.mHpTextBlock_Internal && this.uiWidgetBase) {
            this.mHpTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mRoleCanvas_G/mHpCanvas/mHpTextBlock');
        }
        return this.mHpTextBlock_Internal;
    }
    get mMpCanvas() {
        if (!this.mMpCanvas_Internal && this.uiWidgetBase) {
            this.mMpCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mRoleCanvas_G/mMpCanvas');
        }
        return this.mMpCanvas_Internal;
    }
    get mMpProgressBar() {
        if (!this.mMpProgressBar_Internal && this.uiWidgetBase) {
            this.mMpProgressBar_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mRoleCanvas_G/mMpCanvas/mMpProgressBar');
        }
        return this.mMpProgressBar_Internal;
    }
    get mMpTextBlock() {
        if (!this.mMpTextBlock_Internal && this.uiWidgetBase) {
            this.mMpTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mRoleCanvas_G/mMpCanvas/mMpTextBlock');
        }
        return this.mMpTextBlock_Internal;
    }
    get mExpProgressBar() {
        if (!this.mExpProgressBar_Internal && this.uiWidgetBase) {
            this.mExpProgressBar_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mRoleCanvas_G/ExpCanvas/mExpProgressBar');
        }
        return this.mExpProgressBar_Internal;
    }
    get mExpTextBlock() {
        if (!this.mExpTextBlock_Internal && this.uiWidgetBase) {
            this.mExpTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mRoleCanvas_G/ExpCanvas/mExpTextBlock');
        }
        return this.mExpTextBlock_Internal;
    }
    get mInvincibleCanvas() {
        if (!this.mInvincibleCanvas_Internal && this.uiWidgetBase) {
            this.mInvincibleCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mRoleCanvas_G/mInvincibleCanvas');
        }
        return this.mInvincibleCanvas_Internal;
    }
    get mInvincibleButton() {
        if (!this.mInvincibleButton_Internal && this.uiWidgetBase) {
            this.mInvincibleButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mRoleCanvas_G/mInvincibleCanvas/mInvincibleButton');
        }
        return this.mInvincibleButton_Internal;
    }
    get mTipsInvincibleTextBlock() {
        if (!this.mTipsInvincibleTextBlock_Internal && this.uiWidgetBase) {
            this.mTipsInvincibleTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mRoleCanvas_G/mInvincibleCanvas/mTipsInvincibleTextBlock');
        }
        return this.mTipsInvincibleTextBlock_Internal;
    }
    get mInvincibleTextBlock() {
        if (!this.mInvincibleTextBlock_Internal && this.uiWidgetBase) {
            this.mInvincibleTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mRoleCanvas_G/mInvincibleCanvas/mInvincibleTextBlock');
        }
        return this.mInvincibleTextBlock_Internal;
    }
    get mUpLvButton() {
        if (!this.mUpLvButton_Internal && this.uiWidgetBase) {
            this.mUpLvButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mRoleCanvas_G/mUpLvButton');
        }
        return this.mUpLvButton_Internal;
    }
    get mUpExpTextBlock() {
        if (!this.mUpExpTextBlock_Internal && this.uiWidgetBase) {
            this.mUpExpTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mRoleCanvas_G/UpExpCanvas/mUpExpTextBlock');
        }
        return this.mUpExpTextBlock_Internal;
    }
    get mUpExpFlipBook() {
        if (!this.mUpExpFlipBook_Internal && this.uiWidgetBase) {
            this.mUpExpFlipBook_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mRoleCanvas_G/UpExpCanvas/mUpExpFlipBook');
        }
        return this.mUpExpFlipBook_Internal;
    }
    get mUpExpButton() {
        if (!this.mUpExpButton_Internal && this.uiWidgetBase) {
            this.mUpExpButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mRoleCanvas_G/UpExpCanvas/mUpExpButton');
        }
        return this.mUpExpButton_Internal;
    }
    get mBoneextBlock() {
        if (!this.mBoneextBlock_Internal && this.uiWidgetBase) {
            this.mBoneextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MiddleTopCanvas/BoneCanvas/mBoneextBlock');
        }
        return this.mBoneextBlock_Internal;
    }
    get mAddBoneButton() {
        if (!this.mAddBoneButton_Internal && this.uiWidgetBase) {
            this.mAddBoneButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MiddleTopCanvas/BoneCanvas/mAddBoneButton');
        }
        return this.mAddBoneButton_Internal;
    }
    get mCoinTextBlock() {
        if (!this.mCoinTextBlock_Internal && this.uiWidgetBase) {
            this.mCoinTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MiddleTopCanvas/CoinCanvas/mCoinTextBlock');
        }
        return this.mCoinTextBlock_Internal;
    }
    get mAddCoinButton() {
        if (!this.mAddCoinButton_Internal && this.uiWidgetBase) {
            this.mAddCoinButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MiddleTopCanvas/CoinCanvas/mAddCoinButton');
        }
        return this.mAddCoinButton_Internal;
    }
    get mDiamondTextBlock() {
        if (!this.mDiamondTextBlock_Internal && this.uiWidgetBase) {
            this.mDiamondTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MiddleTopCanvas/DiamondCanvas/mDiamondTextBlock');
        }
        return this.mDiamondTextBlock_Internal;
    }
    get mAddDiamondButton() {
        if (!this.mAddDiamondButton_Internal && this.uiWidgetBase) {
            this.mAddDiamondButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MiddleTopCanvas/DiamondCanvas/mAddDiamondButton');
        }
        return this.mAddDiamondButton_Internal;
    }
    get mDayStrCanvas() {
        if (!this.mDayStrCanvas_Internal && this.uiWidgetBase) {
            this.mDayStrCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mDayStrCanvas');
        }
        return this.mDayStrCanvas_Internal;
    }
    get mDayStr1Canvas() {
        if (!this.mDayStr1Canvas_Internal && this.uiWidgetBase) {
            this.mDayStr1Canvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mDayStrCanvas/mDayStr1Canvas');
        }
        return this.mDayStr1Canvas_Internal;
    }
    get mDayStr1IconImage() {
        if (!this.mDayStr1IconImage_Internal && this.uiWidgetBase) {
            this.mDayStr1IconImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mDayStrCanvas/mDayStr1Canvas/mDayStr1IconImage');
        }
        return this.mDayStr1IconImage_Internal;
    }
    get mDayStr1TextBlock() {
        if (!this.mDayStr1TextBlock_Internal && this.uiWidgetBase) {
            this.mDayStr1TextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mDayStrCanvas/mDayStr1Canvas/mDayStr1TextBlock');
        }
        return this.mDayStr1TextBlock_Internal;
    }
    get mDayStr2Canvas() {
        if (!this.mDayStr2Canvas_Internal && this.uiWidgetBase) {
            this.mDayStr2Canvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mDayStrCanvas/mDayStr2Canvas');
        }
        return this.mDayStr2Canvas_Internal;
    }
    get mDayStr2IconImage() {
        if (!this.mDayStr2IconImage_Internal && this.uiWidgetBase) {
            this.mDayStr2IconImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mDayStrCanvas/mDayStr2Canvas/mDayStr2IconImage');
        }
        return this.mDayStr2IconImage_Internal;
    }
    get mDayStr2TextBlock() {
        if (!this.mDayStr2TextBlock_Internal && this.uiWidgetBase) {
            this.mDayStr2TextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mDayStrCanvas/mDayStr2Canvas/mDayStr2TextBlock');
        }
        return this.mDayStr2TextBlock_Internal;
    }
    get mDayStrButton() {
        if (!this.mDayStrButton_Internal && this.uiWidgetBase) {
            this.mDayStrButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mDayStrCanvas/mDayStrButton');
        }
        return this.mDayStrButton_Internal;
    }
    get mDayStrTimeTextBlock() {
        if (!this.mDayStrTimeTextBlock_Internal && this.uiWidgetBase) {
            this.mDayStrTimeTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mDayStrCanvas/mDayStrButton/mDayStrTimeTextBlock');
        }
        return this.mDayStrTimeTextBlock_Internal;
    }
    get mKillTipCanvas() {
        if (!this.mKillTipCanvas_Internal && this.uiWidgetBase) {
            this.mKillTipCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mKillTipCanvas');
        }
        return this.mKillTipCanvas_Internal;
    }
    get mKillTipCountCanvas() {
        if (!this.mKillTipCountCanvas_Internal && this.uiWidgetBase) {
            this.mKillTipCountCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/KillStreakCanvas/mKillTipCountCanvas');
        }
        return this.mKillTipCountCanvas_Internal;
    }
    get mKillTipTextBlock1() {
        if (!this.mKillTipTextBlock1_Internal && this.uiWidgetBase) {
            this.mKillTipTextBlock1_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/KillStreakCanvas/mKillTipCountCanvas/mKillTipTextBlock1');
        }
        return this.mKillTipTextBlock1_Internal;
    }
    get mKillTipTextBlock2() {
        if (!this.mKillTipTextBlock2_Internal && this.uiWidgetBase) {
            this.mKillTipTextBlock2_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/KillStreakCanvas/mKillTipCountCanvas/mKillTipTextBlock2');
        }
        return this.mKillTipTextBlock2_Internal;
    }
    get mKillTipTextBlock3() {
        if (!this.mKillTipTextBlock3_Internal && this.uiWidgetBase) {
            this.mKillTipTextBlock3_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/KillStreakCanvas/mKillTipTextBlock3');
        }
        return this.mKillTipTextBlock3_Internal;
    }
    get mDeadCanvas() {
        if (!this.mDeadCanvas_Internal && this.uiWidgetBase) {
            this.mDeadCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mDeadCanvas');
        }
        return this.mDeadCanvas_Internal;
    }
    get mDeadTextBlock() {
        if (!this.mDeadTextBlock_Internal && this.uiWidgetBase) {
            this.mDeadTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mDeadCanvas/mDeadTextBlock');
        }
        return this.mDeadTextBlock_Internal;
    }
    get mDeadCountDownTextBlock() {
        if (!this.mDeadCountDownTextBlock_Internal && this.uiWidgetBase) {
            this.mDeadCountDownTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mDeadCanvas/mDeadCountDownTextBlock');
        }
        return this.mDeadCountDownTextBlock_Internal;
    }
    get mDeadTipsTextBlock() {
        if (!this.mDeadTipsTextBlock_Internal && this.uiWidgetBase) {
            this.mDeadTipsTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mDeadCanvas/mDeadTipsTextBlock');
        }
        return this.mDeadTipsTextBlock_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        this.mAtkButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mAtkButton");
        });
        this.mAtkButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mJumpButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mJumpButton");
        });
        this.mJumpButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mSprintButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mSprintButton");
        });
        this.mSprintButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mOnOffRingSoulButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mOnOffRingSoulButton");
        });
        this.mOnOffRingSoulButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mFlyButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mFlyButton");
        });
        this.mFlyButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mAutoAtkButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mAutoAtkButton");
        });
        this.mAutoAtkButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mPlayerButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mPlayerButton");
        });
        this.mPlayerButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mMusicButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mMusicButton");
        });
        this.mMusicButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mHomeButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mHomeButton");
        });
        this.mHomeButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mShopButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mShopButton");
        });
        this.mShopButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mRankButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mRankButton");
        });
        this.mRankButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mLotteryButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mLotteryButton");
        });
        this.mLotteryButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mOnlineRewardButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mOnlineRewardButton");
        });
        this.mOnlineRewardButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mTaskButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mTaskButton");
        });
        this.mTaskButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mSignInButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mSignInButton");
        });
        this.mSignInButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mAdsButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mAdsButton");
        });
        this.mAdsButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mArkButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mArkButton");
        });
        this.mArkButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mGetButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mGetButton");
        });
        this.mGetButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mRingSoulButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mRingSoulButton");
        });
        this.mRingSoulButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mNewPeopleButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mNewPeopleButton");
        });
        this.mNewPeopleButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mSwordButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mSwordButton");
        });
        this.mSwordButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mSoulBoneButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mSoulBoneButton");
        });
        this.mSoulBoneButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mCloseMusicBtn.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mCloseMusicBtn");
        });
        this.mCloseMusicBtn.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mLeftMusicBtn.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mLeftMusicBtn");
        });
        this.mLeftMusicBtn.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mOnOffMusicBtn.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mOnOffMusicBtn");
        });
        this.mOnOffMusicBtn.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mRightMusicBtn.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mRightMusicBtn");
        });
        this.mRightMusicBtn.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mInvincibleButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mInvincibleButton");
        });
        this.mInvincibleButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mUpLvButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mUpLvButton");
        });
        this.mUpLvButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mUpExpButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mUpExpButton");
        });
        this.mUpExpButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mAddBoneButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mAddBoneButton");
        });
        this.mAddBoneButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mAddCoinButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mAddCoinButton");
        });
        this.mAddCoinButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mAddDiamondButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mAddDiamondButton");
        });
        this.mAddDiamondButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mDayStrButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mDayStrButton");
        });
        this.mDayStrButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mOnOffRingSoulTextBlock);
        this.initLanguage(this.mFlyTextBlock);
        this.initLanguage(this.mSkillTextBlock_1);
        this.initLanguage(this.mSkillCDTextBlock_1);
        this.initLanguage(this.mAutoAtkTextBlock);
        this.initLanguage(this.mPlayerTextBlock);
        this.initLanguage(this.mMusicTextBlock);
        this.initLanguage(this.mHomeTextBlock);
        this.initLanguage(this.mShopTextBlock);
        this.initLanguage(this.mRankTextBlock);
        this.initLanguage(this.mLotteryTextBlock);
        this.initLanguage(this.mOnlineRewardTextBlock);
        this.initLanguage(this.mTaskTextBlock);
        this.initLanguage(this.mSignInTextBlock);
        this.initLanguage(this.mAdsTextBlock);
        this.initLanguage(this.mArkTextBlock);
        this.initLanguage(this.mGetTextBlock);
        this.initLanguage(this.mRingSoulTextBlock);
        this.initLanguage(this.mNewPeopleTextBlock);
        this.initLanguage(this.mSwordTextBlock);
        this.initLanguage(this.mSoulBoneTextBlock);
        this.initLanguage(this.mMusicText);
        this.initLanguage(this.mAtkTextBlock);
        this.initLanguage(this.mLvTextBlock);
        this.initLanguage(this.mHpTextBlock);
        this.initLanguage(this.mMpTextBlock);
        this.initLanguage(this.mExpTextBlock);
        this.initLanguage(this.mTipsInvincibleTextBlock);
        this.initLanguage(this.mInvincibleTextBlock);
        this.initLanguage(this.mUpExpTextBlock);
        this.initLanguage(this.mBoneextBlock);
        this.initLanguage(this.mCoinTextBlock);
        this.initLanguage(this.mDiamondTextBlock);
        this.initLanguage(this.mDayStr1TextBlock);
        this.initLanguage(this.mDayStr2TextBlock);
        this.initLanguage(this.mDayStrTimeTextBlock);
        this.initLanguage(this.mKillTipTextBlock1);
        this.initLanguage(this.mKillTipTextBlock2);
        this.initLanguage(this.mKillTipTextBlock3);
        this.initLanguage(this.mDeadTextBlock);
        this.initLanguage(this.mDeadCountDownTextBlock);
        this.initLanguage(this.mDeadTipsTextBlock);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
HUDPanel_Generate = __decorate([
    UIBind('UI/module/HUDModule/HUDPanel.ui')
], HUDPanel_Generate);
var HUDPanel_Generate$1 = HUDPanel_Generate;

var foreign130 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: HUDPanel_Generate$1
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/HUDModule/KillTipItem.ui
 * TIME: 2024.11.04-19.49.52
 */
let KillTipItem_Generate = class KillTipItem_Generate extends UIScript {
    get mBgImage() {
        if (!this.mBgImage_Internal && this.uiWidgetBase) {
            this.mBgImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mBgImage');
        }
        return this.mBgImage_Internal;
    }
    get mMainCanvas() {
        if (!this.mMainCanvas_Internal && this.uiWidgetBase) {
            this.mMainCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mMainCanvas');
        }
        return this.mMainCanvas_Internal;
    }
    get mKillerTextBlock() {
        if (!this.mKillerTextBlock_Internal && this.uiWidgetBase) {
            this.mKillerTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mMainCanvas/KillerCanvas/mKillerTextBlock');
        }
        return this.mKillerTextBlock_Internal;
    }
    get mKillTextBlock() {
        if (!this.mKillTextBlock_Internal && this.uiWidgetBase) {
            this.mKillTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mMainCanvas/KillCanvas/mKillTextBlock');
        }
        return this.mKillTextBlock_Internal;
    }
    get mKilledTextBlock() {
        if (!this.mKilledTextBlock_Internal && this.uiWidgetBase) {
            this.mKilledTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mMainCanvas/KilledCanvas/mKilledTextBlock');
        }
        return this.mKilledTextBlock_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mKillerTextBlock);
        this.initLanguage(this.mKillTextBlock);
        this.initLanguage(this.mKilledTextBlock);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
KillTipItem_Generate = __decorate([
    UIBind('UI/module/HUDModule/KillTipItem.ui')
], KillTipItem_Generate);
var KillTipItem_Generate$1 = KillTipItem_Generate;

var foreign131 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: KillTipItem_Generate$1
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/RingSoulModule/RingSoulItem.ui
 * TIME: 2024.11.04-19.49.52
 */
let RingSoulItem_Generate = class RingSoulItem_Generate extends UIScript {
    get mMainCanvas() {
        if (!this.mMainCanvas_Internal && this.uiWidgetBase) {
            this.mMainCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mMainCanvas');
        }
        return this.mMainCanvas_Internal;
    }
    get mScrollBox() {
        if (!this.mScrollBox_Internal && this.uiWidgetBase) {
            this.mScrollBox_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mMainCanvas/BgImage/mScrollBox');
        }
        return this.mScrollBox_Internal;
    }
    get mCanvas() {
        if (!this.mCanvas_Internal && this.uiWidgetBase) {
            this.mCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mMainCanvas/BgImage/mScrollBox/mCanvas');
        }
        return this.mCanvas_Internal;
    }
    get mUpButton() {
        if (!this.mUpButton_Internal && this.uiWidgetBase) {
            this.mUpButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mMainCanvas/mUpButton');
        }
        return this.mUpButton_Internal;
    }
    get mUpTextBlock() {
        if (!this.mUpTextBlock_Internal && this.uiWidgetBase) {
            this.mUpTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mMainCanvas/mUpButton/mUpTextBlock');
        }
        return this.mUpTextBlock_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        this.mUpButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mUpButton");
        });
        this.mUpButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mUpTextBlock);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
RingSoulItem_Generate = __decorate([
    UIBind('UI/module/RingSoulModule/RingSoulItem.ui')
], RingSoulItem_Generate);
var RingSoulItem_Generate$1 = RingSoulItem_Generate;

var foreign144 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: RingSoulItem_Generate$1
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/RingSoulModule/RingSoulItemChild.ui
 * TIME: 2024.11.04-19.49.52
 */
let RingSoulItemChild_Generate = class RingSoulItemChild_Generate extends UIScript {
    get mCanvas() {
        if (!this.mCanvas_Internal && this.uiWidgetBase) {
            this.mCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mCanvas');
        }
        return this.mCanvas_Internal;
    }
    get mArrowsCanvas() {
        if (!this.mArrowsCanvas_Internal && this.uiWidgetBase) {
            this.mArrowsCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mCanvas/mArrowsCanvas');
        }
        return this.mArrowsCanvas_Internal;
    }
    get mArrowsImage() {
        if (!this.mArrowsImage_Internal && this.uiWidgetBase) {
            this.mArrowsImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mCanvas/mArrowsCanvas/mArrowsImage');
        }
        return this.mArrowsImage_Internal;
    }
    get mCostTextBlock() {
        if (!this.mCostTextBlock_Internal && this.uiWidgetBase) {
            this.mCostTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mCanvas/mArrowsCanvas/mCostTextBlock');
        }
        return this.mCostTextBlock_Internal;
    }
    get mUpTextBlock() {
        if (!this.mUpTextBlock_Internal && this.uiWidgetBase) {
            this.mUpTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mCanvas/mArrowsCanvas/mUpTextBlock');
        }
        return this.mUpTextBlock_Internal;
    }
    get mIconCanvas() {
        if (!this.mIconCanvas_Internal && this.uiWidgetBase) {
            this.mIconCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mCanvas/mIconCanvas');
        }
        return this.mIconCanvas_Internal;
    }
    get mIconImage() {
        if (!this.mIconImage_Internal && this.uiWidgetBase) {
            this.mIconImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mCanvas/mIconCanvas/mIconImage');
        }
        return this.mIconImage_Internal;
    }
    get mNameTextBlock() {
        if (!this.mNameTextBlock_Internal && this.uiWidgetBase) {
            this.mNameTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mCanvas/mIconCanvas/mNameTextBlock');
        }
        return this.mNameTextBlock_Internal;
    }
    get mHasTextBlock() {
        if (!this.mHasTextBlock_Internal && this.uiWidgetBase) {
            this.mHasTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mCanvas/mIconCanvas/mHasTextBlock');
        }
        return this.mHasTextBlock_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mCostTextBlock);
        this.initLanguage(this.mUpTextBlock);
        this.initLanguage(this.mNameTextBlock);
        this.initLanguage(this.mHasTextBlock);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
RingSoulItemChild_Generate = __decorate([
    UIBind('UI/module/RingSoulModule/RingSoulItemChild.ui')
], RingSoulItemChild_Generate);
var RingSoulItemChild_Generate$1 = RingSoulItemChild_Generate;

var foreign145 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: RingSoulItemChild_Generate$1
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/RingSoulModule/RingSoulPanel.ui
 * TIME: 2024.11.04-19.49.52
 */
let RingSoulPanel_Generate = class RingSoulPanel_Generate extends UIScript {
    get mCloseButton() {
        if (!this.mCloseButton_Internal && this.uiWidgetBase) {
            this.mCloseButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mCloseButton');
        }
        return this.mCloseButton_Internal;
    }
    get mTotalRarityTextBlock() {
        if (!this.mTotalRarityTextBlock_Internal && this.uiWidgetBase) {
            this.mTotalRarityTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mTotalRarityTextBlock');
        }
        return this.mTotalRarityTextBlock_Internal;
    }
    get mContentCanvas() {
        if (!this.mContentCanvas_Internal && this.uiWidgetBase) {
            this.mContentCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/ScrollBox/mContentCanvas');
        }
        return this.mContentCanvas_Internal;
    }
    get mMainCanvas() {
        if (!this.mMainCanvas_Internal && this.uiWidgetBase) {
            this.mMainCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mMainCanvas');
        }
        return this.mMainCanvas_Internal;
    }
    get mScrollBox() {
        if (!this.mScrollBox_Internal && this.uiWidgetBase) {
            this.mScrollBox_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mMainCanvas/BgImage/mScrollBox');
        }
        return this.mScrollBox_Internal;
    }
    get mCanvas() {
        if (!this.mCanvas_Internal && this.uiWidgetBase) {
            this.mCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mMainCanvas/BgImage/mScrollBox/mCanvas');
        }
        return this.mCanvas_Internal;
    }
    get mUpButton() {
        if (!this.mUpButton_Internal && this.uiWidgetBase) {
            this.mUpButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mMainCanvas/mUpButton');
        }
        return this.mUpButton_Internal;
    }
    get mUpTextBlock() {
        if (!this.mUpTextBlock_Internal && this.uiWidgetBase) {
            this.mUpTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mMainCanvas/mUpButton/mUpTextBlock');
        }
        return this.mUpTextBlock_Internal;
    }
    get mDiamondTextBlock() {
        if (!this.mDiamondTextBlock_Internal && this.uiWidgetBase) {
            this.mDiamondTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/DiamondCanvas/mDiamondTextBlock');
        }
        return this.mDiamondTextBlock_Internal;
    }
    get mAddDiamondButton() {
        if (!this.mAddDiamondButton_Internal && this.uiWidgetBase) {
            this.mAddDiamondButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/DiamondCanvas/mAddDiamondButton');
        }
        return this.mAddDiamondButton_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        this.mCloseButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mCloseButton");
        });
        this.mCloseButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mUpButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mUpButton");
        });
        this.mUpButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mAddDiamondButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mAddDiamondButton");
        });
        this.mAddDiamondButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mTotalRarityTextBlock);
        this.initLanguage(this.mUpTextBlock);
        this.initLanguage(this.mDiamondTextBlock);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
RingSoulPanel_Generate = __decorate([
    UIBind('UI/module/RingSoulModule/RingSoulPanel.ui')
], RingSoulPanel_Generate);
var RingSoulPanel_Generate$1 = RingSoulPanel_Generate;

var foreign146 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: RingSoulPanel_Generate$1
});

class FlyText {
    constructor() {
        this._uiWidget = null;
        this._rootCanvas = null;
        this._textPools = [];
        /**默认文本框大小（由于开启了自适应，所以文本框有多大，文本就有多大） */
        this._defaultTextSize = new Vector2(200, 100);
        /**默认文本颜色 */
        this._defaultFontColor = LinearColor.white;
        /**默认文本描边颜色 */
        this._defaultOutlineColor = new mw.LinearColor(1, 0, 1, 1);
    }
    static get instance() {
        if (FlyText._instance == null) {
            FlyText._instance = new FlyText();
        }
        return FlyText._instance;
    }
    /**
     * 展示飘字
     * @param content 内容
     * @param worldLocation 世界坐标
     * @param fontColor 颜色（可选）
     */
    showFlyText(content, worldLocation, fontColor, outlineColor) {
        // 将世界坐标转换为屏幕坐标
        let vec2 = mw.InputUtil.projectWorldPositionToWidgetPosition(worldLocation, true).screenPosition;
        // 对象池处理
        let textBlock = null;
        if (this._textPools.length == 0) {
            textBlock = this.createText();
        }
        else {
            textBlock = this._textPools.pop();
        }
        // 给一点初始偏移，方便做动画
        vec2.x -= 120;
        vec2.y -= 160;
        let toX = this.getRandomIntInclusive(100, 300);
        Math.random() < 0.5 ? toX = -toX : toX = toX;
        let toY = this.getRandomIntInclusive(-300, 100);
        // 用Tween，并结合PI来做曲线动画
        let animator = new mw.Tween({ a: 0 }).to({ a: Math.PI }, 1000).onUpdate((object) => {
            textBlock.position = vec2.clone().add(new mw.Vector2(toX * object.a / Math.PI, toY * Math.sin(object.a)));
            textBlock.renderScale = new mw.Vector2(Math.sin(object.a));
        }).onStart(() => {
            textBlock.fontColor = fontColor ? fontColor : this._defaultFontColor;
            textBlock.outlineColor = outlineColor ? outlineColor : this._defaultOutlineColor;
            textBlock.text = content;
            textBlock.visibility = mw.SlateVisibility.SelfHitTestInvisible;
        }).onComplete(() => {
            textBlock.visibility = mw.SlateVisibility.Hidden;
            this._textPools.push(textBlock);
        });
        animator.start();
    }
    /**创建一个文本框 */
    createText() {
        // 首次创建，如果没有UI对象，就创建一个
        if (!this._uiWidget) {
            // 创建一个UI对象
            this._uiWidget = mw.UserWidget.newObject();
            this._uiWidget.addToViewport(1);
            // 首次创建，如果没有rootCanvas，就创建一个
            if (!this._rootCanvas) {
                this._rootCanvas = mw.Canvas.newObject();
                this._rootCanvas.size = new mw.Vector2(1920, 1080);
                this._rootCanvas.position = mw.Vector2.zero;
                this._uiWidget.rootContent = this._rootCanvas;
            }
        }
        // 创建一个文本框，并添加到画布上
        let textBlock = mw.TextBlock.newObject(this._rootCanvas);
        textBlock.size = this._defaultTextSize;
        // 开启文本自适应
        textBlock.fontSize = 60;
        textBlock.fontLetterSpace = 1;
        textBlock.textHorizontalLayout = mw.UITextHorizontalLayout.NoClipping;
        textBlock.autoAdjust = false;
        textBlock.outlineSize = 8;
        textBlock.glyph = mw.UIFontGlyph.Light;
        return textBlock;
    }
    /**得到一个两数之间的随机整数，包括两个数在内 */
    getRandomIntInclusive(min, max) {
        min = Math.ceil(min);
        max = Math.floor(max);
        return Math.floor(Math.random() * (max - min + 1)) + min; //含最大值，含最小值 
    }
}

var foreign6 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    FlyText: FlyText
});

class ExplosiveCoins {
    constructor() {
        this.mapId = 0;
        this.maxMapId = 10;
        this.particles = [];
        this.recycleParticles = new Map();
        this.player = null;
    }
    static get instance() {
        if (ExplosiveCoins._instance == null) {
            ExplosiveCoins._instance = new ExplosiveCoins();
        }
        return ExplosiveCoins._instance;
    }
    /**爆金币 */
    explosiveCoins(fromVec, coinCount = 1, coinNum = 10) {
        // coinCount = Math.round(coinCount / coinNum);
        if (this.mapId >= this.maxMapId)
            this.mapId = 0;
        let mapId = this.mapId++;
        this.play3DSound(fromVec);
        for (let i = 0; i < coinNum; ++i) {
            this.startExplosiveCoins(fromVec, mapId);
        }
        TimeUtil.delaySecond(2).then(() => {
            if (this.particles[mapId] == null || this.particles[mapId] == undefined)
                return;
            this.particles[mapId].forEach((particle, effectId) => {
                let fromVec = particle.worldTransform.position;
                let toVec = mw.Vector.zero;
                if (this.player == null)
                    this.player = Player.localPlayer;
                toVec = this.player.character.worldTransform.position;
                new mw.Tween({ x: fromVec.x, y: fromVec.y, z: fromVec.z })
                    .to({ x: toVec.x, y: toVec.y, z: toVec.z }, 0.1 * 1000)
                    .onUpdate((pos) => {
                    particle.worldTransform.position = (new mw.Vector(pos.x, pos.y, pos.z));
                })
                    .start()
                    .onComplete(() => {
                    particle.stop();
                    this.recycleParticles.set(effectId, particle);
                    this.particles[mapId].delete(effectId);
                });
            });
            TimeUtil.delaySecond(0.1).then(() => {
                let vec = this.player.character.worldTransform.position;
                FlyText.instance.showFlyText("+$ " + coinCount, new mw.Vector(vec.x, vec.y, vec.z + 30), mw.LinearColor.green, mw.LinearColor.yellow);
            });
            this.play3DSound(this.player.character.worldTransform.position);
        });
    }
    async startExplosiveCoins(fromVec, mapId) {
        let effectId = 0;
        let particle = null;
        if (this.recycleParticles.size > 0) {
            effectId = this.recycleParticles.keys().next().value;
            particle = this.recycleParticles.get(effectId);
            this.recycleParticles.delete(effectId);
        }
        else {
            effectId = GeneralManager.rpcPlayEffectAtLocation(GlobalData.explosiveCoinGuid, fromVec, 0);
            particle = await EffectService.getEffectById(effectId);
        }
        particle.loop = true;
        particle.play();
        Console.error("[effectId] = " + effectId);
        Console.error("[particle.guid] = " + particle.gameObjectId);
        if (!particle || !effectId)
            return;
        let toVec = Utils.circularRandomCoordinates(fromVec, 400, 20);
        let moddleVec = new mw.Vector((fromVec.x + toVec.x) / 2, (fromVec.y + toVec.y) / 2, fromVec.z + Utils.getRandomInteger(150, 250));
        let points = Utils.getCurvePointsInNum([fromVec, moddleVec, toVec], 10);
        for (let j = 0; j < points.length - 1; ++j) {
            await new Promise((resolve) => {
                new mw.Tween({ x: points[j].x, y: points[j].y, z: points[j].z })
                    .to({ x: points[j + 1].x, y: points[j + 1].y, z: points[j + 1].z }, 0.5 * 1000 / 10)
                    .onUpdate((pos) => {
                    particle.worldTransform.position = (new mw.Vector(pos.x, pos.y, pos.z));
                })
                    .start();
                setTimeout(() => {
                    return resolve();
                }, 0.5 * 1000 / 10);
            });
        }
        if (this.particles[mapId] == null)
            this.particles[mapId] = new Map();
        this.particles[mapId].set(effectId, particle);
    }
    play3DSound(fromVec) {
        let soundId = SoundService.play3DSound("148629", fromVec);
        TimeUtil.delaySecond(0.5).then(() => {
            SoundService.stop3DSound(soundId);
        });
    }
}

var foreign5 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ExplosiveCoins: ExplosiveCoins
});

class PlayerModuleC extends ModuleC {
    constructor() {
        super(...arguments);
        this.hudModuleC = null;
        this.taskModuleC = null;
        // public saveLevel(value: number): void {
        //     this.server.net_saveLv(value);
        // }
        // public saveHeight(value: number): void {
        //     this.server.net_saveHeight(value);
        // }
        // public saveKill(value: number): void {
        //     this.server.net_saveKill(value);
        // }
        this.coin = 0;
        this.diamond = 0;
        this.bone = 0;
        this.invincible = false;
        this.isOnUpExp = false;
        this.upExpTimer = 0;
        this.upExpTime = 1;
        this.dayStr = "";
    }
    get getHudModuleC() {
        if (!this.hudModuleC) {
            this.hudModuleC = ModuleService.getModule(HUDModuleC);
        }
        return this.hudModuleC;
    }
    get getTaskModuleC() {
        if (!this.taskModuleC) {
            this.taskModuleC = ModuleService.getModule(TaskModuleC);
        }
        return this.taskModuleC;
    }
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
        InputUtil.onKeyDown(mw.Keys.NumPadSeven, () => {
            this.adsUpLv();
        });
        // InputUtil.onKeyDown(mw.Keys.NumPadEight, () => {
        //     this.saveHeight(1);
        // });
        // InputUtil.onKeyDown(mw.Keys.NumPadNine, () => {
        //     this.saveKill(1);
        // });
        this.initAction();
    }
    initAction() {
        this.getHudModuleC.onOnOffUpExpAction.add(this.addOnOffUpExp.bind(this));
        Event.addLocalListener(`SyncDiamondCount`, () => {
            Event.dispatchToLocal(`UpdateDiamondTextBlock`, this.getDiamond);
        });
        Event.addLocalListener(`SyncCoinCount`, () => {
            Event.dispatchToLocal(`UpdateCoinTextBlock`, this.getCoin());
        });
        Event.addLocalListener(`SyncBoneCount`, () => {
            Event.dispatchToLocal(`UpdateBoneTextBlock`, this.getBone);
        });
    }
    onEnterScene(sceneType) {
        this.coin = this.data.coin;
        this.diamond = this.data.diamond;
        this.bone = this.data.bone;
        this.getHudModuleC.updateLvExpCoin(this.data.playerLv, this.data.exp, this.coin, true);
        this.getHudModuleC.updateDiamond(this.diamond);
        this.getHudModuleC.updateBone(this.bone);
        this.initDayStr();
    }
    onUpdate(dt) {
        this.updateUpExp(dt);
    }
    net_onPlayerAtkSelf(damage, hitPoint) {
        let fontColor = Utils.randomColor();
        FlyText.instance.showFlyText("-" + damage, hitPoint, fontColor[0], fontColor[1]);
    }
    net_onSelfAtkPlayer(damage, hitPoint, isDie, maxHp) {
        Console.error("net_onSelfAtkPlayer");
        let fontColor = Utils.randomColor();
        FlyText.instance.showFlyText("-" + damage, hitPoint, fontColor[0], fontColor[1]);
        if (isDie) {
            ExplosiveCoins.instance.explosiveCoins(new mw.Vector(hitPoint.x, hitPoint.y, hitPoint.z / 2), maxHp / 10, Utils.getRandomInteger(5, 10));
            Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_IncreaseCoins.Value, maxHp / 10));
            Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_IncreaseExperience.Value, maxHp / 10));
        }
    }
    async net_updateLvExpAndCoin(isAddLv, coin = 0) {
        let playerLv = this.data.playerLv;
        this.getHudModuleC.updateLvExpCoin(playerLv, this.data.exp, this.data.coin, isAddLv);
        if (this.data.coin != this.coin)
            this.coin = this.data.coin;
        if (coin > 0)
            Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_GetCoins.Value, coin));
        if (isAddLv) {
            Notice.showDownNotice(`${GameConfig.Language.Text_UpgradeLevelTo.Value} ` + await Utils.getLvText(playerLv, this.localPlayer.userId) + " Lv." + playerLv);
            this.getTaskModuleC.upLv(playerLv);
        }
    }
    net_flyText(damage, hitPoint) {
        let fontColor = Utils.randomColor();
        FlyText.instance.showFlyText("-" + damage, hitPoint, fontColor[0], fontColor[1]);
    }
    net_updateHp(curHp) {
        this.getHudModuleC.updateHp(curHp);
    }
    getCoin() {
        return this.coin;
    }
    get getLv() {
        return this.data.playerLv;
    }
    saveCoin(value) {
        this.coin += value;
        this.getHudModuleC.updateCoin(this.coin);
        this.server.net_saveCoin(value);
    }
    saveDiamond(value) {
        this.diamond += value;
        this.getHudModuleC.updateDiamond(this.diamond);
        this.server.net_saveDiamond(value);
    }
    get getDiamond() {
        return this.diamond;
    }
    saveBone(value) {
        this.bone += value;
        this.getHudModuleC.updateBone(this.bone);
        Event.dispatchToLocal(`UpdateBoneTextBlock`, this.getBone);
        this.server.net_saveBone(value);
    }
    get getBone() {
        return this.bone;
    }
    net_setBone(bone) {
        Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_RewardSoulBone.Value, bone - this.bone));
        this.bone = bone;
        this.getHudModuleC.updateBone(this.bone);
        Event.dispatchToLocal(`UpdateBoneTextBlock`, this.getBone);
    }
    /**
     * 更新金币
     * @param value
     */
    net_updateCoin(value) {
        this.getHudModuleC.updateCoin(this.data.coin + value);
        Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_GetCoins.Value, value));
    }
    saveCoinAndExp(coin, exp) {
        if (coin < 0 || isNaN(coin))
            coin = 0;
        if (exp < 0 || isNaN(exp))
            exp = 0;
        if (coin == 0 && exp == 0)
            return;
        if (coin > 0)
            this.coin += coin;
        this.server.net_saveCoinAndExp(coin, exp);
    }
    adsUpLv() {
        let exp = this.getLvUpExp();
        this.saveCoinAndExp(0, exp);
    }
    getLvUpExp() {
        return (this.data.playerLv + 1) * GlobalData.upgradeExpMultiple;
    }
    upLvByCount(num) {
        let lv = this.data.playerLv;
        let exp = 0;
        for (let i = 1; i <= num; ++i) {
            exp += this.getLvUpExpByLv(lv + i);
        }
        this.saveCoinAndExp(0, exp);
    }
    getLvUpExpByLv(lv) {
        return (lv + 1) * GlobalData.upgradeExpMultiple;
    }
    isInvincible(isInvincible) {
        if (this.invincible == isInvincible)
            return;
        Notice.showDownNotice(isInvincible ? GameConfig.Language.Text_DefenseActivated.Value : GameConfig.Language.Text_DefenseHasBeenTurnedOff.Value);
        this.invincible = isInvincible;
        this.server.net_isInvincible(isInvincible);
    }
    net_killTip(killerUserId, killerName, killedUserId, killedName, isKillNpc = false, isSplit = false) {
        if (isKillNpc) {
            if (isSplit) {
                let strs = killedName.split(`-`);
                killedName = `${strs[0]}${GameConfig.Language.Text_Level.Value}${GameConfig.Language[`${strs[1]}`].Value}`;
            }
            else {
                killedName = GameConfig.Language[`${killedName}`].Value;
            }
        }
        this.getHudModuleC.killTip(killerUserId, killerName, killedUserId, killedName);
    }
    addOnOffUpExp(isOn) {
        this.isOnUpExp = isOn;
    }
    updateUpExp(dt) {
        if (!this.isOnUpExp)
            return;
        this.upExpTimer += dt;
        if (this.upExpTimer < this.upExpTime)
            return;
        this.upExpTimer = 0;
        this.upExp();
    }
    upExp() {
        let exp = Math.round(this.getLvUpExp() / 60);
        this.saveCoinAndExp(0, exp);
        let fontColor = Utils.randomColor();
        FlyText.instance.showFlyText(`Exp+${exp}`, this.localPlayer.character.worldTransform.position, fontColor[0], fontColor[1]);
    }
    skill_1() {
        GlobalData.baseSkillDamage = 2;
        TimeUtil.delaySecond(GlobalData.skillContinue_1 + 1).then(() => {
            GlobalData.baseSkillDamage = 1;
        });
        this.server.net_skill_1();
        SoundService.playSound(GlobalData.skillSoundId_1);
    }
    initDayStr() {
        if (GlobalData.languageId == 0)
            return;
        this.dayStr = this.data.dayStr;
        TimeUtil.delaySecond(30).then(() => {
            if (this.dayStr != Utils.getDay()) {
                this.getHudModuleC.showDayStr();
            }
        });
    }
    setDayStr(datStr) {
        this.server.net_setDayStr(datStr);
    }
}

var foreign64 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: PlayerModuleC
});

const ringSoulNames = ["Text_Decade", "Text_AHundredYears", "Text_Millennium", "Text_TenThousandYears", "Text_100000Years", "Text_MillionsOfYears", "Text_MillionsOfYears", "Text_Eternity", "Text_BillionsOfYears", "Text_BillionsOfYears", "Text_TensOfBillionsOfYears", "Text_HundredsOfBillionsOfYears"];
const figureStrs = ["Text_1", "Text_2", "Text_3", "Text_4", "Text_5", "Text_6", "Text_7", "Text_8", "Text_9", "Text_10"];
const costDiamonds = [
    [8, 28, 38, 58, 108, 198, 298],
    [18, 38, 58, 108, 198, 298, 398],
    [28, 48, 88, 158, 298, 398, 498],
    [38, 58, 108, 198, 398, 498, 598],
    [48, 88, 158, 298, 498, 598, 698],
    [58, 108, 198, 398, 598, 698, 798],
    [88, 158, 298, 498, 698, 798, 898],
    [108, 198, 398, 598, 798, 898, 998],
    [158, 298, 498, 698, 898, 998, 1998],
    [198, 398, 598, 798, 998, 1998, 3998, 5998, 7998, 9998, 15998, 19998, 39998],
];
const upSound = "169179";
const ringSoulIconColors = ["#FFFFFFFF", "#FFFF00FF", "#FF00FFFF", "#000000FF", "#FF0000FF", "#00FF00FF", "#191970FF", "#FFC0CBFF", "#FFD700FF", "FF00FFFF", "00FF00FF", "000000FF"];
const ringSoulPrefabIds = [
    "322A7FF14588209BBD4B5DAF37D38FA2",
    "F89DFCA24FEC54C1F4CFBEAB9D4FF27A",
    "6CEAFD0A4DAA30D8FB89E49C5B28CD3F",
    "C5944BA6404AC45A865163BBCC3766DD",
    "19F4724F4E312B74233E1FA76EB9EEA9",
    "0966F94E490464A517EFEB877B7C8892",
    "BD92397747C1FA1BEE9A1B83F63DE479"
];
const ringSoulPrefabIdss = [
    "7C36BC974D5F9E55375E31BA8161C366",
    "92667F8849C7C04147E532A769D4C810",
    "76F94448413EFBCDE982F6AD77A82674",
    "E441096546A41ADCE42B85979BEE09CE",
    "3944E8254E94BA46BAE85D9C37DAB6A7",
    "12901F834472C74D86A077A1D286D75E",
    "DE9A8A8140C040DE5FB2F398714DAA15",
    "E041C96443AE9102CCB9368D643C445D",
    "BC5FB63A4065EE9A2B04C98E2AA4948D",
    "6A9E241E4F2441EC6F77F8A09763A726",
    "2F11617A4ED44094168B7084C9B2FC93",
    "8840B07C4F7DBF5160337DADB1874B82"
];
const ringSoulSlots = [23, 23, 23, 23, 23, 23, 23, 23, 23, 23];
const ringSoulOffsetPoss = [
    new mw.Vector(0, 0, 30),
    new mw.Vector(0, 0, 30),
    new mw.Vector(0, 0, 30),
    new mw.Vector(0, 0, 30),
    new mw.Vector(0, 0, 30),
    new mw.Vector(0, 0, 30),
    new mw.Vector(0, 0, 30),
    new mw.Vector(0, 0, 30),
    new mw.Vector(0, 0, 30),
    new mw.Vector(-100, 0, 320)
];
const ringSoulOffsetRots = [
    new mw.Rotation(0, 0, 0),
    new mw.Rotation(0, 0, 0),
    new mw.Rotation(0, 0, 0),
    new mw.Rotation(0, 0, 0),
    new mw.Rotation(0, 0, 0),
    new mw.Rotation(0, 0, 0),
    new mw.Rotation(0, 0, 0),
    new mw.Rotation(0, 0, 0),
    new mw.Rotation(0, 0, 0),
    new mw.Rotation(0, 65, 0)
];
const ringSoulOffsetScls = [
    new mw.Vector(0.3, 0.3, 0.3),
    new mw.Vector(0.4, 0.4, 0.4),
    new mw.Vector(0.55, 0.55, 0.55),
    new mw.Vector(0.7, 0.7, 0.7),
    new mw.Vector(0.9, 0.9, 0.9),
    new mw.Vector(1.2, 1.2, 1.2),
    new mw.Vector(1.5, 1.5, 1.5),
    new mw.Vector(1.9, 1.9, 1.9),
    new mw.Vector(2.3, 2.3, 2.3),
    new mw.Vector(2.5, 2.5, 2.5)
];
const showRingSoulTweenTime = 0.6;
const hideRingSoulTweenTime = 0.5;
const showRingSoulTweenIntervalTime = 0.3;
const hideRingSoulTweenIntervalTime = 0.25;
class RingSoulGo {
    constructor() {
        this.ringSoulIndex = 0;
        this.go = null;
        this.isInitRingSoulTween = false;
        this.showRingSoulTween = null;
        this.hideRingSoulTween = null;
    }
    initRingSoulTween() {
        if (!this.go)
            return;
        if (this.isInitRingSoulTween) {
            this.startShowRingSoul();
            return;
        }
        this.isInitRingSoulTween = true;
        let scaleValue = this.go.localTransform.scale.x;
        this.showRingSoulTween = new mw.Tween({ scale: 0 })
            .to({ scale: scaleValue }, showRingSoulTweenTime * 1000)
            .onStart(() => {
            this.go.localTransform.scale = mw.Vector.zero;
            this.go.setVisibility(true);
        })
            .onUpdate((v) => {
            this.go.localTransform.scale = new mw.Vector(v.scale, v.scale, v.scale);
        });
        this.hideRingSoulTween = new mw.Tween({ scale: scaleValue })
            .to({ scale: 0 }, hideRingSoulTweenTime * 1000)
            .onStart(() => {
            this.go.localTransform.scale = new mw.Vector(scaleValue, scaleValue, scaleValue);
        })
            .onUpdate((v) => {
            this.go.localTransform.scale = new mw.Vector(v.scale, v.scale, v.scale);
        })
            .onComplete(() => {
            this.go.setVisibility(false);
        });
        this.startShowRingSoul();
    }
    startShowRingSoul() {
        if (this.showRingSoulTween) {
            this.showRingSoulTween.stop();
            this.showRingSoulTween.start();
        }
    }
    startHideRingSoul() {
        if (this.hideRingSoulTween) {
            this.hideRingSoulTween.stop();
            this.hideRingSoulTween.start();
        }
    }
}
let RingSoul = class RingSoul extends Script {
    constructor() {
        super(...arguments);
        this.playerId = 0;
        this.ringSoulStrs = "";
        this.isOnRingSoul = true;
        this.player = null;
        this.ringSoulMap = new Map();
    }
    get getPlayer() {
        if (this.player == null) {
            this.player = Player.getPlayer(this.playerId);
        }
        return this.player;
    }
    async initPlayer() {
        if (!this.player) {
            this.player = await Player.asyncGetPlayer(this.playerId);
            console.error(`playerId = ${this.playerId}"的玩家 "${this.player ? "角色初始化完成" : "角色初始化失败"}`);
        }
    }
    async updateRingSoul() {
        if (!this.player)
            await this.initPlayer();
        if (!this.player)
            return;
        if (!this.ringSoulStrs || this.ringSoulStrs.length == 0)
            return;
        let ringSoulStrs = this.ringSoulStrs.split(`|`);
        if (!ringSoulStrs || ringSoulStrs.length == 0)
            return;
        for (let i = 0; i < ringSoulStrs.length; ++i) {
            if (!ringSoulStrs[i] || ringSoulStrs[i].length == 0)
                continue;
            let ringSoul = ringSoulStrs[i].split(`-`);
            if (!ringSoul || ringSoul.length < 2)
                continue;
            let key = Number(ringSoul[0]);
            let ringSoulIndex = Number(ringSoul[1]);
            let ringSoulGo = null;
            if (this.ringSoulMap.has(key)) {
                ringSoulGo = this.ringSoulMap.get(key);
                if (ringSoulGo.ringSoulIndex == ringSoulIndex)
                    continue;
                ringSoulGo.ringSoulIndex = ringSoulIndex;
                if (ringSoulGo.go) {
                    GameObjPool.despawn(ringSoulGo.go);
                    ringSoulGo.go.setVisibility(false);
                }
            }
            else {
                ringSoulGo = new RingSoulGo();
                if (ringSoulGo.ringSoulIndex == ringSoulIndex)
                    continue;
                ringSoulGo.ringSoulIndex = ringSoulIndex;
            }
            let go = await GameObjPool.asyncSpawn((key != 10) ? ringSoulPrefabIds[ringSoulIndex - 1] : ringSoulPrefabIdss[ringSoulIndex - 1], mwext.GameObjPoolSourceType.Prefab);
            await go.asyncReady();
            this.getPlayer.character.attachToSlot(go, ringSoulSlots[key - 1]);
            go.localTransform.position = ringSoulOffsetPoss[key - 1];
            go.localTransform.rotation = ringSoulOffsetRots[key - 1];
            go.localTransform.scale = ringSoulOffsetScls[key - 1];
            ringSoulGo.go = go;
            ringSoulGo.initRingSoulTween();
            this.ringSoulMap.set(key, ringSoulGo);
        }
    }
    // public async updateRingSoulState(): Promise<void> {
    //     if (!this.ringSoulMap || this.ringSoulMap.size == 0) return;
    //     if (this.isOnRingSoul) {
    //         this.startShowRingSoulByIndex(1);
    //         for (let i = 2; i <= 10; ++i) {
    //             if (!this.ringSoulMap.has(i)) continue;
    //             let ringSoulGo = this.ringSoulMap.get(i);
    //             await new Promise<void>((resolve: () => void) => {
    //                 setTimeout(() => {
    //                     ringSoulGo.startShowRingSoul();
    //                     return resolve();
    //                 }, showRingSoulTweenIntervalTime * 1000);
    //             });
    //         }
    //     } else {
    //         this.startHideRingSoulByIndex(1);
    //         for (let i = 2; i <= 10; ++i) {
    //             if (!this.ringSoulMap.has(i)) continue;
    //             let ringSoulGo = this.ringSoulMap.get(i);
    //             await new Promise<void>((resolve: () => void) => {
    //                 setTimeout(() => {
    //                     ringSoulGo.startHideRingSoul();
    //                     return resolve();
    //                 }, hideRingSoulTweenIntervalTime * 1000);
    //             });
    //         }
    //     }
    // }
    async updateRingSoulState() {
        if (!this.ringSoulMap || this.ringSoulMap.size == 0)
            return;
        this.isOnRingSoul ? await this.OnRingSoul() : await this.OffRingSoul();
    }
    async OffRingSoul() {
        console.error(`关闭`);
        this.startHideRingSoulByIndex(1);
        for (let i = 2; i <= 10; ++i) {
            if (!this.ringSoulMap.has(i))
                continue;
            let ringSoulGo = this.ringSoulMap.get(i);
            await new Promise((resolve) => {
                setTimeout(() => {
                    ringSoulGo.startHideRingSoul();
                    return resolve();
                }, hideRingSoulTweenIntervalTime * 1000);
            });
        }
    }
    async OnRingSoul() {
        console.error(`打开`);
        this.startShowRingSoulByIndex(1);
        for (let i = 2; i <= 10; ++i) {
            if (!this.ringSoulMap.has(i))
                continue;
            let ringSoulGo = this.ringSoulMap.get(i);
            await new Promise((resolve) => {
                setTimeout(() => {
                    ringSoulGo.startShowRingSoul();
                    return resolve();
                }, showRingSoulTweenIntervalTime * 1000);
            });
        }
    }
    startShowRingSoulByIndex(index) {
        if (!this.ringSoulMap.has(index))
            return;
        let ringSoulGo = this.ringSoulMap.get(index);
        ringSoulGo.startShowRingSoul();
    }
    startHideRingSoulByIndex(index) {
        if (!this.ringSoulMap.has(index))
            return;
        let ringSoulGo = this.ringSoulMap.get(index);
        ringSoulGo.startHideRingSoul();
    }
};
__decorate([
    mw.Property({ replicated: true, onChanged: "initPlayer" })
], RingSoul.prototype, "playerId", void 0);
__decorate([
    mw.Property({ replicated: true, onChanged: "updateRingSoul" })
], RingSoul.prototype, "ringSoulStrs", void 0);
__decorate([
    mw.Property({ replicated: true, onChanged: "updateRingSoulState" })
], RingSoul.prototype, "isOnRingSoul", void 0);
RingSoul = __decorate([
    Component
], RingSoul);
var RingSoul$1 = RingSoul;
class RingSoulModuleC extends ModuleC {
    constructor() {
        super(...arguments);
        this.hudModuleC = null;
        this.bagModuleC = null;
        this.ringSoulPanel = null;
        this.ringSoul = {};
    }
    get getHudModuleC() {
        if (!this.hudModuleC) {
            this.hudModuleC = ModuleService.getModule(HUDModuleC);
        }
        return this.hudModuleC;
    }
    get getBagModuleC() {
        if (!this.bagModuleC) {
            this.bagModuleC = ModuleService.getModule(BagModuleC);
        }
        return this.bagModuleC;
    }
    get getRingSoulPanel() {
        if (this.ringSoulPanel == null) {
            this.ringSoulPanel = mw.UIService.getUI(RingSoulPanel);
        }
        return this.ringSoulPanel;
    }
    onStart() {
        this.initRingSoulData();
        InputUtil.onKeyDown(mw.Keys.P, () => {
            // Event.dispatchToServer("RingSoul");
            this.getRingSoulPanel.show();
        });
        this.getHudModuleC.onOpenRingSoulAction.add(() => {
            this.getRingSoulPanel.show();
            this.getRingSoulPanel.updateRarityTextBlock(this.getRarity);
        });
        this.getHudModuleC.onOnOffRingSoulAction.add(this.onOffRingSoul.bind(this));
        this.ringSoulPanel = mw.UIService.getUI(RingSoulPanel);
    }
    initRingSoulData() {
        this.ringSoul = this.data.ringSoul;
        console.error(`this.ringSoul:${JSON.stringify(this.ringSoul)}`);
    }
    getIsHasRingSoul(key) {
        return MapEx.has(this.ringSoul, key);
    }
    get isCanOpenRingSoul() {
        if (MapEx.count(this.ringSoul) == 0) {
            Notice.showDownNotice(GameConfig.Language.Text_NotYetObtainedSoulRing.Value);
            return false;
        }
        return true;
    }
    getRingSoulIndex(key) {
        if (MapEx.has(this.ringSoul, key)) {
            return MapEx.get(this.ringSoul, key);
        }
        return 0;
    }
    setRingSoulIndex(key, value) {
        MapEx.set(this.ringSoul, key, value);
        this.server.net_setRingSoulIndex(key, value);
        this.getBagModuleC.updateHpByUsing();
        this.getRingSoulPanel.updateRarityTextBlock(this.getRarity);
    }
    get getRarity() {
        if (!this.ringSoul || MapEx.count(this.ringSoul) == 0)
            return 0;
        let rarity = 0;
        MapEx.forEach(this.ringSoul, (key, value) => {
            rarity += value;
        });
        return Number((rarity * 0.05).toFixed(2));
    }
    onOffRingSoul(isOpenRingSoul) {
        this.server.net_onOffRingSoul(isOpenRingSoul);
    }
}
class RingSoulModuleS extends ModuleS {
    constructor() {
        super(...arguments);
        this.bagModuleS = null;
        this.ringSoulMap = new Map();
    }
    get getBagModuleS() {
        if (!this.bagModuleS) {
            this.bagModuleS = ModuleService.getModule(BagModuleS);
        }
        return this.bagModuleS;
    }
    onStart() {
    }
    onPlayerEnterGame(player) {
        this.initRingSoul(player);
    }
    initRingSoul(player) {
        let playerId = player.playerId;
        let ringSoul = player.character.addComponent(RingSoul, true);
        ringSoul.playerId = playerId;
        this.ringSoulMap.set(playerId, ringSoul);
        let ringSoulData = DataCenterS.getData(player, RingSoulData).ringSoul;
        console.error(`ringSoulData = ${JSON.stringify(ringSoulData)}`);
        if (MapEx.count(ringSoulData) > 0) {
            let ringSoulStrs = "";
            MapEx.forEach(ringSoulData, (key, value) => {
                ringSoulStrs += `${key}-${value}|`;
            });
            ringSoul.ringSoulStrs = ringSoulStrs;
        }
    }
    net_setRingSoulIndex(key, value) {
        let player = this.currentPlayer;
        this.currentData.setRingSoulIndex(key, value);
        if (!this.ringSoulMap.has(player.playerId))
            return;
        let ringSoul = this.ringSoulMap.get(player.playerId);
        ringSoul.ringSoulStrs = `${key}-${value}`;
        this.getBagModuleS.updateHpByUsing(player);
    }
    getRarity(player) {
        return DataCenterS.getData(player, RingSoulData).getRarity;
    }
    net_onOffRingSoul(isOpenRingSoul) {
        let playerId = this.currentPlayerId;
        if (!this.ringSoulMap.has(playerId))
            return;
        let ringSoul = this.ringSoulMap.get(playerId);
        ringSoul.isOnRingSoul = isOpenRingSoul;
    }
}
class RingSoulData extends Subdata {
    constructor() {
        super(...arguments);
        this.ringSoul = {};
    }
    setRingSoulIndex(key, value) {
        MapEx.set(this.ringSoul, key, value);
        this.save(true);
    }
    get getRarity() {
        if (!this.ringSoul || MapEx.count(this.ringSoul) == 0)
            return 0;
        let rarity = 0;
        MapEx.forEach(this.ringSoul, (key, value) => {
            rarity += value;
        });
        return Number((rarity * 0.05).toFixed(2));
    }
}
__decorate([
    Decorator.persistence()
], RingSoulData.prototype, "ringSoul", void 0);
class RingSoulPanel extends RingSoulPanel_Generate$1 {
    constructor() {
        super(...arguments);
        this.ringSoulModuleC = null;
        this.playerModuleC = null;
        this.adTipsPanel = null;
        this.hudPanel = null;
        this.hudModuleC = null;
        this.ringSoulItems = [];
        this.ringSoulPage = 0;
        this.ringSoulIndex = 0;
        this.ringSoulItemChilds = [];
    }
    get getRingSoulModuleC() {
        if (!this.ringSoulModuleC) {
            this.ringSoulModuleC = ModuleService.getModule(RingSoulModuleC);
        }
        return this.ringSoulModuleC;
    }
    get getPlayerModuleC() {
        if (!this.playerModuleC) {
            this.playerModuleC = ModuleService.getModule(PlayerModuleC);
        }
        return this.playerModuleC;
    }
    get getAdTipsPanel() {
        if (!this.adTipsPanel) {
            this.adTipsPanel = mw.UIService.create(AdTipsPanel);
        }
        return this.adTipsPanel;
    }
    get getHudPanel() {
        if (!this.hudPanel) {
            this.hudPanel = mw.UIService.getUI(HUDPanel);
        }
        return this.hudPanel;
    }
    get getHudModuleC() {
        if (!this.hudModuleC) {
            this.hudModuleC = ModuleService.getModule(HUDModuleC);
        }
        return this.hudModuleC;
    }
    onStart() {
        this.initUI();
        this.bindButton();
        this.initTextBlock();
    }
    initTextBlock() {
        this.mUpTextBlock.text = GameConfig.Language.Text_ForgeSoulRings_Button.Value;
        if (GlobalData.languageId == 0) {
            this.mTotalRarityTextBlock.fontSize = 30;
            this.mUpTextBlock.fontSize = 20;
        }
        else {
            this.mTotalRarityTextBlock.fontSize = 50;
            this.mUpTextBlock.fontSize = 38;
        }
    }
    initUI() {
        for (let i = 1; i <= 9; ++i) {
            let ringSoulItem = mw.UIService.create(RingSoulItem);
            ringSoulItem.setRingSoulItemData(i);
            this.ringSoulItems.push(ringSoulItem);
            this.mContentCanvas.addChild(ringSoulItem.uiObject);
        }
        this.setRingSoulItemData(10);
    }
    setRingSoulItemData(ringSoulPage) {
        this.ringSoulPage = ringSoulPage;
        this.ringSoulIndex = this.getRingSoulModuleC.getRingSoulIndex(this.ringSoulPage);
        for (let i = 1; i <= 12; ++i) {
            let ringSoulItemChild = mw.UIService.create(RingSoulItemChild);
            ringSoulItemChild.setRingSoulItemChildData(i, this.ringSoulIndex, ringSoulPage);
            this.ringSoulItemChilds.push(ringSoulItemChild);
            this.mCanvas.addChild(ringSoulItemChild.uiObject);
        }
    }
    bindButton() {
        this.mCloseButton.onClicked.add(this.addCloseButton.bind(this));
        this.mUpButton.onClicked.add(this.addUpButton.bind(this));
        this.mAddDiamondButton.onClicked.add(() => {
            this.getHudModuleC.onAddDiamondAction.call();
        });
    }
    addCloseButton() {
        this.hideTween();
    }
    addUpButton() {
        if (this.ringSoulPage <= 0) {
            Notice.showDownNotice(GameConfig.Language.Text_ContactTheAuthorForRepair.Value);
            return;
        }
        if (this.ringSoulItemChilds.length <= this.ringSoulIndex) {
            Notice.showDownNotice(GameConfig.Language.Text_FullLevel.Value);
            return;
        }
        let lv = this.getPlayerModuleC.getLv;
        if (lv < this.ringSoulPage * 10) {
            Notice.showDownNotice(GameConfig.Language.Text_InsufficientLevel.Value);
            return;
        }
        let diamond = this.getPlayerModuleC.getDiamond;
        console.error(`costDiamonds[this.ringSoulIndex ]:${costDiamonds[this.ringSoulPage - 1][this.ringSoulIndex]}`);
        if (diamond >= costDiamonds[this.ringSoulPage - 1][this.ringSoulIndex]) {
            this.getPlayerModuleC.saveDiamond(-costDiamonds[this.ringSoulPage - 1][this.ringSoulIndex]);
            this.ringSoulIndex++;
            this.getRingSoulModuleC.setRingSoulIndex(this.ringSoulPage, this.ringSoulIndex);
            this.ringSoulItemChilds[this.ringSoulIndex - 1].setRingSoulItemChildDataByIndex(this.ringSoulIndex);
            SoundService.playSound(upSound);
            Notice.showDownNotice(GameConfig.Language.Text_SuccessfullyForged.Value);
        }
        else {
            if (GlobalData.isOpenIAA) {
                this.getAdTipsPanel.showRewardAd(() => {
                    this.getPlayerModuleC.saveDiamond(GlobalData.addDiamondCount);
                    Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_SuccessfullyObtainedDiamonds.Value, GlobalData.addDiamondCount));
                }, StringUtil.format(GameConfig.Language.Text_GetFreeDiamonds.Value, GlobalData.addDiamondCount), GameConfig.Language.Text_Cancel.Value, GameConfig.Language.Text_FreeToReceive.Value);
            }
            else {
                this.getPlayerModuleC.saveDiamond(GlobalData.addDiamondCount);
            }
        }
    }
    updateDiamond(diamond) {
        this.mDiamondTextBlock.text = `${diamond}`;
    }
    updateRarityTextBlock(rarity) {
        this.mTotalRarityTextBlock.text = StringUtil.format(GameConfig.Language.Text_TotalBonus.Value, 1 + rarity, 1 + rarity);
    }
    onShow(...params) {
        Utils.openUITween(this.rootCanvas, () => {
            this.getHudPanel.hide();
        }, null);
    }
    hideTween() {
        Utils.closeUITween(this.rootCanvas, null, () => {
            this.hide();
            this.getHudPanel.show();
        });
    }
}
class RingSoulItem extends RingSoulItem_Generate$1 {
    constructor() {
        super(...arguments);
        this.ringSoulModuleC = null;
        this.playerModuleC = null;
        this.adTipsPanel = null;
        this.ringSoulPage = 0;
        this.ringSoulIndex = 0;
        this.ringSoulItemChilds = [];
    }
    get getRingSoulModuleC() {
        if (!this.ringSoulModuleC) {
            this.ringSoulModuleC = ModuleService.getModule(RingSoulModuleC);
        }
        return this.ringSoulModuleC;
    }
    get getPlayerModuleC() {
        if (!this.playerModuleC) {
            this.playerModuleC = ModuleService.getModule(PlayerModuleC);
        }
        return this.playerModuleC;
    }
    get getAdTipsPanel() {
        if (!this.adTipsPanel) {
            this.adTipsPanel = mw.UIService.create(AdTipsPanel);
        }
        return this.adTipsPanel;
    }
    onStart() {
        this.bindButton();
        this.initTextBlock();
    }
    initTextBlock() {
        this.mUpTextBlock.text = GameConfig.Language.Text_ForgeSoulRings_Button.Value;
        if (GlobalData.languageId == 0) {
            this.mUpTextBlock.fontSize = 20;
        }
        else {
            this.mUpTextBlock.fontSize = 38;
        }
    }
    bindButton() {
        this.mUpButton.onClicked.add(this.addUpButton.bind(this));
        Event.addLocalListener("First", () => {
            if (this.ringSoulPage == 1 && this.ringSoulIndex == 0) {
                this.ringSoulIndex++;
                this.getRingSoulModuleC.setRingSoulIndex(this.ringSoulPage, this.ringSoulIndex);
                this.ringSoulItemChilds[this.ringSoulIndex - 1].setRingSoulItemChildDataByIndex(this.ringSoulIndex);
                SoundService.playSound(upSound);
                Notice.showDownNotice(GameConfig.Language.Text_CongratulationsOnCompletingTheBeginnerSGuide.Value);
                Notice.showDownNotice(GameConfig.Language.Text_RewardTheFirstSoulRingWithATenYearSoulRing.Value);
            }
        });
    }
    addUpButton() {
        if (this.ringSoulPage <= 0) {
            Notice.showDownNotice(GameConfig.Language.Text_ContactTheAuthorForRepair.Value);
            return;
        }
        if (this.ringSoulItemChilds.length <= this.ringSoulIndex) {
            Notice.showDownNotice(GameConfig.Language.Text_FullLevel.Value);
            return;
        }
        let lv = this.getPlayerModuleC.getLv;
        if (lv < this.ringSoulPage * 10) {
            Notice.showDownNotice(GameConfig.Language.Text_InsufficientLevel.Value);
            return;
        }
        let diamond = this.getPlayerModuleC.getDiamond;
        console.error(`costDiamonds[this.ringSoulIndex]:${costDiamonds[this.ringSoulPage - 1][this.ringSoulIndex]}`);
        if (diamond >= costDiamonds[this.ringSoulPage - 1][this.ringSoulIndex]) {
            this.getPlayerModuleC.saveDiamond(-costDiamonds[this.ringSoulPage - 1][this.ringSoulIndex]);
            this.ringSoulIndex++;
            this.getRingSoulModuleC.setRingSoulIndex(this.ringSoulPage, this.ringSoulIndex);
            this.ringSoulItemChilds[this.ringSoulIndex - 1].setRingSoulItemChildDataByIndex(this.ringSoulIndex);
            SoundService.playSound(upSound);
            Notice.showDownNotice(GameConfig.Language.Text_SuccessfullyForged.Value);
        }
        else {
            if (GlobalData.isOpenIAA) {
                this.getAdTipsPanel.showRewardAd(() => {
                    Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_SuccessfullyObtainedDiamonds.Value, GlobalData.addDiamondCount));
                    this.getPlayerModuleC.saveDiamond(GlobalData.addDiamondCount);
                }, StringUtil.format(GameConfig.Language.Text_GetFreeDiamonds.Value, GlobalData.addDiamondCount), GameConfig.Language.Text_Cancel.Value, GameConfig.Language.Text_FreeToReceive.Value);
            }
            else {
                this.getPlayerModuleC.saveDiamond(GlobalData.addDiamondCount);
            }
        }
    }
    setRingSoulItemData(ringSoulPage) {
        this.ringSoulPage = ringSoulPage;
        this.ringSoulIndex = this.getRingSoulModuleC.getRingSoulIndex(this.ringSoulPage);
        for (let i = 1; i <= 7; ++i) {
            let ringSoulItemChild = mw.UIService.create(RingSoulItemChild);
            ringSoulItemChild.setRingSoulItemChildData(i, this.ringSoulIndex, ringSoulPage);
            this.ringSoulItemChilds.push(ringSoulItemChild);
            this.mCanvas.addChild(ringSoulItemChild.uiObject);
        }
    }
}
class RingSoulItemChild extends RingSoulItemChild_Generate$1 {
    constructor() {
        super(...arguments);
        this.playerModuleC = null;
        this.isHas = false;
        this.ringSoulIndex = 0;
        this.ringSoulIndex_Self = 0;
        this.ringSoulPage = 0;
    }
    get getPlayerModuleC() {
        if (!this.playerModuleC) {
            this.playerModuleC = ModuleService.getModule(PlayerModuleC);
        }
        return this.playerModuleC;
    }
    onStart() {
        this.initTextBlock();
    }
    initTextBlock() {
        this.mUpTextBlock.text = GameConfig.Language.Text_Upgrade.Value;
        if (GlobalData.languageId == 0) {
            this.mUpTextBlock.fontSize = 20;
        }
        else {
            this.mUpTextBlock.fontSize = 30;
        }
    }
    setRingSoulItemChildData(ringSoulIndex, ringSoulIndex_Self, ringSoulPage) {
        this.ringSoulPage = ringSoulPage;
        this.ringSoulIndex_Self = ringSoulIndex_Self;
        this.ringSoulIndex = ringSoulIndex;
        // console.error(`ringSoulIndex:${ringSoulIndex} this.ringSoulIndex_Self:${this.ringSoulIndex_Self}`)
        this.isHas = ringSoulIndex <= this.ringSoulIndex_Self;
        this.mIconImage.setImageColorByHex(ringSoulIconColors[this.ringSoulIndex - 1]);
        this.updateUI();
    }
    updateUI() {
        let lv = this.getPlayerModuleC.getLv;
        // this.mNameTextBlock.text = `第${figureStrs[this.ringSoulPage - 1]}魂环\n${ringSoulNames[this.ringSoulIndex - 1]}魂环`;
        this.mNameTextBlock.text = StringUtil.format(GameConfig.Language.Text_TheSoulRingSoulRing.Value, GameConfig.Language[`${figureStrs[this.ringSoulPage - 1]}`].Value, GameConfig.Language[`${ringSoulNames[this.ringSoulIndex - 1]}`].Value);
        if (this.isHas) {
            this.mHasTextBlock.visibility = mw.SlateVisibility.Collapsed;
            this.mCostTextBlock.visibility = mw.SlateVisibility.Collapsed;
            this.mUpTextBlock.visibility = mw.SlateVisibility.Collapsed;
        }
        else {
            this.mHasTextBlock.visibility = mw.SlateVisibility.SelfHitTestInvisible;
            this.mCostTextBlock.visibility = mw.SlateVisibility.SelfHitTestInvisible;
            this.mUpTextBlock.visibility = mw.SlateVisibility.SelfHitTestInvisible;
            this.mHasTextBlock.text = (lv >= this.ringSoulPage * 10) ? GameConfig.Language.Text_Unlockable.Value : StringUtil.format(GameConfig.Language.Text_UnlockableAtLevel.Value, this.ringSoulPage * 10);
            if (GlobalData.languageId == 0) {
                this.mCostTextBlock.text = `${GameConfig.Language.Text_Cost.Value}\n<color=#00FFFF><size=30>${costDiamonds[this.ringSoulPage - 1][this.ringSoulIndex - 1]}</size></color><size=7>${GameConfig.Language.Text_Diamonds.Value}</size>`;
            }
            else {
                this.mCostTextBlock.text = `${GameConfig.Language.Text_Cost.Value}\n<color=#00FFFF><size=30>${costDiamonds[this.ringSoulPage - 1][this.ringSoulIndex - 1]}</size></color><size=10>${GameConfig.Language.Text_Diamonds.Value}</size>`;
            }
        }
    }
    setRingSoulItemChildDataByIndex(ringSoulIndex_Self) {
        this.ringSoulIndex_Self = ringSoulIndex_Self;
        this.isHas = this.ringSoulIndex <= this.ringSoulIndex_Self;
        this.updateUI();
    }
}

var foreign74 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    RingSoulData: RingSoulData,
    RingSoulGo: RingSoulGo,
    RingSoulItem: RingSoulItem,
    RingSoulItemChild: RingSoulItemChild,
    RingSoulModuleC: RingSoulModuleC,
    RingSoulModuleS: RingSoulModuleS,
    RingSoulPanel: RingSoulPanel,
    default: RingSoul$1,
    upSound: upSound
});

/**
 * AUTHOR: 爱玩游戏的小胖子
 * TIME: 2023.07.21-21.54.50
 */
class HUDPanel extends HUDPanel_Generate$1 {
    constructor() {
        super(...arguments);
        this.hudModuleC = null;
        this.ringSoulModuleC = null;
        this.isCanOnRingSoul = true;
        this.deadCountDownInterval = null;
        this.deadCountDown = 3;
        this.hideKillTipIntervalId = null;
        this.killTipItems = [];
        this.killTipDatas = [];
        //#endregion
        //#region 连杀提示
        this.killTipsTimeOutId1 = null;
        this.killTipsTimeOutId2 = null;
        //#endregion
        //#region 攻击
        this.curInputIndex = -1;
        this.isUnlockSkill_1 = false;
        this.skillIsCanAtk_1 = true;
        this.isOpenAuto = false;
        //#endregion
        //#region 背景音乐
        /**是否打开BGM */
        this.isOpenBGM = true;
        /**背景音乐事件（true-打开|false-关闭） */
        this.onBgmAction = new Action1();
        /**切换背景音乐（-1前一首|1下一首） */
        this.onSwitchBgmAction = new Action1();
        this.jumpyImage_1_1 = null;
        this.jumpyImage_1_2 = null;
        this.jumpyImageTime_1 = 1;
        this.jumpyImage_2 = null;
        this.jumpyImageTime_2 = 1;
        //#endregion
        //#region 在线奖励
        this.redPointTween1 = null;
        this.redPointTween2 = null;
        //#endregion
        //#region 任务
        this.taskRedPointTween1 = null;
        this.taskRedPointTween2 = null;
        //#endregion
        //#region RingSoul
        this.redPointTween1_RingSou = null;
        this.redPointTween2_RingSou = null;
        //#endregion
        //#region SoulBone
        this.redPointTween1_SoulBone = null;
        this.redPointTween2_SoulBone = null;
        //#endregion
        //#region SignIn
        this.redPointTween1_SignIn = null;
        this.redPointTween2_SignIn = null;
        //#endregion
        //#region Ark
        this.redPointTween1_Ark = null;
        this.redPointTween2_Ark = null;
        //#endregion
        //#region NewPeople
        this.redPointTween1_NewPeople = null;
        this.redPointTween2_NewPeople = null;
        //#endregion
        //#region Lottery
        this.redPointTween1_Lottery = null;
        this.redPointTween2_Lottery = null;
        //#endregion
        //#endregion
        this.dayStrTime = 0;
    }
    get getHudModuleC() {
        if (!this.hudModuleC) {
            this.hudModuleC = ModuleService.getModule(HUDModuleC);
        }
        return this.hudModuleC;
    }
    get getRingSoulModuleC() {
        if (!this.ringSoulModuleC) {
            this.ringSoulModuleC = ModuleService.getModule(RingSoulModuleC);
        }
        return this.ringSoulModuleC;
    }
    /**
     * 构造UI文件成功后，在合适的时机最先初始化一次
     */
    onStart() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerMiddle;
        this.bindButtons();
        this.initUI();
        this.initRoleData();
        this.initTextBlock();
    }
    initTextBlock() {
        this.mFlyTextBlock.text = GameConfig.Language.Text_SwordFlying.Value;
        this.mAutoAtkTextBlock.text = GameConfig.Language.Text_AutomaticAttack.Value;
        this.mMusicTextBlock.text = GameConfig.Language.Text_BackgroundMusic.Value;
        this.mHomeTextBlock.text = GameConfig.Language.Text_ClickOnMeToGoHome.Value;
        this.mShopTextBlock.text = GameConfig.Language.Text_Knapsack.Value;
        this.mRankTextBlock.text = GameConfig.Language.Text_RankingList.Value;
        this.mLotteryTextBlock.text = GameConfig.Language.Text_GoldCoinLottery.Value;
        this.mTaskTextBlock.text = GameConfig.Language.Text_CollectingTasks.Value;
        this.mSignInTextBlock.text = GameConfig.Language.Text_SignIn.Value;
        this.mAdsTextBlock.text = GameConfig.Language.Text_FreeUpgrade_Simoleness.Value;
        this.mArkTextBlock.text = GameConfig.Language.Text_RechargeDiamonds.Value;
        this.mGetTextBlock.text = GameConfig.Language.Text_ExchangeRewards.Value;
        this.mRingSoulTextBlock.text = GameConfig.Language.Text_ForgeSoulRings.Value;
        this.mNewPeopleTextBlock.text = GameConfig.Language.Text_NoviceGiftPack.Value;
        this.mSwordTextBlock.text = GameConfig.Language.Text_SwordFlying.Value;
        this.mSoulBoneTextBlock.text = GameConfig.Language.Text_ForgeSoulBones.Value;
        this.mTipsInvincibleTextBlock.text = GameConfig.Language.Text_DoYouWantToActivateTeammateAccidentalInjury.Value;
        this.mUpExpTextBlock.text = GameConfig.Language.Text_EnableAfk.Value;
        if (GlobalData.languageId == 0) {
            this.mTipsInvincibleTextBlock.fontSize = 10;
            this.mInvincibleTextBlock.fontSize = 15;
            this.mShopTextBlock.fontSize = 18;
            this.mArkTextBlock.fontSize = 18;
            this.mGetTextBlock.fontSize = 18;
        }
        else {
            this.mTipsInvincibleTextBlock.fontSize = 18;
            this.mInvincibleTextBlock.fontSize = 25;
            this.mShopTextBlock.fontSize = 20;
            this.mArkTextBlock.fontSize = 20;
            this.mGetTextBlock.fontSize = 20;
        }
    }
    /**绑定按钮 */
    bindButtons() {
        this.mAtkButton.onClicked.clear();
        this.mShopButton.onClicked.add(() => {
            this.getHudModuleC.onOpenShopAction.call();
        });
        this.mPlayerButton.onClicked.add(() => {
            this.getHudModuleC.onOpenPlayerAction.call();
            this.hide();
        });
        this.mJumpButton.onClicked.add(() => {
            this.getHudModuleC.onJumpAction.call();
            this.getHudModuleC.onOnOffFlyAction.call(false);
            this.isOpenAuto = false;
            this.getHudModuleC.onOpenAutoAtkAction.call(null, this.isOpenAuto);
        });
        this.mSprintButton.onClicked.add(() => {
            this.getHudModuleC.onSprintAction.call();
            this.getHudModuleC.onOnOffFlyAction.call(false);
            this.isOpenAuto = false;
            this.getHudModuleC.onOpenAutoAtkAction.call(null, this.isOpenAuto);
        });
        this.mOnlineRewardButton.onClicked.add(() => {
            this.getHudModuleC.onOpenOnlineRewardAction.call();
        });
        this.mTaskButton.onClicked.add(() => {
            this.getHudModuleC.onOpenTaskAction.call();
        });
        this.mRankButton.onClicked.add(() => {
            this.getHudModuleC.onOpenRankAction.call();
        });
        this.mHomeButton.onClicked.add(() => {
            this.getHudModuleC.onHomeAction.call();
        });
        this.mAddCoinButton.onClicked.add(() => {
            this.getHudModuleC.onAddCoinAction.call();
        });
        this.mAddDiamondButton.onClicked.add(() => {
            this.getHudModuleC.onAddDiamondAction.call();
        });
        this.mAddBoneButton.onClicked.add(() => {
            this.getHudModuleC.onAddBoneAction.call();
        });
        this.mAdsButton.onClicked.add(() => {
            this.getHudModuleC.onAdsAction.call();
        });
        this.mUpLvButton.onClicked.add(() => {
            this.getHudModuleC.onAdsAction.call();
        });
        this.mRingSoulButton.onClicked.add(() => {
            this.getHudModuleC.onOpenRingSoulAction.call();
        });
        let isInvincible = false;
        this.mInvincibleTextBlock.text = GameConfig.Language.Text_DefenseHasBeenTurnedOff.Value;
        this.mInvincibleButton.onClicked.add(() => {
            isInvincible = !isInvincible;
            this.mInvincibleTextBlock.text = isInvincible ? GameConfig.Language.Text_DefenseActivated.Value : GameConfig.Language.Text_DefenseHasBeenTurnedOff.Value;
            this.getHudModuleC.onInvincibleAction.call(isInvincible);
        });
        this.mOnlineRewardButton.normalImageGuid = "193281";
        this.mOnlineRewardButton.pressedImageGuid = "193281";
        this.mOnlineRewardButton.disableImageGuid = "193281";
        this.bindMusicButton();
        let isOpenRingSoul = true;
        this.mOnOffRingSoulTextBlock.text = isOpenRingSoul ? GameConfig.Language.Text_PutItAway.Value : GameConfig.Language.Text_Open.Value;
        this.mOnOffRingSoulButton.onClicked.add(() => {
            if (!this.getRingSoulModuleC.isCanOpenRingSoul)
                return;
            if (!this.isCanOnRingSoul) {
                Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_CoolForSeconds.Value, 5));
                return;
            }
            this.isCanOnRingSoul = false;
            TimeUtil.delaySecond(5).then(() => {
                this.isCanOnRingSoul = true;
            });
            isOpenRingSoul = !isOpenRingSoul;
            this.mOnOffRingSoulTextBlock.text = isOpenRingSoul ? GameConfig.Language.Text_PutItAway.Value : GameConfig.Language.Text_Open.Value;
            this.getHudModuleC.onOnOffRingSoulAction.call(isOpenRingSoul);
        });
        this.mArkButton.onClicked.add(() => {
            this.getHudModuleC.onOpenArkAction.call();
        });
        this.mSignInButton.onClicked.add(() => {
            this.getHudModuleC.onOpenSignInAction.call();
        });
        this.mGetButton.onClicked.add(() => {
            this.getHudModuleC.onOpenGetAction.call();
        });
        this.mUpExpButton.onClicked.add(() => {
            this.getHudModuleC.onOnOffUpExpAction.call(true);
            this.getHudModuleC.onOnOffFlyAction.call(false);
            this.isOpenAuto = false;
            this.getHudModuleC.onOpenAutoAtkAction.call(null, this.isOpenAuto);
        });
        this.mNewPeopleButton.onClicked.add(() => {
            this.getHudModuleC.onOpenNewPeopleAction.call();
        });
        this.mLotteryButton.onClicked.add(() => {
            this.getHudModuleC.onOpenLotteryAction.call();
        });
        this.mFlyButton.onClicked.add(() => {
            this.isOpenAuto = false;
            this.getHudModuleC.onOpenAutoAtkAction.call(null, this.isOpenAuto);
            this.getHudModuleC.onOnOffFlyAction.call(true);
        });
        this.mSwordButton.onClicked.add(() => {
            this.getHudModuleC.onOpenSwordAction.call();
        });
        this.mSoulBoneButton.onClicked.add(() => {
            this.getHudModuleC.onOpenSoulBoneAction.call();
        });
        this.initSkill_1();
        this.initAutoAtk();
    }
    updateInvincibleCanvasState(visibility) {
        Utils.setWidgetVisibility(this.mInvincibleCanvas, visibility ? mw.SlateVisibility.SelfHitTestInvisible : mw.SlateVisibility.Collapsed);
        this.mInvincibleTextBlock.text = visibility ? GameConfig.Language.Text_DefenseActivated.Value : GameConfig.Language.Text_DefenseHasBeenTurnedOff.Value;
    }
    /**
     * 初始化UI
     */
    initUI() {
        this.initRedPointTween();
        this.initTaskTween();
        this.initRedPointTween_RingSou();
        this.initRedPointTween_SoulBone();
        this.initRedPointTween_SignIn();
        this.initRedPointTween_Ark();
        this.initRedPointTween_NewPeople();
        this.initRedPointTween_Lottery();
        this.initKillTipItems();
        this.initDeadCountDown();
        this.mPointImage.visibility = mw.SlateVisibility.Collapsed;
        this.mTaskPointImage.visibility = mw.SlateVisibility.Collapsed;
        Utils.setWidgetVisibility(this.mKillTipCountCanvas, mw.SlateVisibility.Collapsed);
        Utils.setWidgetVisibility(this.mKillTipTextBlock3, mw.SlateVisibility.Collapsed);
    }
    onShow(...params) {
        Console.error("[HUD-onShow]");
        this.mVirtualJoystickPanel.resetJoyStick();
        this.atk(0);
    }
    onHide() {
        Console.error("[HUD-onHide]");
        this.mVirtualJoystickPanel.resetJoyStick();
        this.mAtkButton.onPressed.clear();
        this.mAtkButton.onReleased.clear();
    }
    //#region DeadCountDown
    initDeadCountDown() {
        Utils.setWidgetVisibility(this.mDeadCanvas, mw.SlateVisibility.Collapsed);
    }
    startDeadCountDown() {
        this.mVirtualJoystickPanel.resetJoyStick();
        Utils.setWidgetVisibility(this.mDeadCanvas, mw.SlateVisibility.SelfHitTestInvisible);
        this.deadCountDown = 3;
        this.mDeadCountDownTextBlock.text = this.deadCountDown-- + "";
        this.clearCountDownInterval();
        this.deadCountDownInterval = TimeUtil.setInterval(() => {
            this.mDeadCountDownTextBlock.text = this.deadCountDown-- + "";
            if (this.deadCountDown < 0) {
                this.clearCountDownInterval();
                this.endDeadCountDown();
            }
        }, 1);
    }
    clearCountDownInterval() {
        if (this.deadCountDownInterval) {
            TimeUtil.clearInterval(this.deadCountDownInterval);
            this.deadCountDownInterval = null;
        }
    }
    endDeadCountDown() {
        Utils.setWidgetVisibility(this.mDeadCanvas, mw.SlateVisibility.Collapsed);
        this.clearCountDownInterval();
    }
    //#endregion
    //#region 击杀提示
    initKillTipItems() {
        for (let i = 0; i < 4; ++i) {
            let killTipItem = UIService.create(KillTipItem);
            killTipItem.uiObject.position = new mw.Vector2(0, 37 * i);
            Utils.setWidgetVisibility(killTipItem.uiObject, mw.SlateVisibility.Collapsed);
            this.mKillTipCanvas.addChild(killTipItem.uiObject);
            this.killTipItems.push(killTipItem);
        }
    }
    killTip(killTipType, killerName, killedName) {
        let killTipData = new KillTipData();
        killTipData.killTipType = killTipType;
        killTipData.killerName = killerName;
        killTipData.killedName = killedName;
        if (this.killTipDatas.length >= 4) {
            this.killTipDatas.shift();
        }
        this.killTipDatas.push(killTipData);
        this.updateKillTipItems();
        this.clearHideKillTipIntervalId();
        this.hideKillTipIntervalId = TimeUtil.setInterval(() => {
            if (this.killTipDatas && this.killTipDatas.length > 0) {
                this.killTipDatas.shift();
                this.updateKillTipItems();
            }
            else {
                this.clearHideKillTipIntervalId();
            }
        }, 5);
    }
    clearHideKillTipIntervalId() {
        if (this.hideKillTipIntervalId) {
            TimeUtil.clearInterval(this.hideKillTipIntervalId);
            this.hideKillTipIntervalId = null;
        }
    }
    updateKillTipItems() {
        for (let i = 0; i < this.killTipDatas.length; ++i) {
            this.killTipItems[i].setInfo(this.killTipDatas[i]);
        }
        for (let i = this.killTipDatas.length; i < 4; ++i) {
            Utils.setWidgetVisibility(this.killTipItems[i].uiObject, mw.SlateVisibility.Collapsed);
        }
    }
    showKillTips1(killTips, killerName, killedName) {
        Notice.showDownNotice("<color=#lime>" + "<size=18>" + killerName + ` ${GameConfig.Language.Text_Defeated.Value} ` + killedName + "</size>" + "</color>"
            + "\n" + "<color=#red>" + killTips + "</color>");
    }
    clearKillTipsTimeOutId1() {
        if (this.killTipsTimeOutId1) {
            clearTimeout(this.killTipsTimeOutId1);
            this.killTipsTimeOutId1 = null;
        }
    }
    showKillTips2(killerName, killedName, killTipType) {
        if (killTipType == KillTipType.None)
            return;
        this.clearKillTipsTimeOutId2();
        if (killTipType == KillTipType.Killed) {
            this.mKillTipTextBlock3.text = StringUtil.format(GameConfig.Language.Text_YouHaveBeenDefeatedBy.Value, killerName);
        }
        else if (killTipType == KillTipType.revenge) {
            this.mKillTipTextBlock3.text = StringUtil.format(GameConfig.Language.Text_DefeatToCompleteRevenge.Value, killedName);
        }
        Utils.setWidgetVisibility(this.mKillTipTextBlock3, mw.SlateVisibility.SelfHitTestInvisible);
        this.killTipsTimeOutId2 = setTimeout(() => {
            Utils.setWidgetVisibility(this.mKillTipTextBlock3, mw.SlateVisibility.Collapsed);
            this.clearKillTipsTimeOutId2();
        }, 3 * 1000);
    }
    clearKillTipsTimeOutId2() {
        if (this.killTipsTimeOutId2) {
            clearTimeout(this.killTipsTimeOutId2);
            this.killTipsTimeOutId2 = null;
        }
    }
    //#endregion
    //#region Role
    initRoleData() {
        this.mHpProgressBar.visibility = mw.SlateVisibility.SelfHitTestInvisible;
        this.mMpProgressBar.visibility = mw.SlateVisibility.SelfHitTestInvisible;
        AccountService.fillAvatar(this.mRoleIconImage);
    }
    async updateLvExpCoin(lv, exp, coin, addAtk) {
        this.mLvTextBlock.text = `${GameConfig.Language.Text_Grade_MaoHao.Value}${await Utils.getLvText(lv, Player.localPlayer.userId)}`;
        this.mExpProgressBar.currentValue = exp / ((lv + 1) * GlobalData.upgradeExpMultiple);
        this.mExpTextBlock.text = `${GameConfig.Language.Text_Experience.Value}${Math.round(exp).toFixed(0)}/${((lv + 1) * GlobalData.upgradeExpMultiple)}`;
        this.mCoinTextBlock.text = `${Utils.integerUnitConversionStr(Math.round(coin))}`;
        Event.dispatchToLocal(`UpdateCoinTextBlock`, coin);
        let atk = Math.round(Utils.getAtk(lv) * addAtk);
        GlobalData.atk = atk;
        this.mAtkTextBlock.text = `${GameConfig.Language.Text_Aggressivity.Value}${atk}`;
        ColdWeapon.getInstance().updateHitDamage(atk);
        if (!this.isUnlockSkill_1) {
            if (lv >= GlobalData.skillLvLimit_1) {
                this.isUnlockSkill_1 = true;
                this.mSkillCDTextBlock_1.fontSize = 50;
                this.mSkillCDTextBlock_1.text = ``;
            }
            else {
                this.mSkillCDTextBlock_1.fontSize = 25;
                this.mSkillCDTextBlock_1.text = `${GlobalData.skillLvLimit_1}${GameConfig.Language.Text_LevelUnlock.Value}`;
            }
        }
    }
    updateAtk(lv, addAtk) {
        let atk = Math.round(Utils.getAtk(lv) * addAtk);
        GlobalData.atk = atk;
        this.mAtkTextBlock.text = `${GameConfig.Language.Text_Aggressivity.Value}${atk}`;
        ColdWeapon.getInstance().updateHitDamage(atk);
    }
    updateBone(bone) {
        this.mBoneextBlock.text = `${bone}`;
    }
    updateCoin(coin) {
        this.mCoinTextBlock.text = `${Utils.integerUnitConversionStr(Math.round(coin))}`;
        Event.dispatchToLocal(`UpdateCoinTextBlock`, coin);
    }
    updateDiamond(diamond) {
        this.mDiamondTextBlock.text = `${diamond}`;
        Event.dispatchToLocal(`UpdateDiamondTextBlock`, diamond);
    }
    updateMp(curMp, maxMp) {
        this.mMpProgressBar.currentValue = curMp / maxMp;
        this.mMpTextBlock.text = `${GlobalData.mpStr}：${curMp}/${maxMp}`;
    }
    updateHp(curHp, maxHp) {
        if (curHp < 0)
            curHp = 0;
        GlobalData.hp = maxHp;
        if (curHp > maxHp)
            curHp = maxHp;
        this.mHpProgressBar.currentValue = curHp / maxHp;
        this.mHpTextBlock.text = `${GameConfig.Language.Text_BloodVolume.Value}${curHp}/${maxHp}`;
        if (this.mHpProgressBar.currentValue == 1) {
            this.endDeadCountDown();
            // this.getHudModuleC.onOnOffFlyAction.call(true);
        }
        else if (this.mHpProgressBar.currentValue == 0) {
            this.startDeadCountDown();
            this.getHudModuleC.onOnOffFlyAction.call(false);
            this.isOpenAuto = false;
            this.getHudModuleC.onOpenAutoAtkAction.call(null, this.isOpenAuto);
        }
    }
    atk(index) {
        this.mAtkButton.onPressed.add(() => {
            if (this.getHudModuleC.getMp < 5) {
                Notice.showDownNotice(`${GlobalData.mpStr}${GameConfig.Language.Text_Insufficient.Value}`);
                Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_UpgradeToIncreaseReserves.Value, GlobalData.mpStr));
                return;
            }
            if (this.curInputIndex != -1)
                return;
            this.getHudModuleC.onOnOffFlyAction.call(false);
            this.isOpenAuto = false;
            this.getHudModuleC.onOpenAutoAtkAction.call(null, this.isOpenAuto);
            ColdWeapon.getInstance().attack(index);
            this.curInputIndex = index;
        });
        this.mAtkButton.onReleased.add(() => {
            if (this.curInputIndex != index)
                return;
            ColdWeapon.getInstance().endCharge(true);
            this.curInputIndex = -1;
        });
    }
    initSkill_1() {
        this.mSkillTextBlock_1.text = `<size=20>${GlobalData.skillName_1}</size>\n<size=10>${GlobalData.skillContinue_1}${GameConfig.Language.Text_DoubleTheAttackPowerWithinSeconds.Value}</size>`;
        this.mSkillMaskButton_1.fanShapedValue = 1;
        this.mSkillMaskButton_1.clickedDelegate.add(() => {
            Event.dispatchToLocal("PlayButtonClick", this.mSkillMaskButton_1.name);
            if (!this.isUnlockSkill_1) {
                Notice.showDownNotice(`${GlobalData.skillLvLimit_1}${GameConfig.Language.Text_LevelOpen.Value}${GlobalData.skillName_1}`);
                return;
            }
            if (!this.skillIsCanAtk_1) {
                Notice.showDownNotice(GameConfig.Language.Text_TheSkillsAreNotReadyYet.Value);
                return;
            }
            this.getHudModuleC.onSkillAction.call((isCakAtk) => {
                if (!isCakAtk)
                    return;
                this.getHudModuleC.onOnOffFlyAction.call(false);
                new Tween$2({ fanShapedValue: 0 })
                    .to({ fanShapedValue: 1 }, GlobalData.skillCD_1 * 1000)
                    .onStart(() => {
                    this.mSkillMaskButton_1.fanShapedValue = 0;
                    this.skillIsCanAtk_1 = false;
                    this.mSkillCDTextBlock_1.text = `${GlobalData.skillCD_1}`;
                })
                    .onUpdate((v) => {
                    this.mSkillMaskButton_1.fanShapedValue = v.fanShapedValue;
                    this.mSkillCDTextBlock_1.text = `${(GlobalData.skillCD_1 * (1 - v.fanShapedValue)).toFixed(0)}`;
                })
                    .onComplete(() => {
                    this.mSkillMaskButton_1.fanShapedValue = 1;
                    this.skillIsCanAtk_1 = true;
                    this.mSkillCDTextBlock_1.text = ``;
                })
                    .start();
            });
        });
    }
    initAutoAtk() {
        this.mAutoAtkButton.onClicked.add(() => {
            this.getHudModuleC.onOpenAutoAtkAction.call((isCanOpen) => {
                this.isOpenAuto = isCanOpen;
            }, !this.isOpenAuto);
        });
    }
    /**初始化背景音乐按钮 */
    bindMusicButton() {
        this.mMusicCanvas.visibility = mw.SlateVisibility.Collapsed;
        this.mMusicButton.onClicked.add(() => {
            if (this.mMusicCanvas.visibility == mw.SlateVisibility.SelfHitTestInvisible)
                return;
            Utils.openUITween(this.mMusicCanvas, () => {
                this.mMusicCanvas.visibility = mw.SlateVisibility.SelfHitTestInvisible;
            }, null);
            if (this.isOpenBGM)
                this.startMusicTween();
        });
        this.mOnOffMusicBtn.onClicked.add(() => {
            this.isOpenBGM = !this.isOpenBGM;
            this.onBgmAction.call(this.isOpenBGM);
            let offOnIcon = "";
            if (this.isOpenBGM) {
                offOnIcon = GlobalData.onMusicIconGuid;
                this.startMusicTween();
            }
            else {
                offOnIcon = GlobalData.offMusicIconGuid;
                this.stopMusicTween();
            }
            this.mOnOffMusicBtn.normalImageGuid = offOnIcon;
            this.mOnOffMusicBtn.pressedImageGuid = offOnIcon;
            this.mOnOffMusicBtn.disableImageGuid = offOnIcon;
        });
        this.mLeftMusicBtn.onClicked.add(() => {
            this.onSwitchBgmAction.call(-1);
        });
        this.mRightMusicBtn.onClicked.add(() => {
            this.onSwitchBgmAction.call(1);
        });
        this.mCloseMusicBtn.onClicked.add(() => {
            if (this.mMusicCanvas.visibility == mw.SlateVisibility.Collapsed)
                return;
            Utils.closeUITween(this.mMusicCanvas, null, () => {
                this.mMusicCanvas.visibility = mw.SlateVisibility.Collapsed;
            });
            this.stopMusicTween();
        });
        this.initJumpyImage_1();
        this.initJumpyImage_2();
    }
    /**开始Music的Tween */
    startMusicTween() {
        this.jumpyImage_1_1.start();
        this.jumpyImage_2.start();
    }
    /**停止Music的Tween */
    stopMusicTween() {
        this.jumpyImage_1_1.stop();
        this.jumpyImage_1_2.stop();
        this.jumpyImage_2.stop();
    }
    initJumpyImage_1() {
        this.jumpyImage_1_1 = new Tween$2({ y: 0.2 })
            .to({ y: 1.5 }, this.jumpyImageTime_1 * 1000)
            .onStart(() => {
            this.mJumpyImage_1.renderScale = new mw.Vector2(1, 0.2);
        })
            .onUpdate((v) => {
            this.mJumpyImage_1.renderScale = new mw.Vector2(1, v.y);
        })
            .onComplete(() => {
            this.jumpyImage_1_2.start();
        })
            .easing(cubicBezier(.65, 2.01, .27, -0.87));
        this.jumpyImage_1_2 = new Tween$2({ y: 1.5 })
            .to({ y: 0.2 }, this.jumpyImageTime_1 * 1000)
            .onStart(() => {
            this.mJumpyImage_1.renderScale = new mw.Vector2(1, 1.5);
        })
            .onUpdate((v) => {
            this.mJumpyImage_1.renderScale = new mw.Vector2(1, v.y);
        })
            .onComplete(() => {
            this.jumpyImage_1_1.start();
        })
            .easing(cubicBezier(.65, 2.01, .27, -0.87));
    }
    initJumpyImage_2() {
        this.jumpyImage_2 = new Tween$2({ angle: 0 })
            .to({ angle: 360 }, this.jumpyImageTime_2 * 1000)
            .onStart(() => {
            this.mJumpyImage_2.renderTransformAngle = 0;
        })
            .onUpdate((v) => {
            this.mJumpyImage_2.renderTransformAngle = v.angle;
        })
            .onComplete(() => {
            this.mJumpyImage_2.renderTransformAngle = 0;
        })
            .repeat(Infinity);
    }
    startRedPointTween() {
        if (this.redPointTween1) {
            this.redPointTween1.start();
        }
        else {
            this.initRedPointTween();
            this.redPointTween1.start();
        }
    }
    stopRedPointTween() {
        if (this.redPointTween1) {
            this.redPointTween1.stop();
        }
        if (this.redPointTween2) {
            this.redPointTween2.stop();
        }
    }
    /**
     * 初始化在线奖励红点缓动
     */
    initRedPointTween() {
        this.redPointTween1 = new mw.Tween({ value: 0.8 })
            .to({ value: 1.2 }, 0.2 * 1000)
            .onStart(() => {
            this.mPointImage.renderScale = mw.Vector2.one.multiply(0.8);
        })
            .onUpdate((v) => {
            this.mPointImage.renderScale = mw.Vector2.one.multiply(v.value);
        })
            .onComplete(() => {
            this.redPointTween2.start();
        })
            .easing(cubicBezier(0.25, 0.1, 0.25, 1));
        this.redPointTween2 = new mw.Tween({ value: 1.2 })
            .to({ value: 0.8 }, 0.2 * 1000)
            .onStart(() => {
            this.mPointImage.renderScale = mw.Vector2.one.multiply(1.2);
        })
            .onUpdate((v) => {
            this.mPointImage.renderScale = mw.Vector2.one.multiply(v.value);
        })
            .onComplete(() => {
            this.redPointTween1.start();
        })
            .easing(cubicBezier(0.25, 0.1, 0.25, 1));
    }
    /**
     * 更新在线奖励Icon
     * @param icon
     */
    updateOnlineRewradIcon(icon) {
        if (icon == "") {
            this.stopRedPointTween();
            this.mPointImage.visibility = mw.SlateVisibility.Collapsed;
            return;
        }
        this.mOnlineRewardButton.normalImageGuid = icon;
        this.mOnlineRewardButton.pressedImageGuid = icon;
        this.mOnlineRewardButton.disableImageGuid = icon;
        this.mPointImage.visibility = mw.SlateVisibility.SelfHitTestInvisible;
        this.startRedPointTween();
    }
    startTaskRedPointTween() {
        if (this.taskRedPointTween1) {
            this.taskRedPointTween1.start();
        }
        else {
            this.initTaskTween();
            this.taskRedPointTween1.start();
        }
        this.mTaskPointImage.visibility = mw.SlateVisibility.SelfHitTestInvisible;
    }
    stopTaskRedPointTween() {
        if (this.taskRedPointTween1) {
            this.taskRedPointTween1.stop();
        }
        if (this.taskRedPointTween2) {
            this.taskRedPointTween2.stop();
        }
        this.mTaskPointImage.visibility = mw.SlateVisibility.Collapsed;
    }
    initTaskTween() {
        this.taskRedPointTween1 = new mw.Tween({ value: 0.8 })
            .to({ value: 1.2 }, 0.2 * 1000)
            .onStart(() => {
            this.mTaskPointImage.renderScale = mw.Vector2.one.multiply(0.8);
        })
            .onUpdate((v) => {
            this.mTaskPointImage.renderScale = mw.Vector2.one.multiply(v.value);
        })
            .onComplete(() => {
            this.taskRedPointTween2.start();
        })
            .easing(cubicBezier(0.25, 0.1, 0.25, 1));
        this.taskRedPointTween2 = new mw.Tween({ value: 1.2 })
            .to({ value: 0.8 }, 0.2 * 1000)
            .onStart(() => {
            this.mTaskPointImage.renderScale = mw.Vector2.one.multiply(1.2);
        })
            .onUpdate((v) => {
            this.mTaskPointImage.renderScale = mw.Vector2.one.multiply(v.value);
        })
            .onComplete(() => {
            this.taskRedPointTween1.start();
        })
            .easing(cubicBezier(0.25, 0.1, 0.25, 1));
    }
    updateHUDText(text) {
        this.mOnlineRewardTextBlock.text = text;
    }
    initRedPointTween_RingSou() {
        this.redPointTween1_RingSou = new mw.Tween({ value: 0.8 })
            .to({ value: 1.2 }, 0.2 * 1000)
            .onStart(() => {
            this.mRingSoulPointImage.renderScale = mw.Vector2.one.multiply(0.8);
        })
            .onUpdate((v) => {
            this.mRingSoulPointImage.renderScale = mw.Vector2.one.multiply(v.value);
        })
            .onComplete(() => {
            this.redPointTween2_RingSou.start();
        })
            .easing(cubicBezier(0.25, 0.1, 0.25, 1));
        this.redPointTween2_RingSou = new mw.Tween({ value: 1.2 })
            .to({ value: 0.8 }, 0.2 * 1000)
            .onStart(() => {
            this.mRingSoulPointImage.renderScale = mw.Vector2.one.multiply(1.2);
        })
            .onUpdate((v) => {
            this.mRingSoulPointImage.renderScale = mw.Vector2.one.multiply(v.value);
        })
            .onComplete(() => {
            this.redPointTween1_RingSou.start();
        })
            .easing(cubicBezier(0.25, 0.1, 0.25, 1));
        this.redPointTween1_RingSou.start();
        let onOffRingSoulTween1 = new mw.Tween({ angle: 0 })
            .to({ angle: 360 }, 2 * 1000)
            .onUpdate((v) => {
            this.mOnOffRingSoulButton.renderTransformAngle = v.angle;
        })
            .onComplete(() => {
            onOffRingSoulTween2.start();
        });
        let onOffRingSoulTween2 = new mw.Tween({ angle: 0 })
            .to({ angle: 360 }, 2 * 1000)
            .onUpdate((v) => {
            this.mOnOffRingSoulButton.renderTransformAngle = v.angle;
        })
            .onComplete(() => {
            onOffRingSoulTween1.start();
        });
        onOffRingSoulTween1.start();
    }
    initRedPointTween_SoulBone() {
        this.redPointTween1_SoulBone = new mw.Tween({ value: 0.8 })
            .to({ value: 1.2 }, 0.2 * 1000)
            .onStart(() => {
            this.mSoulBonePointImage.renderScale = mw.Vector2.one.multiply(0.8);
        })
            .onUpdate((v) => {
            this.mSoulBonePointImage.renderScale = mw.Vector2.one.multiply(v.value);
        })
            .onComplete(() => {
            this.redPointTween2_SoulBone.start();
        })
            .easing(cubicBezier(0.25, 0.1, 0.25, 1));
        this.redPointTween2_SoulBone = new mw.Tween({ value: 1.2 })
            .to({ value: 0.8 }, 0.2 * 1000)
            .onStart(() => {
            this.mSoulBonePointImage.renderScale = mw.Vector2.one.multiply(1.2);
        })
            .onUpdate((v) => {
            this.mSoulBonePointImage.renderScale = mw.Vector2.one.multiply(v.value);
        })
            .onComplete(() => {
            this.redPointTween1_SoulBone.start();
        })
            .easing(cubicBezier(0.25, 0.1, 0.25, 1));
        this.redPointTween1_SoulBone.start();
    }
    initRedPointTween_SignIn() {
        this.redPointTween1_SignIn = new mw.Tween({ value: 0.8 })
            .to({ value: 1.2 }, 0.2 * 1000)
            .onStart(() => {
            this.mSignInImage.renderScale = mw.Vector2.one.multiply(0.8);
        })
            .onUpdate((v) => {
            this.mSignInImage.renderScale = mw.Vector2.one.multiply(v.value);
        })
            .onComplete(() => {
            this.redPointTween2_SignIn.start();
        })
            .easing(cubicBezier(0.25, 0.1, 0.25, 1));
        this.redPointTween2_SignIn = new mw.Tween({ value: 1.2 })
            .to({ value: 0.8 }, 0.2 * 1000)
            .onStart(() => {
            this.mSignInImage.renderScale = mw.Vector2.one.multiply(1.2);
        })
            .onUpdate((v) => {
            this.mSignInImage.renderScale = mw.Vector2.one.multiply(v.value);
        })
            .onComplete(() => {
            this.redPointTween1_SignIn.start();
        })
            .easing(cubicBezier(0.25, 0.1, 0.25, 1));
        this.redPointTween1_SignIn.start();
    }
    initRedPointTween_Ark() {
        this.redPointTween1_Ark = new mw.Tween({ value: 0.8 })
            .to({ value: 1.2 }, 0.2 * 1000)
            .onStart(() => {
            this.mArkImage.renderScale = mw.Vector2.one.multiply(0.8);
        })
            .onUpdate((v) => {
            this.mArkImage.renderScale = mw.Vector2.one.multiply(v.value);
        })
            .onComplete(() => {
            this.redPointTween2_Ark.start();
        })
            .easing(cubicBezier(0.25, 0.1, 0.25, 1));
        this.redPointTween2_Ark = new mw.Tween({ value: 1.2 })
            .to({ value: 0.8 }, 0.2 * 1000)
            .onStart(() => {
            this.mArkImage.renderScale = mw.Vector2.one.multiply(1.2);
        })
            .onUpdate((v) => {
            this.mArkImage.renderScale = mw.Vector2.one.multiply(v.value);
        })
            .onComplete(() => {
            this.redPointTween1_Ark.start();
        })
            .easing(cubicBezier(0.25, 0.1, 0.25, 1));
        this.redPointTween1_Ark.start();
    }
    initRedPointTween_NewPeople() {
        this.redPointTween1_NewPeople = new mw.Tween({ value: 0.8 })
            .to({ value: 1.2 }, 0.2 * 1000)
            .onStart(() => {
            this.mNewPeoplePointImage.renderScale = mw.Vector2.one.multiply(0.8);
        })
            .onUpdate((v) => {
            this.mNewPeoplePointImage.renderScale = mw.Vector2.one.multiply(v.value);
        })
            .onComplete(() => {
            this.redPointTween2_NewPeople.start();
        })
            .easing(cubicBezier(0.25, 0.1, 0.25, 1));
        this.redPointTween2_NewPeople = new mw.Tween({ value: 1.2 })
            .to({ value: 0.8 }, 0.2 * 1000)
            .onStart(() => {
            this.mNewPeoplePointImage.renderScale = mw.Vector2.one.multiply(1.2);
        })
            .onUpdate((v) => {
            this.mNewPeoplePointImage.renderScale = mw.Vector2.one.multiply(v.value);
        })
            .onComplete(() => {
            this.redPointTween1_NewPeople.start();
        })
            .easing(cubicBezier(0.25, 0.1, 0.25, 1));
        this.redPointTween1_NewPeople.start();
    }
    initRedPointTween_Lottery() {
        this.redPointTween1_Lottery = new mw.Tween({ value: 0.8 })
            .to({ value: 1.2 }, 0.2 * 1000)
            .onStart(() => {
            this.mLotteryPointImage.renderScale = mw.Vector2.one.multiply(0.8);
        })
            .onUpdate((v) => {
            this.mLotteryPointImage.renderScale = mw.Vector2.one.multiply(v.value);
        })
            .onComplete(() => {
            this.redPointTween2_Lottery.start();
        })
            .easing(cubicBezier(0.25, 0.1, 0.25, 1));
        this.redPointTween2_Lottery = new mw.Tween({ value: 1.2 })
            .to({ value: 0.8 }, 0.2 * 1000)
            .onStart(() => {
            this.mLotteryPointImage.renderScale = mw.Vector2.one.multiply(1.2);
        })
            .onUpdate((v) => {
            this.mLotteryPointImage.renderScale = mw.Vector2.one.multiply(v.value);
        })
            .onComplete(() => {
            this.redPointTween1_Lottery.start();
        })
            .easing(cubicBezier(0.25, 0.1, 0.25, 1));
        this.redPointTween1_Lottery.start();
    }
    showDayStr() {
        Utils.setWidgetVisibility(this.mDayStrCanvas, mw.SlateVisibility.SelfHitTestInvisible);
        Event.addLocalListener(`UpdateNewPeopleGiftBagOnlineTime`, (time) => {
            this.dayStrTime = time;
            this.mDayStrTimeTextBlock.text = `在线${this.dayStrTime}/30分钟免费领取`;
        });
        Event.dispatchToLocal(`RequestNewPeopleGiftBagOnlineTime`);
        this.mDayStrButton.onClicked.add(() => {
            if (this.dayStrTime < 30) {
                Notice.showDownNotice(`在线时间不足30分钟`);
                return;
            }
            this.getHudModuleC.getDayStr();
            Utils.setWidgetVisibility(this.mDayStrCanvas, mw.SlateVisibility.Collapsed);
        });
    }
}
class KillTipItem extends KillTipItem_Generate$1 {
    onAwake() {
        this.initTextBlock();
    }
    initTextBlock() {
        this.mKillTextBlock.text = ` ${GameConfig.Language.Text_Defeated.Value} `;
    }
    setInfo(killTipDatas) {
        this.mKillerTextBlock.text = killTipDatas.killerName;
        this.mKilledTextBlock.text = killTipDatas.killedName;
        switch (killTipDatas.killTipType) {
            case KillTipType.None:
                this.mKillerTextBlock.fontColor = mw.LinearColor.white;
                this.mKillerTextBlock.shadowColor = mw.LinearColor.white;
                this.mKilledTextBlock.fontColor = mw.LinearColor.white;
                this.mKilledTextBlock.shadowColor = mw.LinearColor.white;
                break;
            case KillTipType.Killer:
                this.mKillerTextBlock.fontColor = mw.LinearColor.yellow;
                this.mKillerTextBlock.shadowColor = mw.LinearColor.red;
                this.mKilledTextBlock.fontColor = mw.LinearColor.white;
                this.mKilledTextBlock.shadowColor = mw.LinearColor.white;
                break;
            case KillTipType.Killed:
                this.mKillerTextBlock.fontColor = mw.LinearColor.white;
                this.mKillerTextBlock.shadowColor = mw.LinearColor.white;
                this.mKilledTextBlock.fontColor = mw.LinearColor.yellow;
                this.mKilledTextBlock.shadowColor = mw.LinearColor.red;
                break;
        }
        Utils.setWidgetVisibility(this.uiObject, mw.SlateVisibility.SelfHitTestInvisible);
        setTimeout(() => {
            this.mBgImage.size = new mw.Vector2(this.mMainCanvas.size.x + 20, this.mMainCanvas.size.y);
        }, 1);
    }
}

var foreign54 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    KillTipItem: KillTipItem,
    default: HUDPanel
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/LevelModule/LevelItem.ui
 * TIME: 2024.11.04-19.49.52
 */
let LevelItem_Generate = class LevelItem_Generate extends UIScript {
    get mLevelTextBlock() {
        if (!this.mLevelTextBlock_Internal && this.uiWidgetBase) {
            this.mLevelTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mLevelTextBlock');
        }
        return this.mLevelTextBlock_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mLevelTextBlock);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
LevelItem_Generate = __decorate([
    UIBind('UI/module/LevelModule/LevelItem.ui')
], LevelItem_Generate);
var LevelItem_Generate$1 = LevelItem_Generate;

var foreign132 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: LevelItem_Generate$1
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/LevelModule/LevelPanel.ui
 * TIME: 2024.11.04-19.49.52
 */
let LevelPanel_Generate = class LevelPanel_Generate extends UIScript {
    get mLevelTextBlock() {
        if (!this.mLevelTextBlock_Internal && this.uiWidgetBase) {
            this.mLevelTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/LevelBgImage/mLevelTextBlock');
        }
        return this.mLevelTextBlock_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mLevelTextBlock);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
LevelPanel_Generate = __decorate([
    UIBind('UI/module/LevelModule/LevelPanel.ui')
], LevelPanel_Generate);
var LevelPanel_Generate$1 = LevelPanel_Generate;

var foreign133 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: LevelPanel_Generate$1
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/LevelModule/UpExpPanel.ui
 * TIME: 2024.11.04-19.49.52
 */
let UpExpPanel_Generate = class UpExpPanel_Generate extends UIScript {
    get mCancleUpExpCanvas() {
        if (!this.mCancleUpExpCanvas_Internal && this.uiWidgetBase) {
            this.mCancleUpExpCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mCancleUpExpCanvas');
        }
        return this.mCancleUpExpCanvas_Internal;
    }
    get mCancleUpExpFlipBook() {
        if (!this.mCancleUpExpFlipBook_Internal && this.uiWidgetBase) {
            this.mCancleUpExpFlipBook_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mCancleUpExpCanvas/CancleUpExpCanvas/mCancleUpExpFlipBook');
        }
        return this.mCancleUpExpFlipBook_Internal;
    }
    get mOnHookTextBlock() {
        if (!this.mOnHookTextBlock_Internal && this.uiWidgetBase) {
            this.mOnHookTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mCancleUpExpCanvas/CancleUpExpCanvas/mOnHookTextBlock');
        }
        return this.mOnHookTextBlock_Internal;
    }
    get mCancleUpExpButton() {
        if (!this.mCancleUpExpButton_Internal && this.uiWidgetBase) {
            this.mCancleUpExpButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mCancleUpExpCanvas/mCancleUpExpButton');
        }
        return this.mCancleUpExpButton_Internal;
    }
    get mCancelOnHookTextBlock() {
        if (!this.mCancelOnHookTextBlock_Internal && this.uiWidgetBase) {
            this.mCancelOnHookTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mCancleUpExpCanvas/mCancleUpExpButton/mCancelOnHookTextBlock');
        }
        return this.mCancelOnHookTextBlock_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        this.mCancleUpExpButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mCancleUpExpButton");
        });
        this.mCancleUpExpButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mOnHookTextBlock);
        this.initLanguage(this.mCancelOnHookTextBlock);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
UpExpPanel_Generate = __decorate([
    UIBind('UI/module/LevelModule/UpExpPanel.ui')
], UpExpPanel_Generate);
var UpExpPanel_Generate$1 = UpExpPanel_Generate;

var foreign134 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: UpExpPanel_Generate$1
});

class PlayerData extends Subdata {
    constructor() {
        super(...arguments);
        this.exp = 0;
        this.coin = 0;
        this.diamond = 0;
        this.bone = 0;
        this.playerLv = 0;
        this.playerHeight = 0;
        this.playerKill = 0;
        this.dayStr = "";
    }
    initDefaultData() {
        this.exp = 0;
        this.coin = 2888888;
        this.diamond = 1;
        this.bone = 1;
        this.playerLv = 0;
        this.playerHeight = 0;
        this.playerKill = 0;
        Console.error("AAA");
    }
    saveCoinAndExp(coin, exp) {
        this.saveCoin(coin, false);
        this.addExp(exp);
        this.save(true);
    }
    saveExpAndCoin(value) {
        this.saveCoin(value, false);
        this.addExp(value);
        this.save(true);
    }
    addExp(exp) {
        this.exp += exp;
        this.checkLvUp();
    }
    checkLvUp() {
        let lvUpExp = this.getLvUpExp();
        if (this.exp >= lvUpExp) {
            this.exp -= lvUpExp;
            this.playerLv++;
            this.checkLvUp();
        }
    }
    getLvUpExp() {
        return (this.playerLv + 1) * GlobalData.upgradeExpMultiple;
    }
    saveCoin(value, isAutoSave = true) {
        this.coin += value;
        if (isAutoSave)
            this.save(true);
    }
    saveDiamond(value) {
        this.diamond += value;
        this.save(true);
    }
    refashLv(lv) {
        this.playerLv += lv;
        this.save(true);
    }
    refashHeight(height) {
        this.playerHeight = height;
        this.save(true);
    }
    refashKill(kill) {
        this.playerKill += kill;
        this.save(true);
    }
    getHp() {
        return Utils.getHp(this.playerLv);
    }
    saveBone(bone) {
        this.bone += bone;
        this.save(true);
    }
    getBone(bone = 0) {
        if (bone != 0) {
            this.bone += bone;
            this.save(true);
        }
        return this.bone;
    }
    setDayStr(dayStr) {
        this.dayStr = dayStr;
        this.save(true);
    }
}
__decorate([
    Decorator.persistence()
], PlayerData.prototype, "exp", void 0);
__decorate([
    Decorator.persistence()
], PlayerData.prototype, "coin", void 0);
__decorate([
    Decorator.persistence()
], PlayerData.prototype, "diamond", void 0);
__decorate([
    Decorator.persistence()
], PlayerData.prototype, "bone", void 0);
__decorate([
    Decorator.persistence()
], PlayerData.prototype, "playerLv", void 0);
__decorate([
    Decorator.persistence()
], PlayerData.prototype, "playerHeight", void 0);
__decorate([
    Decorator.persistence()
], PlayerData.prototype, "playerKill", void 0);
__decorate([
    Decorator.persistence()
], PlayerData.prototype, "dayStr", void 0);

var foreign63 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: PlayerData
});

class UpExpPanel extends UpExpPanel_Generate$1 {
    constructor() {
        super(...arguments);
        this.hudModuleC = null;
    }
    get getHUDModuleC() {
        if (!this.hudModuleC) {
            this.hudModuleC = ModuleService.getModule(HUDModuleC);
        }
        return this.hudModuleC;
    }
    onStart() {
        this.layer = mw.UILayerTop;
        this.initUI();
        this.bindButton();
        this.initTextBlock();
    }
    initTextBlock() {
        this.mOnHookTextBlock.text = GameConfig.Language.Text_HangingOnTheHook.Value;
        this.mCancelOnHookTextBlock.text = GameConfig.Language.Text_CancelAfk.Value;
    }
    initUI() {
        this.mCancleUpExpFlipBook.pause();
    }
    bindButton() {
        this.mCancleUpExpButton.onClicked.add(this.addCancleUpExpButton.bind(this));
    }
    addCancleUpExpButton() {
        this.getHUDModuleC.onOnOffUpExpAction.call(false);
    }
    onShow(...params) {
        this.mCancleUpExpFlipBook.resume();
    }
    onHide() {
        this.mCancleUpExpFlipBook.pause();
    }
}
class LevelData extends Subdata {
    constructor() {
        super(...arguments);
        this.levels = {};
    }
    setLevel(key, value) {
        MapEx.set(this.levels, key, value);
        this.save(true);
    }
    addLevel(key) {
        let level = 1;
        if (MapEx.has(this.levels, key)) {
            level = MapEx.get(this.levels, key);
        }
        level += 1;
        MapEx.set(this.levels, key, level);
        this.save(true);
    }
}
__decorate([
    Decorator.persistence()
], LevelData.prototype, "levels", void 0);
const transferMap = new Map();
transferMap.set(1, { desc: "新手村", triggerIds: ["19DDCA11"], worldUIIds: ["34DE2A28"], targetLoc: new mw.Vector(-4065, 6446, 2000), name: `Text_NoviceVillage`, limitLevel: 1 });
transferMap.set(2, { desc: "中级狩猎场", triggerIds: ["3E8FFFFB"], worldUIIds: ["361F265D"], targetLoc: new mw.Vector(-5260, -3226, 1700), name: `Text_IntermediateHuntingGround`, limitLevel: 18 });
transferMap.set(3, { desc: "高级狩猎场", triggerIds: ["0CEEF058"], worldUIIds: ["18EED1DD"], targetLoc: new mw.Vector(3246, -19119, 1700), name: `Text_AdvancedHuntingGround`, limitLevel: 68 });
transferMap.set(4, { desc: "10万年魂兽", triggerIds: ["1849DDD5"], worldUIIds: ["2789D9BE"], targetLoc: new mw.Vector(-9170, -9478, 400), name: `Text_100000YearSoulBeast`, limitLevel: 288 });
transferMap.set(5, { desc: "神级狩猎场", triggerIds: ["3FDFD371"], worldUIIds: ["27AE1609"], targetLoc: new mw.Vector(-9687, 9475, 4200), name: `Text_GodLevelHuntingGround`, limitLevel: 98 });
class LevelPanel extends LevelPanel_Generate$1 {
    onStart() {
    }
    updateLevelTextBlock(key, level) {
        this.mLevelTextBlock.text = `${level}${GameConfig.Language.Text_Level.Value}\n${GameConfig.Language[`${levelMap.get(key).name}`].Value}`;
        this.show();
    }
}
class LevelItem extends LevelItem_Generate$1 {
    onStart() {
    }
    updateLevelTextBlock(name) {
        this.mLevelTextBlock.text = `${name}`;
    }
}
const levelMap = new Map();
levelMap.set(1, { desc: "黑悟空关卡", triggers: ["0531B54C"], worldUIIds: ["081A5D07"], name: `Text_BlackMonkeyKingLevel`, limitLevel: 38 });
const arenaMap = new Map();
arenaMap.set(1, { desc: "百万年魂兽", triggers: ["2CBAFC8A"], worldUIIds: ["063EA403"], name: `Text_MillionYearSoulBeast`, limitLevel: 588, targetLoc: new mw.Vector(5500, 10500, 2200) });
arenaMap.set(2, { desc: "回城", triggers: ["31B6EFEC"], worldUIIds: ["2FFBFC31"], name: `Text_ReturningToTheCity`, limitLevel: 588, targetLoc: new mw.Vector(-4065, 6446, 2000) });
class LevelModuleC extends ModuleC {
    constructor() {
        super(...arguments);
        this.levelPanel = null;
        this.playerModuleC = null;
        this.levels = {};
        this.hudModuleC = null;
        this.hudPanel = null;
        this.upExpPanel = null;
        this.isOnUpExp = false;
    }
    get getLevelPanel() {
        if (!this.levelPanel) {
            this.levelPanel = mw.UIService.getUI(LevelPanel);
        }
        return this.levelPanel;
    }
    get getPlayerModuleC() {
        if (!this.playerModuleC) {
            this.playerModuleC = ModuleService.getModule(PlayerModuleC);
        }
        return this.playerModuleC;
    }
    onStart() {
        this.initAction();
    }
    onEnterScene(sceneType) {
        this.levels = this.data.levels;
        this.initTransfer();
    }
    setLevel(key, value) {
        if (MapEx.has(this.levels, key)) {
            MapEx.get(this.levels, key);
        }
        MapEx.set(this.levels, key, value);
        this.server.net_setLevel(key, value);
    }
    getLevel(key) {
        if (MapEx.has(this.levels, key)) {
            return MapEx.get(this.levels, key);
        }
        return 0;
    }
    net_startLevel(key, level) {
        this.getLevelPanel.updateLevelTextBlock(key, level);
    }
    hideLevelPanel() {
        // this.getLevelPanel.hide();//TODO
    }
    initTransfer() {
        transferMap.forEach((value, key) => {
            value.triggerIds.forEach((triggerId) => {
                mw.GameObject.asyncFindGameObjectById(triggerId).then((go) => {
                    let trigger = go;
                    trigger.onEnter.add((character) => {
                        if (character.gameObjectId != this.localPlayer.character.gameObjectId)
                            return;
                        if (this.getPlayerModuleC.getLv < value.limitLevel) {
                            Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_PleaseFirstRaiseTheLevelToLevel.Value, value.limitLevel));
                            return;
                        }
                        this.localPlayer.character.worldTransform.position = value.targetLoc;
                    });
                });
            });
            value.worldUIIds.forEach((worldId) => {
                mw.GameObject.asyncFindGameObjectById(worldId).then((v) => {
                    let worldUI = v;
                    let levelItem = mw.UIService.create(LevelItem);
                    levelItem.updateLevelTextBlock(`${value.limitLevel}${GameConfig.Language.Text_LevelUnlock.Value}\n${GameConfig.Language[`${value.name}`].Value}`);
                    worldUI.setTargetUIWidget(levelItem.uiWidgetBase);
                });
            });
        });
        levelMap.forEach((value, key) => {
            value.triggers.forEach((triggerId) => {
                mw.GameObject.asyncFindGameObjectById(triggerId).then((v) => {
                    v.onEnter.add((char) => {
                        if (this.localPlayer.character.gameObjectId != char.gameObjectId)
                            return;
                        if (this.getPlayerModuleC.getLv < value.limitLevel) {
                            Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_PleaseFirstRaiseTheLevelToLevel.Value, value.limitLevel));
                            return;
                        }
                        this.server.net_startLevel(key);
                        SoundService.play3DSound("431480", this.localPlayer.character);
                    });
                });
            });
            value.worldUIIds.forEach((worldId) => {
                mw.GameObject.asyncFindGameObjectById(worldId).then((v) => {
                    let worldUI = v;
                    let levelItem = mw.UIService.create(LevelItem);
                    levelItem.updateLevelTextBlock(`${value.limitLevel}${GameConfig.Language.Text_LevelOpen.Value}\n${GameConfig.Language[`${value.name}`].Value}`);
                    worldUI.setTargetUIWidget(levelItem.uiWidgetBase);
                });
            });
        });
        arenaMap.forEach((value, key) => {
            value.triggers.forEach((triggerId) => {
                mw.GameObject.asyncFindGameObjectById(triggerId).then((v) => {
                    v.onEnter.add((char) => {
                        if (this.localPlayer.character.gameObjectId != char.gameObjectId)
                            return;
                        if (this.getPlayerModuleC.getLv < value.limitLevel) {
                            Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_PleaseFirstRaiseTheLevelToLevel.Value, value.limitLevel));
                            return;
                        }
                        this.localPlayer.character.worldTransform.position = value.targetLoc;
                        // Event.dispatchToLocal(`arenaState`, key);
                    });
                });
            });
            value.worldUIIds.forEach((worldId) => {
                mw.GameObject.asyncFindGameObjectById(worldId).then((v) => {
                    let worldUI = v;
                    let levelItem = mw.UIService.create(LevelItem);
                    levelItem.updateLevelTextBlock(`${value.limitLevel}${GameConfig.Language.Text_LevelOpen.Value}\n${GameConfig.Language[`${value.name}`].Value}`);
                    worldUI.setTargetUIWidget(levelItem.uiWidgetBase);
                });
            });
        });
    }
    get getHUDModuleC() {
        if (!this.hudModuleC) {
            this.hudModuleC = ModuleService.getModule(HUDModuleC);
        }
        return this.hudModuleC;
    }
    get getHudPanel() {
        if (!this.hudPanel) {
            this.hudPanel = mw.UIService.getUI(HUDPanel);
        }
        return this.hudPanel;
    }
    get getUpExpPanel() {
        if (!this.upExpPanel) {
            this.upExpPanel = mw.UIService.getUI(UpExpPanel);
        }
        return this.upExpPanel;
    }
    initAction() {
        this.getHUDModuleC.onOnOffUpExpAction.add(this.addOnOffUpExpAction.bind(this));
    }
    addOnOffUpExpAction(isOn) {
        this.isOnUpExp = isOn;
        if (this.isOnUpExp) {
            // this.getHudPanel.hide();
            this.getUpExpPanel.show();
        }
        else {
            this.getUpExpPanel.hide();
            // this.getHudPanel.show();
        }
        this.server.net_onOffUpExp(this.isOnUpExp);
        // Utils.asyncDownloadAsset("61245").then(() => {
        //     let resumeDefaultAnimation = this.localPlayer.character.loadAnimation("61245");
        //     resumeDefaultAnimation.slot = AnimSlot.Upper;
        //     resumeDefaultAnimation.play();
        // });
    }
}
const triggerParent = "264D6FAD";
const upExpParent = "0A137F8B";
const upExpAnimationId = "280827";
const upExpEffectId = "142962";
const defaultUpExpRotation = new mw.Rotation(0, 0, 30);
class LevelModuleS extends ModuleS {
    constructor() {
        super(...arguments);
        this.triggers = [];
        this.levelMap = new Map();
        this.upExpDatas = [];
    }
    onStart() {
        this.initTrigger();
        this.initUpExp();
    }
    net_setLevel(key, value) {
        this.currentData.setLevel(key, value);
    }
    initTrigger() {
        mw.GameObject.asyncFindGameObjectById(triggerParent).then((value) => {
            value.getChildren().forEach((v) => {
                this.triggers.push(v);
            });
        });
    }
    getTrigger() {
        let players = Player.getAllPlayers();
        for (let i = 0; i < this.triggers.length; ++i) {
            let isHas = false;
            for (let j = 0; j < players.length; ++j) {
                if (this.triggers[i].checkInArea(players[j].character)) {
                    isHas = true;
                    break;
                }
            }
            if (!isHas) {
                return this.triggers[i];
            }
        }
        return null;
    }
    net_startLevel(key) {
        console.error(`wfz - key:${key}`);
        let player = this.currentPlayer;
        let trigger = this.getTrigger();
        if (!trigger)
            return;
        player.character.worldTransform.position = trigger.worldTransform.position;
        let monsterIndex = Number(trigger.name.split(`_`)[1]);
        let levels = DataCenterS.getData(player, LevelData).levels;
        let level = (MapEx.has(levels, key)) ? MapEx.get(levels, key) : 1;
        let lv = DataCenterS.getData(player, PlayerData).playerLv;
        Event.dispatchToLocal(`InitMonster`, monsterIndex, level, lv);
        this.getClient(player).net_startLevel(key, level);
        this.levelMap.set(player.userId, monsterIndex);
    }
    startLevel(player, key) {
        DataCenterS.getData(player, LevelData).addLevel(key);
        let levels = DataCenterS.getData(player, LevelData).levels;
        let level = (MapEx.has(levels, key)) ? MapEx.get(levels, key) : 1;
        let lv = DataCenterS.getData(player, PlayerData).playerLv;
        if (!this.levelMap.has(player.userId))
            return;
        TimeUtil.delaySecond(2).then(() => {
            Event.dispatchToLocal(`InitMonster`, this.levelMap.get(player.userId), level, lv);
            this.getClient(player).net_startLevel(key, level);
        });
    }
    initUpExp() {
        mw.GameObject.asyncFindGameObjectById(upExpParent).then((value) => {
            value.getChildren().forEach((v) => {
                let pos = v.worldTransform.position;
                this.upExpDatas.push({ upExpLoc: new mw.Vector(pos.x, pos.y, pos.z + 500), userId: null, animation: null, originalLoc: null, upExpEffectId: null });
            });
        });
    }
    updateUpExpMap(player, isOn) {
        if (!this.upExpDatas || this.upExpDatas.length == 0)
            return;
        if (isOn) {
            for (let i = 0; i < this.upExpDatas.length; ++i) {
                if (this.upExpDatas[i].userId && this.upExpDatas[i].userId != "" && this.upExpDatas[i].userId != player.userId)
                    continue;
                this.upExpDatas[i].userId = player.userId;
                this.upExpDatas[i].originalLoc = player.character.worldTransform.position;
                this.upExpDatas[i].animation = player.character.loadAnimation(upExpAnimationId);
                this.upExpDatas[i].animation.loop = 0;
                this.upExpDatas[i].animation.play();
                if (this.upExpDatas[i].upExpEffectId)
                    EffectService.stop(this.upExpDatas[i].upExpEffectId);
                this.upExpDatas[i].upExpEffectId = EffectService.playOnGameObject(upExpEffectId, player.character, { slotType: mw.HumanoidSlotType.Root, loopCount: 0 });
                player.character.worldTransform.position = this.upExpDatas[i].upExpLoc;
                player.character.worldTransform.rotation = defaultUpExpRotation;
                break;
            }
        }
        else {
            for (let i = 0; i < this.upExpDatas.length; ++i) {
                if (this.upExpDatas[i].userId != player.userId)
                    continue;
                this.upExpDatas[i].animation?.stop();
                player.character.worldTransform.position = this.upExpDatas[i].originalLoc;
                EffectService.stop(this.upExpDatas[i].upExpEffectId);
                this.upExpDatas[i].userId = null;
                this.upExpDatas[i].originalLoc = null;
                this.upExpDatas[i].animation = null;
                this.upExpDatas[i].upExpEffectId = null;
                break;
            }
        }
    }
    net_onOffUpExp(isOn) {
        this.updateUpExpMap(this.currentPlayer, isOn);
    }
}
__decorate([
    Decorator.noReply()
], LevelModuleS.prototype, "net_setLevel", null);
__decorate([
    Decorator.noReply()
], LevelModuleS.prototype, "net_startLevel", null);
__decorate([
    Decorator.noReply()
], LevelModuleS.prototype, "net_onOffUpExp", null);

var foreign55 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    LevelData: LevelData,
    LevelItem: LevelItem,
    LevelModuleC: LevelModuleC,
    LevelModuleS: LevelModuleS,
    LevelPanel: LevelPanel,
    UpExpPanel: UpExpPanel
});

class SwordTipsPanel extends SwordTipsPanel_Generate$1 {
    constructor() {
        super(...arguments);
        this.arkCallBack = null;
        this.diamondCallBack = null;
        this.closeCallBack = null;
    }
    onStart() {
        this.initUI();
        this.bindButton();
    }
    initUI() {
        this.mArkTextBlock.text = GameConfig.Language.Text_UseTeamCoins.Value;
        this.mDiamondTextBlock.text = GameConfig.Language.Text_UsingDiamonds.Value;
        this.mContentTextBlock_2.text = GameConfig.Language.Text_Or.Value;
        if (GlobalData.languageId == 0) {
            this.mContentTextBlock_0.fontSize = 30;
            this.mContentTextBlock_1.fontSize = 30;
            this.mDiamondTextBlock.fontSize = 30;
            this.mArkTextBlock.fontSize = 30;
        }
        else {
            this.mContentTextBlock_0.fontSize = 40;
            this.mContentTextBlock_1.fontSize = 40;
            this.mDiamondTextBlock.fontSize = 38;
            this.mArkTextBlock.fontSize = 38;
        }
    }
    bindButton() {
        this.mCloseButton.onClicked.add(this.addClickButton.bind(this));
        this.mArkButton.onClicked.add(this.addArkButton.bind(this));
        this.mDiamondButton.onClicked.add(this.addDiamondButton.bind(this));
    }
    addClickButton() {
        this.hide();
        if (this.closeCallBack)
            this.closeCallBack();
    }
    addArkButton() {
        if (this.arkCallBack)
            this.arkCallBack();
    }
    addDiamondButton() {
        if (this.diamondCallBack)
            this.diamondCallBack();
    }
    showPanel(key, arkCallBack, diamondCallBack, closeCallBack) {
        let swordData = swordDataMap.get(key);
        if (swordData.diamond <= 0) {
            Utils.setWidgetVisibility(this.mContentTextBlock_0, mw.SlateVisibility.SelfHitTestInvisible);
            Utils.setWidgetVisibility(this.mContentTextBlock_1, mw.SlateVisibility.Collapsed);
            Utils.setWidgetVisibility(this.mContentTextBlock_2, mw.SlateVisibility.Collapsed);
            Utils.setWidgetVisibility(this.mDiamondButton, mw.SlateVisibility.Collapsed);
            this.mContentTextBlock_0.text = StringUtil.format(GameConfig.Language.Text_ConsumeTeamCoinsToPurchase.Value, swordData.ark);
        }
        else {
            this.mContentTextBlock_0.text = StringUtil.format(GameConfig.Language.Text_ConsumingDiamondsToPurchase.Value, swordData.diamond);
            this.mContentTextBlock_1.text = StringUtil.format(GameConfig.Language.Text_ConsumeTeamCoinsToPurchase.Value, swordData.ark);
            Utils.setWidgetVisibility(this.mContentTextBlock_0, mw.SlateVisibility.SelfHitTestInvisible);
            Utils.setWidgetVisibility(this.mContentTextBlock_1, mw.SlateVisibility.SelfHitTestInvisible);
            Utils.setWidgetVisibility(this.mContentTextBlock_2, mw.SlateVisibility.SelfHitTestInvisible);
            Utils.setWidgetVisibility(this.mDiamondButton, mw.SlateVisibility.Visible);
        }
        this.arkCallBack = arkCallBack;
        this.diamondCallBack = diamondCallBack;
        this.closeCallBack = closeCallBack;
        this.show();
    }
}
class SwordItem extends SwordItem_Generate$1 {
    constructor() {
        super(...arguments);
        this.flyModuleC = null;
        this.isCanContinueClick = true;
        this.key = 0;
    }
    get getFlyModuleC() {
        if (!this.flyModuleC) {
            this.flyModuleC = ModuleService.getModule(FlyModuleC);
        }
        return this.flyModuleC;
    }
    onStart() {
        this.initUI();
        this.bindButton();
    }
    initUI() {
        this.mDiamondIconImage.imageGuid = GlobalData.diamondIcon;
        this.mArkIconImage.imageGuid = GlobalData.arkIcon;
        this.mHasTextBlock.text = GameConfig.Language.Text_ClickToGet.Value;
        if (GlobalData.languageId == 0) {
            this.mRarityTextBlock.fontSize = 9;
            this.mArkTextBlock.fontSize = 20;
        }
        else {
            this.mRarityTextBlock.fontSize = 15;
            this.mArkTextBlock.fontSize = 30;
        }
    }
    bindButton() {
        this.mClickButton.onClicked.add(this.addClickButton.bind(this));
    }
    addClickButton() {
        if (!this.isCanContinueClick) {
            Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_CoolForSeconds.Value, 3));
            return;
        }
        this.isCanContinueClick = false;
        TimeUtil.delaySecond(3).then(() => {
            this.isCanContinueClick = true;
        });
        this.getFlyModuleC.clickSwordItem(this.key, () => {
            this.buyComplete();
        });
    }
    initItem(key) {
        this.key = key;
        let swordData = swordDataMap.get(this.key);
        let iconStr = swordData.icon.split(`_`);
        if (iconStr[0] == `mode`) {
            Utils.setImageByAssetIconData(this.mIconImage, iconStr[1]);
        }
        else if (iconStr[0] == `icon`) {
            this.mIconImage.imageGuid = iconStr[1];
        }
        this.mNameTextBlock.text = GameConfig.Language[`${swordData.name}`].Value;
        if (swordData.diamond <= 0) {
            this.mDiamondCanvas.visibility = mw.SlateVisibility.Collapsed;
            this.mIconImage.position = new mw.Vector2(7, 42);
            this.mIconImage.size = new mw.Vector2(210, 210);
        }
        else {
            this.mDiamondTextBlock.text = `${swordData.diamond}`;
            this.mDiamondCanvas.visibility = mw.SlateVisibility.SelfHitTestInvisible;
        }
        this.mArkTextBlock.text = `${swordData.ark}`;
        this.refreshUI();
        this.mRarityTextBlock.text = `${StringUtil.format(GameConfig.Language.Text_IncreaseBloodVolumeByTimes_Nowrap.Value, 1 + swordData.hpRarity)}\n${StringUtil.format(GameConfig.Language.Text_AttackPowerIncreasedByTimes_Nowrap.Value, 1 + swordData.atkRarity)}`;
    }
    refreshUI() {
        if (this.getFlyModuleC.isHasSwordId(this.key)) {
            this.buyComplete();
        }
        else {
            this.mHasCanvas.visibility = mw.SlateVisibility.SelfHitTestInvisible;
        }
    }
    buyComplete() {
        this.mHasCanvas.visibility = mw.SlateVisibility.Collapsed;
        this.mDiamondCanvas.visibility = mw.SlateVisibility.Collapsed;
        this.mArkIconImage.visibility = mw.SlateVisibility.Collapsed;
        this.mArkTextBlock.text = GameConfig.Language.Text_ClickToUse.Value;
        this.mArkTextBlock.textHorizontalLayout = mw.UITextHorizontalLayout.NoClipping;
        this.mArkTextBlock.textAlign = mw.TextJustify.Right;
        this.mIconImage.position = new mw.Vector2(7, 42);
        this.mIconImage.size = new mw.Vector2(210, 210);
    }
}
class SwordPanel extends SwordPanel_Generate$1 {
    constructor() {
        super(...arguments);
        this.hudPanel = null;
        this.swordItems = [];
    }
    get getHudPanel() {
        if (!this.hudPanel) {
            this.hudPanel = mw.UIService.getUI(HUDPanel);
        }
        return this.hudPanel;
    }
    onStart() {
        this.initUI();
        this.bindButton();
    }
    initUI() {
        this.mTitleTextBlock.text = GameConfig.Language.Text_YujianFlyingMall.Value;
        this.mIconDiamondImage.imageGuid = GlobalData.diamondIcon;
        this.mIconArkImage.imageGuid = GlobalData.arkIcon;
        this.initItem();
    }
    bindButton() {
        this.mCloseButton.onClicked.add(this.addCloseButton.bind(this));
        Event.addLocalListener(`UpdateDiamondTextBlock`, this.updateDiamondTextBlock.bind(this));
    }
    addCloseButton() {
        this.hideTween();
    }
    initItem() {
        swordDataMap.forEach((value, key) => {
            let swordItem = mw.UIService.create(SwordItem);
            swordItem.initItem(key);
            this.mCanvas.addChild(swordItem.uiObject);
            this.swordItems.push(swordItem);
        });
    }
    updateArkTextBlock(arkCount) {
        this.mArkCountTextBlock.text = `${arkCount}`;
    }
    updateDiamondTextBlock(diamondCount) {
        this.mDiamondCountTextBlock.text = `${diamondCount}`;
    }
    updateRarityTextBlock(hpRarity, atkRarity) {
        this.mTotalRarityTextBlock.text = `${GameConfig.Language.Text_RoyalSwordFlyingBonus.Value}\n${StringUtil.format(GameConfig.Language.Text_IncreaseBloodVolumeByTimes_Nowrap.Value, 1 + hpRarity)}\n${StringUtil.format(GameConfig.Language.Text_AttackPowerIncreasedByTimes_Nowrap.Value, 1 + atkRarity)}`;
    }
    onShow(...params) {
        Utils.openUITween(this.rootCanvas, () => {
            this.getHudPanel.hide();
        }, null);
    }
    hideTween() {
        Utils.closeUITween(this.rootCanvas, null, () => {
            this.hide();
            this.getHudPanel.show();
        });
    }
}
class FlyData extends Subdata {
    constructor() {
        super(...arguments);
        this.flyIds = [];
        this.swordIds = [];
        this.usingSwordId = 0;
    }
    delFlyId(swordId) {
        if (!this.swordIds.includes(swordId)) {
            this.swordIds.push(swordId);
        }
        this.flyIds.length = 0;
        this.save(true);
    }
    setSwordId(swordId) {
        if (!this.swordIds.includes(swordId)) {
            this.swordIds.push(swordId);
        }
        this.save(true);
    }
    setUsingSwordId(swordId) {
        if (this.usingSwordId == swordId)
            return;
        this.usingSwordId = swordId;
        this.save(true);
    }
    get getHpRarity() {
        if (!this.swordIds || this.swordIds.length == 0)
            return 0;
        let hpRarity = 0;
        this.swordIds.forEach((swordId) => {
            hpRarity += swordDataMap.get(swordId).hpRarity;
        });
        return Number(hpRarity.toFixed(1));
    }
    get getAtkRarity() {
        if (!this.swordIds || this.swordIds.length == 0)
            return 0;
        let atkRarity = 0;
        this.swordIds.forEach((swordId) => {
            atkRarity += swordDataMap.get(swordId).atkRarity;
        });
        return atkRarity;
    }
}
__decorate([
    Decorator.persistence()
], FlyData.prototype, "flyIds", void 0);
__decorate([
    Decorator.persistence()
], FlyData.prototype, "swordIds", void 0);
__decorate([
    Decorator.persistence()
], FlyData.prototype, "usingSwordId", void 0);
class SwordData {
    constructor() {
        this.hpRarity = 0;
        this.atkRarity = 0;
    }
}
const swordTriggerId = "0D77F0C2";
const swordWorldUIId = "21930ABA";
const swordDataMap = new Map();
swordDataMap.set(1, { id: 1, name: "Text_MitsurugiSmartKiller", des: "御剑_智弑者", icon: "mode_31724", diamond: 2800, ark: 600, commodityId: "37zTtTSg2c60001PE", npcId: "3C256CEA", skinId: "268ED77E4D6DFFFD309A05BA9BE0A309", animationId: "285774", swordPrefabId: "9F82AAFB4DE4AFC4ADB866A11D838D73", hpRarity: 0.1, atkRarity: 0.1, isCharacter: false });
swordDataMap.set(4, { id: 4, name: "Text_MitsurugiGoldenSword", des: "御剑_黄金剑", icon: "mode_218730", diamond: -1, ark: 3000, commodityId: "ARlkmT3Usqb0001PH", npcId: "", skinId: "0B11729440BFEE070D9B1F9BF3C27D6E", animationId: "285774", swordPrefabId: "CDA48366471D1E2820A362823CC0E991", hpRarity: 0.3, atkRarity: 0.3, isCharacter: false });
swordDataMap.set(2, { id: 2, name: "Text_MitsurugiIceDiamondSword", des: "御剑_冰钻剑", icon: "mode_31712", diamond: 30000, ark: 1500, commodityId: "Ac8BwTjIqya0001PF", npcId: "3776969F", skinId: "BDFB169745A51FDCFCC95F930B93FF06", animationId: "285774", swordPrefabId: "1F1C60AE4477C35E7A866B9B1EC115B0", hpRarity: 0.2, atkRarity: 0.2, isCharacter: false });
swordDataMap.set(5, { id: 5, name: "Text_MitsurugiDemonSword", des: "御剑_恶魔剑", icon: "mode_122956", diamond: -1, ark: 5000, commodityId: "AiOAFX4FHqP0001PI", npcId: "", skinId: "65980CA14CDB69DA3768E692D62B2EA5", animationId: "285774", swordPrefabId: "8916A58D484FBB70C4AC53883A1B4CA5", hpRarity: 0.5, atkRarity: 0.5, isCharacter: false });
swordDataMap.set(3, { id: 3, name: "Text_MitsurugiBrokenCrazySword", des: "御剑_断狂剑", icon: "mode_269895", diamond: 50000, ark: 2500, commodityId: "5RQ4kLNvse30001PG", npcId: "2D50E787", skinId: "C1052B3F48E85F92B636938767F2C051", animationId: "285774", swordPrefabId: "8124134E4CBF3FA72E07A7B4EEFCF00D", hpRarity: 0.3, atkRarity: 0.2, isCharacter: false });
swordDataMap.set(6, { id: 6, name: "Text_MitsurugiAerocraft", des: "御剑_飞行器", icon: "mode_87017", diamond: -1, ark: 6800, commodityId: "4uaXGuU0QS20001PJ", npcId: "0CA13464", skinId: "23BB2A944F3CE285BBCD3084FB10A724", animationId: "285774", swordPrefabId: "22D90B924C59CC74C1EFFD9784B19249", hpRarity: 0.7, atkRarity: 0.6, isCharacter: false });
swordDataMap.set(7, { id: 7, name: "Text_MitsurugiImperialSwordDart", des: "御剑_飞镖", icon: "mode_20925", diamond: -1, ark: 100, commodityId: "25qyjRc49QC0001Py", npcId: "", skinId: "", animationId: "285774", swordPrefabId: "0C9D159B4A075406380DB88269CD789A", hpRarity: 0.1, atkRarity: 0, isCharacter: false });
swordDataMap.set(8, { id: 8, name: "Text_MitsurugiSmallBicycle", des: "御剑_小单车", icon: "mode_31526", diamond: -1, ark: 3000, commodityId: "5FvNd2bs82z0001Pz", npcId: "373123C7", skinId: "F6A887214D21780BC36A41B26307265B", animationId: "285057", swordPrefabId: "9715225D4634C394F69BA0BD6F420451", hpRarity: 0.3, atkRarity: 0.3, isCharacter: false });
swordDataMap.set(9, { id: 9, name: "Text_MitsurugiAnywayHeShandsome", des: "御剑_反正很帅", icon: "mode_151412", diamond: -1, ark: 600, commodityId: "5HMpNdwFrJr0001Q0", npcId: "", skinId: "", animationId: "284772", swordPrefabId: "938C2259434A97CA393C8199DD80D274", hpRarity: 0.1, atkRarity: 0.1, isCharacter: false });
swordDataMap.set(10, { id: 10, name: "Text_MitsurugiSkate", des: "御剑_滑板", icon: "mode_172322", diamond: -1, ark: 300, commodityId: "2n1J8tM5rtL0001Q2", npcId: "0F6CADC5", skinId: "CDB4F61044BF45F91E8E91AB9E1C706B", animationId: "285774", swordPrefabId: "739C4F7545D25E898D93F89BF0AC4B8A", hpRarity: 0.1, atkRarity: 0.1, isCharacter: false });
swordDataMap.set(11, { id: 11, name: "Text_MitsurugiLittleGreenDragon", des: "御剑_小绿龙", icon: "mode_247654", diamond: -1, ark: 1000, commodityId: "7zMYBoBixh80001Q3", npcId: "", skinId: "", animationId: "285781", swordPrefabId: "01728B2A4C9722493B4703BEBA7E4CF2", hpRarity: 0.2, atkRarity: 0.1, isCharacter: true });
swordDataMap.set(12, { id: 12, name: "Text_MitsurugiXiaolanLong", des: "御剑_小蓝龙", icon: "mode_248837", diamond: -1, ark: 1000, commodityId: "AJrYTJFqjFR0001Q4", npcId: "", skinId: "", animationId: "285781", swordPrefabId: "48A6F6E348AAACD86C9269B780CF3BE8", hpRarity: 0.2, atkRarity: 0.1, isCharacter: true });
swordDataMap.set(13, { id: 13, name: "Text_MitsurugiLittleFireDragon", des: "御剑_小火龙", icon: "mode_248730", diamond: -1, ark: 1000, commodityId: "7gMCn89dVTb0001Q5", npcId: "0E9E1B46", skinId: "F5B67E80465D850BAD46A09F62FB6B87", animationId: "285781", swordPrefabId: "14AF817A43500A7102A057A2D52ECAD8", hpRarity: 0.2, atkRarity: 0.1, isCharacter: true });
class FlyModuleC extends ModuleC {
    constructor() {
        super(...arguments);
        this.swordPanel = null;
        this.swordTipsPanel = null;
        this.hudModuleC = null;
        this.adTipsPanel = null;
        this.playerModuleC = null;
        this.bagModuleC = null;
        this.flyIds = [];
        this.swordIds = [];
        this.usingSwordId = 0;
        this.isFlying = false;
        this.isFirst = true;
    }
    get getSwordPanel() {
        if (!this.swordPanel) {
            this.swordPanel = mw.UIService.getUI(SwordPanel);
        }
        return this.swordPanel;
    }
    get getSwordTipsPanel() {
        if (!this.swordTipsPanel) {
            this.swordTipsPanel = mw.UIService.getUI(SwordTipsPanel);
        }
        return this.swordTipsPanel;
    }
    get getHudModuleC() {
        if (!this.hudModuleC) {
            this.hudModuleC = ModuleService.getModule(HUDModuleC);
        }
        return this.hudModuleC;
    }
    get getAdTipsPanel() {
        if (!this.adTipsPanel) {
            this.adTipsPanel = mw.UIService.create(AdTipsPanel);
        }
        return this.adTipsPanel;
    }
    get getPlayerModuleC() {
        if (!this.playerModuleC) {
            this.playerModuleC = ModuleService.getModule(PlayerModuleC);
        }
        return this.playerModuleC;
    }
    get getBagModuleC() {
        if (!this.bagModuleC) {
            this.bagModuleC = ModuleService.getModule(BagModuleC);
        }
        return this.bagModuleC;
    }
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
        this.bindAction();
    }
    bindAction() {
        this.getHudModuleC.onOpenSwordAction.add(this.addOpenSwordPanel.bind(this));
        this.getHudModuleC.onOnOffFlyAction.add(this.addOnOffSword.bind(this));
        mw.PurchaseService.onArkBalanceUpdated.add(this.addArkUpdate.bind(this));
    }
    addOpenSwordPanel() {
        this.getSwordPanel.show();
        mw.PurchaseService.getArkBalance(); // 触发代币余额刷新。接收更新的值要用mw.PurchaseService.onArkBalanceUpdated
        Event.dispatchToLocal(`SyncDiamondCount`);
        this.getSwordPanel.updateRarityTextBlock(this.getHpRarity, this.getAtkRarity);
    }
    addArkUpdate(amount) {
        //刷新逻辑，amount为当前代币数量
        console.error(`ArkModuleC addArkUpdate amount: ${amount}`);
        this.getSwordPanel.updateArkTextBlock(amount);
    }
    clickSwordItem(key, buySuccessCallback) {
        if (this.isHasSwordId(key)) {
            this.setUsingSwordId(key);
            this.getSwordPanel.hideTween();
        }
        else {
            let swordData = swordDataMap.get(key);
            if (swordData.diamond <= 0) {
                if (mw.SystemUtil.isPIE) {
                    this.setSwordId(key);
                    Notice.showDownNotice(GameConfig.Language.Text_YujianFlyingHasBeenSuccessfullyPurchased.Value);
                    if (buySuccessCallback)
                        buySuccessCallback();
                }
                else {
                    mw.PurchaseService.placeOrder(swordData.commodityId, 1, (status, msg) => {
                        mw.PurchaseService.getArkBalance(); //刷新代币数量
                        if (status != 200)
                            return;
                        if (buySuccessCallback)
                            buySuccessCallback();
                    });
                }
            }
            else {
                this.getSwordTipsPanel.showPanel(key, () => {
                    if (mw.SystemUtil.isPIE) {
                        this.setSwordId(key);
                        Notice.showDownNotice(GameConfig.Language.Text_YujianFlyingHasBeenSuccessfullyPurchased.Value);
                        if (buySuccessCallback)
                            buySuccessCallback();
                        this.getSwordTipsPanel.hide();
                    }
                    else {
                        mw.PurchaseService.placeOrder(swordData.commodityId, 1, (status, msg) => {
                            mw.PurchaseService.getArkBalance(); //刷新代币数量
                            if (status != 200)
                                return;
                            if (buySuccessCallback)
                                buySuccessCallback();
                            this.getSwordTipsPanel.hide();
                        });
                    }
                }, () => {
                    let costDiamond = this.getPlayerModuleC.getDiamond;
                    if (costDiamond >= swordData.diamond) {
                        this.getPlayerModuleC.saveDiamond(-swordData.diamond);
                        this.setSwordId(key);
                        Notice.showDownNotice(GameConfig.Language.Text_YujianFlyingHasBeenSuccessfullyPurchased.Value);
                        this.getSwordTipsPanel.hide();
                        if (buySuccessCallback)
                            buySuccessCallback();
                    }
                    else {
                        Notice.showDownNotice(GameConfig.Language.Text_DiamondShortage.Value);
                        if (GlobalData.isOpenIAA) {
                            this.getAdTipsPanel.showRewardAd(() => {
                                Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_SuccessfullyObtainedDiamonds.Value, GlobalData.addDiamondCount));
                                this.getPlayerModuleC.saveDiamond(GlobalData.addDiamondCount);
                            }, StringUtil.format(GameConfig.Language.Text_GetFreeDiamonds.Value, GlobalData.addDiamondCount), GameConfig.Language.Text_Cancel.Value, GameConfig.Language.Text_FreeToReceive.Value);
                        }
                        else {
                            Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_SuccessfullyObtainedDiamonds.Value, GlobalData.addDiamondCount));
                            this.getPlayerModuleC.saveDiamond(GlobalData.addDiamondCount);
                        }
                    }
                }, null);
            }
        }
    }
    net_deliverGoods(commodityId, amount) {
        swordDataMap.forEach((value, key) => {
            if (value.commodityId == commodityId) {
                this.setSwordId(key);
                Notice.showDownNotice(GameConfig.Language.Text_YujianFlyingHasBeenSuccessfullyPurchased.Value);
            }
        });
    }
    onEnterScene(sceneType) {
        this.initSwordData();
        this.initTrigger().then(() => {
            TimeUtil.delaySecond(10).then(() => {
                if (this.usingSwordId > 0)
                    this.addOnOffSword(true);
            });
        });
    }
    ;
    initSwordData() {
        this.flyIds = this.data.flyIds;
        this.swordIds = this.data.swordIds;
        this.usingSwordId = this.data.usingSwordId;
        if (this.flyIds && this.flyIds.length > 0) {
            if (this.flyIds[0] == 1)
                this.delFlyId();
        }
    }
    delFlyId() {
        let swordId = 4;
        if (!this.swordIds.includes(swordId)) {
            this.swordIds.push(swordId);
        }
        if (this.usingSwordId != swordId) {
            this.usingSwordId = swordId;
        }
        this.flyIds.length = 0;
        this.server.net_delFlyId(swordId);
    }
    setSwordId(swordId) {
        if (this.swordIds.includes(swordId))
            return;
        this.swordIds.push(swordId);
        this.server.net_setSwordId(swordId);
        this.getBagModuleC.updateHpByUsing();
        this.getSwordPanel.updateRarityTextBlock(this.getHpRarity, this.getAtkRarity);
    }
    isHasSwordId(swordId) {
        return this.swordIds.includes(swordId);
    }
    get getHpRarity() {
        if (!this.swordIds || this.swordIds.length == 0)
            return 0;
        let hpRarity = 0;
        this.swordIds.forEach((swordId) => {
            hpRarity += swordDataMap.get(swordId).hpRarity;
        });
        return Number(hpRarity.toFixed(1));
    }
    get getAtkRarity() {
        if (!this.swordIds || this.swordIds.length == 0)
            return 0;
        let atkRarity = 0;
        this.swordIds.forEach((swordId) => {
            atkRarity += swordDataMap.get(swordId).atkRarity;
        });
        return Number(atkRarity.toFixed(1));
    }
    setUsingSwordId(swordId) {
        if (this.usingSwordId == swordId)
            return;
        this.usingSwordId = swordId;
        this.server.net_setUsingSwordId(this.usingSwordId);
        Notice.showDownNotice(GameConfig.Language.Text_EquippingSwordFlying.Value);
        this.localPlayer.character.changeState(mw.CharacterStateType.Flying);
        this.server.net_useFly(this.usingSwordId);
        this.isFlying = true;
    }
    addOnOffSword(on) {
        if (on) {
            if (this.usingSwordId <= 0) {
                Notice.showDownNotice(GameConfig.Language.Text_FlyingWithoutEquippedSword.Value);
                return;
            }
            else {
                if (this.isFlying)
                    return;
                Notice.showDownNotice(GameConfig.Language.Text_EquippingSwordFlying.Value);
                this.localPlayer.character.changeState(mw.CharacterStateType.Flying);
                this.server.net_useFly(this.usingSwordId);
                this.isFlying = true;
            }
        }
        else {
            if (!this.isFlying)
                return;
            Notice.showDownNotice(GameConfig.Language.Text_RemoveTheImperialSwordAndFly.Value);
            this.localPlayer.character.changeState(mw.CharacterStateType.Running);
            this.server.net_useFly(-1);
            this.isFlying = false;
        }
    }
    defaultOpenBuyPanel() {
        console.error(`aaaaaaaaaaaaaaaaaaaaaaaaaaaaa`);
        if (this.isFirst) {
            this.isFirst = false;
            return;
        }
        this.addOpenSwordPanel();
    }
    async initTrigger() {
        mw.GameObject.asyncFindGameObjectById(swordTriggerId).then((trigger) => {
            trigger.onEnter.add((character) => {
                if (character.gameObjectId != this.localPlayer.character.gameObjectId)
                    return;
                this.addOpenSwordPanel();
            });
        });
        mw.GameObject.asyncFindGameObjectById(swordWorldUIId).then((worldUI) => {
            let levelItem = mw.UIService.create(LevelItem);
            levelItem.updateLevelTextBlock(GameConfig.Language.Text_YujianFlyingMall.Value);
            worldUI.setTargetUIWidget(levelItem.uiWidgetBase);
        });
        swordDataMap.forEach((swordData) => {
            if (!swordData.npcId || swordData.npcId == "")
                return;
            GameObject.asyncFindGameObjectById(swordData.npcId).then((character) => {
                character.setDescription([swordData.skinId]);
                let animation = character.loadAnimation(swordData.animationId);
                animation.loop = 0;
                animation.play();
                if (swordData.id == 13) {
                    let flyCharacter = character.getChildByName("小火龙");
                    flyCharacter.setCollision(mw.PropertyStatus.Off, true);
                    character.attachToSlot(flyCharacter, mw.HumanoidSlotType.Root);
                    flyCharacter.localTransform.scale = mw.Vector.one.multiply(4);
                    flyCharacter.localTransform.position = new mw.Vector(12, 0, 30);
                    flyCharacter.localTransform.rotation = mw.Rotation.zero;
                    Utils.asyncDownloadAsset(`160628`).then(() => {
                        let flyCharacterAnimation = flyCharacter.loadAnimation(`160628`); //TODO-小龙动画
                        flyCharacterAnimation.loop = 0;
                        flyCharacterAnimation.play();
                    });
                }
            });
        });
    }
}
class FlyModuleS extends ModuleS {
    constructor() {
        super(...arguments);
        this.playerModuleS = null;
        this.bagModuleS = null;
    }
    get getPlayerModuleS() {
        if (!this.playerModuleS) {
            this.playerModuleS = ModuleService.getModule(PlayerModuleS);
        }
        return this.playerModuleS;
    }
    get getBagModuleS() {
        if (!this.bagModuleS) {
            this.bagModuleS = ModuleService.getModule(BagModuleS);
        }
        return this.bagModuleS;
    }
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
        this.bindAction();
    }
    bindAction() {
        mw.PurchaseService.onOrderDelivered.add(this.addShipOrder.bind(this));
    }
    addShipOrder(playerId, orderId, commodityId, amount, confirmOrder) {
        //根据playerId和commodityId来处理购买逻辑
        this.getClient(playerId).net_deliverGoods(commodityId, amount);
        confirmOrder(true); //调用这个方法表示确认收货成功
    }
    net_delFlyId(swordId) {
        this.currentData.delFlyId(swordId);
    }
    net_setSwordId(swordId) {
        let player = this.currentPlayer;
        this.currentData.setSwordId(swordId);
        this.getBagModuleS.updateHpByUsing(player);
    }
    getRarity(player) {
        return DataCenterS.getData(player, FlyData).getHpRarity;
    }
    net_setUsingSwordId(swordId) {
        this.currentData.setUsingSwordId(swordId);
    }
    net_useFly(key) {
        this.getPlayerModuleS.useFly(this.currentPlayer, key);
    }
}
__decorate([
    Decorator.noReply()
], FlyModuleS.prototype, "net_delFlyId", null);
__decorate([
    Decorator.noReply()
], FlyModuleS.prototype, "net_setSwordId", null);
__decorate([
    Decorator.noReply()
], FlyModuleS.prototype, "net_setUsingSwordId", null);
__decorate([
    Decorator.noReply()
], FlyModuleS.prototype, "net_useFly", null);

var foreign49 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    FlyData: FlyData,
    FlyModuleC: FlyModuleC,
    FlyModuleS: FlyModuleS,
    SwordData: SwordData,
    SwordItem: SwordItem,
    SwordPanel: SwordPanel,
    SwordTipsPanel: SwordTipsPanel,
    swordDataMap: swordDataMap
});

var ObjectPoolServices;
(function (ObjectPoolServices) {
    class ObjectPool {
        constructor(spawn, initNum = 3) {
            this.spawnFun = spawn;
            this.pool = new Array(initNum);
            this.oPool = new Array();
            for (let index = 0; index < initNum; index++) {
                this.pool[index] = this.spawnFun();
            }
        }
        spawn() {
            if (this.pool.length > 0) {
                let a = this.pool.pop();
                this.oPool.push(a);
                return a;
            }
            let a = this.spawnFun();
            this.oPool.push(a);
            return a;
        }
        return(instance) {
            if (instance == null) {
                return;
            }
            this.pool.push(instance);
        }
        getSize() {
            return this.pool.length;
        }
        clear() {
            this.pool.length = 0;
        }
        oPoolClear() {
            this.oPool.length = 0;
        }
        getAll() {
            return this.pool;
        }
        getOPool() {
            return this.oPool;
        }
    }
    ObjectPoolServices.ObjectPool = ObjectPool;
    const poolMap = new Map();
    function getPool(cls, autoCreat = true) {
        let pool = poolMap.get(cls.name);
        if (pool === undefined && autoCreat) {
            initPool(cls, () => new cls());
        }
        return poolMap.get(cls.name);
    }
    ObjectPoolServices.getPool = getPool;
    function initPool(cls, spawn, initNum = 3) {
        let pool = poolMap.get(cls.name);
        if (pool === undefined) {
            pool = new ObjectPool(spawn, initNum);
            poolMap.set(cls.name, pool);
        }
        return pool;
    }
    ObjectPoolServices.initPool = initPool;
    function destroyPool(cls) {
        let pool = poolMap.get(cls.name);
        if (pool !== undefined) {
            pool.clear();
        }
        poolMap.delete(cls.name);
    }
    ObjectPoolServices.destroyPool = destroyPool;
    function clear() {
        for (const [key, pool] of poolMap) {
            pool.clear();
        }
        poolMap.clear();
    }
    ObjectPoolServices.clear = clear;
})(ObjectPoolServices || (ObjectPoolServices = {}));
var SourceType;
(function (SourceType) {
    SourceType[SourceType["Error"] = 0] = "Error";
    SourceType[SourceType["Asset"] = 1] = "Asset";
    SourceType[SourceType["GameObject"] = 2] = "GameObject";
    SourceType[SourceType["Prefab"] = 3] = "Prefab"; //预制体
})(SourceType || (SourceType = {}));
class ObjPool {
    constructor() {
        this.POOL_RES_GUID = 'poolResGuid'; //原始对象的guid，还对象的时候使用
        this.sourceTypeMap = new Map();
        this.sceneSource = new Map();
        this.subPoolMap = new Map();
    }
    destroy() {
        ObjPool.instance = null;
    }
    /**
     * 生成一个对象
     * @param guid 场景对象的guid | 资源的guid | prefab的guid
     * @returns 对象
     */
    spawn(guid) {
        if (this.subPoolMap.has(guid) && this.subPoolMap.get(guid).length > 0) {
            let obj = this.subPoolMap.get(guid).pop();
            obj.setVisibility(mw.PropertyStatus.On);
            return obj;
        }
        if (!this.sourceTypeMap.has(guid)) {
            this.sourceTypeMap.set(guid, this.getSourceType(guid));
        }
        let obj = null;
        switch (this.sourceTypeMap.get(guid)) {
            case SourceType.Asset:
                obj = SpawnManager.wornSpawn(guid);
                break;
            case SourceType.GameObject:
                obj = this.sceneSource.get(guid).clone();
                break;
            case SourceType.Prefab:
                obj = SpawnManager.wornSpawn(guid);
                break;
        }
        if (obj == null) {
            this.sourceTypeMap.set(guid, SourceType.Error);
        }
        else {
            obj.setVisibility(mw.PropertyStatus.On);
            obj.worldTransform.position = mw.Vector.zero;
            obj[this.POOL_RES_GUID] = guid;
        }
        return obj;
    }
    //根据资源的guid获取资源的类型
    getSourceType(guid) {
        if (guid.length > 18) {
            let source = GameObject.findGameObjectById(guid);
            if (source != null) { //场景里的
                source.parent = null;
                source.setVisibility(mw.PropertyStatus.Off);
                this.sceneSource.set(guid, source);
                return SourceType.GameObject;
            }
            else { //预制体
                return SourceType.Prefab;
            }
        }
        else { //库里的
            return SourceType.Asset;
        }
    }
    /**
     * 归还一个对象
     * @param obj 对象
     */
    despawn(obj) {
        let guid = obj[this.POOL_RES_GUID];
        if (guid == null)
            return;
        if (!this.subPoolMap.has(guid))
            this.subPoolMap.set(guid, []);
        if (this.subPoolMap.get(guid).includes(obj))
            return;
        this.subPoolMap.get(guid).push(obj);
        // obj.parent = null;
    }
    /**
     * 清除对象池中所以guid对应的对象
     * @param guid 清除对象的guid
     */
    clear(guid) {
        if (!this.subPoolMap.has(guid) && this.subPoolMap.get(guid).length == 0) {
            return;
        }
        let arr = this.subPoolMap.get(guid);
        for (let i = 0; i < arr.length; i++) {
            arr[i].destroy();
        }
        arr.length = 0;
    }
}

var foreign102 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ObjPool: ObjPool,
    get ObjectPoolServices () { return ObjectPoolServices; }
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/OnlineReward/OnlineRewardPanel.ui
 * TIME: 2024.11.04-19.49.52
 */
let OnlineRewardPanel_Generate = class OnlineRewardPanel_Generate extends UIScript {
    get mTitleTextBlock() {
        if (!this.mTitleTextBlock_Internal && this.uiWidgetBase) {
            this.mTitleTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/mTitleTextBlock');
        }
        return this.mTitleTextBlock_Internal;
    }
    get mCanvas() {
        if (!this.mCanvas_Internal && this.uiWidgetBase) {
            this.mCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/ScrollBox/mCanvas');
        }
        return this.mCanvas_Internal;
    }
    get mCloseButton() {
        if (!this.mCloseButton_Internal && this.uiWidgetBase) {
            this.mCloseButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/mCloseButton');
        }
        return this.mCloseButton_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        this.mCloseButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mCloseButton");
        });
        this.mCloseButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mTitleTextBlock);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
OnlineRewardPanel_Generate = __decorate([
    UIBind('UI/module/OnlineReward/OnlineRewardPanel.ui')
], OnlineRewardPanel_Generate);
var OnlineRewardPanel_Generate$1 = OnlineRewardPanel_Generate;

var foreign142 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: OnlineRewardPanel_Generate$1
});

/**
 * AUTHOR: 爱玩游戏的小胖子
 * TIME: 2023.09.20-22.36.29
 */
class OnlineRewardPanel extends OnlineRewardPanel_Generate$1 {
    constructor() {
        super(...arguments);
        this.hudModuleC = null;
        this.onlineRewardsModuleC = null;
        this.onlineRewardsElements = [];
        /**所有的item */
        this.onlineRewardItems = [];
        /**需要更新的Items */
        this.needUpdateItems = {};
        /**需要缓动的Item */
        this.needTweenItems = {};
    }
    get getHudModuleC() {
        if (!this.hudModuleC) {
            this.hudModuleC = ModuleService.getModule(HUDModuleC);
        }
        return this.hudModuleC;
    }
    get getOnlineRewardsModuleC() {
        if (!this.onlineRewardsModuleC) {
            this.onlineRewardsModuleC = ModuleService.getModule(OnlineRewardModuleC);
        }
        return this.onlineRewardsModuleC;
    }
    onStart() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerMiddle;
        this.bindButton();
        this.initTextBlock();
    }
    initTextBlock() {
        this.mTitleTextBlock.text = GameConfig.Language.Text_OnlineRewards.Value;
    }
    /**
     * 绑定按钮事件
     */
    bindButton() {
        this.mCloseButton.onClicked.add(() => {
            this.getOnlineRewardsModuleC.onOnlineRewardsAction.call(false);
        });
    }
    onShow(...params) {
        this.openNeedTweenItems(true);
        Console.error("this.rootCanvas.position = " + this.rootCanvas.position);
        Utils.openUITween(this.rootCanvas, null, null);
    }
    /**
     * 隐藏缓动
     */
    hideTween() {
        Utils.closeUITween(this.rootCanvas, null, () => {
            this.hide();
        });
    }
    onHide() {
        this.openNeedTweenItems(false);
    }
    /**
     * 初始化在线奖励Item
     * @param itemCount
     */
    initOnlineRewardItem(onlineSecond, isGetRewards) {
        this.onlineRewardsElements = GameConfig.OnlineRewards.getAllElement();
        for (let i = 0; i < this.onlineRewardsElements.length; ++i) {
            let onlineRewardItem = ObjectPoolServices.getPool(OnlineRewardItem).spawn();
            let onlineRewardItemState = OnlineRewardItemState.notSatisfy;
            let onlineRewardsElement = this.onlineRewardsElements[i];
            let needTime = onlineRewardsElement.OnlineTime;
            let needUpdate = false;
            let needTween = false;
            if (isGetRewards[i]) {
                onlineRewardItemState = OnlineRewardItemState.getReward;
            }
            else {
                if (onlineSecond >= needTime * 60) {
                    onlineRewardItemState = OnlineRewardItemState.satisfy;
                    needTween = true;
                }
                else {
                    onlineRewardItemState = OnlineRewardItemState.notSatisfy;
                    needUpdate = true;
                }
            }
            onlineRewardItem.setData(i, onlineRewardsElement.OnlineTime, onlineRewardItemState, onlineRewardsElement.RewardCount, onlineRewardsElement.Icon);
            this.mCanvas.addChild(onlineRewardItem.onlineRewardItem);
            onlineRewardItem.onlineRewardItem.size = new mw.Vector2(200, 200);
            this.onlineRewardItems.push(onlineRewardItem);
            if (needUpdate)
                MapEx.set(this.needUpdateItems, i, onlineRewardItem);
            if (needTween)
                this.addNeedTweenItem(i, onlineRewardItem);
        }
    }
    /**
     * 一直在线的玩家重置数据
     * @param onlineSecond
     * @param isGetRewards
     */
    resetOnlineRewardItem(onlineSecond, isGetRewards) {
        this.needUpdateItems = {};
        for (let i = 0; i < this.onlineRewardItems.length; ++i) {
            let onlineRewardItem = this.onlineRewardItems[i];
            let onlineRewardItemState = OnlineRewardItemState.notSatisfy;
            let onlineRewardsElement = this.onlineRewardsElements[i];
            let needTime = onlineRewardsElement.OnlineTime;
            let needUpdate = false;
            if (isGetRewards[i]) {
                onlineRewardItemState = OnlineRewardItemState.getReward;
            }
            else {
                if (onlineSecond >= needTime * 60) {
                    onlineRewardItemState = OnlineRewardItemState.satisfy;
                }
                else {
                    onlineRewardItemState = OnlineRewardItemState.notSatisfy;
                    needUpdate = true;
                }
            }
            onlineRewardItem.setData(i, needTime, onlineRewardItemState, onlineRewardsElement.RewardCount, onlineRewardsElement.Icon);
            if (needUpdate)
                MapEx.set(this.needUpdateItems, i, onlineRewardItem);
        }
    }
    /**
     * 更新需要更新的Item
     * @param onlineSecond
     */
    updateNeedUpdateItems(onlineSecond) {
        if (MapEx.count(this.needUpdateItems) == 0)
            return;
        let isCanUpdateHUD = true;
        MapEx.forEach(this.needUpdateItems, (key, value) => {
            value.updateTime(onlineSecond, isCanUpdateHUD);
            isCanUpdateHUD = false;
        });
    }
    /**
     * 删除需要更新的Item
     * @param index
     */
    deleteNeedUpdateItem(index) {
        if (MapEx.has(this.needUpdateItems, index)) {
            this.addNeedTweenItem(index, MapEx.get(this.needUpdateItems, index));
            MapEx.del(this.needUpdateItems, index);
        }
    }
    /**
     * 开启|关闭需要缓动的Item
     */
    openNeedTweenItems(isOpen) {
        Console.error("MapEx.count(this.needTweenItems) = " + MapEx.count(this.needTweenItems));
        MapEx.forEach(this.needTweenItems, (key, value) => {
            isOpen ? value.startTween() : value.stopTween();
        });
    }
    /**
     * 添加需要缓动的Item
     * @param index
     * @param onlineRewardItem
     */
    addNeedTweenItem(index, onlineRewardItem) {
        MapEx.set(this.needTweenItems, index, onlineRewardItem);
        this.getHudModuleC.updateOnlineRewradIcon(this.getOnlineRewradIcon());
    }
    /**
     * 得到当前需要显示的Icon
     * @returns
     */
    getOnlineRewradIcon() {
        if (MapEx.count(this.needTweenItems) == 0)
            return "";
        for (let i = this.onlineRewardsElements.length - 1; i >= 0; --i) {
            if (MapEx.has(this.needTweenItems, i)) {
                return this.onlineRewardsElements[i].Icon;
            }
        }
        return "";
    }
    /**
     * 删除需要缓动的Item
     * @param index
     */
    deleteNeedTweenItem(index) {
        if (MapEx.has(this.needTweenItems, index)) {
            MapEx.get(this.needTweenItems, index).stopTween();
            MapEx.del(this.needTweenItems, index);
            this.getHudModuleC.updateOnlineRewradIcon(this.getOnlineRewradIcon());
        }
    }
}
class OnlineRewardItem {
    /**生成Item */
    constructor() {
        this.mButton = undefined;
        this.mTimeTextBlock = undefined;
        this.mGetRewardTextBlock = undefined;
        this.mCanRewardTextBlock = undefined;
        this.mCoinCanvas = undefined;
        this.mCoinTextBlock = undefined;
        this.mExpCanvas = undefined;
        this.mExpTextBlock = undefined;
        this.mRoleCanvas = undefined;
        this.mRoleTextBlock = undefined;
        this.hudPanel = null;
        this.index = 0;
        this.needTime = 0;
        this.onlineRewardItemState = OnlineRewardItemState.notSatisfy;
        this.rewardCounts = [];
        this.icon = "";
        this.tween1 = null;
        this.tween2 = null;
        this.onlineRewardItem = mw.createUIByName("module/OnlineReward/OnlineRewardItem");
        this.mButton = this.onlineRewardItem.findChildByPath("RootCanvas/mButton");
        this.mTimeTextBlock = this.onlineRewardItem.findChildByPath("RootCanvas/mTimeTextBlock");
        this.mGetRewardTextBlock = this.onlineRewardItem.findChildByPath("RootCanvas/mGetRewardTextBlock");
        this.mCanRewardTextBlock = this.onlineRewardItem.findChildByPath("RootCanvas/mCanRewardTextBlock");
        this.mCoinCanvas = this.onlineRewardItem.findChildByPath("RootCanvas/mCoinCanvas");
        this.mCoinTextBlock = this.onlineRewardItem.findChildByPath("RootCanvas/mCoinCanvas/mCoinTextBlock");
        this.mExpCanvas = this.onlineRewardItem.findChildByPath("RootCanvas/mExpCanvas");
        this.mExpTextBlock = this.onlineRewardItem.findChildByPath("RootCanvas/mExpCanvas/mExpTextBlock");
        this.mRoleCanvas = this.onlineRewardItem.findChildByPath("RootCanvas/mRoleCanvas");
        this.mRoleTextBlock = this.onlineRewardItem.findChildByPath("RootCanvas/mRoleCanvas/mRoleTextBlock");
        this.initTextBlock();
    }
    initTextBlock() {
        this.mCanRewardTextBlock.text = GameConfig.Language.Text_CanBeClaimed.Value;
        this.mGetRewardTextBlock.text = GameConfig.Language.Text_ReceivedAlready.Value;
    }
    get getHUDPanel() {
        if (this.hudPanel == null) {
            this.hudPanel = mw.UIService.getUI(HUDPanel);
        }
        return this.hudPanel;
    }
    /**
     * 设置数据
     */
    setData(index, needTime, onlineRewardItemState, rewardCounts, icon) {
        this.index = index;
        this.needTime = needTime * 60;
        this.onlineRewardItemState = onlineRewardItemState;
        this.rewardCounts = rewardCounts;
        this.icon = icon;
        this.initItemStateTextBlock();
        this.bindButton();
        this.initRewardTextBlock();
        this.initTween();
    }
    /**
     * 初始化Item状态文本
     */
    initItemStateTextBlock() {
        switch (this.onlineRewardItemState) {
            case OnlineRewardItemState.notSatisfy:
                this.mGetRewardTextBlock.visibility = mw.SlateVisibility.Collapsed;
                this.mCanRewardTextBlock.visibility = mw.SlateVisibility.Collapsed;
                this.mTimeTextBlock.visibility = mw.SlateVisibility.SelfHitTestInvisible;
                this.mButton.normalImageColor = mw.LinearColor.white;
                this.mTimeTextBlock.text = "00:00:00";
                break;
            case OnlineRewardItemState.satisfy:
                this.mGetRewardTextBlock.visibility = mw.SlateVisibility.Collapsed;
                this.mCanRewardTextBlock.visibility = mw.SlateVisibility.SelfHitTestInvisible;
                this.mTimeTextBlock.visibility = mw.SlateVisibility.Collapsed;
                this.mButton.normalImageColor = mw.LinearColor.white;
                break;
            case OnlineRewardItemState.getReward:
                this.onClickButtonUpdateUI();
                break;
        }
    }
    /**
     * 绑定按钮事件
     */
    bindButton() {
        this.mButton.onClicked.clear();
        this.mButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick");
            switch (this.onlineRewardItemState) {
                case OnlineRewardItemState.notSatisfy:
                    Notice.showDownNotice(GameConfig.Language.Text_InsufficientOnlineTime.Value);
                    break;
                case OnlineRewardItemState.satisfy:
                    this.onlineRewardItemState = OnlineRewardItemState.getReward;
                    ModuleService.getModule(OnlineRewardModuleC).getOnlineRewrad(this.index);
                    mw.UIService.getUI(OnlineRewardPanel).deleteNeedTweenItem(this.index);
                    this.onClickButtonUpdateUI();
                    Notice.showDownNotice(GameConfig.Language.Text_ClaimRewards.Value);
                    break;
                case OnlineRewardItemState.getReward:
                    Notice.showDownNotice(GameConfig.Language.Text_ReceivedReward.Value);
                    break;
            }
        });
        this.mButton.normalImageGuid = this.icon;
        this.mButton.pressedImageGuid = this.icon;
        this.mButton.disableImageGuid = this.icon;
        this.mButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
    }
    /**
     * 初始化奖励文本
     */
    initRewardTextBlock() {
        if (this.rewardCounts[0] == 0) {
            this.mCoinCanvas.visibility = mw.SlateVisibility.Collapsed;
        }
        else {
            this.mCoinCanvas.visibility = mw.SlateVisibility.SelfHitTestInvisible;
            this.mCoinTextBlock.text = "×" + this.rewardCounts[0];
        }
        if (this.rewardCounts[1] == 0) {
            this.mExpCanvas.visibility = mw.SlateVisibility.Collapsed;
        }
        else {
            this.mExpCanvas.visibility = mw.SlateVisibility.SelfHitTestInvisible;
            this.mExpTextBlock.text = "×" + this.rewardCounts[1];
        }
        // if (this.rewardCounts[2] == 0) {
        // this.mRoleCanvas.visibility = mw.SlateVisibility.Collapsed;
        // } else {
        // this.mRoleCanvas.visibility = mw.SlateVisibility.SelfHitTestInvisible;
        // this.mRoleTextBlock.text = "随机1" + this.rewardCounts[2] + "个\n永久套装";
        // }
        this.mRoleCanvas.visibility = mw.SlateVisibility.Collapsed;
    }
    /**
    * 点击按钮更新UI
    */
    onClickButtonUpdateUI() {
        this.mCanRewardTextBlock.visibility = mw.SlateVisibility.Collapsed;
        this.mGetRewardTextBlock.visibility = mw.SlateVisibility.SelfHitTestInvisible;
        this.mButton.normalImageColor = mw.LinearColor.gray;
        this.mTimeTextBlock.visibility = mw.SlateVisibility.SelfHitTestInvisible;
        this.mTimeTextBlock.text = "00:00:00";
    }
    /**
     * 更新时间
     * @param onlineSecond
     */
    updateTime(onlineSecond, isCanUpdateHUD) {
        let timeLeft = this.needTime - onlineSecond;
        if (timeLeft <= 0) {
            this.mTimeTextBlock.visibility = mw.SlateVisibility.Collapsed;
            this.mCanRewardTextBlock.visibility = mw.SlateVisibility.SelfHitTestInvisible;
            this.onlineRewardItemState = OnlineRewardItemState.satisfy;
            mw.UIService.getUI(OnlineRewardPanel).deleteNeedUpdateItem(this.index);
            this.startTween();
            return;
        }
        let hour = Math.floor(timeLeft / 3600);
        let minute = Math.floor((timeLeft - hour * 3600) / 60);
        let second = Math.floor(timeLeft - hour * 3600 - minute * 60);
        this.mTimeTextBlock.text =
            (hour >= 10 ? hour : "0" + hour) + ":" +
                (minute >= 10 ? minute : "0" + minute) + ":" +
                (second >= 10 ? second : "0" + second);
        if (isCanUpdateHUD)
            this.getHUDPanel.updateHUDText(this.mTimeTextBlock.text);
    }
    /**
     * 开始缓动
     */
    startTween() {
        if (this.tween1) {
            this.tween1.start();
        }
    }
    /**
     * 停止缓动
     */
    stopTween() {
        if (this.tween1) {
            this.tween1.stop();
        }
        if (this.tween2) {
            this.tween2.stop();
        }
    }
    /**
     * 初始化缓动
     */
    initTween() {
        if (this.tween1 != null)
            return;
        this.tween1 = new mw.Tween({ renderOpacity: 1 })
            .to({ renderOpacity: 0.3 }, 0.5 * 1000)
            .onUpdate((v) => {
            this.mCanRewardTextBlock.renderOpacity = v.renderOpacity;
        })
            .onComplete(() => {
            this.tween2.start();
        })
            .easing(cubicBezier(.18, .72, .28, .77));
        if (this.tween2 != null)
            return;
        this.tween2 = new mw.Tween({ renderOpacity: 0.3 })
            .to({ renderOpacity: 1 }, 0.5 * 1000)
            .onUpdate((v) => {
            this.mCanRewardTextBlock.renderOpacity = v.renderOpacity;
        })
            .onComplete(() => {
            this.tween1.start();
        })
            .easing(cubicBezier(.18, .72, .28, .77));
    }
    recycle() {
        ObjectPoolServices.getPool(OnlineRewardItem).return(this);
    }
}

var foreign62 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    OnlineRewardItem: OnlineRewardItem,
    OnlineRewardPanel: OnlineRewardPanel
});

class OnlineRewardModuleC extends ModuleC {
    constructor() {
        super(...arguments);
        this.playerModuleC = null;
        this.onlineRewardsPanel = undefined;
        /**打开关闭在线奖励界面 */
        this.onOnlineRewardsAction = new Action();
        this.onlineSecond = 0;
        this.isGetRewards = [];
        this.isNeedUpdateItem = false;
        this.isStartTimer = false;
        this.secondTimer = 0;
        this.secondTime = 1;
        this.minuteTimer = 0;
        this.minuteTime = 60;
    }
    get getPlayerModuleC() {
        if (!this.playerModuleC) {
            this.playerModuleC = ModuleService.getModule(PlayerModuleC);
        }
        return this.playerModuleC;
    }
    get getOnlineRewardsPanel() {
        if (!this.onlineRewardsPanel) {
            this.onlineRewardsPanel = mw.UIService.getUI(OnlineRewardPanel);
        }
        return this.onlineRewardsPanel;
    }
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
        this.registerAction();
    }
    /**
     * 注册事件
     */
    registerAction() {
        this.onOnlineRewardsAction.add((isOpen) => {
            this.isNeedUpdateItem = isOpen;
            isOpen ? this.getOnlineRewardsPanel.show() : this.getOnlineRewardsPanel.hideTween();
        });
    }
    /**
     * 获取在线奖励数据
     */
    net_getServerOnlineRewardData() {
        this.onlineSecond = this.data.onlineMinute * 60;
        this.isGetRewards = this.data.isGetRewards;
        this.isStartTimer = true;
        this.getOnlineRewardsPanel.initOnlineRewardItem(this.onlineSecond, this.isGetRewards);
    }
    /**
     * 重置在线奖励数据（在现状态下）
     */
    net_resetOnlineReward() {
        this.onlineSecond = this.data.onlineMinute * 60;
        this.isGetRewards = this.data.isGetRewards;
        this.getOnlineRewardsPanel.resetOnlineRewardItem(this.onlineSecond, this.isGetRewards);
        this.secondTimer = 0;
        this.minuteTimer = 0;
        this.isStartTimer = true;
        Console.error("重置在线奖励数据（在现状态下）");
    }
    /**
     * 设置领取奖励的状态
     * @param index
     * @returns
     */
    setIsGetRewards(index) {
        if (index < 0 || index >= this.isGetRewards.length)
            return;
        this.isGetRewards[index] = true;
        this.server.net_saveIsGetRewards(index);
    }
    onUpdate(dt) {
        if (!this.isStartTimer)
            return;
        this.secondTimer += dt;
        if (this.secondTimer < this.secondTime)
            return;
        this.secondTimer = 0;
        this.onlineSecond += this.secondTime;
        this.minuteTimer += this.secondTime;
        // if (this.isNeedUpdateItem)
        this.getOnlineRewardsPanel.updateNeedUpdateItems(this.onlineSecond);
        if (this.minuteTimer < this.minuteTime)
            return;
        this.minuteTimer = 0;
        this.server.net_saveOnlineMinute(1);
    }
    /**
     * 得到在线奖励
     * @param index
     */
    getOnlineRewrad(index) {
        this.setIsGetRewards(index);
        let rewardCount = GameConfig.OnlineRewards.getElement(index + 1).RewardCount;
        Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_RewardCoins.Value, rewardCount[0]));
        Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_RewardExperience.Value, rewardCount[1]));
        this.getPlayerModuleC.saveCoinAndExp(rewardCount[0], rewardCount[1]);
    }
}
var OnlineRewardItemState;
(function (OnlineRewardItemState) {
    /**不满足 */
    OnlineRewardItemState[OnlineRewardItemState["notSatisfy"] = 0] = "notSatisfy";
    /**满足未领取 */
    OnlineRewardItemState[OnlineRewardItemState["satisfy"] = 1] = "satisfy";
    /**已领取 */
    OnlineRewardItemState[OnlineRewardItemState["getReward"] = 2] = "getReward";
})(OnlineRewardItemState || (OnlineRewardItemState = {}));

var foreign60 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    get OnlineRewardItemState () { return OnlineRewardItemState; },
    OnlineRewardModuleC: OnlineRewardModuleC
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/SoulBoneModule/PartItem.ui
 * TIME: 2024.11.04-19.49.53
 */
let PartItem_Generate = class PartItem_Generate extends UIScript {
    get mBgImage() {
        if (!this.mBgImage_Internal && this.uiWidgetBase) {
            this.mBgImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mBgImage');
        }
        return this.mBgImage_Internal;
    }
    get mFgImage() {
        if (!this.mFgImage_Internal && this.uiWidgetBase) {
            this.mFgImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mFgImage');
        }
        return this.mFgImage_Internal;
    }
    get mIconBgImage() {
        if (!this.mIconBgImage_Internal && this.uiWidgetBase) {
            this.mIconBgImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mIconBgImage');
        }
        return this.mIconBgImage_Internal;
    }
    get mIconImage() {
        if (!this.mIconImage_Internal && this.uiWidgetBase) {
            this.mIconImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mIconBgImage/mIconImage');
        }
        return this.mIconImage_Internal;
    }
    get mNameTextBlock() {
        if (!this.mNameTextBlock_Internal && this.uiWidgetBase) {
            this.mNameTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mNameTextBlock');
        }
        return this.mNameTextBlock_Internal;
    }
    get mClickButton() {
        if (!this.mClickButton_Internal && this.uiWidgetBase) {
            this.mClickButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mClickButton');
        }
        return this.mClickButton_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        this.mClickButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mClickButton");
        });
        this.mClickButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mNameTextBlock);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
PartItem_Generate = __decorate([
    UIBind('UI/module/SoulBoneModule/PartItem.ui')
], PartItem_Generate);
var PartItem_Generate$1 = PartItem_Generate;

var foreign153 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: PartItem_Generate$1
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/SoulBoneModule/SoulBonePanel.ui
 * TIME: 2024.11.04-19.49.53
 */
let SoulBonePanel_Generate = class SoulBonePanel_Generate extends UIScript {
    get mMainCanvas() {
        if (!this.mMainCanvas_Internal && this.uiWidgetBase) {
            this.mMainCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMainCanvas');
        }
        return this.mMainCanvas_Internal;
    }
    get mPartListScrollBox() {
        if (!this.mPartListScrollBox_Internal && this.uiWidgetBase) {
            this.mPartListScrollBox_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMainCanvas/mPartListScrollBox');
        }
        return this.mPartListScrollBox_Internal;
    }
    get mPartListCanvas() {
        if (!this.mPartListCanvas_Internal && this.uiWidgetBase) {
            this.mPartListCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMainCanvas/mPartListScrollBox/mPartListCanvas');
        }
        return this.mPartListCanvas_Internal;
    }
    get mContentCanvas() {
        if (!this.mContentCanvas_Internal && this.uiWidgetBase) {
            this.mContentCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMainCanvas/mContentCanvas');
        }
        return this.mContentCanvas_Internal;
    }
    get mIconCanvas() {
        if (!this.mIconCanvas_Internal && this.uiWidgetBase) {
            this.mIconCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMainCanvas/mContentCanvas/mIconCanvas');
        }
        return this.mIconCanvas_Internal;
    }
    get mIconBgImage() {
        if (!this.mIconBgImage_Internal && this.uiWidgetBase) {
            this.mIconBgImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMainCanvas/mContentCanvas/mIconCanvas/mIconBgImage');
        }
        return this.mIconBgImage_Internal;
    }
    get mIconImage() {
        if (!this.mIconImage_Internal && this.uiWidgetBase) {
            this.mIconImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMainCanvas/mContentCanvas/mIconCanvas/mIconBgImage/mIconImage');
        }
        return this.mIconImage_Internal;
    }
    get mNameFgImage() {
        if (!this.mNameFgImage_Internal && this.uiWidgetBase) {
            this.mNameFgImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMainCanvas/mContentCanvas/mIconCanvas/mNameFgImage');
        }
        return this.mNameFgImage_Internal;
    }
    get mNameTextBlock() {
        if (!this.mNameTextBlock_Internal && this.uiWidgetBase) {
            this.mNameTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMainCanvas/mContentCanvas/mIconCanvas/mNameFgImage/mNameTextBlock');
        }
        return this.mNameTextBlock_Internal;
    }
    get mStarCanvas() {
        if (!this.mStarCanvas_Internal && this.uiWidgetBase) {
            this.mStarCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMainCanvas/mContentCanvas/mIconCanvas/mStarCanvas');
        }
        return this.mStarCanvas_Internal;
    }
    get mPropertyCanvas() {
        if (!this.mPropertyCanvas_Internal && this.uiWidgetBase) {
            this.mPropertyCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMainCanvas/mContentCanvas/mPropertyCanvas');
        }
        return this.mPropertyCanvas_Internal;
    }
    get mHpCanvas() {
        if (!this.mHpCanvas_Internal && this.uiWidgetBase) {
            this.mHpCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMainCanvas/mContentCanvas/mPropertyCanvas/mHpCanvas');
        }
        return this.mHpCanvas_Internal;
    }
    get mHpTextBlock() {
        if (!this.mHpTextBlock_Internal && this.uiWidgetBase) {
            this.mHpTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMainCanvas/mContentCanvas/mPropertyCanvas/mHpCanvas/HpTitleImage/mHpTextBlock');
        }
        return this.mHpTextBlock_Internal;
    }
    get mHpArrowImage() {
        if (!this.mHpArrowImage_Internal && this.uiWidgetBase) {
            this.mHpArrowImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMainCanvas/mContentCanvas/mPropertyCanvas/mHpCanvas/mHpArrowImage');
        }
        return this.mHpArrowImage_Internal;
    }
    get mHpTipsTextBlock() {
        if (!this.mHpTipsTextBlock_Internal && this.uiWidgetBase) {
            this.mHpTipsTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMainCanvas/mContentCanvas/mPropertyCanvas/mHpCanvas/mHpArrowImage/mHpTipsTextBlock');
        }
        return this.mHpTipsTextBlock_Internal;
    }
    get mHpedTextBlock() {
        if (!this.mHpedTextBlock_Internal && this.uiWidgetBase) {
            this.mHpedTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMainCanvas/mContentCanvas/mPropertyCanvas/mHpCanvas/mHpArrowImage/mHpedTextBlock');
        }
        return this.mHpedTextBlock_Internal;
    }
    get mHpLineImage() {
        if (!this.mHpLineImage_Internal && this.uiWidgetBase) {
            this.mHpLineImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMainCanvas/mContentCanvas/mPropertyCanvas/mHpCanvas/mHpLineImage');
        }
        return this.mHpLineImage_Internal;
    }
    get mAtkCanvas() {
        if (!this.mAtkCanvas_Internal && this.uiWidgetBase) {
            this.mAtkCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMainCanvas/mContentCanvas/mPropertyCanvas/mAtkCanvas');
        }
        return this.mAtkCanvas_Internal;
    }
    get mAtkTextBlock() {
        if (!this.mAtkTextBlock_Internal && this.uiWidgetBase) {
            this.mAtkTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMainCanvas/mContentCanvas/mPropertyCanvas/mAtkCanvas/AtkTitleImage/mAtkTextBlock');
        }
        return this.mAtkTextBlock_Internal;
    }
    get mAtkArrowImage() {
        if (!this.mAtkArrowImage_Internal && this.uiWidgetBase) {
            this.mAtkArrowImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMainCanvas/mContentCanvas/mPropertyCanvas/mAtkCanvas/mAtkArrowImage');
        }
        return this.mAtkArrowImage_Internal;
    }
    get mAtkTipsTextBlock() {
        if (!this.mAtkTipsTextBlock_Internal && this.uiWidgetBase) {
            this.mAtkTipsTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMainCanvas/mContentCanvas/mPropertyCanvas/mAtkCanvas/mAtkArrowImage/mAtkTipsTextBlock');
        }
        return this.mAtkTipsTextBlock_Internal;
    }
    get mAtkedTextBlock() {
        if (!this.mAtkedTextBlock_Internal && this.uiWidgetBase) {
            this.mAtkedTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMainCanvas/mContentCanvas/mPropertyCanvas/mAtkCanvas/mAtkArrowImage/mAtkedTextBlock');
        }
        return this.mAtkedTextBlock_Internal;
    }
    get mAtkLineImage() {
        if (!this.mAtkLineImage_Internal && this.uiWidgetBase) {
            this.mAtkLineImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMainCanvas/mContentCanvas/mPropertyCanvas/mAtkCanvas/mAtkLineImage');
        }
        return this.mAtkLineImage_Internal;
    }
    get mNeedInfoCanvas() {
        if (!this.mNeedInfoCanvas_Internal && this.uiWidgetBase) {
            this.mNeedInfoCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMainCanvas/mContentCanvas/mNeedInfoCanvas');
        }
        return this.mNeedInfoCanvas_Internal;
    }
    get mNeedTitleTextBlock() {
        if (!this.mNeedTitleTextBlock_Internal && this.uiWidgetBase) {
            this.mNeedTitleTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMainCanvas/mContentCanvas/mNeedInfoCanvas/NeedInfoBgImage/mNeedTitleTextBlock');
        }
        return this.mNeedTitleTextBlock_Internal;
    }
    get mNeedLvCanvas() {
        if (!this.mNeedLvCanvas_Internal && this.uiWidgetBase) {
            this.mNeedLvCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMainCanvas/mContentCanvas/mNeedInfoCanvas/mNeedLvCanvas');
        }
        return this.mNeedLvCanvas_Internal;
    }
    get mNeedLvCountTextBlock() {
        if (!this.mNeedLvCountTextBlock_Internal && this.uiWidgetBase) {
            this.mNeedLvCountTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMainCanvas/mContentCanvas/mNeedInfoCanvas/mNeedLvCanvas/mNeedLvCountTextBlock');
        }
        return this.mNeedLvCountTextBlock_Internal;
    }
    get mNeedDianondtCanvas() {
        if (!this.mNeedDianondtCanvas_Internal && this.uiWidgetBase) {
            this.mNeedDianondtCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMainCanvas/mContentCanvas/mNeedInfoCanvas/mNeedDianondtCanvas');
        }
        return this.mNeedDianondtCanvas_Internal;
    }
    get mNeedDiamondTipsTextBlock() {
        if (!this.mNeedDiamondTipsTextBlock_Internal && this.uiWidgetBase) {
            this.mNeedDiamondTipsTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMainCanvas/mContentCanvas/mNeedInfoCanvas/mNeedDianondtCanvas/mNeedDiamondTipsTextBlock');
        }
        return this.mNeedDiamondTipsTextBlock_Internal;
    }
    get mNeedDiamondIconBgImage() {
        if (!this.mNeedDiamondIconBgImage_Internal && this.uiWidgetBase) {
            this.mNeedDiamondIconBgImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMainCanvas/mContentCanvas/mNeedInfoCanvas/mNeedDianondtCanvas/mNeedDiamondIconBgImage');
        }
        return this.mNeedDiamondIconBgImage_Internal;
    }
    get mNeedDiamondIconImage() {
        if (!this.mNeedDiamondIconImage_Internal && this.uiWidgetBase) {
            this.mNeedDiamondIconImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMainCanvas/mContentCanvas/mNeedInfoCanvas/mNeedDianondtCanvas/mNeedDiamondIconBgImage/mNeedDiamondIconImage');
        }
        return this.mNeedDiamondIconImage_Internal;
    }
    get mNeedDiamondCountTextBlock() {
        if (!this.mNeedDiamondCountTextBlock_Internal && this.uiWidgetBase) {
            this.mNeedDiamondCountTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMainCanvas/mContentCanvas/mNeedInfoCanvas/mNeedDianondtCanvas/mNeedDiamondCountTextBlock');
        }
        return this.mNeedDiamondCountTextBlock_Internal;
    }
    get mNeedCoinCanvas() {
        if (!this.mNeedCoinCanvas_Internal && this.uiWidgetBase) {
            this.mNeedCoinCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMainCanvas/mContentCanvas/mNeedInfoCanvas/mNeedCoinCanvas');
        }
        return this.mNeedCoinCanvas_Internal;
    }
    get mNeedCionTitleImage() {
        if (!this.mNeedCionTitleImage_Internal && this.uiWidgetBase) {
            this.mNeedCionTitleImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMainCanvas/mContentCanvas/mNeedInfoCanvas/mNeedCoinCanvas/mNeedCionTitleImage');
        }
        return this.mNeedCionTitleImage_Internal;
    }
    get mNeedCoinTextBlock() {
        if (!this.mNeedCoinTextBlock_Internal && this.uiWidgetBase) {
            this.mNeedCoinTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMainCanvas/mContentCanvas/mNeedInfoCanvas/mNeedCoinCanvas/mNeedCoinTextBlock');
        }
        return this.mNeedCoinTextBlock_Internal;
    }
    get mNeedCoinIconBgImage() {
        if (!this.mNeedCoinIconBgImage_Internal && this.uiWidgetBase) {
            this.mNeedCoinIconBgImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMainCanvas/mContentCanvas/mNeedInfoCanvas/mNeedCoinCanvas/mNeedCoinIconBgImage');
        }
        return this.mNeedCoinIconBgImage_Internal;
    }
    get mNeedCoinIconImage() {
        if (!this.mNeedCoinIconImage_Internal && this.uiWidgetBase) {
            this.mNeedCoinIconImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMainCanvas/mContentCanvas/mNeedInfoCanvas/mNeedCoinCanvas/mNeedCoinIconBgImage/mNeedCoinIconImage');
        }
        return this.mNeedCoinIconImage_Internal;
    }
    get mNeedCoinCountTextBlock() {
        if (!this.mNeedCoinCountTextBlock_Internal && this.uiWidgetBase) {
            this.mNeedCoinCountTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMainCanvas/mContentCanvas/mNeedInfoCanvas/mNeedCoinCanvas/mNeedCoinCountTextBlock');
        }
        return this.mNeedCoinCountTextBlock_Internal;
    }
    get mNeedBoneCanvas() {
        if (!this.mNeedBoneCanvas_Internal && this.uiWidgetBase) {
            this.mNeedBoneCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMainCanvas/mContentCanvas/mNeedInfoCanvas/mNeedBoneCanvas');
        }
        return this.mNeedBoneCanvas_Internal;
    }
    get mNeedBoneTitleImage() {
        if (!this.mNeedBoneTitleImage_Internal && this.uiWidgetBase) {
            this.mNeedBoneTitleImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMainCanvas/mContentCanvas/mNeedInfoCanvas/mNeedBoneCanvas/mNeedBoneTitleImage');
        }
        return this.mNeedBoneTitleImage_Internal;
    }
    get mNeedBoneTextBlock() {
        if (!this.mNeedBoneTextBlock_Internal && this.uiWidgetBase) {
            this.mNeedBoneTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMainCanvas/mContentCanvas/mNeedInfoCanvas/mNeedBoneCanvas/mNeedBoneTextBlock');
        }
        return this.mNeedBoneTextBlock_Internal;
    }
    get mNeedBoneIconBgImage() {
        if (!this.mNeedBoneIconBgImage_Internal && this.uiWidgetBase) {
            this.mNeedBoneIconBgImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMainCanvas/mContentCanvas/mNeedInfoCanvas/mNeedBoneCanvas/mNeedBoneIconBgImage');
        }
        return this.mNeedBoneIconBgImage_Internal;
    }
    get mNeedBoneIconImage() {
        if (!this.mNeedBoneIconImage_Internal && this.uiWidgetBase) {
            this.mNeedBoneIconImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMainCanvas/mContentCanvas/mNeedInfoCanvas/mNeedBoneCanvas/mNeedBoneIconBgImage/mNeedBoneIconImage');
        }
        return this.mNeedBoneIconImage_Internal;
    }
    get mNeedBoneCountTextBlock() {
        if (!this.mNeedBoneCountTextBlock_Internal && this.uiWidgetBase) {
            this.mNeedBoneCountTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMainCanvas/mContentCanvas/mNeedInfoCanvas/mNeedBoneCanvas/mNeedBoneCountTextBlock');
        }
        return this.mNeedBoneCountTextBlock_Internal;
    }
    get mHasMaxLvTextBlock() {
        if (!this.mHasMaxLvTextBlock_Internal && this.uiWidgetBase) {
            this.mHasMaxLvTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMainCanvas/mContentCanvas/mHasMaxLvTextBlock');
        }
        return this.mHasMaxLvTextBlock_Internal;
    }
    get mStrengthenCanvas() {
        if (!this.mStrengthenCanvas_Internal && this.uiWidgetBase) {
            this.mStrengthenCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMainCanvas/mContentCanvas/mStrengthenCanvas');
        }
        return this.mStrengthenCanvas_Internal;
    }
    get mProbabilityTextBlock() {
        if (!this.mProbabilityTextBlock_Internal && this.uiWidgetBase) {
            this.mProbabilityTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMainCanvas/mContentCanvas/mStrengthenCanvas/mProbabilityTextBlock');
        }
        return this.mProbabilityTextBlock_Internal;
    }
    get mUpProbabilityButton() {
        if (!this.mUpProbabilityButton_Internal && this.uiWidgetBase) {
            this.mUpProbabilityButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMainCanvas/mContentCanvas/mStrengthenCanvas/mUpProbabilityButton');
        }
        return this.mUpProbabilityButton_Internal;
    }
    get mUpProbabilityTextBlock() {
        if (!this.mUpProbabilityTextBlock_Internal && this.uiWidgetBase) {
            this.mUpProbabilityTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMainCanvas/mContentCanvas/mStrengthenCanvas/mUpProbabilityButton/mUpProbabilityTextBlock');
        }
        return this.mUpProbabilityTextBlock_Internal;
    }
    get mStrengthenButton() {
        if (!this.mStrengthenButton_Internal && this.uiWidgetBase) {
            this.mStrengthenButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMainCanvas/mContentCanvas/mStrengthenCanvas/mStrengthenButton');
        }
        return this.mStrengthenButton_Internal;
    }
    get mStrengthenTextBlock() {
        if (!this.mStrengthenTextBlock_Internal && this.uiWidgetBase) {
            this.mStrengthenTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMainCanvas/mContentCanvas/mStrengthenCanvas/mStrengthenButton/mStrengthenTextBlock');
        }
        return this.mStrengthenTextBlock_Internal;
    }
    get mMoneyCanvas() {
        if (!this.mMoneyCanvas_Internal && this.uiWidgetBase) {
            this.mMoneyCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMoneyCanvas');
        }
        return this.mMoneyCanvas_Internal;
    }
    get mIconBoneImage() {
        if (!this.mIconBoneImage_Internal && this.uiWidgetBase) {
            this.mIconBoneImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMoneyCanvas/MoneyCanvas/BoneCanvas/mIconBoneImage');
        }
        return this.mIconBoneImage_Internal;
    }
    get mBoneCountTextBlock() {
        if (!this.mBoneCountTextBlock_Internal && this.uiWidgetBase) {
            this.mBoneCountTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMoneyCanvas/MoneyCanvas/BoneCanvas/mBoneCountTextBlock');
        }
        return this.mBoneCountTextBlock_Internal;
    }
    get mIconCoinImage() {
        if (!this.mIconCoinImage_Internal && this.uiWidgetBase) {
            this.mIconCoinImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMoneyCanvas/MoneyCanvas/CoinCanvas/mIconCoinImage');
        }
        return this.mIconCoinImage_Internal;
    }
    get mCoinCountTextBlock() {
        if (!this.mCoinCountTextBlock_Internal && this.uiWidgetBase) {
            this.mCoinCountTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMoneyCanvas/MoneyCanvas/CoinCanvas/mCoinCountTextBlock');
        }
        return this.mCoinCountTextBlock_Internal;
    }
    get mIconDiamondImage() {
        if (!this.mIconDiamondImage_Internal && this.uiWidgetBase) {
            this.mIconDiamondImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMoneyCanvas/MoneyCanvas/DiamondCanvas/mIconDiamondImage');
        }
        return this.mIconDiamondImage_Internal;
    }
    get mDiamondCountTextBlock() {
        if (!this.mDiamondCountTextBlock_Internal && this.uiWidgetBase) {
            this.mDiamondCountTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMoneyCanvas/MoneyCanvas/DiamondCanvas/mDiamondCountTextBlock');
        }
        return this.mDiamondCountTextBlock_Internal;
    }
    get mIconArkImage() {
        if (!this.mIconArkImage_Internal && this.uiWidgetBase) {
            this.mIconArkImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMoneyCanvas/MoneyCanvas/ArkCanvas/mIconArkImage');
        }
        return this.mIconArkImage_Internal;
    }
    get mArkCountTextBlock() {
        if (!this.mArkCountTextBlock_Internal && this.uiWidgetBase) {
            this.mArkCountTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMoneyCanvas/MoneyCanvas/ArkCanvas/mArkCountTextBlock');
        }
        return this.mArkCountTextBlock_Internal;
    }
    get mTotalRarityImage() {
        if (!this.mTotalRarityImage_Internal && this.uiWidgetBase) {
            this.mTotalRarityImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mTotalRarityImage');
        }
        return this.mTotalRarityImage_Internal;
    }
    get mTotalRarityTextBlock() {
        if (!this.mTotalRarityTextBlock_Internal && this.uiWidgetBase) {
            this.mTotalRarityTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mTotalRarityImage/mTotalRarityTextBlock');
        }
        return this.mTotalRarityTextBlock_Internal;
    }
    get mTitleTextBlock() {
        if (!this.mTitleTextBlock_Internal && this.uiWidgetBase) {
            this.mTitleTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/TitleBgImage/mTitleTextBlock');
        }
        return this.mTitleTextBlock_Internal;
    }
    get mCloseButton() {
        if (!this.mCloseButton_Internal && this.uiWidgetBase) {
            this.mCloseButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mCloseButton');
        }
        return this.mCloseButton_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        this.mUpProbabilityButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mUpProbabilityButton");
        });
        this.mUpProbabilityButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mStrengthenButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mStrengthenButton");
        });
        this.mStrengthenButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mCloseButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mCloseButton");
        });
        this.mCloseButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mNameTextBlock);
        this.initLanguage(this.mHpTextBlock);
        this.initLanguage(this.mHpTipsTextBlock);
        this.initLanguage(this.mHpedTextBlock);
        this.initLanguage(this.mAtkTextBlock);
        this.initLanguage(this.mAtkTipsTextBlock);
        this.initLanguage(this.mAtkedTextBlock);
        this.initLanguage(this.mNeedTitleTextBlock);
        this.initLanguage(this.mNeedLvCountTextBlock);
        this.initLanguage(this.mNeedDiamondTipsTextBlock);
        this.initLanguage(this.mNeedDiamondCountTextBlock);
        this.initLanguage(this.mNeedCoinTextBlock);
        this.initLanguage(this.mNeedCoinCountTextBlock);
        this.initLanguage(this.mNeedBoneTextBlock);
        this.initLanguage(this.mNeedBoneCountTextBlock);
        this.initLanguage(this.mHasMaxLvTextBlock);
        this.initLanguage(this.mProbabilityTextBlock);
        this.initLanguage(this.mUpProbabilityTextBlock);
        this.initLanguage(this.mStrengthenTextBlock);
        this.initLanguage(this.mBoneCountTextBlock);
        this.initLanguage(this.mCoinCountTextBlock);
        this.initLanguage(this.mDiamondCountTextBlock);
        this.initLanguage(this.mArkCountTextBlock);
        this.initLanguage(this.mTotalRarityTextBlock);
        this.initLanguage(this.mTitleTextBlock);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
SoulBonePanel_Generate = __decorate([
    UIBind('UI/module/SoulBoneModule/SoulBonePanel.ui')
], SoulBonePanel_Generate);
var SoulBonePanel_Generate$1 = SoulBonePanel_Generate;

var foreign154 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: SoulBonePanel_Generate$1
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/SoulBoneModule/StarItem.ui
 * TIME: 2024.11.04-19.49.53
 */
let StarItem_Generate = class StarItem_Generate extends UIScript {
    get mBgImage() {
        if (!this.mBgImage_Internal && this.uiWidgetBase) {
            this.mBgImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mBgImage');
        }
        return this.mBgImage_Internal;
    }
    get mFgImage() {
        if (!this.mFgImage_Internal && this.uiWidgetBase) {
            this.mFgImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mFgImage');
        }
        return this.mFgImage_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        //按钮多语言
        //文本多语言
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
StarItem_Generate = __decorate([
    UIBind('UI/module/SoulBoneModule/StarItem.ui')
], StarItem_Generate);
var StarItem_Generate$1 = StarItem_Generate;

var foreign155 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: StarItem_Generate$1
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/SoulBoneModule/UpProbabilityPanel.ui
 * TIME: 2024.11.04-19.49.53
 */
let UpProbabilityPanel_Generate = class UpProbabilityPanel_Generate extends UIScript {
    get mCloseButton() {
        if (!this.mCloseButton_Internal && this.uiWidgetBase) {
            this.mCloseButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/BgImage/mCloseButton');
        }
        return this.mCloseButton_Internal;
    }
    get mContentTextBlock_0() {
        if (!this.mContentTextBlock_0_Internal && this.uiWidgetBase) {
            this.mContentTextBlock_0_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/BgImage/mContentTextBlock_0');
        }
        return this.mContentTextBlock_0_Internal;
    }
    get mContentTextBlock_1() {
        if (!this.mContentTextBlock_1_Internal && this.uiWidgetBase) {
            this.mContentTextBlock_1_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/BgImage/mContentTextBlock_1');
        }
        return this.mContentTextBlock_1_Internal;
    }
    get mContentTextBlock_2() {
        if (!this.mContentTextBlock_2_Internal && this.uiWidgetBase) {
            this.mContentTextBlock_2_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/BgImage/mContentTextBlock_2');
        }
        return this.mContentTextBlock_2_Internal;
    }
    get mDiamondButton() {
        if (!this.mDiamondButton_Internal && this.uiWidgetBase) {
            this.mDiamondButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/BgImage/mDiamondButton');
        }
        return this.mDiamondButton_Internal;
    }
    get mDiamondTextBlock() {
        if (!this.mDiamondTextBlock_Internal && this.uiWidgetBase) {
            this.mDiamondTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/BgImage/mDiamondButton/mDiamondTextBlock');
        }
        return this.mDiamondTextBlock_Internal;
    }
    get mArkButton() {
        if (!this.mArkButton_Internal && this.uiWidgetBase) {
            this.mArkButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/BgImage/mArkButton');
        }
        return this.mArkButton_Internal;
    }
    get mArkTextBlock() {
        if (!this.mArkTextBlock_Internal && this.uiWidgetBase) {
            this.mArkTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/BgImage/mArkButton/mArkTextBlock');
        }
        return this.mArkTextBlock_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        this.mCloseButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mCloseButton");
        });
        this.mCloseButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mDiamondButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mDiamondButton");
        });
        this.mDiamondButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mArkButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mArkButton");
        });
        this.mArkButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mContentTextBlock_0);
        this.initLanguage(this.mContentTextBlock_1);
        this.initLanguage(this.mContentTextBlock_2);
        this.initLanguage(this.mDiamondTextBlock);
        this.initLanguage(this.mArkTextBlock);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
UpProbabilityPanel_Generate = __decorate([
    UIBind('UI/module/SoulBoneModule/UpProbabilityPanel.ui')
], UpProbabilityPanel_Generate);
var UpProbabilityPanel_Generate$1 = UpProbabilityPanel_Generate;

var foreign156 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: UpProbabilityPanel_Generate$1
});

class StarItem extends StarItem_Generate$1 {
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
    }
    setStar(isStar) {
        this.mFgImage.visibility = isStar ? mw.SlateVisibility.SelfHitTestInvisible : mw.SlateVisibility.Collapsed;
    }
}
class PartItem extends PartItem_Generate$1 {
    constructor() {
        super(...arguments);
        this.soulBonePanel = null;
        this.soulBoneData = null;
    }
    get getSoulBonePanel() {
        if (!this.soulBonePanel) {
            this.soulBonePanel = mw.UIService.getUI(SoulBonePanel);
        }
        return this.soulBonePanel;
    }
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
        this.initUI();
        this.bindButton();
    }
    initUI() {
        Utils.setWidgetVisibility(this.mFgImage, mw.SlateVisibility.Collapsed);
        if (GlobalData.languageId == 0) {
            this.mNameTextBlock.fontSize = 15;
        }
        else {
            this.mNameTextBlock.fontSize = 20;
        }
    }
    bindButton() {
        this.mClickButton.onClicked.add(this.addClickButton.bind(this));
    }
    addClickButton() {
        this.getSoulBonePanel.selectPart(this.soulBoneData.id);
    }
    setData(soulBoneData) {
        this.soulBoneData = soulBoneData;
        this.setIcon();
        this.setName();
    }
    setIcon() {
        let iconStr = this.soulBoneData.icon.split(`_`);
        if (iconStr[0] == `icon`) {
            this.mIconImage.imageGuid = iconStr[1];
        }
        else if (iconStr[0] == `mode`) {
            Utils.setImageByAssetIconData(this.mIconImage, iconStr[1]);
        }
    }
    setName() {
        this.mNameTextBlock.text = GameConfig.Language[`${this.soulBoneData.name}`].Value;
    }
    setSelect(isSelect) {
        Utils.setWidgetVisibility(this.mFgImage, isSelect ? mw.SlateVisibility.SelfHitTestInvisible : mw.SlateVisibility.Collapsed);
    }
}
class SoulBonePanel extends SoulBonePanel_Generate$1 {
    constructor() {
        super(...arguments);
        this.soulBoneModuleC = null;
        this.hudPanel = null;
        this.partItems = [];
        this.currentSelectPartId = -1;
        this.currentSoulBoneData = null;
        this.soulBoneLv = 0;
        this.starItems = [];
    }
    get getSoulBoneModuleC() {
        if (!this.soulBoneModuleC) {
            this.soulBoneModuleC = ModuleService.getModule(SoulBoneModuleC);
        }
        return this.soulBoneModuleC;
    }
    get getHudPanel() {
        if (!this.hudPanel) {
            this.hudPanel = mw.UIService.getUI(HUDPanel);
        }
        return this.hudPanel;
    }
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
        this.initUI();
        this.bindButton();
        this.initTextBlock();
        this.initIconImage();
    }
    initIconImage() {
        this.mIconCoinImage.imageGuid = GlobalData.coinIcon;
        this.mIconDiamondImage.imageGuid = GlobalData.diamondIcon;
        this.mIconArkImage.imageGuid = GlobalData.arkIcon;
        this.mIconBoneImage.imageGuid = GlobalData.boneIcon;
        this.mNeedDiamondIconImage.imageGuid = GlobalData.diamondIcon;
        this.mNeedCoinIconImage.imageGuid = GlobalData.coinIcon;
        this.mNeedBoneIconImage.imageGuid = GlobalData.boneIcon;
    }
    initUI() {
        soulBoneMap.forEach((value, key) => {
            let partItem = mw.UIService.create(PartItem);
            partItem.setData(value);
            this.partItems.push(partItem);
            this.mPartListCanvas.addChild(partItem.uiObject);
        });
        this.selectPart(0);
        this.updateTotalUpStarOffsetValue();
    }
    initTextBlock() {
        this.mTitleTextBlock.text = GameConfig.Language.Text_StrengthenSoulBones.Value;
        let afterStrengthening = GameConfig.Language.Text_AfterStrengthening.Value;
        this.mHpTipsTextBlock.text = afterStrengthening;
        this.mAtkTipsTextBlock.text = afterStrengthening;
        this.mNeedTitleTextBlock.text = GameConfig.Language.Text_StrengtheningConditions.Value;
        this.mNeedDiamondTipsTextBlock.text = GameConfig.Language.Text_NeedToConsume.Value;
        this.mNeedCoinTextBlock.text = GameConfig.Language.Text_NeedToConsume.Value;
        this.mNeedBoneTextBlock.text = GameConfig.Language.Text_NeedToConsume.Value;
        this.mUpProbabilityTextBlock.text = GameConfig.Language.Text_IncreaseProbability.Value;
        this.mStrengthenTextBlock.text = GameConfig.Language.Text_StartStrengthening.Value;
        this.mHasMaxLvTextBlock.text = GameConfig.Language.Text_FullLevel.Value;
        if (GlobalData.languageId == 0) {
            this.mProbabilityTextBlock.fontSize = 15;
            this.mHpTextBlock.fontSize = 18;
            this.mHpedTextBlock.fontSize = 18;
            this.mAtkTextBlock.fontSize = 18;
            this.mAtkedTextBlock.fontSize = 18;
            this.mHpTipsTextBlock.fontSize = 15;
            this.mAtkTipsTextBlock.fontSize = 15;
            this.mStrengthenTextBlock.fontSize = 28;
            this.mTitleTextBlock.fontSize = 50;
        }
        else {
            this.mProbabilityTextBlock.fontSize = 30;
            this.mHpTextBlock.fontSize = 30;
            this.mHpedTextBlock.fontSize = 30;
            this.mAtkTextBlock.fontSize = 30;
            this.mAtkedTextBlock.fontSize = 30;
            this.mHpTipsTextBlock.fontSize = 30;
            this.mAtkTipsTextBlock.fontSize = 30;
            this.mStrengthenTextBlock.fontSize = 40;
            this.mTitleTextBlock.fontSize = 80;
        }
    }
    bindButton() {
        this.mCloseButton.onClicked.add(this.addCloseButton.bind(this));
        this.mUpProbabilityButton.onClicked.add(this.addUpProbabilityButton.bind(this));
        this.mStrengthenButton.onClicked.add(this.addStrengthenButton.bind(this));
    }
    addCloseButton() {
        this.hideTween();
    }
    updateCoinTextBlock(count) {
        this.mCoinCountTextBlock.text = `${Utils.integerUnitConversionStr(count)}`;
    }
    updateArkTextBlock(arkCount) {
        this.mArkCountTextBlock.text = `${arkCount}`;
    }
    updateDiamondTextBlock(count) {
        this.mDiamondCountTextBlock.text = `${Utils.integerUnitConversionStr(count)}`;
    }
    updateBoneTextBlock(count) {
        this.mBoneCountTextBlock.text = `${count}`;
    }
    updateTotalUpStarOffsetValue() {
        let totalUpStarOffsetValue = Number((this.getSoulBoneModuleC.getTotalUpStarOffsetValue + 1).toFixed(2));
        this.mTotalRarityTextBlock.text = `${StringUtil.format(GameConfig.Language.Text_IncreaseBloodVolumeByTimes.Value, totalUpStarOffsetValue)}
        \n${StringUtil.format(GameConfig.Language.Text_AttackPowerIncreasedByTimes.Value, totalUpStarOffsetValue)}`;
    }
    selectPart(partId) {
        if (this.currentSelectPartId >= 0)
            this.partItems[this.currentSelectPartId].setSelect(false);
        this.currentSelectPartId = partId;
        this.currentSoulBoneData = soulBoneMap.get(partId);
        this.partItems[partId].setSelect(true);
        this.refreshContentUI();
    }
    refreshContentUI() {
        this.soulBoneLv = this.getSoulBoneModuleC.getSoulBoneLv(this.currentSelectPartId);
        this.setHeadInfo();
        this.setPropertyInfo();
    }
    setHeadInfo() {
        let iconStr = soulBoneMap.get(this.currentSelectPartId).icon.split(`_`);
        if (iconStr[0] == `icon`) {
            this.mIconImage.imageGuid = iconStr[1];
        }
        else if (iconStr[0] == `mode`) {
            Utils.setImageByAssetIconData(this.mIconImage, iconStr[1]);
        }
        this.mNameTextBlock.text = StringUtil.format(GameConfig.Language.Text_StarRating.Value, this.soulBoneLv);
        this.setStars();
    }
    setStars() {
        if (!this.starItems || this.starItems.length == 0) {
            this.starItems = [];
            for (let i = 0; i < maxStarLv; ++i) {
                let starItem = mw.UIService.create(StarItem);
                this.starItems.push(starItem);
                this.mStarCanvas.addChild(starItem.uiObject);
            }
        }
        for (let i = 0; i < this.soulBoneLv; ++i) {
            this.starItems[i].setStar(true);
        }
        for (let i = this.soulBoneLv; i < maxStarLv; ++i) {
            this.starItems[i].setStar(false);
        }
    }
    setPropertyInfo() {
        this.setPropertyArrowVisibility();
    }
    setPropertyArrowVisibility() {
        if (this.soulBoneLv == maxStarLv) {
            this.mHasMaxLvTextBlock.visibility = mw.SlateVisibility.SelfHitTestInvisible;
            this.mHpArrowImage.visibility = mw.SlateVisibility.Collapsed;
            this.mAtkArrowImage.visibility = mw.SlateVisibility.Collapsed;
            this.mNeedInfoCanvas.visibility = mw.SlateVisibility.Collapsed;
            this.mStrengthenCanvas.visibility = mw.SlateVisibility.Collapsed;
        }
        else {
            this.mHasMaxLvTextBlock.visibility = mw.SlateVisibility.Collapsed;
            this.mHpArrowImage.visibility = mw.SlateVisibility.SelfHitTestInvisible;
            this.mAtkArrowImage.visibility = mw.SlateVisibility.SelfHitTestInvisible;
            this.mNeedInfoCanvas.visibility = mw.SlateVisibility.SelfHitTestInvisible;
            this.mStrengthenCanvas.visibility = mw.SlateVisibility.SelfHitTestInvisible;
            this.setHpPropertyInfo();
            this.setAtkPropertyInfo();
            this.setNeedInfo();
            this.setStrengthenButtonState();
        }
    }
    setHpPropertyInfo() {
        let currentHpMultiple = 1 + (this.soulBoneLv * upStarOffsetValue);
        let nextHpMultiple = 1 + ((this.soulBoneLv + 1) * upStarOffsetValue);
        this.mHpTextBlock.text = StringUtil.format(GameConfig.Language.Text_IncreaseBloodVolumeByTimes.Value, currentHpMultiple.toFixed(2));
        this.mHpedTextBlock.text = StringUtil.format(GameConfig.Language.Text_IncreaseBloodVolumeByTimes.Value, nextHpMultiple.toFixed(2));
    }
    setAtkPropertyInfo() {
        let currentAtkMultiple = 1 + (this.soulBoneLv * upStarOffsetValue);
        let nextAtkMultiple = 1 + ((this.soulBoneLv + 1) * upStarOffsetValue);
        this.mAtkTextBlock.text = StringUtil.format(GameConfig.Language.Text_AttackPowerIncreasedByTimes.Value, currentAtkMultiple.toFixed(2));
        this.mAtkedTextBlock.text = StringUtil.format(GameConfig.Language.Text_AttackPowerIncreasedByTimes.Value, nextAtkMultiple.toFixed(2));
    }
    setNeedInfo() {
        this.setNeedLv();
        this.setNeedDiamondCost();
        this.setNeedCoinCost();
        this.setNeedBoneCost();
    }
    setNeedLv() {
        let limitLv = this.currentSoulBoneData.limitLv;
        this.mNeedLvCountTextBlock.text = `${StringUtil.format(GameConfig.Language.Text_NeedToReachLevel.Value, limitLv)}(${limitLv}/${this.getSoulBoneModuleC.getLevel})`;
    }
    setNeedDiamondCost() {
        let diamond = this.currentSoulBoneData.diamonds[this.soulBoneLv];
        this.mNeedDiamondCountTextBlock.text = `${diamond}/${this.getSoulBoneModuleC.getDiamond}`;
    }
    setNeedCoinCost() {
        let coin = this.currentSoulBoneData.coins[this.soulBoneLv];
        this.mNeedCoinCountTextBlock.text = `${coin}/${this.getSoulBoneModuleC.getCoin}`;
    }
    setNeedBoneCost() {
        let bone = this.currentSoulBoneData.soulBones[this.soulBoneLv];
        this.mNeedBoneCountTextBlock.text = `${bone}/${this.getSoulBoneModuleC.getBone}`;
    }
    setStrengthenButtonState() {
        this.mProbabilityTextBlock.text = StringUtil.format(GameConfig.Language.Text_EnhanceTheProbabilityOfSuccess.Value, this.getSoulBoneModuleC.getProbability);
    }
    addUpProbabilityButton() {
        this.getSoulBoneModuleC.upProbability(() => {
            this.setStrengthenButtonState();
        });
    }
    addStrengthenButton() {
        if (this.currentSoulBoneData.limitLv > this.getSoulBoneModuleC.getLevel) {
            Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_NeedToReachLevel.Value, this.currentSoulBoneData.limitLv));
            return;
        }
        let costCoin = this.currentSoulBoneData.coins[this.soulBoneLv];
        if (costCoin > this.getSoulBoneModuleC.getCoin) {
            Notice.showDownNotice(GameConfig.Language.Text_InsufficientGoldCoins.Value);
            return;
        }
        let costDiamond = this.currentSoulBoneData.diamonds[this.soulBoneLv];
        if (costDiamond > this.getSoulBoneModuleC.getDiamond) {
            Notice.showDownNotice(GameConfig.Language.Text_DiamondShortage.Value);
            return;
        }
        let costBone = this.currentSoulBoneData.soulBones[this.soulBoneLv];
        if (costBone > this.getSoulBoneModuleC.getBone) {
            Notice.showDownNotice(GameConfig.Language.Text_InsufficientSoulBoneFragments.Value);
            return;
        }
        this.getSoulBoneModuleC.strengthen(() => {
            this.refreshContentUI();
            this.updateTotalUpStarOffsetValue();
        }, () => {
            this.refreshContentUI();
        }, this.currentSelectPartId, costCoin, costDiamond, costBone);
    }
    onShow(...params) {
        this.refreshContentUI();
        Utils.openUITween(this.rootCanvas, () => {
            this.getHudPanel.hide();
        }, null);
    }
    hideTween() {
        Utils.closeUITween(this.rootCanvas, null, () => {
            this.hide();
            this.getHudPanel.show();
        });
    }
}
class UpProbabilityPanel extends UpProbabilityPanel_Generate$1 {
    constructor() {
        super(...arguments);
        this.isCanClickArkButton = true;
        this.arkCallBack = null;
        this.diamondCallBack = null;
        this.closeCallBack = null;
    }
    onStart() {
        this.initUI();
        this.bindButton();
    }
    initUI() {
        this.mContentTextBlock_2.text = GameConfig.Language.Text_Or.Value;
        this.mDiamondTextBlock.text = GameConfig.Language.Text_UsingDiamonds.Value;
        this.mArkTextBlock.text = GameConfig.Language.Text_UseTeamCoins.Value;
        if (GlobalData.languageId == 0) {
            this.mContentTextBlock_0.fontSize = 30;
            this.mContentTextBlock_1.fontSize = 30;
            this.mDiamondTextBlock.fontSize = 30;
            this.mArkTextBlock.fontSize = 30;
        }
        else {
            this.mContentTextBlock_0.fontSize = 40;
            this.mContentTextBlock_1.fontSize = 40;
            this.mDiamondTextBlock.fontSize = 38;
            this.mArkTextBlock.fontSize = 38;
        }
    }
    bindButton() {
        this.mCloseButton.onClicked.add(this.addClickButton.bind(this));
        this.mArkButton.onClicked.add(this.addArkButton.bind(this));
        this.mDiamondButton.onClicked.add(this.addDiamondButton.bind(this));
    }
    addClickButton() {
        this.hide();
        if (this.closeCallBack)
            this.closeCallBack();
    }
    addArkButton() {
        if (!this.isCanClickArkButton)
            return;
        this.isCanClickArkButton = false;
        TimeUtil.delaySecond(3).then(() => { this.isCanClickArkButton = true; });
        if (this.arkCallBack)
            this.arkCallBack();
    }
    addDiamondButton() {
        if (this.diamondCallBack)
            this.diamondCallBack();
    }
    showPanel(arkCallBack, diamondCallBack, closeCallBack, diamondProbility, arkProbility) {
        this.isCanClickArkButton = true;
        this.arkCallBack = arkCallBack;
        this.diamondCallBack = diamondCallBack;
        this.closeCallBack = closeCallBack;
        this.mContentTextBlock_0.text = StringUtil.format(GameConfig.Language.Text_UpProbabiliotyConetntTextBlock_0.Value, costDiamondUpProbability, diamondProbility);
        this.mContentTextBlock_1.text = StringUtil.format(GameConfig.Language.Text_UpProbabiliotyConetntTextBlock_1.Value, costArkUpProbability, arkProbility);
        this.show();
    }
}
class SoulBone extends Subdata {
    constructor() {
        super(...arguments);
        this.soulBoneLvs = {};
        this.probability = 50;
    }
    setSoulBoneLv(partId, lv) {
        if (MapEx.has(this.soulBoneLvs, partId)) {
            let oldLv = MapEx.get(this.soulBoneLvs, partId);
            MapEx.set(this.soulBoneLvs, partId, Math.round(oldLv + lv));
        }
        else {
            MapEx.set(this.soulBoneLvs, partId, Math.round(lv));
        }
        this.save(true);
    }
    getSoulBoneLv(partId) {
        if (MapEx.has(this.soulBoneLvs, partId)) {
            return MapEx.get(this.soulBoneLvs, partId);
        }
        else {
            return 0;
        }
    }
    setProbability(probability) {
        this.probability = probability;
        this.save(true);
    }
    get getTotalUpStarOffsetValue() {
        if (!this.soulBoneLvs || MapEx.count(this.soulBoneLvs) == 0)
            return 0;
        let totalUpStarOffsetValue = 0;
        MapEx.forEach(this.soulBoneLvs, (key, value) => {
            totalUpStarOffsetValue += (value * upStarOffsetValue);
        });
        return totalUpStarOffsetValue;
    }
}
__decorate([
    Decorator.persistence()
], SoulBone.prototype, "soulBoneLvs", void 0);
__decorate([
    Decorator.persistence()
], SoulBone.prototype, "probability", void 0);
class SoulBoneData {
}
const soulBoneMap = new Map();
soulBoneMap.set(0, { id: 0, desc: "头部魂骨", name: `Text_HeadSoulBone`, icon: "icon_450608", limitLv: 1, coins: [2888888, 2888888 * 3, 2888888 * 10, 2888888 * 50, 2888888 * 100, 2888888 * 500, 2888888 * 1000, 2888888 * 5000, 2888888 * 10000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000], diamonds: [1, 398, 598, 798, 998, 1998, 3998, 5998, 7998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998], soulBones: [1, 10, 300, 600, 1000, 2000, 4000, 6000, 8000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000] });
soulBoneMap.set(1, { id: 1, desc: "外附魂骨", name: `Text_ExternalSoulBone`, icon: "icon_450602", limitLv: 1, coins: [2888888, 2888888 * 3, 2888888 * 10, 2888888 * 50, 2888888 * 100, 2888888 * 500, 2888888 * 1000, 2888888 * 5000, 2888888 * 10000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000], diamonds: [198, 398, 598, 798, 998, 1998, 3998, 5998, 7998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998], soulBones: [1, 10, 300, 600, 1000, 2000, 4000, 6000, 8000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000] });
soulBoneMap.set(2, { id: 2, desc: "躯干魂骨", name: `Text_TorsoSoulBone`, icon: "icon_450603", limitLv: 1, coins: [2888888, 2888888 * 3, 2888888 * 10, 2888888 * 50, 2888888 * 100, 2888888 * 500, 2888888 * 1000, 2888888 * 5000, 2888888 * 10000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000], diamonds: [198, 398, 598, 798, 998, 1998, 3998, 5998, 7998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998], soulBones: [1, 10, 300, 600, 1000, 2000, 4000, 6000, 8000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000] });
soulBoneMap.set(3, { id: 3, desc: "腰部魂骨", name: `Text_WaistSoulBone`, icon: "icon_450610", limitLv: 1, coins: [2888888, 2888888 * 3, 2888888 * 10, 2888888 * 50, 2888888 * 100, 2888888 * 500, 2888888 * 1000, 2888888 * 5000, 2888888 * 10000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000], diamonds: [198, 398, 598, 798, 998, 1998, 3998, 5998, 7998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998], soulBones: [1, 10, 300, 600, 1000, 2000, 4000, 6000, 8000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000] });
soulBoneMap.set(4, { id: 4, desc: "手臂魂骨", name: `Text_ArmSoulBone`, icon: "icon_450611", limitLv: 1, coins: [2888888, 2888888 * 3, 2888888 * 10, 2888888 * 50, 2888888 * 100, 2888888 * 500, 2888888 * 1000, 2888888 * 5000, 2888888 * 10000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000], diamonds: [198, 398, 598, 798, 998, 1998, 3998, 5998, 7998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998], soulBones: [1, 10, 300, 600, 1000, 2000, 4000, 6000, 8000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000] });
soulBoneMap.set(5, { id: 5, desc: "腿部魂骨", name: `Text_LegSoulBone`, icon: "icon_450597", limitLv: 1, coins: [2888888, 2888888 * 3, 2888888 * 10, 2888888 * 50, 2888888 * 100, 2888888 * 500, 2888888 * 1000, 2888888 * 5000, 2888888 * 10000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000], diamonds: [198, 398, 598, 798, 998, 1998, 3998, 5998, 7998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998], soulBones: [1, 10, 300, 600, 1000, 2000, 4000, 6000, 8000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000] });
soulBoneMap.set(6, { id: 6, desc: "脚部魂骨", name: `Text_FootSoulBone`, icon: "icon_450595", limitLv: 1, coins: [2888888, 2888888 * 3, 2888888 * 10, 2888888 * 50, 2888888 * 100, 2888888 * 500, 2888888 * 1000, 2888888 * 5000, 2888888 * 10000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000, 2888888 * 100000], diamonds: [198, 398, 598, 798, 998, 1998, 3998, 5998, 7998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998, 9998], soulBones: [1, 10, 300, 600, 1000, 2000, 4000, 6000, 8000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000] });
const maxStarLv = 28;
const upStarOffsetValue = 0.05;
const costDiamondUpProbability = 100;
const costArkUpProbability = 100;
const upProbabilityByArkCommodityId = "5aYcgFQpdxe0001Ud";
const upFaildSound = "120841";
const upSucceedSound = "169179";
class SoulBoneModuleC extends ModuleC {
    constructor() {
        super(...arguments);
        this.upProbabilityPanel = null;
        this.soulBonePanel = null;
        this.hudModuleC = null;
        this.playerModuleC = null;
        this.adTipsPanel = null;
        this.bagModuleC = null;
        this.soulBoneLvs = {};
        this.probability = 0;
        this.upProbabilitySuccessCallBack = null;
        this.strengthenSuccessCallBack = null;
        this.strengthenFailCallBack = null;
    }
    get getUpProbabilityPanel() {
        if (!this.upProbabilityPanel) {
            this.upProbabilityPanel = mw.UIService.getUI(UpProbabilityPanel);
        }
        return this.upProbabilityPanel;
    }
    get getSoulBonePanel() {
        if (!this.soulBonePanel) {
            this.soulBonePanel = mw.UIService.getUI(SoulBonePanel);
        }
        return this.soulBonePanel;
    }
    get getHudModuleC() {
        if (!this.hudModuleC) {
            this.hudModuleC = ModuleService.getModule(HUDModuleC);
        }
        return this.hudModuleC;
    }
    get getPlayerModuleC() {
        if (!this.playerModuleC) {
            this.playerModuleC = ModuleService.getModule(PlayerModuleC);
        }
        return this.playerModuleC;
    }
    get getAdTipsPanel() {
        if (!this.adTipsPanel) {
            this.adTipsPanel = mw.UIService.create(AdTipsPanel);
        }
        return this.adTipsPanel;
    }
    get getBagModuleC() {
        if (!this.bagModuleC) {
            this.bagModuleC = ModuleService.getModule(BagModuleC);
        }
        return this.bagModuleC;
    }
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
        this.bindAction();
    }
    bindAction() {
        this.getHudModuleC.onOpenSoulBoneAction.add(this.onOpenSoulBonePanel.bind(this));
        mw.PurchaseService.onArkBalanceUpdated.add(this.addArkUpdate.bind(this));
        Event.addLocalListener(`UpdateDiamondTextBlock`, this.addUpdateDiamondTextBlock.bind(this));
        Event.addLocalListener(`UpdateCoinTextBlock`, this.addUpdateCoinTextBlock.bind(this));
        Event.addLocalListener(`UpdateBoneTextBlock`, this.addUpdateBoneTextBlock.bind(this));
    }
    addArkUpdate(amount) {
        //刷新逻辑，amount为当前代币数量
        console.error(`ArkModuleC addArkUpdate amount: ${amount}`);
        this.getSoulBonePanel.updateArkTextBlock(amount);
    }
    addUpdateDiamondTextBlock(count) {
        this.getSoulBonePanel.updateDiamondTextBlock(count);
    }
    addUpdateCoinTextBlock(count) {
        this.getSoulBonePanel.updateCoinTextBlock(count);
    }
    addUpdateBoneTextBlock(count) {
        this.getSoulBonePanel.updateBoneTextBlock(count);
    }
    onOpenSoulBonePanel() {
        this.getSoulBonePanel.show();
        mw.PurchaseService.getArkBalance(); // 触发代币余额刷新。接收更新的值要用mw.PurchaseService.onArkBalanceUpdated
        Event.dispatchToLocal(`SyncDiamondCount`);
        Event.dispatchToLocal(`SyncCoinCount`);
        Event.dispatchToLocal(`SyncBoneCount`);
    }
    onEnterScene(sceneType) {
        this.initSoulBoneData();
    }
    initSoulBoneData() {
        this.soulBoneLvs = this.data.soulBoneLvs;
        this.probability = this.data.probability;
        if (this.probability < 50)
            this.setProbability(50);
    }
    getSoulBoneLv(partId) {
        if (MapEx.has(this.soulBoneLvs, partId)) {
            return MapEx.get(this.soulBoneLvs, partId);
        }
        else {
            return 0;
        }
    }
    setSoulBoneLv(partId, lv) {
        if (MapEx.has(this.soulBoneLvs, partId)) {
            let oldLv = MapEx.get(this.soulBoneLvs, partId);
            MapEx.set(this.soulBoneLvs, partId, Math.round(oldLv + lv));
        }
        else {
            MapEx.set(this.soulBoneLvs, partId, Math.round(lv));
        }
        this.server.net_setSoulBoneLv(partId, lv);
    }
    get getTotalUpStarOffsetValue() {
        if (!this.soulBoneLvs || MapEx.count(this.soulBoneLvs) == 0)
            return 0;
        let totalUpStarOffsetValue = 0;
        MapEx.forEach(this.soulBoneLvs, (key, value) => {
            totalUpStarOffsetValue += (value * upStarOffsetValue);
        });
        return totalUpStarOffsetValue;
    }
    get getLevel() {
        return this.getPlayerModuleC.getLv;
    }
    get getDiamond() {
        return this.getPlayerModuleC.getDiamond;
    }
    setDiamond(diamond) {
        this.getPlayerModuleC.saveDiamond(diamond);
    }
    get getBone() {
        return this.getPlayerModuleC.getBone;
    }
    setBone(bone) {
        this.getPlayerModuleC.saveBone(bone);
    }
    get getCoin() {
        return this.getPlayerModuleC.getCoin();
    }
    setCoin(coin) {
        this.getPlayerModuleC.saveCoin(coin);
    }
    get getProbability() {
        return Math.round(this.probability) < 50 ? 50 : Math.round(this.probability);
    }
    setProbability(probability) {
        this.probability = probability;
        if (this.probability > 100)
            this.probability = 100;
        this.server.net_setProbability(probability);
    }
    upProbability(callBack) {
        if (this.probability >= 100) {
            Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_EnhanceTheProbabilityOfSuccess.Value, 100));
            return;
        }
        this.upProbabilitySuccessCallBack = callBack;
        this.getUpProbabilityPanel.showPanel(() => {
            mw.PurchaseService.placeOrder(upProbabilityByArkCommodityId, 1, (status, msg) => {
                mw.PurchaseService.getArkBalance(); //刷新代币数量
                if (status != 200)
                    return;
                if (this.upProbabilitySuccessCallBack)
                    this.upProbabilitySuccessCallBack();
                SoundService.playSound(upSucceedSound);
                Notice.showDownNotice(GameConfig.Language.Text_ProbabilityIncreaseSuccess.Value);
            });
        }, () => {
            if (this.getDiamond >= costDiamondUpProbability) {
                this.setDiamond(-costDiamondUpProbability);
                this.setProbability(this.probability + 10);
                if (this.upProbabilitySuccessCallBack)
                    this.upProbabilitySuccessCallBack();
                SoundService.playSound(upSucceedSound);
                Notice.showDownNotice(GameConfig.Language.Text_ProbabilityIncreaseSuccess.Value);
            }
            else {
                Notice.showDownNotice(GameConfig.Language.Text_DiamondShortage.Value);
                if (GlobalData.isOpenIAA) {
                    this.getAdTipsPanel.showRewardAd(() => {
                        Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_SuccessfullyObtainedDiamonds.Value, GlobalData.addDiamondCount));
                        this.getPlayerModuleC.saveDiamond(GlobalData.addDiamondCount);
                    }, StringUtil.format(GameConfig.Language.Text_GetDiamondsForFree.Value, GlobalData.addDiamondCount), GameConfig.Language.Text_Cancel.Value, GameConfig.Language.Text_FreeToReceive.Value);
                }
                else {
                    Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_SuccessfullyObtainedDiamonds.Value, GlobalData.addDiamondCount));
                    this.getPlayerModuleC.saveDiamond(GlobalData.addDiamondCount);
                }
            }
        }, () => {
        }, this.probability + 10, 100);
    }
    net_deliverGoods(commodityId, amount) {
        if (commodityId == upProbabilityByArkCommodityId) {
            this.setProbability(100);
            if (this.upProbabilitySuccessCallBack)
                this.upProbabilitySuccessCallBack();
        }
    }
    strengthen(strengthenSuccessCallBack, strengthenFailCallBack, selectPartId, costCoin, costDiamond, costBone) {
        let randomValue = Utils.getRandomInteger(1, 100);
        this.setCoin(-costCoin);
        this.setDiamond(-costDiamond);
        this.setBone(-costBone);
        if (randomValue <= this.probability) {
            this.setSoulBoneLv(selectPartId, 1);
            this.getBagModuleC.updateHpByUsing();
            SoundService.playSound(upSucceedSound);
            Notice.showDownNotice(GameConfig.Language.Text_SoulBoneStrengtheningSuccessful.Value);
            this.setProbability(50);
            this.strengthenSuccessCallBack = strengthenSuccessCallBack;
            if (this.strengthenSuccessCallBack)
                this.strengthenSuccessCallBack();
        }
        else {
            SoundService.playSound(upFaildSound);
            Notice.showDownNotice(GameConfig.Language.Text_SoulBoneStrengtheningFailed.Value);
            this.setProbability(50);
            this.strengthenFailCallBack = strengthenFailCallBack;
            if (this.strengthenFailCallBack)
                this.strengthenFailCallBack();
        }
    }
}
class SoulBoneModuleS extends ModuleS {
    constructor() {
        super(...arguments);
        this.bagModuleS = null;
    }
    get getBagModuleS() {
        if (!this.bagModuleS) {
            this.bagModuleS = ModuleService.getModule(BagModuleS);
        }
        return this.bagModuleS;
    }
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
        this.bindAction();
    }
    bindAction() {
        mw.PurchaseService.onOrderDelivered.add(this.addShipOrder.bind(this));
    }
    addShipOrder(playerId, orderId, commodityId, amount, confirmOrder) {
        //根据playerId和commodityId来处理购买逻辑
        this.getClient(playerId).net_deliverGoods(commodityId, amount);
        confirmOrder(true); //调用这个方法表示确认收货成功
    }
    net_setProbability(probability) {
        this.currentData.setProbability(probability);
    }
    net_setSoulBoneLv(partId, lv) {
        let player = this.currentPlayer;
        this.currentData.setSoulBoneLv(partId, lv);
        this.getBagModuleS.updateHpByUsing(player);
    }
    getRarity(player) {
        return DataCenterS.getData(player, SoulBone).getTotalUpStarOffsetValue;
    }
}
__decorate([
    Decorator.noReply()
], SoulBoneModuleS.prototype, "net_setProbability", null);
__decorate([
    Decorator.noReply()
], SoulBoneModuleS.prototype, "net_setSoulBoneLv", null);

var foreign81 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    PartItem: PartItem,
    SoulBone: SoulBone,
    SoulBoneData: SoulBoneData,
    SoulBoneModuleC: SoulBoneModuleC,
    SoulBoneModuleS: SoulBoneModuleS,
    SoulBonePanel: SoulBonePanel,
    StarItem: StarItem,
    UpProbabilityPanel: UpProbabilityPanel
});

class HUDModuleC extends ModuleC {
    constructor() {
        super(...arguments);
        this.onlineRewardModuleC = null;
        this.taskModuleC = null;
        this.playerModuleC = null;
        this.hudPanel = null;
        this.ringSoulPanel = null;
        this.ringSoulModuleC = null;
        this.soulBoneModuleC = null;
        this.adTipsPanel = null;
        this.upPanel = null;
        this.bagModuleC = null;
        this.flyModuleC = null;
        this.levelModuleC = null;
        /**跳跃事件 */
        this.onJumpAction = new Action();
        /**打开HUD事件 */
        this.onOpenHUDAction = new Action();
        /**打开商店事件 */
        this.onOpenShopAction = new Action();
        /**打开捏脸换装事件 */
        this.onOpenPlayerAction = new Action();
        /**冲刺事件 */
        this.onSprintAction = new Action();
        /**巨人化事件 */
        this.onPlayerScaleAction = new Action1();
        /**打开再将奖励 */
        this.onOpenOnlineRewardAction = new Action();
        /**打开任务 */
        this.onOpenTaskAction = new Action();
        /**打开排行榜 */
        this.onOpenRankAction = new Action();
        this.onHomeAction = new Action();
        this.onAddCoinAction = new Action();
        this.onAddDiamondAction = new Action();
        this.onAddBoneAction = new Action();
        this.onAdsAction = new Action();
        this.onInvincibleAction = new Action1();
        this.onOpenRingSoulAction = new Action();
        this.onOnOffRingSoulAction = new Action1();
        this.onOpenSignInAction = new Action();
        this.onOpenArkAction = new Action();
        this.onOpenGetAction = new Action();
        this.onOpenNewPeopleAction = new Action();
        this.onOpenSoulBoneAction = new Action();
        this.onOpenLotteryAction = new Action();
        this.onOpenSwordAction = new Action();
        this.onOnOffUpExpAction = new Action1();
        this.onOnOffFlyAction = new Action1();
        this.onSkillAction = new Action1();
        this.onOpenAutoAtkAction = new Action2();
        /**全局UI点击音效唯一标识 */
        this.uiClickSoundId = null;
        this.lv = 0;
        this.maxHp = -1;
        this.curHp = -1;
        //#endregion
        //#region 连杀提示
        this.killCountMap = new Map();
        this.revengeUserIdMap = new Set();
        //#endregion
        //#region 能量
        this.maxMp = 100;
        this.currentMp = 100;
        this.isStartAddMp = false;
        this.addMpTime = 1;
        this.addMpTimer = 0;
        this.isStartAddMpId = null;
        //#endregion
        //#region 巨人
        this.playerScale = 1;
        //#region 冲刺
        this.isCanSprint = true;
        this.sprintAnimation = null;
        this.sprintClips = ["151007", "151008"];
        this.sprintIndex = 0;
        //#endregion
        //#region jump
        this.currentJumpTime = 0;
        this.secondJumpAniID = "150691";
        this.grilStompingEffect = "132627";
        this.boyStompingEffect = "130743";
        this.landingEffects = ["89128", "89129", "89130"];
        this.landingEffectId = "89089";
        this.landingSoundId = "122568";
        this.girlJumpSoundId = "101208";
        this.boyJumpSoundId = "121734";
        this.isStartTime = false;
        //#endregion
        //#endregion
        //#region 背景音乐
        /**当前播放的背景音乐 */
        this.currentBgmIndex = 1;
        /**背景音乐 */
        this.bgmMusics = [];
    }
    get getOnlineRewardModuleC() {
        if (!this.onlineRewardModuleC) {
            this.onlineRewardModuleC = ModuleService.getModule(OnlineRewardModuleC);
        }
        return this.onlineRewardModuleC;
    }
    get getTaskModuleC() {
        if (!this.taskModuleC) {
            this.taskModuleC = ModuleService.getModule(TaskModuleC);
        }
        return this.taskModuleC;
    }
    get getPlayerModuleC() {
        if (!this.playerModuleC) {
            this.playerModuleC = ModuleService.getModule(PlayerModuleC);
        }
        return this.playerModuleC;
    }
    get getHudPanel() {
        if (!this.hudPanel) {
            this.hudPanel = mw.UIService.getUI(HUDPanel);
        }
        return this.hudPanel;
    }
    get getRingSoulPanel() {
        if (!this.ringSoulPanel) {
            this.ringSoulPanel = mw.UIService.getUI(RingSoulPanel);
        }
        return this.ringSoulPanel;
    }
    get getRingSoulModuleC() {
        if (!this.ringSoulModuleC) {
            this.ringSoulModuleC = ModuleService.getModule(RingSoulModuleC);
        }
        return this.ringSoulModuleC;
    }
    get getSoulBoneModuleC() {
        if (!this.soulBoneModuleC) {
            this.soulBoneModuleC = ModuleService.getModule(SoulBoneModuleC);
        }
        return this.soulBoneModuleC;
    }
    get getAdTipsPanel() {
        if (!this.adTipsPanel) {
            this.adTipsPanel = mw.UIService.create(AdTipsPanel);
        }
        return this.adTipsPanel;
    }
    get getUpPanel() {
        if (!this.upPanel) {
            this.upPanel = mw.UIService.create(UpPanel);
        }
        return this.upPanel;
    }
    get getBagModuleC() {
        if (!this.bagModuleC) {
            this.bagModuleC = ModuleService.getModule(BagModuleC);
        }
        return this.bagModuleC;
    }
    get getFlyModuleC() {
        if (!this.flyModuleC) {
            this.flyModuleC = ModuleService.getModule(FlyModuleC);
        }
        return this.flyModuleC;
    }
    get getLevelModuleC() {
        if (!this.levelModuleC) {
            this.levelModuleC = ModuleService.getModule(LevelModuleC);
        }
        return this.levelModuleC;
    }
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
        this.initDatas();
        this.registerActions();
    }
    /**初始化数据 */
    initDatas() {
        this.initMusicData();
    }
    /**注册事件 */
    registerActions() {
        this.onOpenHUDAction.add(() => {
            this.getHudPanel.show();
        });
        this.onJumpAction.add(() => {
            this.playerJump();
        });
        this.onSprintAction.add(() => {
            this.sprint();
        });
        this.onPlayerScaleAction.add((playerScale) => {
            this.playerScale = playerScale;
        });
        this.onOpenOnlineRewardAction.add(() => {
            this.getOnlineRewardModuleC.onOnlineRewardsAction.call(true);
        });
        this.onHomeAction.add(() => {
            this.localPlayer.character.worldTransform.position = Utils.getWorldLocation();
            // this.getLevelModuleC.hideLevelPanel();
            // this.getPlayerModuleC.isInvincible(true);
            // this.getHudPanel.updateInvincibleCanvasState(true);
        });
        this.onAddCoinAction.add(() => {
            if (GlobalData.isOpenIAA) {
                this.getAdTipsPanel.showRewardAd(() => {
                    Notice.showDownNotice(`${GameConfig.Language.Text_SuccessfullyObtainedCoins.Value}+${GlobalData.addCoinCount}`);
                    this.getPlayerModuleC.saveCoin(GlobalData.addCoinCount);
                }, StringUtil.format(GameConfig.Language.Text_GetGoldCoinsForFree.Value, GlobalData.addCoinCount), GameConfig.Language.Text_Cancel.Value, GameConfig.Language.Text_FreeToReceive.Value);
            }
            else {
                Notice.showDownNotice(`${GameConfig.Language.Text_SuccessfullyObtainedCoins.Value}+${GlobalData.addCoinCount}`);
                this.getPlayerModuleC.saveCoin(GlobalData.addCoinCount);
            }
        });
        this.onAddDiamondAction.add(() => {
            if (GlobalData.isOpenIAA) {
                this.getAdTipsPanel.showRewardAd(() => {
                    Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_SuccessfullyObtainedDiamonds.Value, GlobalData.addDiamondCount));
                    this.getPlayerModuleC.saveDiamond(GlobalData.addDiamondCount);
                }, StringUtil.format(GameConfig.Language.Text_GetFreeDiamonds.Value, GlobalData.addDiamondCount), GameConfig.Language.Text_Cancel.Value, GameConfig.Language.Text_FreeToReceive.Value);
            }
            else {
                Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_SuccessfullyObtainedDiamonds.Value, GlobalData.addDiamondCount));
                this.getPlayerModuleC.saveDiamond(GlobalData.addDiamondCount);
            }
        });
        this.onAddBoneAction.add(() => {
            if (GlobalData.isOpenIAA) {
                this.getAdTipsPanel.showRewardAd(() => {
                    Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_SuccessfullyObtainedBones.Value, GlobalData.addBoneCount));
                    this.getPlayerModuleC.saveBone(GlobalData.addBoneCount);
                }, StringUtil.format(GameConfig.Language.Text_GetFreeBones.Value, GlobalData.addBoneCount), GameConfig.Language.Text_Cancel.Value, GameConfig.Language.Text_FreeToReceive.Value);
            }
            else {
                Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_SuccessfullyObtainedDiamonds.Value, GlobalData.addBoneCount));
                this.getPlayerModuleC.saveBone(GlobalData.addBoneCount);
            }
        });
        this.onAdsAction.add(() => {
            this.getUpPanel.showRewardAd(() => {
                Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_UpgradeSuccessLevel.Value, 1));
                this.getPlayerModuleC.adsUpLv();
            }, () => {
                if (this.getPlayerModuleC.getDiamond >= GlobalData.addDiamondCount) {
                    this.getPlayerModuleC.saveDiamond(-GlobalData.addDiamondCount);
                    this.getPlayerModuleC.adsUpLv();
                    Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_UpgradeSuccessLevel.Value, 1));
                }
                else {
                    if (GlobalData.isOpenIAA) {
                        this.getAdTipsPanel.showRewardAd(() => {
                            this.getPlayerModuleC.adsUpLv();
                            Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_UpgradeSuccessLevel.Value, 1));
                        }, StringUtil.format(GameConfig.Language.Text_FreeLevelUpgradeByLevel.Value, 1), GameConfig.Language.Text_Cancel.Value, GameConfig.Language.Text_FreeUpgrade.Value);
                    }
                    else {
                        Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_UpgradeSuccessLevel.Value, 1));
                        this.getPlayerModuleC.adsUpLv();
                    }
                }
            }, GameConfig.Language.Text_UpgradeLevel.Value, StringUtil.format(GameConfig.Language.Text_UseDiamondsUpgradeLevel.Value, GlobalData.addDiamondCount), GameConfig.Language.Text_DirectlyUpgradeTheLevel.Value, ``, GameConfig.Language.Text_FreeUpgrade.Value, GameConfig.Language.Text_Determine.Value);
        });
        this.onInvincibleAction.add((isInvincible) => {
            this.getPlayerModuleC.isInvincible(isInvincible);
        });
        this.registerMusicAction();
        let isOpenHUD = false;
        InputUtil.onKeyDown(mw.Keys.NumPadOne, () => {
            isOpenHUD = !isOpenHUD;
            isOpenHUD ? this.getHudPanel.show() : this.getHudPanel.hide();
            Console.error("isOpenHUD =" + isOpenHUD);
        });
        Event.addLocalListener("AttackMp", () => {
            this.isHaveMp(GlobalData.attackMp);
        });
        // Event.addLocalListener(`arenaState`, (key: number) => {
        //     this.getPlayerModuleC.isInvincible(key != 1);
        //     this.getHudPanel.updateInvincibleCanvasState(key != 1);
        // });
        this.onSkillAction.add((callBack) => {
            let isHaveMp = this.isHaveMp(GlobalData.skillMp_1);
            if (callBack)
                callBack(isHaveMp);
            if (!isHaveMp) {
                Notice.showDownNotice(`${GlobalData.mpStr}${GameConfig.Language.Text_Insufficient.Value}`);
                return;
            }
            this.getPlayerModuleC.skill_1();
        });
    }
    onEnterScene(sceneType) {
        this.getHudPanel.show();
        this.registerGlobalClickSound();
        this.delayedOperation();
    }
    onUpdate(dt) {
        this.updateJumpTime(dt);
        this.updateMp(dt);
    }
    /**注册全局点击音效 */
    registerGlobalClickSound() {
        /**全局UI点击音效 */
        Event.addLocalListener("PlayButtonClick", (v) => {
            Console.error("[PlayButtonClick-Name] = " + v);
            if (v == "mSprintButton" || v == "mJumpButton")
                return;
            if (this.uiClickSoundId) {
                // Console.error("[停止上一次的点击音效]");
                SoundService.stopSound(this.uiClickSoundId);
                this.uiClickSoundId = null;
            }
            this.uiClickSoundId = SoundService.playSound(GlobalData.uiClickSoundGuid);
        });
    }
    /**延迟执行的测试用例 */
    delayedOperation() {
        TimeUtil.delaySecond(3).then(() => {
            this.playBGM(0);
            if (GlobalData.isHideHeadUI) {
                this.localPlayer.character.displayName = "";
            }
        });
    }
    /**
     * 更新在线奖励Icon
     * @param icon
     */
    updateOnlineRewradIcon(icon) {
        this.getHudPanel.updateOnlineRewradIcon(icon);
    }
    updateLvExpCoin(lv, exp, coin, isAddLv) {
        this.lv = lv;
        this.getHudPanel.updateLvExpCoin(lv, exp, coin, this.getBagModuleC.getAddAtkByUsing() + this.getRingSoulModuleC.getRarity + this.getFlyModuleC.getAtkRarity + this.getSoulBoneModuleC.getTotalUpStarOffsetValue);
        if (!isAddLv)
            return;
        this.maxMp = 100 + (lv * 10);
        this.currentMp = this.maxMp;
        this.getHudPanel.updateMp(this.currentMp, this.maxMp);
        let hp = Math.round(Utils.getHp(lv) * (this.getBagModuleC.getAddHpByUsing() + this.getRingSoulModuleC.getRarity + this.getFlyModuleC.getHpRarity + this.getSoulBoneModuleC.getTotalUpStarOffsetValue));
        this.maxHp = hp;
        this.updateHp(hp);
    }
    updateBone(bone) {
        this.getHudPanel.updateBone(bone);
    }
    updateCoin(coin) {
        this.getHudPanel.updateCoin(coin);
    }
    updateDiamond(diamond) {
        this.getHudPanel.updateDiamond(diamond);
        this.getRingSoulPanel.updateDiamond(diamond);
    }
    updateHp(curHp) {
        this.curHp = curHp;
        if (this.curHp > this.maxHp)
            this.curHp = this.maxHp;
        this.getHudPanel.updateHp(curHp, this.maxHp);
    }
    updateHpByUsing(addHp, addAtk) {
        let hp = Math.round(Utils.getHp(this.lv) * addHp);
        this.maxHp = hp;
        this.getHudPanel.updateHp(this.curHp, this.maxHp);
        this.getHudPanel.updateAtk(this.lv, addAtk);
    }
    //#region 击杀提示
    killTip(killerUserId, killerName, killedUserId, killedName) {
        let killTipType = KillTipType.None;
        if (killerUserId == this.localPlayer.userId) {
            killTipType = KillTipType.Killer;
        }
        else if (killedUserId == this.localPlayer.userId) {
            killTipType = KillTipType.Killed;
        }
        this.getHudPanel.killTip(killTipType, killerName, killedName);
        this.killTipsSound(killerUserId, killerName, killedUserId, killedName);
    }
    killTipsSound(killerUserId, killerName, killedUserId, killedName) {
        let killTipType = KillTipType.None;
        if (killedUserId == this.localPlayer.userId) {
            killTipType = KillTipType.Killed;
            if (!this.revengeUserIdMap.has(killerUserId))
                this.revengeUserIdMap.add(killerUserId);
            SoundService.playSound("294343", 1);
        }
        else if (killerUserId == this.localPlayer.userId && this.revengeUserIdMap.has(killedUserId)) {
            killTipType = KillTipType.revenge;
            this.revengeUserIdMap.delete(killedUserId);
            SoundService.playSound("294342", 1);
        }
        this.getHudPanel.showKillTips2(killerName, killedName, killTipType);
        if (this.killCountMap.has(killedUserId))
            this.killCountMap.delete(killedUserId);
        let killCount = 0;
        if (this.killCountMap.has(killerUserId)) {
            killCount = this.killCountMap.get(killerUserId);
        }
        killCount++;
        this.killCountMap.set(killerUserId, killCount);
        if (killCount <= 1)
            return;
        let soundId = "";
        let killCountTips = "";
        switch (killCount) {
            case 2:
                soundId = "65877";
                killCountTips = GameConfig.Language.Text_ContinuouslyEliminatePeople_2.Value;
                break;
            case 3:
                soundId = "65874";
                killCountTips = GameConfig.Language.Text_ContinuouslyEliminatePeople_3.Value;
                break;
            case 4:
                soundId = "65873";
                killCountTips = GameConfig.Language.Text_ContinuouslyEliminatePeople_4.Value;
                break;
            case 5:
                soundId = "65881";
                killCountTips = GameConfig.Language.Text_ContinuouslyEliminatePeople_5.Value;
                break;
            case 6:
                soundId = "65871";
                killCountTips = GameConfig.Language.Text_ContinuouslyEliminatePeople_6.Value;
                break;
            case 7:
                soundId = "65879";
                killCountTips = StringUtil.format(GameConfig.Language.Text_ContinuouslyEliminatePeople_7.Value, killCount);
                break;
            default:
                soundId = "65879";
                killCountTips = StringUtil.format(GameConfig.Language.Text_ContinuouslyEliminatePeople_7.Value, killCount);
                break;
        }
        SoundService.playSound(soundId, 1);
        this.getHudPanel.showKillTips1(killCountTips, killerName, killedName);
    }
    get getMp() {
        return this.currentMp;
    }
    /**
     * 跟新能量
     * @param dt
     * @returns
     */
    updateMp(dt) {
        if (!this.isStartAddMp)
            return;
        this.addMpTimer += dt;
        if (this.addMpTimer >= this.addMpTime) {
            this.addMpTimer = 0;
            this.addMp(1);
        }
    }
    /**
     * 增加能量
     * @param mp
     */
    addMp(mp) {
        this.currentMp += mp;
        Console.error("this.currentMp = " + this.currentMp);
        if (this.currentMp >= this.maxMp) {
            this.currentMp = this.maxMp;
            this.isStartAddMp = false;
            this.addMpTimer = 0;
        }
        this.getHudPanel.updateMp(this.currentMp, this.maxMp);
    }
    /**
     * 是否有能量
     * @returns
     */
    isHaveMp(reduceMp = 10) {
        if (this.currentMp - reduceMp < 0) {
            this.isStartAddMp = true;
            if (this.isStartAddMpId) {
                clearTimeout(this.isStartAddMpId);
            }
            this.isStartAddMpId = null;
            return false;
        }
        this.currentMp -= reduceMp;
        this.getHudPanel.updateMp(this.currentMp, this.maxMp);
        Console.error("this.currentMp = " + this.currentMp);
        this.isStartAddMp = false;
        if (this.isStartAddMpId) {
            clearTimeout(this.isStartAddMpId);
        }
        this.isStartAddMpId = null;
        this.isStartAddMpId = setTimeout(() => {
            this.isStartAddMp = true;
        }, 5 * 1000);
        return true;
    }
    /**
     * 冲刺
     * @returns
     */
    sprint() {
        if (!this.isCanSprint)
            return;
        if (!this.isHaveMp(10)) {
            Notice.showDownNotice(`${GlobalData.mpStr}${GameConfig.Language.Text_Insufficient.Value}`);
            Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_UpgradeToIncreaseReserves.Value, GlobalData.mpStr));
            return;
        }
        this.isCanSprint = false;
        if (this.sprintAnimation)
            this.sprintAnimation.stop();
        this.sprintAnimation = PlayerManagerExtesion.rpcPlayAnimation(this.localPlayer.character, this.sprintClips[this.sprintIndex], 1);
        this.sprintIndex = (this.sprintIndex + 1) % 2;
        this.localPlayer.character.movementEnabled = false;
        TimeUtil.delaySecond(0.1).then(() => {
            this.server.net_sprint(this.sprintIndex, this.playerScale);
        });
        TimeUtil.delaySecond(0.5).then(() => {
            this.localPlayer.character.movementEnabled = true;
            this.isCanSprint = true;
            if (this.sprintAnimation) {
                this.sprintAnimation.stop();
                this.sprintAnimation = null;
            }
        });
    }
    /**
     * 更新跳跃状态
     * @param dt
     * @returns
     */
    updateJumpTime(dt) {
        if (!this.isStartTime)
            return;
        if (!this.localPlayer.character.isJumping) {
            this.currentJumpTime = 0;
            this.isStartTime = false;
            let effectId = this.landingEffects[Utils.getRandomInteger(0, 2)];
            let startLoc = this.localPlayer.character.worldTransform.position;
            let capsuleHalfHeight = this.localPlayer.character.collisionExtent.z / 2;
            let effectOffset = new mw.Vector(startLoc.x, startLoc.y, startLoc.z - capsuleHalfHeight * this.playerScale);
            this.server.net_playLandEffectAndSound([effectId, this.landingEffectId], effectOffset, this.landingSoundId, this.playerScale);
        }
    }
    /**
     * JUmp
     * @returns
     */
    playerJump() {
        if (this.localPlayer.character.isJumping && this.currentJumpTime >= 2)
            return;
        this.currentJumpTime++;
        if (this.currentJumpTime == 1) {
            if (!this.isHaveMp(5)) {
                Notice.showDownNotice(`${GlobalData.mpStr}${GameConfig.Language.Text_Insufficient.Value}`);
                Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_UpgradeToIncreaseReserves.Value, GlobalData.mpStr));
                return;
            }
        }
        if (this.currentJumpTime == 2) {
            if (!this.isHaveMp(5)) {
                Notice.showDownNotice(`${GlobalData.mpStr}${GameConfig.Language.Text_Insufficient.Value}`);
                Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_UpgradeToIncreaseReserves.Value, GlobalData.mpStr));
                return;
            }
            PlayerManagerExtesion.rpcPlayAnimation(this.localPlayer.character, this.secondJumpAniID, 1);
            let stompingEffectId = "";
            let soundId = "";
            if (this.IsGirl()) {
                soundId = this.girlJumpSoundId;
                stompingEffectId = this.grilStompingEffect;
            }
            else {
                soundId = this.boyJumpSoundId;
                stompingEffectId = this.boyStompingEffect;
            }
            this.server.net_playStompingEffectAndSound(stompingEffectId, soundId, this.playerScale);
        }
        this.localPlayer.character.jump();
        this.isStartTime = true;
    }
    /**
     * 判断是否是女
     * @returns
     */
    IsGirl() {
        let somatotype = Player.localPlayer.character.description.advance.base.characterSetting.somatotype;
        if (somatotype == mw.SomatotypeV2.AnimeFemale
            || somatotype == mw.SomatotypeV2.LowpolyAdultFemale
            || somatotype == mw.SomatotypeV2.RealisticAdultFemale
            || somatotype == mw.SomatotypeV2.CartoonyFemale)
            return true;
        return false;
    }
    /**初始化背景音乐数据 */
    initMusicData() {
        this.bgmMusics = GameConfig.Music.getAllElement();
    }
    /**注册背景音乐事件 */
    registerMusicAction() {
        this.getHudPanel.onBgmAction.add((isOpenBGM) => {
            if (isOpenBGM) {
                this.playBGM(0);
            }
            else {
                SoundService.stopBGM();
            }
        });
        this.getHudPanel.onSwitchBgmAction.add(this.playBGM.bind(this));
    }
    /**播放背景音乐 */
    playBGM(bgmIndex) {
        this.currentBgmIndex = this.currentBgmIndex + bgmIndex;
        if (this.currentBgmIndex > this.bgmMusics.length) {
            this.currentBgmIndex = 1;
        }
        else if (this.currentBgmIndex < 1) {
            this.currentBgmIndex = this.bgmMusics.length;
        }
        let bgmId = this.bgmMusics[this.currentBgmIndex - 1].Guid;
        SoundService.playBGM(bgmId);
        this.getHudPanel.mMusicText.text = this.bgmMusics[this.currentBgmIndex - 1].Annotation;
    }
    //#endregion
    net_syncWorldConfigData(worldConfigDatas) {
        if (!worldConfigDatas || worldConfigDatas.length == 0)
            return;
        Utils.setWorldConfigData(worldConfigDatas);
    }
    showDayStr() {
        this.getHudPanel.showDayStr();
    }
    getDayStr() {
        Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_GetDiamondsForFree.Value, 1088));
        Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_GetCoins.Value, 28888888));
        this.getPlayerModuleC.saveDiamond(1088);
        this.getPlayerModuleC.saveCoin(28888888);
        this.getPlayerModuleC.setDayStr(Utils.getDay());
    }
}
class KillTipData {
}
var KillTipType;
(function (KillTipType) {
    KillTipType[KillTipType["None"] = 0] = "None";
    KillTipType[KillTipType["Killer"] = 1] = "Killer";
    KillTipType[KillTipType["Killed"] = 2] = "Killed";
    KillTipType[KillTipType["revenge"] = 3] = "revenge";
})(KillTipType || (KillTipType = {}));

var foreign52 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    KillTipData: KillTipData,
    get KillTipType () { return KillTipType; },
    default: HUDModuleC
});

var TaskItemType;
(function (TaskItemType) {
    TaskItemType[TaskItemType["None"] = 0] = "None";
    /**每日登录游戏 */
    TaskItemType[TaskItemType["DailyLogin"] = 1] = "DailyLogin";
    /**每日在线时长 */
    TaskItemType[TaskItemType["DailyOnlineTime"] = 11] = "DailyOnlineTime";
    /**每日击败美杜莎 */
    TaskItemType[TaskItemType["DailyKillMedusa"] = 21] = "DailyKillMedusa";
    /**每日击败蜘蛛精 */
    TaskItemType[TaskItemType["DailyKillSpider"] = 31] = "DailyKillSpider";
    /**每日击败炫彩蜘蛛 */
    TaskItemType[TaskItemType["DailyKillColorfulSpider"] = 41] = "DailyKillColorfulSpider";
    /**每日击败龙兽 */
    TaskItemType[TaskItemType["DailyKillDragon"] = 51] = "DailyKillDragon";
    /**每日击败丧尸 */
    TaskItemType[TaskItemType["DailyKillZombie"] = 61] = "DailyKillZombie";
    /**每日击败变异布偶 */
    TaskItemType[TaskItemType["DailyKillMutantPuppet"] = 71] = "DailyKillMutantPuppet";
    /**每日击败玩家 */
    TaskItemType[TaskItemType["DailyKillPlayer"] = 81] = "DailyKillPlayer";
    /**每日提升级 */
    TaskItemType[TaskItemType["DailyUpLv"] = 91] = "DailyUpLv";
    /**每日捡到秘宝 */
    TaskItemType[TaskItemType["DailyPickUpTreasure"] = 101] = "DailyPickUpTreasure";
    /**每日看广告次数 */
    TaskItemType[TaskItemType["DailyAds"] = 111] = "DailyAds";
    /**每周登录天数 */
    TaskItemType[TaskItemType["WeeklyLogin"] = 201] = "WeeklyLogin";
    /**每周在线时长30分钟次数 */
    TaskItemType[TaskItemType["WeeklyOnlineTime"] = 211] = "WeeklyOnlineTime";
    /**每周击败美杜莎 */
    TaskItemType[TaskItemType["WeeklyKillMedusa"] = 221] = "WeeklyKillMedusa";
    /**每周击败蜘蛛精 */
    TaskItemType[TaskItemType["WeeklyKillSpider"] = 231] = "WeeklyKillSpider";
    /**每周击败炫彩蜘蛛 */
    TaskItemType[TaskItemType["WeeklyKillColorfulSpider"] = 241] = "WeeklyKillColorfulSpider";
    /**每周击败龙兽 */
    TaskItemType[TaskItemType["WeeklyKillDragon"] = 251] = "WeeklyKillDragon";
    /**每周击败丧尸 */
    TaskItemType[TaskItemType["WeeklyKillZombie"] = 261] = "WeeklyKillZombie";
    /**每周击败变异布偶 */
    TaskItemType[TaskItemType["WeeklyKillMutantPuppet"] = 271] = "WeeklyKillMutantPuppet";
    /**每周击败玩家 */
    TaskItemType[TaskItemType["WeeklyKillPlayer"] = 281] = "WeeklyKillPlayer";
    /**每周提升级 */
    TaskItemType[TaskItemType["WeeklyUpLv"] = 291] = "WeeklyUpLv";
    /**每周捡到秘宝 */
    TaskItemType[TaskItemType["WeeklyPickUpTreasure"] = 301] = "WeeklyPickUpTreasure";
    /**每周看广告次数 */
    TaskItemType[TaskItemType["WeeklyAds"] = 311] = "WeeklyAds";
})(TaskItemType || (TaskItemType = {}));
var TaskType;
(function (TaskType) {
    /**每日任务 */
    TaskType[TaskType["DailyTask"] = 1] = "DailyTask";
    /**每周任务 */
    TaskType[TaskType["WeeklyTask"] = 2] = "WeeklyTask";
})(TaskType || (TaskType = {}));
class Task {
    constructor(taskId, progress, isGetReward) {
        this.taskId = taskId;
        this.progress = progress;
        this.isGetReward = isGetReward;
    }
}
class TaskData extends Subdata {
    constructor() {
        super(...arguments);
        this.lastDayNow = 0;
        this.lastWeekNow = 0;
        this.dailyTasks = {};
        this.weeklyTasks = {};
    }
    initDefaultData() {
        this.dailyTasks = {};
        this.weeklyTasks = {};
        this.lastDayNow = Date.now();
        this.lastWeekNow = Number(Utils.getWhatDay());
    }
    saveDailyTask(taskId, vipTaskType, progress) {
        let dailyTask = null;
        if (MapEx.has(this.dailyTasks, vipTaskType)) {
            dailyTask = MapEx.get(this.dailyTasks, vipTaskType);
            dailyTask.progress = progress;
        }
        else {
            dailyTask = new Task(taskId, progress, false);
        }
        MapEx.set(this.dailyTasks, vipTaskType, dailyTask);
    }
    saveWeeklyTask(taskId, vipTaskType, progress) {
        let weeklyTask = null;
        if (MapEx.has(this.weeklyTasks, vipTaskType)) {
            weeklyTask = MapEx.get(this.weeklyTasks, vipTaskType);
            weeklyTask.progress = progress;
        }
        else {
            weeklyTask = new Task(taskId, progress, false);
        }
        MapEx.set(this.weeklyTasks, vipTaskType, weeklyTask);
    }
    updateTaskCompleteData(vipTaskType) {
        if (MapEx.has(this.dailyTasks, vipTaskType)) {
            let dailyTask = MapEx.get(this.dailyTasks, vipTaskType);
            let nextId = GameConfig.Task.getElement(dailyTask.taskId).NextId;
            if (nextId != 0) {
                dailyTask.taskId = nextId;
                dailyTask.isGetReward = false;
            }
            else {
                dailyTask.isGetReward = true;
            }
            MapEx.set(this.dailyTasks, vipTaskType, dailyTask);
        }
        if (MapEx.has(this.weeklyTasks, vipTaskType)) {
            let weeklyTask = MapEx.get(this.weeklyTasks, vipTaskType);
            let nextId = GameConfig.Task.getElement(weeklyTask.taskId).NextId;
            if (nextId != 0) {
                weeklyTask.taskId = nextId;
                weeklyTask.isGetReward = false;
            }
            else {
                weeklyTask.isGetReward = true;
            }
            MapEx.set(this.weeklyTasks, vipTaskType, weeklyTask);
        }
        this.save(true);
    }
    /**
     * 保存退出游戏的时间
     * @param value
     */
    saveLastDayNow(lastDayNow, lastWeekNow) {
        this.lastDayNow = lastDayNow;
        this.lastWeekNow = lastWeekNow;
        this.save(true);
    }
    /**重置每日任务 */
    resetDailyTask() {
        this.dailyTasks = {};
        this.save(true);
        Console.error("重置每日任务");
    }
    /**重置每周任务 */
    resetWeeklyTask() {
        this.weeklyTasks = {};
        this.save(true);
        Console.error("重置每周任务");
    }
}
__decorate([
    Decorator.persistence()
], TaskData.prototype, "lastDayNow", void 0);
__decorate([
    Decorator.persistence()
], TaskData.prototype, "lastWeekNow", void 0);
__decorate([
    Decorator.persistence()
], TaskData.prototype, "dailyTasks", void 0);
__decorate([
    Decorator.persistence()
], TaskData.prototype, "weeklyTasks", void 0);

var foreign82 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    Task: Task,
    TaskData: TaskData,
    get TaskItemType () { return TaskItemType; },
    get TaskType () { return TaskType; }
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/TaskModule/TaskPanel.ui
 * TIME: 2024.11.04-19.49.53
 */
let TaskPanel_Generate = class TaskPanel_Generate extends UIScript {
    get mDailyTaskTitleTextBlock() {
        if (!this.mDailyTaskTitleTextBlock_Internal && this.uiWidgetBase) {
            this.mDailyTaskTitleTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/TaskCanvas/DailyTaskCanvas/mDailyTaskTitleTextBlock');
        }
        return this.mDailyTaskTitleTextBlock_Internal;
    }
    get mDailyTimeTextBlock() {
        if (!this.mDailyTimeTextBlock_Internal && this.uiWidgetBase) {
            this.mDailyTimeTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/TaskCanvas/DailyTaskCanvas/mDailyTimeTextBlock');
        }
        return this.mDailyTimeTextBlock_Internal;
    }
    get mDailyTaskBox() {
        if (!this.mDailyTaskBox_Internal && this.uiWidgetBase) {
            this.mDailyTaskBox_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/TaskCanvas/DailyTaskCanvas/mDailyTaskBox');
        }
        return this.mDailyTaskBox_Internal;
    }
    get mDailyTaskCanvas() {
        if (!this.mDailyTaskCanvas_Internal && this.uiWidgetBase) {
            this.mDailyTaskCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/TaskCanvas/DailyTaskCanvas/mDailyTaskBox/mDailyTaskCanvas');
        }
        return this.mDailyTaskCanvas_Internal;
    }
    get mDailyTaskDoneTextBlock() {
        if (!this.mDailyTaskDoneTextBlock_Internal && this.uiWidgetBase) {
            this.mDailyTaskDoneTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/TaskCanvas/DailyTaskCanvas/mDailyTaskDoneTextBlock');
        }
        return this.mDailyTaskDoneTextBlock_Internal;
    }
    get mWeekTaskTitleTextBlock() {
        if (!this.mWeekTaskTitleTextBlock_Internal && this.uiWidgetBase) {
            this.mWeekTaskTitleTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/TaskCanvas/WeekTaskCanvas/mWeekTaskTitleTextBlock');
        }
        return this.mWeekTaskTitleTextBlock_Internal;
    }
    get mWeekTimeTextBlock() {
        if (!this.mWeekTimeTextBlock_Internal && this.uiWidgetBase) {
            this.mWeekTimeTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/TaskCanvas/WeekTaskCanvas/mWeekTimeTextBlock');
        }
        return this.mWeekTimeTextBlock_Internal;
    }
    get mWeekTaskBox() {
        if (!this.mWeekTaskBox_Internal && this.uiWidgetBase) {
            this.mWeekTaskBox_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/TaskCanvas/WeekTaskCanvas/mWeekTaskBox');
        }
        return this.mWeekTaskBox_Internal;
    }
    get mWeekTaskCanvas() {
        if (!this.mWeekTaskCanvas_Internal && this.uiWidgetBase) {
            this.mWeekTaskCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/TaskCanvas/WeekTaskCanvas/mWeekTaskBox/mWeekTaskCanvas');
        }
        return this.mWeekTaskCanvas_Internal;
    }
    get mWeekTaskDoneTextBlock() {
        if (!this.mWeekTaskDoneTextBlock_Internal && this.uiWidgetBase) {
            this.mWeekTaskDoneTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/TaskCanvas/WeekTaskCanvas/mWeekTaskDoneTextBlock');
        }
        return this.mWeekTaskDoneTextBlock_Internal;
    }
    get mCloseButton() {
        if (!this.mCloseButton_Internal && this.uiWidgetBase) {
            this.mCloseButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/TaskCanvas/mCloseButton');
        }
        return this.mCloseButton_Internal;
    }
    get mRecycleCanvas() {
        if (!this.mRecycleCanvas_Internal && this.uiWidgetBase) {
            this.mRecycleCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mRecycleCanvas');
        }
        return this.mRecycleCanvas_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        this.mCloseButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mCloseButton");
        });
        this.mCloseButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mDailyTaskTitleTextBlock);
        this.initLanguage(this.mDailyTimeTextBlock);
        this.initLanguage(this.mDailyTaskDoneTextBlock);
        this.initLanguage(this.mWeekTaskTitleTextBlock);
        this.initLanguage(this.mWeekTimeTextBlock);
        this.initLanguage(this.mWeekTaskDoneTextBlock);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
TaskPanel_Generate = __decorate([
    UIBind('UI/module/TaskModule/TaskPanel.ui')
], TaskPanel_Generate);
var TaskPanel_Generate$1 = TaskPanel_Generate;

var foreign158 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: TaskPanel_Generate$1
});

/**
 * AUTHOR: 爱玩游戏的小胖子
 * TIME: 2023.09.21-23.46.02
 */
class TaskPanel extends TaskPanel_Generate$1 {
    constructor() {
        super(...arguments);
        this.hudPanel = null;
        this.picIndex = 0;
        this.isPic = false;
        this.dailyTaskItemsMap = new Map();
        this.tmpDailyTaskItems = [];
        this.weeklyTaskItemsMap = new Map();
        this.tmpweeklyTaskItems = [];
        this.refreshDailyHourTime = 0;
        this.refreshWeekHourTime = 0;
        this.hourTimer = 0;
        this.hourTime = 60;
        this.hour = 0;
        this.week = 0;
    }
    get getHudPanel() {
        if (!this.hudPanel) {
            this.hudPanel = mw.UIService.getUI(HUDPanel);
        }
        return this.hudPanel;
    }
    onStart() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerMiddle;
        this.bindButton();
        this.initTime();
        this.initTextBlock();
    }
    initTextBlock() {
        this.mDailyTaskTitleTextBlock.text = GameConfig.Language.Text_DailyTasks.Value;
        this.mDailyTaskDoneTextBlock.text = GameConfig.Language.Text_AllTasksHaveBeenCompletedWaitingForRefresh.Value;
        this.mWeekTaskTitleTextBlock.text = GameConfig.Language.Text_WeeklyTasks.Value;
        this.mWeekTaskDoneTextBlock.text = GameConfig.Language.Text_AllTasksHaveBeenCompletedWaitingForRefresh.Value;
        if (GlobalData.languageId == 0) {
            this.mDailyTaskTitleTextBlock.fontSize = 40;
            this.mWeekTaskTitleTextBlock.fontSize = 35;
            this.mDailyTimeTextBlock.fontSize = 18;
            this.mWeekTimeTextBlock.fontSize = 18;
        }
        else {
            this.mDailyTaskTitleTextBlock.fontSize = 50;
            this.mWeekTaskTitleTextBlock.fontSize = 50;
            this.mDailyTimeTextBlock.fontSize = 30;
            this.mWeekTimeTextBlock.fontSize = 30;
        }
    }
    bindButton() {
        this.mCloseButton.onClicked.add(() => {
            this.hideTween();
        });
    }
    /**
     * 隐藏缓动
     */
    hideTween() {
        Utils.closeUITween(this.rootCanvas, null, () => {
            this.hide();
        });
    }
    onShow(...params) {
        this.canUpdate = true;
        this.mDailyTaskBox.scrollOffset = 0;
        this.mWeekTaskBox.scrollOffset = 0;
        Utils.openUITween(this.rootCanvas, null, null);
    }
    onHide() {
        this.canUpdate = false;
    }
    controllerPic(value) {
        this.picIndex += value;
        if (this.picIndex > 0 && this.isPic == false) {
            this.getHudPanel.startTaskRedPointTween();
            this.isPic = true;
        }
        else if (this.picIndex <= 0 && this.isPic == true) {
            this.getHudPanel.stopTaskRedPointTween();
            this.isPic = false;
        }
    }
    initTaskPanel(dailyTaskDataMap, weeklyTaskDataMap) {
        this.initDailyTaskPanel(dailyTaskDataMap);
        this.initWeeklyTaskPanel(weeklyTaskDataMap);
    }
    initDailyTaskPanel(dailyTaskDataMap) {
        this.recycleAllDailyTaskItem();
        if (dailyTaskDataMap.size == 0)
            return;
        this.mDailyTaskDoneTextBlock.visibility = mw.SlateVisibility.Collapsed;
        this.tmpDailyTaskItems.length = 0;
        dailyTaskDataMap.forEach((value, key) => {
            let dailyTaskItem = ObjectPoolServices.getPool(TaskItem).spawn();
            dailyTaskItem.initTaskItemData(key, value);
            if (dailyTaskItem.isGet) {
                this.mDailyTaskCanvas.addChild(dailyTaskItem.taskItem);
                dailyTaskItem.taskItem.size = new mw.Vector2(556, 94);
            }
            else {
                this.tmpDailyTaskItems.push(dailyTaskItem);
            }
            this.dailyTaskItemsMap.set(key, dailyTaskItem);
        });
        this.addDailyTaskCanvas();
    }
    addDailyTaskCanvas() {
        if (this.tmpDailyTaskItems && this.tmpDailyTaskItems.length > 0) {
            this.tmpDailyTaskItems.forEach((value) => {
                this.mDailyTaskCanvas.addChild(value.taskItem);
                value.taskItem.size = new mw.Vector2(556, 94);
            });
        }
    }
    updateTaskPanel(vipTaskType, progress) {
        if (this.dailyTaskItemsMap.has(vipTaskType)) {
            let dailyTaskItem = this.dailyTaskItemsMap.get(vipTaskType);
            dailyTaskItem.updateTaskItemData(progress);
            if (dailyTaskItem.isGet) {
                this.tmpDailyTaskItems.length = 0;
                this.dailyTaskItemsMap.forEach((value, key) => {
                    if (value.isGet)
                        return;
                    this.tmpDailyTaskItems.push(value);
                    this.mRecycleCanvas.addChild(value.taskItem);
                });
                this.addDailyTaskCanvas();
            }
        }
        if (this.weeklyTaskItemsMap.has(vipTaskType)) {
            let weeklyTaskItem = this.weeklyTaskItemsMap.get(vipTaskType);
            weeklyTaskItem.updateTaskItemData(progress);
            if (weeklyTaskItem.isGet) {
                this.tmpweeklyTaskItems.length = 0;
                this.weeklyTaskItemsMap.forEach((value, key) => {
                    if (value.isGet)
                        return;
                    this.tmpweeklyTaskItems.push(value);
                    this.mRecycleCanvas.addChild(value.taskItem);
                });
                this.addWeekTaskCanvas();
            }
        }
    }
    initWeeklyTaskPanel(weeklyTaskDataMap) {
        this.recycleAllWeeklyTaskItem();
        if (weeklyTaskDataMap.size == 0)
            return;
        this.mWeekTaskDoneTextBlock.visibility = mw.SlateVisibility.Collapsed;
        this.tmpweeklyTaskItems.length = 0;
        weeklyTaskDataMap.forEach((value, key) => {
            let weeklyTaskItem = ObjectPoolServices.getPool(TaskItem).spawn();
            weeklyTaskItem.initTaskItemData(key, value);
            if (weeklyTaskItem.isGet) {
                this.mWeekTaskCanvas.addChild(weeklyTaskItem.taskItem);
                weeklyTaskItem.taskItem.size = new mw.Vector2(556, 94);
            }
            else {
                this.tmpweeklyTaskItems.push(weeklyTaskItem);
            }
            this.weeklyTaskItemsMap.set(key, weeklyTaskItem);
        });
        this.addWeekTaskCanvas();
    }
    addWeekTaskCanvas() {
        if (this.tmpweeklyTaskItems && this.tmpweeklyTaskItems.length > 0) {
            this.tmpweeklyTaskItems.forEach((value) => {
                this.mWeekTaskCanvas.addChild(value.taskItem);
                value.taskItem.size = new mw.Vector2(556, 94);
            });
        }
    }
    updateTaskCompletePanel(vipTaskType) {
        if (this.dailyTaskItemsMap.has(vipTaskType)) {
            let dailyTaskItem = this.dailyTaskItemsMap.get(vipTaskType);
            dailyTaskItem.updateTaskCompaleteItemData();
        }
        if (this.weeklyTaskItemsMap.has(vipTaskType)) {
            let weeklyTaskItem = this.weeklyTaskItemsMap.get(vipTaskType);
            weeklyTaskItem.updateTaskCompaleteItemData();
        }
    }
    recycleTaskItem(vipTaskType) {
        if (this.dailyTaskItemsMap.has(vipTaskType)) {
            let dailyTaskItem = this.dailyTaskItemsMap.get(vipTaskType);
            dailyTaskItem.recycle();
            this.mRecycleCanvas.addChild(dailyTaskItem.taskItem);
            this.dailyTaskItemsMap.delete(vipTaskType);
            this.mDailyTaskBox.scrollOffset = 0;
            if (this.dailyTaskItemsMap.size <= 0) {
                this.mDailyTaskDoneTextBlock.visibility = mw.SlateVisibility.SelfHitTestInvisible;
            }
        }
        if (this.weeklyTaskItemsMap.has(vipTaskType)) {
            let weeklyTaskItem = this.weeklyTaskItemsMap.get(vipTaskType);
            weeklyTaskItem.recycle();
            this.mRecycleCanvas.addChild(weeklyTaskItem.taskItem);
            this.weeklyTaskItemsMap.delete(vipTaskType);
            this.mWeekTaskBox.scrollOffset = 0;
            if (this.weeklyTaskItemsMap.size <= 0) {
                this.mWeekTaskDoneTextBlock.visibility = mw.SlateVisibility.SelfHitTestInvisible;
            }
        }
    }
    recycleAllDailyTaskItem() {
        if (this.dailyTaskItemsMap.size == 0)
            return;
        this.dailyTaskItemsMap.forEach((value, key) => {
            value.recycle();
            this.mRecycleCanvas.addChild(value.taskItem);
            this.dailyTaskItemsMap.delete(key);
        });
        this.mDailyTaskBox.scrollOffset = 0;
        this.dailyTaskItemsMap.clear();
    }
    recycleAllWeeklyTaskItem() {
        if (this.weeklyTaskItemsMap.size == 0)
            return;
        this.weeklyTaskItemsMap.forEach((value, key) => {
            value.recycle();
            this.mRecycleCanvas.addChild(value.taskItem);
            this.weeklyTaskItemsMap.delete(key);
        });
        this.mWeekTaskBox.scrollOffset = 0;
        this.weeklyTaskItemsMap.clear();
    }
    initTime() {
        this.hour = new Date().getHours();
        this.updateHourTime();
        this.week = 8 - Number(Utils.getWhatDay());
        this.updateWeekTime();
        this.refreshDailyHourTime = Number(GlobalData.dailyRefreshTime.split(':')[0]);
        this.refreshWeekHourTime = Number(GlobalData.weeklyRefreshTime.split(':')[0]);
    }
    onUpdate(dt) {
        this.hourTimer += dt;
        if (this.hourTimer >= this.hourTime) {
            let hour = new Date().getHours();
            if (hour != this.hour) {
                this.hour = hour;
                this.updateHourTime();
            }
            let week = Number(Utils.getWhatDay());
            if (week != this.week) {
                this.week = week;
                this.updateWeekTime();
            }
            this.hourTimer = 0;
        }
    }
    updateHourTime() {
        if (this.hour >= 0 && this.hour < this.refreshDailyHourTime) {
            this.hour = this.refreshDailyHourTime - this.hour;
        }
        else {
            this.hour = 24 - this.hour + this.refreshDailyHourTime;
        }
        this.mDailyTimeTextBlock.text = StringUtil.format(GameConfig.Language.Text_RemainingHours.Value, this.hour);
    }
    updateWeekTime() {
        if (Number(Utils.getWhatDay()) == 1 && this.hour < this.refreshWeekHourTime) {
            this.mWeekTimeTextBlock.text = StringUtil.format(GameConfig.Language.Text_RemainingDays.Value, 1);
            this.week = 1;
        }
        else {
            this.mWeekTimeTextBlock.text = StringUtil.format(GameConfig.Language.Text_RemainingDays.Value, this.week);
        }
    }
}
class TaskItem {
    /**生成Item */
    constructor() {
        this.mNameTextBlock = undefined;
        this.mCoinCanvas = undefined;
        this.mCoinTextBlock = undefined;
        this.mExpCanvas = undefined;
        this.mExpTextBlock = undefined;
        this.mDiamondCanvas = undefined;
        this.mDiamondTextBlock = undefined;
        this.mFinishButton = undefined;
        this.mFinishTextBlock = undefined;
        this.mUnfinishTextBlock = undefined;
        this.vipTaskType = TaskItemType.None;
        this.task = null;
        this.vIPTaskElement = null;
        this.isGet = false;
        this.taskItem = mw.createUIByName("module/TaskModule/TaskItem");
        this.mNameTextBlock = this.taskItem.findChildByPath("RootCanvas/mNameTextBlock");
        this.mCoinCanvas = this.taskItem.findChildByPath("RootCanvas/mCoinCanvas");
        this.mCoinTextBlock = this.taskItem.findChildByPath("RootCanvas/mCoinCanvas/mCoinTextBlock");
        this.mExpCanvas = this.taskItem.findChildByPath("RootCanvas/mExpCanvas");
        this.mExpTextBlock = this.taskItem.findChildByPath("RootCanvas/mExpCanvas/mExpTextBlock");
        this.mDiamondCanvas = this.taskItem.findChildByPath("RootCanvas/mDiamondCanvas");
        this.mDiamondTextBlock = this.taskItem.findChildByPath("RootCanvas/mDiamondCanvas/mDiamondTextBlock");
        this.mFinishButton = this.taskItem.findChildByPath("RootCanvas/mFinishButton");
        this.mFinishTextBlock = this.taskItem.findChildByPath("RootCanvas/mFinishButton/mFinishTextBlock");
        this.mUnfinishTextBlock = this.taskItem.findChildByPath("RootCanvas/mUnfinishTextBlock");
        this.mFinishButton.visibility = mw.SlateVisibility.Collapsed;
        this.mFinishButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.initTextBlock();
    }
    initTextBlock() {
        this.mFinishTextBlock.text = GameConfig.Language.Text_ClaimRewards.Value;
        this.mUnfinishTextBlock.text = GameConfig.Language.Text_HangInTheAir.Value;
        if (GlobalData.languageId == 0) {
            this.mNameTextBlock.fontSize = 12;
            this.mFinishTextBlock.fontSize = 15;
            this.mUnfinishTextBlock.fontSize = 15;
        }
        else {
            this.mNameTextBlock.fontSize = 20;
            this.mFinishTextBlock.fontSize = 24;
            this.mUnfinishTextBlock.fontSize = 24;
        }
    }
    /**填充item数据 */
    initTaskItemData(vipTaskType, task) {
        this.vipTaskType = vipTaskType;
        this.task = task;
        this.vIPTaskElement = GameConfig.Task.getElement(this.task.taskId);
        if (task.isGetReward) {
            this.isShowFinishBtn(false);
            this.mUnfinishTextBlock.visibility = mw.SlateVisibility.Collapsed;
        }
        else {
            let isShow = task.progress >= this.vIPTaskElement.TragetNum;
            this.isShowFinishBtn(isShow);
            if (isShow) {
                mw.UIService.getUI(TaskPanel).controllerPic(1);
            }
        }
        setTimeout(() => {
            this.mNameTextBlock.text = StringUtil.format(this.vIPTaskElement.Name, this.task.progress, this.vIPTaskElement.TragetNum, this.vIPTaskElement.TragetNum);
        }, 1000);
        this.mCoinTextBlock.text = this.vIPTaskElement.Coin.toString();
        this.mExpTextBlock.text = this.vIPTaskElement.Exp.toString();
        this.mDiamondTextBlock.text = this.vIPTaskElement.Diamond.toString();
        if (this.vIPTaskElement.Exp == 0 || this.vIPTaskElement.Exp == null) {
            this.mExpCanvas.visibility = mw.SlateVisibility.Collapsed;
        }
        if (this.vIPTaskElement.Diamond == 0 || this.vIPTaskElement.Diamond == null) {
            this.mDiamondCanvas.visibility = mw.SlateVisibility.Collapsed;
        }
        this.mFinishButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick");
            ModuleService.getModule(TaskModuleC).onTaskRewardAction.call(this.vipTaskType, this.task.taskId);
            mw.UIService.getUI(TaskPanel).controllerPic(-1);
        });
    }
    isShowFinishBtn(isShow) {
        this.isGet = isShow;
        if (isShow) {
            if (this.mFinishButton.visibility != mw.SlateVisibility.Visible) {
                this.mFinishButton.visibility = mw.SlateVisibility.Visible;
            }
            if (this.mUnfinishTextBlock.visibility != mw.SlateVisibility.Collapsed) {
                this.mUnfinishTextBlock.visibility = mw.SlateVisibility.Collapsed;
            }
        }
        else {
            if (this.mFinishButton.visibility != mw.SlateVisibility.Collapsed) {
                this.mFinishButton.visibility = mw.SlateVisibility.Collapsed;
            }
            if (this.mUnfinishTextBlock.visibility != mw.SlateVisibility.SelfHitTestInvisible) {
                this.mUnfinishTextBlock.visibility = mw.SlateVisibility.SelfHitTestInvisible;
            }
        }
    }
    updateTaskItemData(progress) {
        let tragetNum = this.vIPTaskElement.TragetNum;
        this.task.progress = progress;
        this.mNameTextBlock.text = StringUtil.format(this.vIPTaskElement.Name, progress, tragetNum);
        if (progress >= tragetNum) {
            if (this.mFinishButton.visibility != mw.SlateVisibility.Visible) {
                mw.UIService.getUI(TaskPanel).controllerPic(1);
            }
            this.isShowFinishBtn(true);
        }
    }
    updateTaskCompaleteItemData() {
        let nextId = this.vIPTaskElement.NextId;
        if (nextId != 0) {
            this.task.taskId = nextId;
            // this.task.progress = 0;
            this.task.isGetReward = false;
            this.vIPTaskElement = GameConfig.Task.getElement(nextId);
            this.mNameTextBlock.text = StringUtil.format(this.vIPTaskElement.Name, this.task.progress, this.vIPTaskElement.TragetNum);
            this.mCoinTextBlock.text = this.vIPTaskElement.Coin.toString();
            this.mExpTextBlock.text = this.vIPTaskElement.Exp.toString();
            if (this.task.progress >= this.vIPTaskElement.TragetNum) {
                this.isShowFinishBtn(true);
                mw.UIService.getUI(TaskPanel).controllerPic(1);
                return;
            }
        }
        else {
            this.mUnfinishTextBlock.visibility = mw.SlateVisibility.Collapsed;
            this.task.isGetReward = true;
            mw.UIService.getUI(TaskPanel).recycleTaskItem(this.vipTaskType);
            return;
        }
        this.isShowFinishBtn(false);
    }
    /**回收 */
    recycle() {
        ObjectPoolServices.getPool(TaskItem).return(this);
    }
}

var foreign85 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: TaskPanel
});

class TaskModuleC extends ModuleC {
    constructor() {
        super(...arguments);
        this.hudModuleC = null;
        this.playerModuleC = null;
        this.taskPanel = null;
        /**执行任务（任务类型-数量） */
        this.onExecuteTaskAction = new Action2();
        /**奖励（任务类型-ID） */
        this.onTaskRewardAction = new Action2();
        this.nowTime = 0;
        this.tempDailTask = {};
        this.tempWeeklyTask = {};
        this.dailyTasks = {};
        this.weeklyTasks = {};
        this.dailyTaskMap = new Map();
        this.weeklyTaskMap = new Map();
        this.dailyLoginTimer = 0;
        this.dailyLoginTime = 60;
    }
    get getHudModuleC() {
        if (!this.hudModuleC) {
            this.hudModuleC = ModuleService.getModule(HUDModuleC);
        }
        return this.hudModuleC;
    }
    get getPlayerModuleC() {
        if (!this.playerModuleC) {
            this.playerModuleC = ModuleService.getModule(PlayerModuleC);
        }
        return this.playerModuleC;
    }
    get getTaskPanel() {
        if (!this.taskPanel) {
            this.taskPanel = mw.UIService.getUI(TaskPanel);
        }
        return this.taskPanel;
    }
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
        this.bindActions();
    }
    bindActions() {
        this.onExecuteTaskAction.add(this.executeTask.bind(this));
        this.onTaskRewardAction.add(this.getTaskRewardAndUpdateData.bind(this));
        this.getHudModuleC.onOpenTaskAction.add(() => {
            this.getTaskPanel.show();
        });
        Event.addLocalListener(`RequestNewPeopleGiftBagOnlineTime`, () => {
            this.sendNewPeopleOnlineTime(TaskItemType.DailyOnlineTime);
        });
    }
    sendNewPeopleOnlineTime(vipTaskType) {
        if (vipTaskType != TaskItemType.DailyOnlineTime)
            return;
        if (MapEx.has(this.dailyTasks, TaskItemType.DailyOnlineTime)) {
            let progress = MapEx.get(this.dailyTasks, TaskItemType.DailyOnlineTime).progress;
            Event.dispatchToLocal(`UpdateNewPeopleGiftBagOnlineTime`, progress);
        }
    }
    net_getServerTaskData(nowTime) {
        this.nowTime = nowTime;
        this.dailyTasks = this.data.dailyTasks;
        this.weeklyTasks = this.data.weeklyTasks;
        this.initTaskData();
        this.dailyLogin();
    }
    saveTaskToServer() {
        if (MapEx.count(this.tempDailTask) <= 0 && MapEx.count(this.tempWeeklyTask) <= 0)
            return;
        Console.error("[MapEx.count(this.tempDailTask)] A = " + MapEx.count(this.tempDailTask));
        Console.error("[MapEx.count(this.tempWeeklyTask)] A = " + MapEx.count(this.tempWeeklyTask));
        let dailyTaskIds = [];
        let dailyTaskTypes = [];
        let dailyProgresss = [];
        if (MapEx.count(this.tempDailTask) > 0) {
            MapEx.forEach(this.tempDailTask, (key, value) => {
                dailyTaskIds.push(value.taskId);
                dailyTaskTypes.push(key);
                dailyProgresss.push(value.progress);
                MapEx.del(this.tempDailTask, key);
                Console.error("[key] = " + key);
            });
        }
        let weeklyTaskIds = [];
        let weeklyTaskTypes = [];
        let weeklyProgresss = [];
        if (MapEx.count(this.tempWeeklyTask) > 0) {
            MapEx.forEach(this.tempWeeklyTask, (key, value) => {
                weeklyTaskIds.push(value.taskId);
                weeklyTaskTypes.push(key);
                weeklyProgresss.push(value.progress);
                MapEx.del(this.tempWeeklyTask, key);
            });
        }
        if (dailyTaskIds.length == 0 && weeklyTaskIds.length == 0) {
            Console.error("[dailyTaskIds.length == 0 && weeklyTaskIds.length == 0]");
            return;
        }
        this.server.net_saveTaskProgress(dailyTaskIds, dailyTaskTypes, dailyProgresss, weeklyTaskIds, weeklyTaskTypes, weeklyProgresss);
        Console.error("[MapEx.count(this.tempDailTask)] B = " + MapEx.count(this.tempDailTask));
        Console.error("[MapEx.count(this.tempWeeklyTask)] B = " + MapEx.count(this.tempWeeklyTask));
    }
    initTaskData() {
        this.dailyTaskMap.clear();
        this.weeklyTaskMap.clear();
        let dailyTaskDataMap = new Map();
        let weeklyTaskDataMap = new Map();
        let task = GameConfig.Task.getAllElement();
        for (let i = 0; i < task.length; ++i) {
            if (task[i].TaskType == TaskType.DailyTask) {
                let vipTaskType = task[i].TaskItemType;
                if (this.dailyTaskMap.has(vipTaskType))
                    continue;
                if (MapEx.has(this.dailyTasks, vipTaskType)) {
                    let value = MapEx.get(this.dailyTasks, vipTaskType);
                    this.dailyTaskMap.set(vipTaskType, GameConfig.Task.getElement(value.taskId));
                    if (value.isGetReward)
                        continue;
                    dailyTaskDataMap.set(vipTaskType, value);
                }
                else {
                    this.dailyTaskMap.set(vipTaskType, task[i]);
                    dailyTaskDataMap.set(vipTaskType, new Task(task[i].id, 0, false));
                }
            }
            else if (task[i].TaskType == TaskType.WeeklyTask) {
                let vipTaskType = task[i].TaskItemType;
                if (this.weeklyTaskMap.has(vipTaskType))
                    continue;
                if (MapEx.has(this.weeklyTasks, vipTaskType)) {
                    let value = MapEx.get(this.weeklyTasks, vipTaskType);
                    this.weeklyTaskMap.set(vipTaskType, GameConfig.Task.getElement(value.taskId));
                    if (value.isGetReward)
                        continue;
                    weeklyTaskDataMap.set(vipTaskType, value);
                }
                else {
                    this.weeklyTaskMap.set(vipTaskType, task[i]);
                    weeklyTaskDataMap.set(vipTaskType, new Task(task[i].id, 0, false));
                }
            }
        }
        if (dailyTaskDataMap.size == 0 && weeklyTaskDataMap.size == 0)
            return;
        Console.error("[dailyTaskDataMap.size] = " + dailyTaskDataMap.size);
        Console.error("[weeklyTaskDataMap.size] = " + weeklyTaskDataMap.size);
        this.getTaskPanel.initTaskPanel(dailyTaskDataMap, weeklyTaskDataMap);
    }
    executeTask(vipTaskType, num) {
        this.executeDailyTask(vipTaskType, num);
        this.executeWeeklyTask(vipTaskType, num);
    }
    executeDailyTask(vipTaskType, num) {
        let progress = 0;
        let taskId = 0;
        if (MapEx.has(this.dailyTasks, vipTaskType)) {
            let task = MapEx.get(this.dailyTasks, vipTaskType);
            progress = task.progress + num;
            GameConfig.Task.getElement(task.taskId).TragetNum;
            taskId = task.taskId;
        }
        else {
            if (!this.dailyTaskMap.has(vipTaskType)) {
                Console.error("[任务类型为" + vipTaskType + "的任务不存在]");
                return;
            }
            let dailTaskElement = this.dailyTaskMap.get(vipTaskType);
            progress = num;
            dailTaskElement.TragetNum;
            taskId = dailTaskElement.id;
        }
        // isOnComplete = (progress >= tragetNum) ? true : false;
        // if (isOnComplete) progress = tragetNum;
        this.saveDailyTask(taskId, vipTaskType, progress);
        let tmpDailTask = new Task(taskId, progress, false);
        MapEx.set(this.tempDailTask, vipTaskType, tmpDailTask);
        this.getTaskPanel.updateTaskPanel(vipTaskType, progress);
    }
    saveDailyTask(taskId, vipTaskType, progress) {
        let dailTask = null;
        if (MapEx.has(this.dailyTasks, vipTaskType)) {
            dailTask = MapEx.get(this.dailyTasks, vipTaskType);
            dailTask.progress = progress;
        }
        else {
            dailTask = new Task(taskId, progress, false);
        }
        MapEx.set(this.dailyTasks, vipTaskType, dailTask);
        this.weeklyOnlineTime(vipTaskType);
        this.sendNewPeopleOnlineTime(vipTaskType);
    }
    executeWeeklyTask(vipTaskType, num) {
        let progress = 0;
        let taskId = 0;
        if (MapEx.has(this.weeklyTasks, vipTaskType)) {
            let task = MapEx.get(this.weeklyTasks, vipTaskType);
            progress = task.progress + num;
            GameConfig.Task.getElement(task.taskId).TragetNum;
            taskId = task.taskId;
        }
        else {
            if (!this.weeklyTaskMap.has(vipTaskType)) {
                Console.error("[任务类型为" + vipTaskType + "的任务不存在]");
                return;
            }
            let weeklyTaskElement = this.weeklyTaskMap.get(vipTaskType);
            progress = num;
            weeklyTaskElement.TragetNum;
            taskId = weeklyTaskElement.id;
        }
        // isOnComplete = (progress >= tragetNum) ? true : false;
        // if (isOnComplete) progress = tragetNum;
        this.saveWeeklyTask(taskId, vipTaskType, progress);
        let tmpWeeklyTask = new Task(taskId, progress, false);
        MapEx.set(this.tempWeeklyTask, vipTaskType, tmpWeeklyTask);
        this.getTaskPanel.updateTaskPanel(vipTaskType, progress);
    }
    saveWeeklyTask(taskId, vipTaskType, progress) {
        let weeklyTask = null;
        if (MapEx.has(this.weeklyTasks, vipTaskType)) {
            weeklyTask = MapEx.get(this.weeklyTasks, vipTaskType);
            weeklyTask.progress = progress;
        }
        else {
            weeklyTask = new Task(taskId, progress, false);
        }
        MapEx.set(this.weeklyTasks, vipTaskType, weeklyTask);
    }
    getTaskRewardAndUpdateData(vipTaskType, taskId) {
        this.updateTaskCompleteData(vipTaskType);
        this.getTaskPanel.updateTaskCompletePanel(vipTaskType);
        this.getTaskReward(taskId);
    }
    updateTaskCompleteData(vipTaskType) {
        if (MapEx.has(this.dailyTasks, vipTaskType)) {
            let dailyTask = MapEx.get(this.dailyTasks, vipTaskType);
            let nextId = GameConfig.Task.getElement(dailyTask.taskId).NextId;
            if (nextId != 0) {
                dailyTask.taskId = nextId;
                // dailyTask.progress = 0;
                dailyTask.isGetReward = false;
            }
            else {
                dailyTask.isGetReward = true;
            }
            MapEx.set(this.dailyTasks, vipTaskType, dailyTask);
        }
        if (MapEx.has(this.weeklyTasks, vipTaskType)) {
            let weeklyTask = MapEx.get(this.weeklyTasks, vipTaskType);
            let nextId = GameConfig.Task.getElement(weeklyTask.taskId).NextId;
            if (nextId != 0) {
                weeklyTask.taskId = nextId;
                // weeklyTask.progress = 0;
                weeklyTask.isGetReward = false;
            }
            else {
                weeklyTask.isGetReward = true;
            }
            MapEx.set(this.weeklyTasks, vipTaskType, weeklyTask);
        }
        if (this.dailyTaskMap.has(vipTaskType)) {
            let dailyTaskElement = this.dailyTaskMap.get(vipTaskType);
            if (dailyTaskElement.NextId != 0) {
                this.dailyTaskMap.set(vipTaskType, GameConfig.Task.getElement(dailyTaskElement.NextId));
            }
        }
        if (this.weeklyTaskMap.has(vipTaskType)) {
            let weeklyTaskElement = this.weeklyTaskMap.get(vipTaskType);
            if (weeklyTaskElement.NextId != 0) {
                this.weeklyTaskMap.set(vipTaskType, GameConfig.Task.getElement(weeklyTaskElement.NextId));
            }
        }
        this.server.net_updateTaskConpleteData(vipTaskType);
    }
    getTaskReward(taskId) {
        let taskElement = GameConfig.Task.getElement(taskId);
        let rewardExp = taskElement.Exp;
        let rewardCoin = taskElement.Coin;
        let rewardDiamond = taskElement.Diamond;
        Console.error("[奖励经验：" + rewardExp + "][奖励金币：" + rewardCoin + "]");
        Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_RewardCoins.Value, rewardCoin));
        Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_RewardExperience.Value, rewardExp));
        Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_RewardDiamonds.Value, rewardDiamond));
        this.getPlayerModuleC.saveCoinAndExp(rewardCoin, rewardExp);
        this.getPlayerModuleC.saveDiamond(rewardDiamond);
    }
    /**重置每日任务 */
    net_resetDailyTask() {
        this.dailyTasks = {};
        this.initTaskData();
        this.dailyLogin();
    }
    /**重置每周任务 */
    net_resetWeeklyTask() {
        this.weeklyTasks = {};
        this.initTaskData();
    }
    onUpdate(dt) {
        this.saveTaskToServer();
        this.updateDailyLogin(dt);
    }
    /**每日登录游戏 */
    dailyLogin() {
        if (MapEx.has(this.dailyTasks, TaskItemType.DailyLogin))
            return;
        this.onExecuteTaskAction.call(TaskItemType.DailyLogin, 1);
        this.weeklyLogin();
    }
    /**每日在线时长 */
    updateDailyLogin(dt) {
        this.dailyLoginTimer += dt;
        if (this.dailyLoginTimer >= this.dailyLoginTime) {
            this.dailyLoginTimer = 0;
            this.dailyOnlineTime();
        }
    }
    dailyOnlineTime() {
        for (let i = 11; i <= 16; ++i) {
            this.onExecuteTaskAction.call(i, 1);
        }
    }
    net_killMonster(monsterId) {
        let taskItemType = TaskItemType.None;
        let taskItemType1 = TaskItemType.None;
        switch (monsterId) {
            case 1:
                taskItemType = TaskItemType.DailyKillMedusa;
                taskItemType1 = TaskItemType.WeeklyKillMedusa;
                break;
            case 2:
                taskItemType = TaskItemType.DailyKillColorfulSpider;
                taskItemType1 = TaskItemType.WeeklyKillColorfulSpider;
                break;
            case 3:
                taskItemType = TaskItemType.DailyKillSpider;
                taskItemType1 = TaskItemType.WeeklyKillSpider;
                break;
            case 4:
                taskItemType = TaskItemType.DailyKillDragon;
                taskItemType1 = TaskItemType.WeeklyKillDragon;
                break;
            case 5:
                taskItemType = TaskItemType.DailyKillZombie;
                taskItemType1 = TaskItemType.WeeklyKillZombie;
                break;
            case 6:
                taskItemType = TaskItemType.DailyKillMutantPuppet;
                taskItemType1 = TaskItemType.WeeklyKillMutantPuppet;
                break;
        }
        if (taskItemType == TaskItemType.None)
            return;
        this.dailyKillMonster(taskItemType);
        this.weeklyKillMonster(taskItemType1);
    }
    dailyKillMonster(taskItemType) {
        let start = Number(taskItemType);
        let end = start + 4;
        for (let i = start; i <= end; ++i) {
            this.onExecuteTaskAction.call(i, 1);
        }
    }
    weeklyLogin() {
        for (let i = 201; i <= 204; ++i) {
            this.onExecuteTaskAction.call(i, 1);
        }
    }
    weeklyOnlineTime(vipTaskType) {
        if (vipTaskType != TaskItemType.DailyOnlineTime)
            return;
        if (MapEx.has(this.dailyTasks, TaskItemType.DailyOnlineTime)) {
            let progress = MapEx.get(this.dailyTasks, TaskItemType.DailyOnlineTime).progress;
            if (progress == 30) { //每日在线时长达到30分钟时，执行一次每周登录时长30分钟的任务
                for (let i = 211; i <= 214; ++i) {
                    this.onExecuteTaskAction.call(i, 1);
                }
            }
        }
    }
    weeklyKillMonster(taskItemType) {
        let start = Number(taskItemType);
        let end = start + 4;
        for (let i = start; i <= end; ++i) {
            this.onExecuteTaskAction.call(i, 1);
        }
    }
    upLv(lv) {
        for (let i = 91; i <= 95; ++i) {
            this.onExecuteTaskAction.call(i, 1);
        }
        for (let i = 291; i <= 295; ++i) {
            this.onExecuteTaskAction.call(i, 1);
        }
    }
    pickUpTreasure() {
        for (let i = 101; i <= 105; ++i) {
            this.onExecuteTaskAction.call(i, 1);
        }
        for (let i = 301; i <= 305; ++i) {
            this.onExecuteTaskAction.call(i, 1);
        }
    }
    net_killPlayer() {
        for (let i = 81; i <= 85; ++i) {
            this.onExecuteTaskAction.call(i, 1);
        }
        for (let i = 281; i <= 285; ++i) {
            this.onExecuteTaskAction.call(i, 1);
        }
    }
    ads() {
        for (let i = 111; i <= 115; ++i) {
            this.onExecuteTaskAction.call(i, 1);
        }
        for (let i = 311; i <= 315; ++i) {
            this.onExecuteTaskAction.call(i, 1);
        }
    }
}

var foreign83 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: TaskModuleC
});

class AdTipsPanel extends AdsTipsPanel_Generate$1 {
    constructor() {
        super(...arguments);
        this.taskModuleC = null;
        this.callback = null;
    }
    get getTaskModuleC() {
        if (!this.taskModuleC) {
            this.taskModuleC = ModuleService.getModule(TaskModuleC);
        }
        return this.taskModuleC;
    }
    onStart() {
        this.canUpdate = false;
        this.layer = mw.UILayerDialog;
        this.initTextBlock();
        this.bindButtons();
    }
    initTextBlock() {
        this.mTitleTxt.text = GameConfig.Language.Text_AdvertisingRewards.Value;
        if (GlobalData.languageId == 0) {
            this.mTitleTxt.fontSize = 15;
            this.mContentTxt.fontSize = 30;
        }
        else {
            this.mTitleTxt.fontSize = 35;
            this.mContentTxt.fontSize = 35;
        }
    }
    bindButtons() {
        this.mYesBtn.onClose.add(this.onClickYesButton.bind(this));
        this.mNoBtn.onClicked.add(this.onClickNoButton.bind(this));
    }
    onClickYesButton(isSuccess) {
        if (!isSuccess) {
            Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_FailedPleaseTryAgain.Value, this.mYesBtn.text));
            return;
        }
        this.hideAdPanel();
        if (this.callback) {
            this.callback();
            this.getTaskModuleC.ads();
        }
    }
    onClickNoButton() {
        this.hideAdPanel();
    }
    showRewardAd(callback, contentText, noText, yesText) {
        this.callback = callback;
        this.mContentTxt.text = contentText;
        this.mNoBtn.text = noText;
        this.mYesBtn.text = yesText;
        this.showAdPanel();
    }
    showAdPanel() {
        if (this.visible)
            return;
        this.show();
    }
    hideAdPanel() {
        if (!this.visible)
            return;
        Utils.closeUITween(this.rootCanvas, null, () => {
            this.hide();
        });
    }
    onShow(...params) {
        Utils.openUITween(this.rootCanvas, null, null);
    }
}

var foreign45 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: AdTipsPanel
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/GuideModule/GuideUI.ui
 * TIME: 2024.11.04-19.49.52
 */
let GuideUI_Generate = class GuideUI_Generate extends UIScript {
    get image1() {
        if (!this.image1_Internal && this.uiWidgetBase) {
            this.image1_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/image1');
        }
        return this.image1_Internal;
    }
    get image2() {
        if (!this.image2_Internal && this.uiWidgetBase) {
            this.image2_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/image2');
        }
        return this.image2_Internal;
    }
    get image3() {
        if (!this.image3_Internal && this.uiWidgetBase) {
            this.image3_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/image3');
        }
        return this.image3_Internal;
    }
    get image4() {
        if (!this.image4_Internal && this.uiWidgetBase) {
            this.image4_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/image4');
        }
        return this.image4_Internal;
    }
    get container() {
        if (!this.container_Internal && this.uiWidgetBase) {
            this.container_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/container');
        }
        return this.container_Internal;
    }
    get image() {
        if (!this.image_Internal && this.uiWidgetBase) {
            this.image_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/container/image');
        }
        return this.image_Internal;
    }
    get mContentTextBlock() {
        if (!this.mContentTextBlock_Internal && this.uiWidgetBase) {
            this.mContentTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/container/mContentTextBlock');
        }
        return this.mContentTextBlock_Internal;
    }
    get mContinueClickTextBlock() {
        if (!this.mContinueClickTextBlock_Internal && this.uiWidgetBase) {
            this.mContinueClickTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/container/mContinueClickTextBlock');
        }
        return this.mContinueClickTextBlock_Internal;
    }
    get guide() {
        if (!this.guide_Internal && this.uiWidgetBase) {
            this.guide_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/guide');
        }
        return this.guide_Internal;
    }
    get button() {
        if (!this.button_Internal && this.uiWidgetBase) {
            this.button_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/button');
        }
        return this.button_Internal;
    }
    get bg() {
        if (!this.bg_Internal && this.uiWidgetBase) {
            this.bg_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/bg');
        }
        return this.bg_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        this.button.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "button");
        });
        this.initLanguage(this.button);
        this.button.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        //按钮添加点击
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mContentTextBlock);
        this.initLanguage(this.mContinueClickTextBlock);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
GuideUI_Generate = __decorate([
    UIBind('UI/module/GuideModule/GuideUI.ui')
], GuideUI_Generate);
var GuideUI_Generate$1 = GuideUI_Generate;

var foreign129 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: GuideUI_Generate$1
});

/**
 * AUTHOR: 穿迷彩服的鲨鱼
 * TIME: 2023.09.26-13.56.59
 */
class GuidePanel extends GuideUI_Generate$1 {
    constructor() {
        super(...arguments);
        this.canClick = false;
        /**
         * 接收空间坐标
         */
        this.outPixelPos = new mw.Vector2(0, 0);
        /**
         * 用于接收视口坐标
         */
        this.outViewPos = new mw.Vector2(0, 0);
        this.guideModuleC = null;
        this.hudPanel = null;
        this.centPos = mw.Vector2.zero;
    }
    /**
     * 构造UI文件成功后，在合适的时机最先初始化一次
     */
    onStart() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerMiddle;
        this.initData();
        this.bindButton();
        this.initTextBlock();
    }
    get getGuideModuleC() {
        if (!this.guideModuleC) {
            this.guideModuleC = ModuleService.getModule(GuideModuleC);
        }
        return this.guideModuleC;
    }
    get getHudPanel() {
        if (!this.hudPanel) {
            this.hudPanel = mw.UIService.getUI(HUDPanel);
        }
        return this.hudPanel;
    }
    initTextBlock() {
        this.mContinueClickTextBlock.text = GameConfig.Language.Text_ClickAnywhereToContinue.Value;
    }
    initData() {
        this.centPos = new mw.Vector(this.getHudPanel.rootCanvas.size.x / 2 - this.container.size.x / 2, this.getHudPanel.rootCanvas.size.y / 2 - this.container.size.y / 2);
    }
    bindButton() {
        this.button.onClicked.add(() => {
            if (this.canClick) {
                this.canClick = false;
                this.hide();
                this.getGuideModuleC.onNextStepAction.call();
            }
        });
    }
    // 实际逻辑写的地方
    guideByStep(step) {
        this.show();
        this.setVisibility(this.button, true);
        this.bg.visibility = mw.SlateVisibility.Collapsed;
        switch (step) {
            case 0:
                this.guide0();
                break;
            case 1: // 第一步
                this.guide1();
                break;
            case 2: // 第二步
                this.guide2();
                break;
            case 3: // 第三步
                this.guide3();
                break;
            case 4:
                this.guide4();
                break;
            case 5:
                this.guide5();
                break;
            case 6:
                this.guide6();
                break;
            case 7:
                this.guide7();
                break;
            case 8:
                this.guide8();
                break;
            case 9:
                this.guide9();
                break;
            case 10:
                this.guide10();
                break;
            case 11:
                this.guide11();
                break;
            case 12:
                this.guide12();
                break;
            case 13:
                this.guide13();
                break;
            case 14:
                this.guide14();
                break;
            case 15:
                this.guide15();
                break;
            case 16:
                this.guide16();
                break;
            case 17:
                this.guide17();
                break;
            case 18:
                this.guide18();
                break;
            case 19:
                this.guide19();
                break;
            case 20:
                this.guide20();
                break;
            case 21:
                this.guide21();
                break;
            case 22:
                this.guide22();
                break;
            case 23:
                this.guide23();
                break;
            case 24:
                this.guide24();
                break;
            case 25:
                this.guide25();
                break;
            case 26:
                this.guide26();
                break;
            case 27:
                this.guide27();
                break;
            case 28:
                this.guide28();
                break;
            // 可以继续增加无数步
            default:
                this.hide();
                break;
        }
    }
    guide0() {
        this.cover(new mw.Vector2(0, 0), new mw.Vector2(0, 0), this.centPos, StringUtil.format(GameConfig.Language.Text_Guid_0.Value, GlobalData.gameName), 0, true);
    }
    guide1() {
        mw.localToViewport(this.getHudPanel.mVirtualJoystickPanel.tickSpaceGeometry, mw.Vector2.zero, this.outPixelPos, this.outViewPos);
        this.cover(this.outViewPos, this.getHudPanel.mVirtualJoystickPanel.size, new mw.Vector2(900, 200), GameConfig.Language.Text_Guid_1.Value, 0, true);
    }
    guide2() {
        mw.localToViewport(this.getHudPanel.mTouchPad.tickSpaceGeometry, mw.Vector2.zero, this.outPixelPos, this.outViewPos);
        this.cover(this.outViewPos, this.getHudPanel.mTouchPad.size, new mw.Vector2(0, 250), GameConfig.Language.Text_Guid_2.Value, 0, true);
    }
    guide3() {
        mw.localToViewport(this.getHudPanel.mJumpButton.tickSpaceGeometry, mw.Vector2.zero, this.outPixelPos, this.outViewPos);
        this.cover(this.outViewPos, this.getHudPanel.mJumpButton.size, new mw.Vector2(700, 350), StringUtil.format(GameConfig.Language.Text_Guid_3.Value, GlobalData.mpStr), 0, true);
    }
    guide4() {
        mw.localToViewport(this.getHudPanel.mFlyButton.tickSpaceGeometry, mw.Vector2.zero, this.outPixelPos, this.outViewPos);
        this.cover(this.outViewPos, this.getHudPanel.mFlyButton.size, new mw.Vector2(500, 550), GameConfig.Language.Text_Guid_4.Value, 0, true);
    }
    // private guide4(): void {
    // 	mw.localToViewport(this.getHudPanel.mSprintButton.tickSpaceGeometry, mw.Vector2.zero, this.outPixelPos, this.outViewPos);
    // 	this.cover(this.outViewPos, this.getHudPanel.mSprintButton.size,
    // 		new mw.Vector2(500, 550), `冲刺按钮，可以直接瞬移一段距离，会消耗${GlobalData.mpStr}。`, 0, true)
    // }
    guide5() {
        mw.localToViewport(this.getHudPanel.mAtkButton.tickSpaceGeometry, mw.Vector2.zero, this.outPixelPos, this.outViewPos);
        this.cover(this.outViewPos, this.getHudPanel.mAtkButton.size, new mw.Vector2(400, 550), StringUtil.format(GameConfig.Language.Text_Guid_5.Value, GlobalData.mpStr), 0, true);
    }
    guide6() {
        mw.localToViewport(this.getHudPanel.mAutoAtkButton.tickSpaceGeometry, mw.Vector2.zero, this.outPixelPos, this.outViewPos);
        this.cover(this.outViewPos, this.getHudPanel.mAutoAtkButton.size, new mw.Vector2(400, 550), GameConfig.Language.Text_Guid_6.Value, 0, true);
    }
    guide7() {
        mw.localToViewport(this.getHudPanel.mOnOffRingSoulCanvas.tickSpaceGeometry, mw.Vector2.zero, this.outPixelPos, this.outViewPos);
        this.cover(this.outViewPos, this.getHudPanel.mOnOffRingSoulCanvas.size, new mw.Vector2(250, 550), GameConfig.Language.Text_Guid_7.Value, 0, true);
    }
    guide8() {
        mw.localToViewport(this.getHudPanel.mMusicButton.tickSpaceGeometry, mw.Vector2.zero, this.outPixelPos, this.outViewPos);
        this.cover(this.outViewPos, this.getHudPanel.mMusicButton.size, new mw.Vector2(710, 150), GameConfig.Language.Text_Guid_8.Value, 1, true);
    }
    guide9() {
        mw.localToViewport(this.getHudPanel.mHomeButton.tickSpaceGeometry, mw.Vector2.zero, this.outPixelPos, this.outViewPos);
        this.cover(this.outViewPos, this.getHudPanel.mHomeButton.size, new mw.Vector2(510, 150), GameConfig.Language.Text_Guid_9.Value, 1, true);
    }
    guide10() {
        mw.localToViewport(this.getHudPanel.mShopButton.tickSpaceGeometry, mw.Vector2.zero, this.outPixelPos, this.outViewPos);
        this.cover(this.outViewPos, this.getHudPanel.mShopButton.size, new mw.Vector2(310, 150), GameConfig.Language.Text_Guid_10.Value, 1, true);
    }
    guide11() {
        mw.localToViewport(this.getHudPanel.mRankButton.tickSpaceGeometry, mw.Vector2.zero, this.outPixelPos, this.outViewPos);
        this.cover(this.outViewPos, this.getHudPanel.mRankButton.size, new mw.Vector2(110, 150), GameConfig.Language.Text_Guid_11.Value, 1, true);
    }
    guide12() {
        mw.localToViewport(this.getHudPanel.mLotteryButton.tickSpaceGeometry, mw.Vector2.zero, this.outPixelPos, this.outViewPos);
        this.cover(this.outViewPos, this.getHudPanel.mLotteryButton.size, new mw.Vector2(0, 150), GameConfig.Language.Text_Guid_12.Value, 1, true);
    }
    guide13() {
        mw.localToViewport(this.getHudPanel.mOnlineRewardButton.tickSpaceGeometry, mw.Vector2.zero, this.outPixelPos, this.outViewPos);
        this.cover(this.outViewPos, this.getHudPanel.mOnlineRewardButton.size, new mw.Vector2(710, 150), GameConfig.Language.Text_Guid_13.Value, 1, true);
    }
    guide14() {
        mw.localToViewport(this.getHudPanel.mTaskButton.tickSpaceGeometry, mw.Vector2.zero, this.outPixelPos, this.outViewPos);
        this.cover(this.outViewPos, this.getHudPanel.mTaskButton.size, new mw.Vector2(510, 150), GameConfig.Language.Text_Guid_14.Value, 1, true);
    }
    guide15() {
        mw.localToViewport(this.getHudPanel.mSignInButton.tickSpaceGeometry, mw.Vector2.zero, this.outPixelPos, this.outViewPos);
        this.cover(this.outViewPos, this.getHudPanel.mSignInButton.size, new mw.Vector2(310, 150), GameConfig.Language.Text_Guid_15.Value, 1, true);
    }
    guide16() {
        mw.localToViewport(this.getHudPanel.mAdsButton.tickSpaceGeometry, mw.Vector2.zero, this.outPixelPos, this.outViewPos);
        this.cover(this.outViewPos, this.getHudPanel.mAdsButton.size, new mw.Vector2(110, 150), GameConfig.Language.Text_Guid_16.Value, 1, true);
    }
    guide17() {
        mw.localToViewport(this.getHudPanel.mSwordButton.tickSpaceGeometry, mw.Vector2.zero, this.outPixelPos, this.outViewPos);
        this.cover(this.outViewPos, this.getHudPanel.mSwordButton.size, new mw.Vector2(0, 150), GameConfig.Language.Text_Guid_17.Value, 1, true);
    }
    guide18() {
        mw.localToViewport(this.getHudPanel.mArkButton.tickSpaceGeometry, mw.Vector2.zero, this.outPixelPos, this.outViewPos);
        this.cover(this.outViewPos, this.getHudPanel.mArkButton.size, new mw.Vector2(710, 150), GameConfig.Language.Text_Guid_18.Value, 1, true);
    }
    guide19() {
        mw.localToViewport(this.getHudPanel.mGetButton.tickSpaceGeometry, mw.Vector2.zero, this.outPixelPos, this.outViewPos);
        this.cover(this.outViewPos, this.getHudPanel.mGetButton.size, new mw.Vector2(510, 150), GameConfig.Language.Text_Guid_19.Value, 1, true);
    }
    guide20() {
        mw.localToViewport(this.getHudPanel.mNewPeopleButton.tickSpaceGeometry, mw.Vector2.zero, this.outPixelPos, this.outViewPos);
        this.cover(this.outViewPos, this.getHudPanel.mNewPeopleButton.size, new mw.Vector2(310, 150), GameConfig.Language.Text_Guid_20.Value, 1, true);
    }
    guide21() {
        mw.localToViewport(this.getHudPanel.mRingSoulButton.tickSpaceGeometry, mw.Vector2.zero, this.outPixelPos, this.outViewPos);
        this.cover(this.outViewPos, this.getHudPanel.mRingSoulButton.size, new mw.Vector2(110, 150), GameConfig.Language.Text_Guid_21.Value, 1, true);
    }
    guide22() {
        mw.localToViewport(this.getHudPanel.mSoulBoneButton.tickSpaceGeometry, mw.Vector2.zero, this.outPixelPos, this.outViewPos);
        this.cover(this.outViewPos, this.getHudPanel.mSoulBoneButton.size, new mw.Vector2(110, 150), GameConfig.Language.Text_Guid_28.Value, 1, true);
    }
    guide23() {
        mw.localToViewport(this.getHudPanel.mUpExpButton.tickSpaceGeometry, mw.Vector2.zero, this.outPixelPos, this.outViewPos);
        this.cover(this.outViewPos, this.getHudPanel.mUpExpButton.size, new mw.Vector2(300, 350), GameConfig.Language.Text_Guid_22.Value, 1, true);
    }
    guide24() {
        mw.localToViewport(this.getHudPanel.mInvincibleButton.tickSpaceGeometry, mw.Vector2.zero, this.outPixelPos, this.outViewPos);
        this.cover(this.outViewPos, this.getHudPanel.mInvincibleButton.size, new mw.Vector2(550, 350), GameConfig.Language.Text_Guid_23.Value, 1, true);
    }
    guide25() {
        mw.localToViewport(this.getHudPanel.mRoleCanvas_G.tickSpaceGeometry, mw.Vector2.zero, this.outPixelPos, this.outViewPos);
        this.cover(this.outViewPos, this.getHudPanel.mRoleCanvas_G.size, new mw.Vector2(550, 350), StringUtil.format(GameConfig.Language.Text_Guid_24.Value, GlobalData.mpStr), 1, true);
    }
    guide26() {
        mw.localToViewport(this.getHudPanel.mAddCoinButton.tickSpaceGeometry, mw.Vector2.zero, this.outPixelPos, this.outViewPos);
        this.cover(this.outViewPos, this.getHudPanel.mAddCoinButton.size, new mw.Vector2(550, 350), GameConfig.Language.Text_Guid_25.Value, 1, true);
    }
    guide27() {
        mw.localToViewport(this.getHudPanel.mAddDiamondButton.tickSpaceGeometry, mw.Vector2.zero, this.outPixelPos, this.outViewPos);
        this.cover(this.outViewPos, this.getHudPanel.mAddCoinButton.size, new mw.Vector2(550, 350), GameConfig.Language.Text_Guid_26.Value, 1, true);
    }
    guide28() {
        this.cover(new mw.Vector2(0, 0), new mw.Vector2(0, 0), this.centPos, GameConfig.Language.Text_Guid_27.Value, 0, true);
    }
    /**
     * 引导覆盖方法
     * @param position 目标UI的中心位置，用于把周围四个黑图环绕它
     * @param size 目标UI的大小，用于把周围四个黑图环绕它
     * @param pos 设置文本提示的显示位置
     * @param text 文本提示的内容
     * @param dir 箭头朝向
     * @param bgBtnShow 背景按钮是否显示
     */
    cover(position, size, pos, text, dir = 0, bgBtnShow = true) {
        this.setVisibility(this.button, bgBtnShow);
        this.coverUI(position, size, pos, text, dir);
    }
    coverUI(position, size, pos, text, dir = 0) {
        this.setVisibility(this.image1, true);
        this.setVisibility(this.image2, true);
        this.setVisibility(this.image3, true);
        this.setVisibility(this.image4, true);
        let screen = WindowUtil.getViewportSize();
        this.image1.position = (new mw.Vector2(0, 0));
        this.image1.size = (new mw.Vector2(position.x + size.x + 10, position.y - 10));
        this.image2.position = (new mw.Vector2(0, position.y - 10));
        this.image2.size = (new mw.Vector2(position.x - 10, screen.y - position.y + 10));
        this.image3.position = (new mw.Vector2(position.x + size.x + 10, 0));
        this.image3.size = (new mw.Vector2(screen.x - position.x - size.x - 10, position.y + size.y + 10));
        this.image4.position = (new mw.Vector2(position.x - 10, position.y + size.y + 10));
        this.image4.size = (new mw.Vector2(screen.x - position.x + 10, screen.y - position.y - size.y - 10));
        this.canClick = true;
        if (text) {
            this.setVisibility(this.container, true);
            this.container.position = pos;
            this.mContentTextBlock.text = text;
        }
        else {
            this.setVisibility(this.container, false);
        }
        if (!size.equals(mw.Vector2.zero)) {
            this.setVisibility(this.guide, true);
            if (dir == 0) {
                this.guide.renderTransformAngle = (0);
                this.guide.position = (new mw.Vector2(position.x + size.x / 2 - this.guide.size.x / 2, position.y - this.guide.size.y));
            }
            else {
                this.guide.renderTransformAngle = (180);
                this.guide.position = (new mw.Vector2(position.x + size.x / 2 - this.guide.size.x / 2, position.y + size.y));
            }
        }
        else {
            this.guide.visibility = mw.SlateVisibility.Collapsed;
        }
    }
    setVisibility(ui, isShow, isBlock = false) {
        let visibilityType = isShow ?
            isBlock ? mw.SlateVisibility.SelfHitTestInvisible : mw.SlateVisibility.Visible
            : mw.SlateVisibility.Hidden;
        ui.visibility = (visibilityType);
    }
}

var foreign51 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: GuidePanel
});

class GuideData extends Subdata {
    constructor() {
        super(...arguments);
        this.isFirst = true;
    }
    initDefaultData() {
        this.isFirst = true;
    }
    /**
     * 完成新手引导
     */
    onCompleted() {
        this.isFirst = false;
        this.save(true);
    }
}
__decorate([
    Decorator.persistence()
], GuideData.prototype, "isFirst", void 0);
class GuideModuleC extends ModuleC {
    constructor() {
        super(...arguments);
        this.guidePanel = null;
        this.bagModuleC = null;
        this.totalStep = 28;
        this.curStep = -1;
        this.onNextStepAction = new Action();
        this.isHasCall = false;
        /**引导目标点特效ID */
        // private targetGuideEffectId: number = null;
        /**引导间隔标识 */
        this.guideIntervalId = null;
        /**引导线特效ID */
        this.guideEffectIds = [];
        /**记录上一次玩家的坐标 */
        this.prePlayerLoc = mw.Vector.zero;
    }
    get getGuidePanel() {
        if (!this.guidePanel) {
            this.guidePanel = mw.UIService.getUI(GuidePanel);
        }
        return this.guidePanel;
    }
    get getBagModuleC() {
        if (!this.bagModuleC) {
            this.bagModuleC = ModuleService.getModule(BagModuleC);
        }
        return this.bagModuleC;
    }
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
    }
    startFirst() {
        if (this.isHasCall)
            return;
        this.isHasCall = true;
        if (this.data.isFirst) {
            this.onNextStepAction.add(() => {
                console.error(this.curStep);
                this.curStep++;
                if (this.curStep > this.totalStep) {
                    if (!this.data.isFirst)
                        return;
                    this.onCompleted();
                    return;
                }
                this.getGuidePanel.guideByStep(this.curStep);
            });
            this.onNextStepAction.call();
        }
        else {
            this.find();
        }
    }
    /**开始引导 */
    startGuide(targetLoc, onComplete = null) {
        if (!targetLoc)
            return;
        // if (this.targetGuideEffectId) {
        //     EffectService.stop(this.targetGuideEffectId);
        //     this.targetGuideEffectId = null;
        // }
        // this.targetGuideEffectId = GeneralManager.rpcPlayEffectAtLocation(GlobalData.targetEffectGuid,
        //     targetLoc, 0, mw.Rotation.zero, mw.Vector.one.multiply(5));
        if (this.guideIntervalId) {
            TimeUtil.clearInterval(this.guideIntervalId);
            this.guideIntervalId = null;
        }
        this.guideIntervalId = TimeUtil.setInterval(() => {
            let playerLoc = this.localPlayer.character.worldTransform.position;
            if (Math.abs(playerLoc.x - this.prePlayerLoc.x) < 0.1 && Math.abs(playerLoc.y - this.prePlayerLoc.y) < 0.1 && Math.abs(playerLoc.z - this.prePlayerLoc.z) < 0.1)
                return;
            this.prePlayerLoc = playerLoc;
            let distance = mw.Vector.distance(playerLoc, targetLoc);
            if (distance <= 100) {
                TimeUtil.clearInterval(this.guideIntervalId);
                this.guideIntervalId = null;
                // if (this.targetGuideEffectId) {
                //     EffectService.stop(this.targetGuideEffectId);
                //     this.targetGuideEffectId = null;
                // }
                if (this.guideEffectIds.length != 0) {
                    this.guideEffectIds.forEach((effectId) => {
                        EffectService.stop(effectId);
                    });
                    this.guideEffectIds.length = 0;
                }
                Notice.showDownNotice(GameConfig.Language.Text_ArrivedNearTheTargetPoint.Value);
                if (onComplete)
                    onComplete();
                return;
            }
            let pointNum = Math.floor(distance / 100);
            let locs = Utils.getCurvePointsInNum([playerLoc, targetLoc], pointNum);
            if (pointNum > 35) {
                pointNum = 35;
            }
            if (this.guideEffectIds.length == 0) {
                for (let i = 1; i < pointNum; ++i) {
                    let effectId = GeneralManager.rpcPlayEffectAtLocation(GlobalData.guideEffectGuid, new mw.Vector(locs[i].x, locs[i].y, locs[i].z - 85), 0, mw.Rotation.zero, mw.Vector.one.multiply(2));
                    this.guideEffectIds.push(effectId);
                }
            }
            else {
                if (this.guideEffectIds.length == pointNum) {
                    for (let i = 1; i < pointNum; ++i) {
                        EffectService.getEffectById(this.guideEffectIds[i - 1]).then((effect) => {
                            effect.worldTransform.position = (new mw.Vector(locs[i].x, locs[i].y, locs[i].z - 85));
                        });
                    }
                    EffectService.stop(this.guideEffectIds[pointNum - 1]);
                    this.guideEffectIds.length = pointNum - 1;
                }
                else if (this.guideEffectIds.length < pointNum) {
                    for (let i = 0; i < this.guideEffectIds.length; ++i) {
                        EffectService.getEffectById(this.guideEffectIds[i]).then((effect) => {
                            effect.worldTransform.position = (new mw.Vector(locs[i + 1].x, locs[i + 1].y, locs[i + 1].z - 85));
                        });
                    }
                    for (let i = this.guideEffectIds.length; i < pointNum - 1; ++i) {
                        let effectId = GeneralManager.rpcPlayEffectAtLocation(GlobalData.guideEffectGuid, new mw.Vector(locs[i + 1].x, locs[i + 1].y, locs[i + 1].z - 85), 0, mw.Rotation.zero, mw.Vector.one.multiply(2));
                        this.guideEffectIds.push(effectId);
                    }
                }
                else if (this.guideEffectIds.length > pointNum) {
                    for (let i = 0; i < pointNum; ++i) {
                        EffectService.getEffectById(this.guideEffectIds[i]).then((effect) => {
                            if (!locs[i + 1])
                                return;
                            effect.worldTransform.position = (new mw.Vector(locs[i + 1].x, locs[i + 1].y, locs[i + 1].z - 85));
                        });
                    }
                    for (let i = pointNum; i < this.guideEffectIds.length; ++i) {
                        EffectService.stop(this.guideEffectIds[i]);
                    }
                    this.guideEffectIds.length = pointNum;
                }
            }
        }, 0.1);
    }
    /**完成新手引导 */
    onCompleted() {
        this.server.net_onCompleted();
        this.getBagModuleC.onCompleted(20061);
        this.find();
    }
    find() {
        if (!this.getBagModuleC.isHasBagId(10001)) {
            this.startGuide(this.getBagModuleC.getBagObVec(10001), () => {
                if (!this.getBagModuleC.isHasBagId(10037)) {
                    this.startGuide(this.getBagModuleC.getBagObVec(10037), () => {
                        if (!this.getBagModuleC.isHasBagId(20023)) {
                            this.startGuide(this.getBagModuleC.getBagObVec(20023), () => {
                                if (!this.getBagModuleC.isHasBagId(30001)) {
                                    this.startGuide(this.getBagModuleC.getBagObVec(30001), () => {
                                        if (!this.getBagModuleC.isHasBagId(20053)) {
                                            this.startGuide(this.getBagModuleC.getBagObVec(20053), () => {
                                                this.first();
                                            });
                                        }
                                    });
                                }
                            });
                        }
                    });
                }
            });
        }
        else {
            if (!this.getBagModuleC.isHasBagId(10037)) {
                this.startGuide(this.getBagModuleC.getBagObVec(10037), () => {
                    if (!this.getBagModuleC.isHasBagId(20023)) {
                        this.startGuide(this.getBagModuleC.getBagObVec(20023), () => {
                            if (!this.getBagModuleC.isHasBagId(30001)) {
                                this.startGuide(this.getBagModuleC.getBagObVec(30001), () => {
                                    if (!this.getBagModuleC.isHasBagId(20053)) {
                                        this.startGuide(this.getBagModuleC.getBagObVec(20053), () => {
                                            this.first();
                                        });
                                    }
                                });
                            }
                        });
                    }
                });
            }
            else {
                if (!this.getBagModuleC.isHasBagId(20023)) {
                    this.startGuide(this.getBagModuleC.getBagObVec(20023), () => {
                        if (!this.getBagModuleC.isHasBagId(30001)) {
                            this.startGuide(this.getBagModuleC.getBagObVec(30001), () => {
                                if (!this.getBagModuleC.isHasBagId(20053)) {
                                    this.startGuide(this.getBagModuleC.getBagObVec(20053), () => {
                                        this.first();
                                    });
                                }
                            });
                        }
                    });
                }
                else {
                    if (!this.getBagModuleC.isHasBagId(30001)) {
                        this.startGuide(this.getBagModuleC.getBagObVec(30001), () => {
                            if (!this.getBagModuleC.isHasBagId(20053)) {
                                this.startGuide(this.getBagModuleC.getBagObVec(20053), () => {
                                    this.first();
                                });
                            }
                        });
                    }
                    else {
                        if (!this.getBagModuleC.isHasBagId(20053)) {
                            this.startGuide(this.getBagModuleC.getBagObVec(20053), () => {
                                this.first();
                            });
                        }
                    }
                }
            }
        }
    }
    first() {
        TimeUtil.delaySecond(5).then(() => {
            if (mw.UIService.getUI(BagInfoPanel, false).visible)
                mw.UIService.hide(BagInfoPanel);
            Event.dispatchToLocal("First");
            TimeUtil.delaySecond(5).then(() => {
                this.getGuidePanel.guideByStep(21);
                this.localPlayer.character.worldTransform.position = Utils.getWorldLocation();
                Notice.showDownNotice(GameConfig.Language.Text_ReturnToNewbieVillage.Value);
                Notice.showDownNotice(GameConfig.Language.Text_LetSOfficiallyOpenYourCopy.Value);
            });
        });
    }
}
class GuideModuleS extends ModuleS {
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
    }
    /**
     * 完成新手引导
     */
    net_onCompleted() {
        this.currentData.onCompleted();
    }
}
__decorate([
    Decorator.noReply()
], GuideModuleS.prototype, "net_onCompleted", null);

var foreign50 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    GuideData: GuideData,
    GuideModuleC: GuideModuleC,
    GuideModuleS: GuideModuleS
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/LotteryModule/LotteryItem.ui
 * TIME: 2024.11.04-19.49.52
 */
let LotteryItem_Generate = class LotteryItem_Generate extends UIScript {
    get mBgImage() {
        if (!this.mBgImage_Internal && this.uiWidgetBase) {
            this.mBgImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mBgImage');
        }
        return this.mBgImage_Internal;
    }
    get mIconImage() {
        if (!this.mIconImage_Internal && this.uiWidgetBase) {
            this.mIconImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mBgImage/mIconImage');
        }
        return this.mIconImage_Internal;
    }
    get mRatioTextBlock() {
        if (!this.mRatioTextBlock_Internal && this.uiWidgetBase) {
            this.mRatioTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mBgImage/mRatioTextBlock');
        }
        return this.mRatioTextBlock_Internal;
    }
    get mRewardCanvas() {
        if (!this.mRewardCanvas_Internal && this.uiWidgetBase) {
            this.mRewardCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mBgImage/mRewardCanvas');
        }
        return this.mRewardCanvas_Internal;
    }
    get mRewardTextBlock() {
        if (!this.mRewardTextBlock_Internal && this.uiWidgetBase) {
            this.mRewardTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mBgImage/mRewardCanvas/RewardBgImage/mRewardTextBlock');
        }
        return this.mRewardTextBlock_Internal;
    }
    get mSelectImage() {
        if (!this.mSelectImage_Internal && this.uiWidgetBase) {
            this.mSelectImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mBgImage/mSelectImage');
        }
        return this.mSelectImage_Internal;
    }
    get mHasCanvas() {
        if (!this.mHasCanvas_Internal && this.uiWidgetBase) {
            this.mHasCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mBgImage/mHasCanvas');
        }
        return this.mHasCanvas_Internal;
    }
    get mMaskImage() {
        if (!this.mMaskImage_Internal && this.uiWidgetBase) {
            this.mMaskImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mBgImage/mHasCanvas/mMaskImage');
        }
        return this.mMaskImage_Internal;
    }
    get mMaskBgImage() {
        if (!this.mMaskBgImage_Internal && this.uiWidgetBase) {
            this.mMaskBgImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mBgImage/mHasCanvas/mMaskBgImage');
        }
        return this.mMaskBgImage_Internal;
    }
    get mHasTextBlock() {
        if (!this.mHasTextBlock_Internal && this.uiWidgetBase) {
            this.mHasTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mBgImage/mHasCanvas/mMaskBgImage/mHasTextBlock');
        }
        return this.mHasTextBlock_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mRatioTextBlock);
        this.initLanguage(this.mRewardTextBlock);
        this.initLanguage(this.mHasTextBlock);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
LotteryItem_Generate = __decorate([
    UIBind('UI/module/LotteryModule/LotteryItem.ui')
], LotteryItem_Generate);
var LotteryItem_Generate$1 = LotteryItem_Generate;

var foreign135 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: LotteryItem_Generate$1
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/LotteryModule/LotteryPanel.ui
 * TIME: 2024.11.04-19.49.52
 */
let LotteryPanel_Generate = class LotteryPanel_Generate extends UIScript {
    get mTitleTextBlock() {
        if (!this.mTitleTextBlock_Internal && this.uiWidgetBase) {
            this.mTitleTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/TitleBgImage/mTitleTextBlock');
        }
        return this.mTitleTextBlock_Internal;
    }
    get mCanvas() {
        if (!this.mCanvas_Internal && this.uiWidgetBase) {
            this.mCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mCanvas');
        }
        return this.mCanvas_Internal;
    }
    get mOneArkCanvas() {
        if (!this.mOneArkCanvas_Internal && this.uiWidgetBase) {
            this.mOneArkCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mCanvas/mOneArkCanvas');
        }
        return this.mOneArkCanvas_Internal;
    }
    get mOneArkButton() {
        if (!this.mOneArkButton_Internal && this.uiWidgetBase) {
            this.mOneArkButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mCanvas/mOneArkCanvas/mOneArkButton');
        }
        return this.mOneArkButton_Internal;
    }
    get mOneArkTextBlock() {
        if (!this.mOneArkTextBlock_Internal && this.uiWidgetBase) {
            this.mOneArkTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mCanvas/mOneArkCanvas/mOneArkTextBlock');
        }
        return this.mOneArkTextBlock_Internal;
    }
    get mOneArkTipsTextBlock() {
        if (!this.mOneArkTipsTextBlock_Internal && this.uiWidgetBase) {
            this.mOneArkTipsTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mCanvas/mOneArkCanvas/mOneArkTipsTextBlock');
        }
        return this.mOneArkTipsTextBlock_Internal;
    }
    get mOneCoinCanvas() {
        if (!this.mOneCoinCanvas_Internal && this.uiWidgetBase) {
            this.mOneCoinCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mCanvas/mOneCoinCanvas');
        }
        return this.mOneCoinCanvas_Internal;
    }
    get mOneCoinButton() {
        if (!this.mOneCoinButton_Internal && this.uiWidgetBase) {
            this.mOneCoinButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mCanvas/mOneCoinCanvas/mOneCoinButton');
        }
        return this.mOneCoinButton_Internal;
    }
    get mOneCoinTextBlock() {
        if (!this.mOneCoinTextBlock_Internal && this.uiWidgetBase) {
            this.mOneCoinTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mCanvas/mOneCoinCanvas/mOneCoinTextBlock');
        }
        return this.mOneCoinTextBlock_Internal;
    }
    get mOneCoinTipsTextBlock() {
        if (!this.mOneCoinTipsTextBlock_Internal && this.uiWidgetBase) {
            this.mOneCoinTipsTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mCanvas/mOneCoinCanvas/mOneCoinTipsTextBlock');
        }
        return this.mOneCoinTipsTextBlock_Internal;
    }
    get mTenArkCanvas() {
        if (!this.mTenArkCanvas_Internal && this.uiWidgetBase) {
            this.mTenArkCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mCanvas/mTenArkCanvas');
        }
        return this.mTenArkCanvas_Internal;
    }
    get mTenArkButton() {
        if (!this.mTenArkButton_Internal && this.uiWidgetBase) {
            this.mTenArkButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mCanvas/mTenArkCanvas/mTenArkButton');
        }
        return this.mTenArkButton_Internal;
    }
    get mTenArkTextBlock() {
        if (!this.mTenArkTextBlock_Internal && this.uiWidgetBase) {
            this.mTenArkTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mCanvas/mTenArkCanvas/mTenArkTextBlock');
        }
        return this.mTenArkTextBlock_Internal;
    }
    get mTenArkTipsTextBlock() {
        if (!this.mTenArkTipsTextBlock_Internal && this.uiWidgetBase) {
            this.mTenArkTipsTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mCanvas/mTenArkCanvas/mTenArkTipsTextBlock');
        }
        return this.mTenArkTipsTextBlock_Internal;
    }
    get mTenCoinCanvas() {
        if (!this.mTenCoinCanvas_Internal && this.uiWidgetBase) {
            this.mTenCoinCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mCanvas/mTenCoinCanvas');
        }
        return this.mTenCoinCanvas_Internal;
    }
    get mTenCoinButton() {
        if (!this.mTenCoinButton_Internal && this.uiWidgetBase) {
            this.mTenCoinButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mCanvas/mTenCoinCanvas/mTenCoinButton');
        }
        return this.mTenCoinButton_Internal;
    }
    get mTenCoinTextBlock() {
        if (!this.mTenCoinTextBlock_Internal && this.uiWidgetBase) {
            this.mTenCoinTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mCanvas/mTenCoinCanvas/mTenCoinTextBlock');
        }
        return this.mTenCoinTextBlock_Internal;
    }
    get mTenCoinTipsTextBlock() {
        if (!this.mTenCoinTipsTextBlock_Internal && this.uiWidgetBase) {
            this.mTenCoinTipsTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mCanvas/mTenCoinCanvas/mTenCoinTipsTextBlock');
        }
        return this.mTenCoinTipsTextBlock_Internal;
    }
    get mHundredArkCanvas() {
        if (!this.mHundredArkCanvas_Internal && this.uiWidgetBase) {
            this.mHundredArkCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mCanvas/mHundredArkCanvas');
        }
        return this.mHundredArkCanvas_Internal;
    }
    get mHundredArkButton() {
        if (!this.mHundredArkButton_Internal && this.uiWidgetBase) {
            this.mHundredArkButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mCanvas/mHundredArkCanvas/mHundredArkButton');
        }
        return this.mHundredArkButton_Internal;
    }
    get mHundredArkTextBlock() {
        if (!this.mHundredArkTextBlock_Internal && this.uiWidgetBase) {
            this.mHundredArkTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mCanvas/mHundredArkCanvas/mHundredArkTextBlock');
        }
        return this.mHundredArkTextBlock_Internal;
    }
    get mHundredArkTipsTextBlock() {
        if (!this.mHundredArkTipsTextBlock_Internal && this.uiWidgetBase) {
            this.mHundredArkTipsTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mCanvas/mHundredArkCanvas/mHundredArkTipsTextBlock');
        }
        return this.mHundredArkTipsTextBlock_Internal;
    }
    get mHundredCoinCanvas() {
        if (!this.mHundredCoinCanvas_Internal && this.uiWidgetBase) {
            this.mHundredCoinCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mCanvas/mHundredCoinCanvas');
        }
        return this.mHundredCoinCanvas_Internal;
    }
    get mHundredCoinButton() {
        if (!this.mHundredCoinButton_Internal && this.uiWidgetBase) {
            this.mHundredCoinButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mCanvas/mHundredCoinCanvas/mHundredCoinButton');
        }
        return this.mHundredCoinButton_Internal;
    }
    get mHundredCoinTextBlock() {
        if (!this.mHundredCoinTextBlock_Internal && this.uiWidgetBase) {
            this.mHundredCoinTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mCanvas/mHundredCoinCanvas/mHundredCoinTextBlock');
        }
        return this.mHundredCoinTextBlock_Internal;
    }
    get mHundredCoinTipsTextBlock() {
        if (!this.mHundredCoinTipsTextBlock_Internal && this.uiWidgetBase) {
            this.mHundredCoinTipsTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mCanvas/mHundredCoinCanvas/mHundredCoinTipsTextBlock');
        }
        return this.mHundredCoinTipsTextBlock_Internal;
    }
    get mOneAdsCanvas() {
        if (!this.mOneAdsCanvas_Internal && this.uiWidgetBase) {
            this.mOneAdsCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mCanvas/mOneAdsCanvas');
        }
        return this.mOneAdsCanvas_Internal;
    }
    get mOneAdsButton() {
        if (!this.mOneAdsButton_Internal && this.uiWidgetBase) {
            this.mOneAdsButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mCanvas/mOneAdsCanvas/mOneAdsButton');
        }
        return this.mOneAdsButton_Internal;
    }
    get mMoneyCanvas() {
        if (!this.mMoneyCanvas_Internal && this.uiWidgetBase) {
            this.mMoneyCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMoneyCanvas');
        }
        return this.mMoneyCanvas_Internal;
    }
    get mIconCoinImage() {
        if (!this.mIconCoinImage_Internal && this.uiWidgetBase) {
            this.mIconCoinImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMoneyCanvas/MoneyCanvas/CoinCanvas/mIconCoinImage');
        }
        return this.mIconCoinImage_Internal;
    }
    get mCoinCountTextBlock() {
        if (!this.mCoinCountTextBlock_Internal && this.uiWidgetBase) {
            this.mCoinCountTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMoneyCanvas/MoneyCanvas/CoinCanvas/mCoinCountTextBlock');
        }
        return this.mCoinCountTextBlock_Internal;
    }
    get mIconArkImage() {
        if (!this.mIconArkImage_Internal && this.uiWidgetBase) {
            this.mIconArkImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMoneyCanvas/MoneyCanvas/ArkCanvas/mIconArkImage');
        }
        return this.mIconArkImage_Internal;
    }
    get mArkCountTextBlock() {
        if (!this.mArkCountTextBlock_Internal && this.uiWidgetBase) {
            this.mArkCountTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mMoneyCanvas/MoneyCanvas/ArkCanvas/mArkCountTextBlock');
        }
        return this.mArkCountTextBlock_Internal;
    }
    get mMaskImage() {
        if (!this.mMaskImage_Internal && this.uiWidgetBase) {
            this.mMaskImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mMaskImage');
        }
        return this.mMaskImage_Internal;
    }
    get mCloseButton() {
        if (!this.mCloseButton_Internal && this.uiWidgetBase) {
            this.mCloseButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mCloseButton');
        }
        return this.mCloseButton_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        this.mOneArkButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mOneArkButton");
        });
        this.mOneArkButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mOneCoinButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mOneCoinButton");
        });
        this.mOneCoinButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mTenArkButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mTenArkButton");
        });
        this.mTenArkButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mTenCoinButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mTenCoinButton");
        });
        this.mTenCoinButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mHundredArkButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mHundredArkButton");
        });
        this.mHundredArkButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mHundredCoinButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mHundredCoinButton");
        });
        this.mHundredCoinButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mCloseButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mCloseButton");
        });
        this.mCloseButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mTitleTextBlock);
        this.initLanguage(this.mOneArkTextBlock);
        this.initLanguage(this.mOneArkTipsTextBlock);
        this.initLanguage(this.mOneCoinTextBlock);
        this.initLanguage(this.mOneCoinTipsTextBlock);
        this.initLanguage(this.mTenArkTextBlock);
        this.initLanguage(this.mTenArkTipsTextBlock);
        this.initLanguage(this.mTenCoinTextBlock);
        this.initLanguage(this.mTenCoinTipsTextBlock);
        this.initLanguage(this.mHundredArkTextBlock);
        this.initLanguage(this.mHundredArkTipsTextBlock);
        this.initLanguage(this.mHundredCoinTextBlock);
        this.initLanguage(this.mHundredCoinTipsTextBlock);
        this.initLanguage(this.mCoinCountTextBlock);
        this.initLanguage(this.mArkCountTextBlock);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
LotteryPanel_Generate = __decorate([
    UIBind('UI/module/LotteryModule/LotteryPanel.ui')
], LotteryPanel_Generate);
var LotteryPanel_Generate$1 = LotteryPanel_Generate;

var foreign136 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: LotteryPanel_Generate$1
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/LotteryModule/LotteryResultItem.ui
 * TIME: 2024.11.04-19.49.52
 */
let LotteryResultItem_Generate = class LotteryResultItem_Generate extends UIScript {
    get mTextBlock() {
        if (!this.mTextBlock_Internal && this.uiWidgetBase) {
            this.mTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/mTextBlock');
        }
        return this.mTextBlock_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mTextBlock);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
LotteryResultItem_Generate = __decorate([
    UIBind('UI/module/LotteryModule/LotteryResultItem.ui')
], LotteryResultItem_Generate);
var LotteryResultItem_Generate$1 = LotteryResultItem_Generate;

var foreign137 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: LotteryResultItem_Generate$1
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/LotteryModule/LotteryResultPanel.ui
 * TIME: 2024.11.04-19.49.52
 */
let LotteryResultPanel_Generate = class LotteryResultPanel_Generate extends UIScript {
    get mBgImage() {
        if (!this.mBgImage_Internal && this.uiWidgetBase) {
            this.mBgImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mBgImage');
        }
        return this.mBgImage_Internal;
    }
    get mTitleTextBlock() {
        if (!this.mTitleTextBlock_Internal && this.uiWidgetBase) {
            this.mTitleTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mBgImage/mTitleTextBlock');
        }
        return this.mTitleTextBlock_Internal;
    }
    get mCloseButton() {
        if (!this.mCloseButton_Internal && this.uiWidgetBase) {
            this.mCloseButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mBgImage/mCloseButton');
        }
        return this.mCloseButton_Internal;
    }
    get mScrollBox() {
        if (!this.mScrollBox_Internal && this.uiWidgetBase) {
            this.mScrollBox_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mBgImage/mScrollBox');
        }
        return this.mScrollBox_Internal;
    }
    get mContentCanvas() {
        if (!this.mContentCanvas_Internal && this.uiWidgetBase) {
            this.mContentCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mBgImage/mScrollBox/mContentCanvas');
        }
        return this.mContentCanvas_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        this.mCloseButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mCloseButton");
        });
        this.mCloseButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mTitleTextBlock);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
LotteryResultPanel_Generate = __decorate([
    UIBind('UI/module/LotteryModule/LotteryResultPanel.ui')
], LotteryResultPanel_Generate);
var LotteryResultPanel_Generate$1 = LotteryResultPanel_Generate;

var foreign138 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: LotteryResultPanel_Generate$1
});

var RewardType;
(function (RewardType) {
    RewardType[RewardType["None"] = 0] = "None";
    RewardType[RewardType["Diamond"] = 1] = "Diamond";
    RewardType[RewardType["Lv"] = 2] = "Lv";
    RewardType[RewardType["Bag"] = 3] = "Bag";
})(RewardType || (RewardType = {}));
const lotteryDatas = new Map();
lotteryDatas.set(1, { isLimit: false, ratio: [1, 500], icon: "icon_404083", name: `Text_EmptyPrizeHaha`, rewardType: RewardType.None, reward: 1, pos: new mw.Vector2(0, 0), bgIcon: "181426" }); //181426 181425 181424 181423 181420
lotteryDatas.set(2, { isLimit: false, ratio: [501, 739], icon: "icon_103221", name: `Text_Diamonds`, rewardType: RewardType.Diamond, reward: 1, pos: new mw.Vector2(230, 0), bgIcon: "181424" });
lotteryDatas.set(3, { isLimit: false, ratio: [740, 749], icon: "icon_103221", name: `Text_Diamonds`, rewardType: RewardType.Diamond, reward: 108, pos: new mw.Vector2(460, 0), bgIcon: "181423" });
lotteryDatas.set(4, { isLimit: false, ratio: [750, 750], icon: "icon_103217", name: `Text_Diamonds`, rewardType: RewardType.Diamond, reward: 1088, pos: new mw.Vector2(690, 0), bgIcon: "181420" });
lotteryDatas.set(5, { isLimit: false, ratio: [751, 978], icon: "icon_148883", name: `Text_Grade`, rewardType: RewardType.Lv, reward: 1, pos: new mw.Vector2(690, 230), bgIcon: "181424" });
lotteryDatas.set(6, { isLimit: false, ratio: [979, 988], icon: "icon_148883", name: `Text_Grade`, rewardType: RewardType.Lv, reward: 108, pos: new mw.Vector2(690, 460), bgIcon: "181423" });
lotteryDatas.set(7, { isLimit: false, ratio: [989, 989], icon: "icon_148883", name: `Text_Grade`, rewardType: RewardType.Lv, reward: 1088, pos: new mw.Vector2(460, 460), bgIcon: "181420" });
lotteryDatas.set(8, { isLimit: true, ratio: [990, 995], icon: "mode_141499", name: `Text_GodLevelDemonKing`, rewardType: RewardType.Bag, reward: 20058, pos: new mw.Vector2(230, 460), bgIcon: "181420" });
lotteryDatas.set(9, { isLimit: true, ratio: [996, 999], icon: "mode_142921", name: `Text_TheFourthHokage`, rewardType: RewardType.Bag, reward: 20059, pos: new mw.Vector2(0, 460), bgIcon: "181420" });
lotteryDatas.set(10, { isLimit: true, ratio: [1000, 1000], icon: "mode_163289", name: `Text_MedusaQueen`, rewardType: RewardType.Bag, reward: 20060, pos: new mw.Vector2(0, 230), bgIcon: "181420" });
const oneCostCoin = 2888888;
const oneCostArk = 2;
const tenCostCoin = 28888888;
const tenCostArk = 20;
const hundredCostCoin = 8888888888;
const hundredCostArk = 200;
const oneCommodityId = "7I6uNtkFmg00001Nx";
const tenCommodityId = "6tOZfQYVTV90001Ny";
const hundredCommodityId = "3FClUXv0qbL0001Pq";
class LotteryItem extends LotteryItem_Generate$1 {
    constructor() {
        super(...arguments);
        this.lotteryModuleC = null;
        this.key = 0;
    }
    get getLotteryModuleC() {
        if (!this.lotteryModuleC) {
            this.lotteryModuleC = ModuleService.getModule(LotteryModuleC);
        }
        return this.lotteryModuleC;
    }
    onStart() {
        this.initUI();
    }
    initUI() {
        this.mHasTextBlock.text = GameConfig.Language.Text_AlreadyOwned.Value;
        this.onOffUI(false);
        if (GlobalData.languageId == 0) {
            this.mRewardTextBlock.fontSize = 12;
            this.mRatioTextBlock.fontSize = 13;
        }
        else {
            this.mRewardTextBlock.fontSize = 23;
            this.mRatioTextBlock.fontSize = 15;
        }
    }
    initItem(key) {
        this.key = key;
        this.updateUI();
    }
    updateUI() {
        let lotteryData = lotteryDatas.get(this.key);
        this.mBgImage.imageGuid = lotteryData.bgIcon;
        this.mRewardTextBlock.text = `${GameConfig.Language[`${lotteryData.name}`].Value}+${(lotteryData.rewardType == RewardType.Bag) ? 1 : lotteryData.reward}`;
        let iconStr = lotteryData.icon.split(`_`);
        if (iconStr[0] == `icon`) {
            this.mIconImage.imageGuid = iconStr[1];
        }
        else if (iconStr[0] == `mode`) {
            Utils.setImageByAssetIconData(this.mIconImage, iconStr[1]);
        }
        if (lotteryData.isLimit && this.getLotteryModuleC.isHas(lotteryData.reward)) {
            this.mHasCanvas.visibility = mw.SlateVisibility.SelfHitTestInvisible;
        }
        else {
            this.mHasCanvas.visibility = mw.SlateVisibility.Collapsed;
        }
        this.mRatioTextBlock.text = `${GameConfig.Language.Text_WinningProbability.Value}\n${(((lotteryData.ratio[1] - lotteryData.ratio[0] + 1) / 1000) * 100).toFixed(1)}%`;
    }
    onOffUI(on) {
        this.mSelectImage.visibility = on ? mw.SlateVisibility.SelfHitTestInvisible : mw.SlateVisibility.Collapsed;
    }
    setHasCanvas(on) {
        this.mHasCanvas.visibility = on ? mw.SlateVisibility.SelfHitTestInvisible : mw.SlateVisibility.Collapsed;
    }
}
class LotteryPanel extends LotteryPanel_Generate$1 {
    constructor() {
        super(...arguments);
        this.lotteryModuleC = null;
        this.isCanContinueClick = true;
        this.lotteryItems = [];
        this.oneIndex = 0;
        this.onePeriod = 0;
        this.preIndex = -1;
        this.hudPanel = null;
    }
    get getLotteryModuleC() {
        if (!this.lotteryModuleC) {
            this.lotteryModuleC = ModuleService.getModule(LotteryModuleC);
        }
        return this.lotteryModuleC;
    }
    onStart() {
        this.initUI();
        this.bindButton();
    }
    initUI() {
        this.mTitleTextBlock.text = GameConfig.Language.Text_GoldCoinLottery.Value;
        this.mIconCoinImage.imageGuid = GlobalData.coinIcon;
        this.mIconArkImage.imageGuid = GlobalData.arkIcon;
        this.mOneCoinTextBlock.text = StringUtil.format(GameConfig.Language.Text_DrawTimes.Value, 1);
        this.mOneCoinTipsTextBlock.text = StringUtil.format(GameConfig.Language.Text_ConsumeCoins.Value, oneCostCoin);
        this.mOneArkTextBlock.text = StringUtil.format(GameConfig.Language.Text_DrawTimes.Value, 1);
        this.mOneArkTipsTextBlock.text = StringUtil.format(GameConfig.Language.Text_ConsumeDispatchCoins.Value, oneCostArk);
        this.mTenCoinTextBlock.text = StringUtil.format(GameConfig.Language.Text_DrawTimes.Value, 10);
        this.mTenCoinTipsTextBlock.text = StringUtil.format(GameConfig.Language.Text_ConsumeCoins.Value, tenCostCoin);
        this.mTenArkTextBlock.text = StringUtil.format(GameConfig.Language.Text_DrawTimes.Value, 10);
        this.mTenArkTipsTextBlock.text = StringUtil.format(GameConfig.Language.Text_ConsumeDispatchCoins.Value, tenCostArk);
        this.mHundredCoinTextBlock.text = StringUtil.format(GameConfig.Language.Text_DrawTimes.Value, 100);
        this.mHundredCoinTipsTextBlock.text = StringUtil.format(GameConfig.Language.Text_ConsumeCoins.Value, hundredCostCoin);
        this.mHundredArkTextBlock.text = StringUtil.format(GameConfig.Language.Text_DrawTimes.Value, 100);
        this.mHundredArkTipsTextBlock.text = StringUtil.format(GameConfig.Language.Text_ConsumeDispatchCoins.Value, hundredCostArk);
        this.mOneAdsButton.text = GameConfig.Language.Text_FreeLotteryDraw.Value;
        this.mMaskImage.visibility = mw.SlateVisibility.Collapsed;
        this.initItem();
        if (GlobalData.languageId == 0) {
            this.mOneCoinTextBlock.fontSize = 20;
            this.mOneCoinTipsTextBlock.fontSize = 10;
            this.mOneArkTextBlock.fontSize = 20;
            this.mOneArkTipsTextBlock.fontSize = 17;
            this.mTenCoinTextBlock.fontSize = 20;
            this.mTenCoinTipsTextBlock.fontSize = 10;
            this.mTenArkTextBlock.fontSize = 20;
            this.mTenArkTipsTextBlock.fontSize = 15;
            this.mHundredCoinTextBlock.fontSize = 20;
            this.mHundredCoinTipsTextBlock.fontSize = 12;
            this.mHundredArkTextBlock.fontSize = 20;
            this.mHundredArkTipsTextBlock.fontSize = 15;
        }
        else {
            this.mOneCoinTextBlock.fontSize = 30;
            this.mOneCoinTipsTextBlock.fontSize = 18;
            this.mOneArkTextBlock.fontSize = 30;
            this.mOneArkTipsTextBlock.fontSize = 20;
            this.mTenCoinTextBlock.fontSize = 30;
            this.mTenCoinTipsTextBlock.fontSize = 15;
            this.mTenArkTextBlock.fontSize = 30;
            this.mTenArkTipsTextBlock.fontSize = 20;
            this.mHundredCoinTextBlock.fontSize = 30;
            this.mHundredCoinTipsTextBlock.fontSize = 14;
            this.mHundredArkTextBlock.fontSize = 30;
            this.mHundredArkTipsTextBlock.fontSize = 20;
        }
    }
    bindButton() {
        this.mCloseButton.onClicked.add(this.addCloseButton.bind(this));
        this.mOneCoinButton.onClicked.add(this.addOneCoinButton.bind(this));
        this.mOneArkButton.onClicked.add(this.addOneArkButton.bind(this));
        this.mTenCoinButton.onClicked.add(this.addTenCoinButton.bind(this));
        this.mTenArkButton.onClicked.add(this.addTenArkButton.bind(this));
        this.mHundredCoinButton.onClicked.add(this.addHundredCoinButton.bind(this));
        this.mHundredArkButton.onClicked.add(this.addHundredArkButton.bind(this));
        this.mOneAdsButton.onClose.add(this.addOneAdsButton.bind(this));
    }
    addOneCoinButton() {
        this.getLotteryModuleC.oneCoinLottery();
    }
    addOneArkButton() {
        if (!this.isCanContinueClick) {
            Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_CoolForSeconds.Value, 3));
            return;
        }
        this.isCanContinueClick = false;
        TimeUtil.delaySecond(3).then(() => {
            this.isCanContinueClick = true;
        });
        this.getLotteryModuleC.oneArkLottery();
    }
    addTenCoinButton() {
        this.getLotteryModuleC.tenCoinLottery(true);
    }
    addTenArkButton() {
        if (!this.isCanContinueClick) {
            Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_CoolForSeconds.Value, 3));
            return;
        }
        this.isCanContinueClick = false;
        TimeUtil.delaySecond(3).then(() => {
            this.isCanContinueClick = true;
        });
        this.getLotteryModuleC.tenArkLottery(true);
    }
    addHundredCoinButton() {
        this.getLotteryModuleC.tenCoinLottery(false);
    }
    addHundredArkButton() {
        if (!this.isCanContinueClick) {
            Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_CoolForSeconds.Value, 3));
            return;
        }
        this.isCanContinueClick = false;
        TimeUtil.delaySecond(3).then(() => {
            this.isCanContinueClick = true;
        });
        this.getLotteryModuleC.tenArkLottery(false);
    }
    addOneAdsButton(isSuccess) {
        if (!isSuccess) {
            Notice.showDownNotice(GameConfig.Language.Text_FailedPleaseTryAgain.Value);
            return;
        }
        this.getLotteryModuleC.calculateOneLottery();
    }
    addCloseButton() {
        this.hideTween();
    }
    initItem() {
        lotteryDatas.forEach((value, key) => {
            let lotteryItem = mw.UIService.create(LotteryItem);
            lotteryItem.initItem(key);
            this.mCanvas.addChild(lotteryItem.uiObject);
            lotteryItem.uiObject.position = value.pos;
            this.lotteryItems.push(lotteryItem);
        });
    }
    updateCoinTextBlock(count) {
        this.mCoinCountTextBlock.text = Utils.integerUnitConversionStr(count);
    }
    updateArkTextBlock(arkCount) {
        this.mArkCountTextBlock.text = `${arkCount}`;
    }
    updateItemHasState(key) {
        if (this.lotteryItems.length <= key) {
            this.lotteryItems[key - 1].setHasCanvas(true);
        }
    }
    startOneLottery(key, complete) {
        this.mMaskImage.visibility = mw.SlateVisibility.Visible;
        this.oneIndex = 0;
        this.onePeriod = 0;
        let first = TimeUtil.setInterval(() => {
            if (this.oneIndex >= 10) {
                this.oneIndex = 0;
                this.onePeriod++;
                if (this.onePeriod >= 4) {
                    SoundService.playSound("120847");
                    this.updateItemSelectState(this.oneIndex++);
                    TimeUtil.clearInterval(first);
                    if (key == 1) {
                        if (complete)
                            complete();
                        this.mMaskImage.visibility = mw.SlateVisibility.Collapsed;
                    }
                    else {
                        let second = TimeUtil.setInterval(() => {
                            if (this.oneIndex >= key) {
                                TimeUtil.clearInterval(second);
                                if (complete)
                                    complete();
                                this.mMaskImage.visibility = mw.SlateVisibility.Collapsed;
                            }
                            else {
                                this.updateItemSelectState(this.oneIndex++);
                                SoundService.playSound("120847");
                            }
                        }, 0.3);
                    }
                    return;
                }
            }
            SoundService.playSound("120847");
            this.updateItemSelectState(this.oneIndex++);
        }, 0.1);
    }
    startTenLottery(key, complete) {
        this.mMaskImage.visibility = mw.SlateVisibility.Visible;
        let time = 0;
        let indexs = Utils.getRandomArr([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 5);
        for (let i = 0; i < this.lotteryItems.length; ++i) {
            if (indexs.includes(i)) {
                this.lotteryItems[i].onOffUI(true);
            }
            else {
                this.lotteryItems[i].onOffUI(false);
            }
        }
        SoundService.playSound("137566");
        let first = TimeUtil.setInterval(() => {
            let indexs = Utils.getRandomArr([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 5);
            for (let i = 0; i < this.lotteryItems.length; ++i) {
                if (indexs.includes(i)) {
                    this.lotteryItems[i].onOffUI(true);
                }
                else {
                    this.lotteryItems[i].onOffUI(false);
                }
            }
            SoundService.playSound("137566");
            time += 0.3;
            if (time >= 5) {
                TimeUtil.clearInterval(first);
                SoundService.playSound("137566");
                for (let i = 0; i < this.lotteryItems.length; ++i) {
                    if (key.includes((i + 1))) {
                        this.lotteryItems[i].onOffUI(true);
                    }
                    else {
                        this.lotteryItems[i].onOffUI(false);
                    }
                }
                if (complete)
                    complete();
                this.mMaskImage.visibility = mw.SlateVisibility.Collapsed;
            }
        }, 0.3);
    }
    updateItemSelectState(index) {
        if (this.preIndex >= 0)
            this.lotteryItems[this.preIndex].onOffUI(false);
        this.preIndex = index;
        this.lotteryItems[this.preIndex].onOffUI(true);
    }
    get getHudPanel() {
        if (!this.hudPanel) {
            this.hudPanel = mw.UIService.getUI(HUDPanel);
        }
        return this.hudPanel;
    }
    onShow(...params) {
        Utils.openUITween(this.rootCanvas, () => {
            this.getHudPanel.hide();
        }, null);
    }
    hideTween() {
        Utils.closeUITween(this.rootCanvas, null, () => {
            this.hide();
            this.getHudPanel.show();
        });
    }
}
class LotteryResultItem extends LotteryResultItem_Generate$1 {
    onStart() {
    }
    setTextBlock(key) {
        this.mTextBlock.text = `${GameConfig.Language[`${lotteryDatas.get(key).name}`].Value} +${lotteryDatas.get(key).reward}`;
    }
}
class LotteryResultPanel extends LotteryResultPanel_Generate$1 {
    constructor() {
        super(...arguments);
        this.lotteryResultItems = [];
    }
    onStart() {
        this.layer = mw.UILayerMiddle;
        this.bindButton();
        this.initTextBlock();
    }
    initTextBlock() {
        this.mTitleTextBlock.text = GameConfig.Language.Text_LotteryResults.Value;
    }
    bindButton() {
        this.mCloseButton.onClicked.add(this.addCloseButton.bind(this));
    }
    addCloseButton() {
        this.hide();
    }
    showPanel(keys, isOne) {
        this.show();
        if (isOne) {
            this.mBgImage.size = new mw.Vector(600, 200);
            this.mBgImage.position = new mw.Vector(this.rootCanvas.size.x / 2 - 300, this.rootCanvas.size.y / 2 - 100);
            this.mScrollBox.size = new mw.Vector(600, 75);
            this.mScrollBox.position = new mw.Vector(0, 75);
        }
        else {
            this.mBgImage.size = new mw.Vector(600, 850);
            this.mBgImage.position = new mw.Vector(this.rootCanvas.size.x / 2 - 300, this.rootCanvas.size.y / 2 - 425);
            this.mScrollBox.size = new mw.Vector(600, 750);
            this.mScrollBox.position = new mw.Vector(0, 75);
        }
        if (keys.length > this.lotteryResultItems.length) {
            for (let i = 0; i < this.lotteryResultItems.length; ++i) {
                this.lotteryResultItems[i].setTextBlock(keys[i]);
                Utils.setWidgetVisibility(this.lotteryResultItems[i].uiObject, mw.SlateVisibility.SelfHitTestInvisible);
            }
            for (let i = this.lotteryResultItems.length; i < keys.length; ++i) {
                let lotteryResultItem = mw.UIService.create(LotteryResultItem);
                lotteryResultItem.setTextBlock(keys[i]);
                this.mContentCanvas.addChild(lotteryResultItem.uiObject);
                this.lotteryResultItems.push(lotteryResultItem);
            }
        }
        else {
            for (let i = 0; i < keys.length; ++i) {
                this.lotteryResultItems[i].setTextBlock(keys[i]);
                Utils.setWidgetVisibility(this.lotteryResultItems[i].uiObject, mw.SlateVisibility.SelfHitTestInvisible);
            }
            for (let i = keys.length; i < this.lotteryResultItems.length; ++i) {
                Utils.setWidgetVisibility(this.lotteryResultItems[i].uiObject, mw.SlateVisibility.Collapsed);
            }
        }
    }
}
const lotteryTriggerMap = new Map();
lotteryTriggerMap.set(1, { triggers: ["1784616E"], worldUIIds: ["0D23C019"], name: `Text_GoldCoinLottery` });
class LotteryModuleC extends ModuleC {
    constructor() {
        super(...arguments);
        this.lotteryPanel = null;
        this.lotteryResultPanel = null;
        this.hudModuleC = null;
        this.playerModuleC = null;
        this.bagModuleC = null;
    }
    get getLotteryPanel() {
        if (!this.lotteryPanel) {
            this.lotteryPanel = mw.UIService.getUI(LotteryPanel);
        }
        return this.lotteryPanel;
    }
    get getLotteryResultPanel() {
        if (!this.lotteryResultPanel) {
            this.lotteryResultPanel = mw.UIService.getUI(LotteryResultPanel);
        }
        return this.lotteryResultPanel;
    }
    get getHudModuleC() {
        if (!this.hudModuleC) {
            this.hudModuleC = ModuleService.getModule(HUDModuleC);
        }
        return this.hudModuleC;
    }
    get getPlayerModuleC() {
        if (!this.playerModuleC) {
            this.playerModuleC = ModuleService.getModule(PlayerModuleC);
        }
        return this.playerModuleC;
    }
    get getBagModuleC() {
        if (!this.bagModuleC) {
            this.bagModuleC = ModuleService.getModule(BagModuleC);
        }
        return this.bagModuleC;
    }
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
        this.initUI();
        this.initAction();
    }
    onEnterScene(sceneType) {
        this.initTrigger();
    }
    initUI() {
        this.lotteryResultPanel = mw.UIService.getUI(LotteryResultPanel);
    }
    initAction() {
        Event.addLocalListener(`UpdateCoinTextBlock`, this.addUpdateCoinTextBlock.bind(this));
        mw.PurchaseService.onArkBalanceUpdated.add(this.addArkUpdate.bind(this));
        this.getHudModuleC.onOpenLotteryAction.add(this.addOpenLotteryPanel.bind(this));
    }
    addOpenLotteryPanel() {
        this.getLotteryPanel.show();
        mw.PurchaseService.getArkBalance(); // 触发代币余额刷新。接收更新的值要用mw.PurchaseService.onArkBalanceUpdated
        Event.dispatchToLocal(`SyncCoinCount`);
    }
    addUpdateCoinTextBlock(count) {
        this.getLotteryPanel.updateCoinTextBlock(count);
    }
    addArkUpdate(amount) {
        //刷新逻辑，amount为当前代币数量
        console.error(`ArkModuleC addArkUpdate amount: ${amount}`);
        this.getLotteryPanel.updateArkTextBlock(amount);
    }
    oneCoinLottery() {
        let coin = this.getPlayerModuleC.getCoin();
        if (coin >= oneCostCoin) {
            this.getPlayerModuleC.saveCoin(-oneCostCoin);
            this.calculateOneLottery();
        }
        else {
            Notice.showDownNotice(GameConfig.Language.Text_InsufficientGoldCoins.Value);
            if (mw.SystemUtil.isPIE) {
                this.calculateOneLottery();
            }
            else {
                mw.PurchaseService.placeOrder(oneCommodityId, 1, (status, msg) => {
                    mw.PurchaseService.getArkBalance(); //刷新代币数量
                });
            }
        }
    }
    oneArkLottery() {
        if (mw.SystemUtil.isPIE) {
            this.calculateOneLottery();
        }
        else {
            mw.PurchaseService.placeOrder(oneCommodityId, 1, (status, msg) => {
                mw.PurchaseService.getArkBalance(); //刷新代币数量
            });
        }
    }
    tenCoinLottery(isTen) {
        let coin = this.getPlayerModuleC.getCoin();
        let needCostCoin = isTen ? tenCostCoin : hundredCostCoin;
        if (coin >= needCostCoin) {
            this.getPlayerModuleC.saveCoin(-needCostCoin);
            this.calculateTenLottery(isTen);
        }
        else {
            Notice.showDownNotice(GameConfig.Language.Text_InsufficientGoldCoins.Value);
            if (mw.SystemUtil.isPIE) {
                this.calculateTenLottery(isTen);
            }
            else {
                mw.PurchaseService.placeOrder(isTen ? tenCommodityId : hundredCommodityId, 1, (status, msg) => {
                    mw.PurchaseService.getArkBalance(); //刷新代币数量
                });
            }
        }
    }
    tenArkLottery(isTen) {
        if (mw.SystemUtil.isPIE) {
            this.calculateTenLottery(isTen);
        }
        else {
            mw.PurchaseService.placeOrder(isTen ? tenCommodityId : hundredCommodityId, 1, (status, msg) => {
                mw.PurchaseService.getArkBalance(); //刷新代币数量
            });
        }
    }
    net_deliverGoods(commodityId, amount) {
        if (commodityId == oneCommodityId) {
            this.calculateOneLottery();
        }
        else if (commodityId == tenCommodityId) {
            this.calculateTenLottery(true);
        }
        else if (commodityId == hundredCommodityId) {
            this.calculateTenLottery(false);
        }
    }
    calculateOneLottery() {
        let calculateKey = this.calculateKey();
        while ((lotteryDatas.get(calculateKey).isLimit) && this.isHas(lotteryDatas.get(calculateKey).reward)) {
            calculateKey = this.calculateKey();
        }
        let diamond = 0;
        let lv = 0;
        let bagIds = [];
        switch (lotteryDatas.get(calculateKey).rewardType) {
            case RewardType.None:
                break;
            case RewardType.Diamond:
                diamond = lotteryDatas.get(calculateKey).reward;
                break;
            case RewardType.Lv:
                lv = lotteryDatas.get(calculateKey).reward;
                break;
            case RewardType.Bag:
                let bagId = lotteryDatas.get(calculateKey).reward;
                bagIds.push(bagId);
                break;
        }
        this.getLotteryPanel.startOneLottery(calculateKey, () => {
            this.saveLottery(diamond, lv, bagIds);
            this.getLotteryResultPanel.showPanel([calculateKey], true);
            if (lotteryDatas.get(calculateKey).isLimit)
                this.getLotteryPanel.updateItemHasState(calculateKey);
            Notice.showDownNotice(GameConfig.Language.Text_CongratulationsOnWinningThePrize.Value);
        });
    }
    calculateTenLottery(isTen) {
        let diamond = 0;
        let lv = 0;
        let bagIds = [];
        let calculateKeys = [];
        let len = isTen ? 10 : 100;
        for (let i = 0; i < len; ++i) {
            let calculateKey = this.calculateKey();
            while ((lotteryDatas.get(calculateKey).isLimit) &&
                (this.isHas(lotteryDatas.get(calculateKey).reward) || bagIds.includes(lotteryDatas.get(calculateKey).reward))) {
                calculateKey = this.calculateKey();
            }
            calculateKeys.push(calculateKey);
            switch (lotteryDatas.get(calculateKey).rewardType) {
                case RewardType.None:
                    break;
                case RewardType.Diamond:
                    diamond += lotteryDatas.get(calculateKey).reward;
                    break;
                case RewardType.Lv:
                    lv += lotteryDatas.get(calculateKey).reward;
                    break;
                case RewardType.Bag:
                    let bagId = lotteryDatas.get(calculateKey).reward;
                    bagIds.push(bagId);
                    break;
            }
        }
        this.getLotteryPanel.startTenLottery(calculateKeys, () => {
            this.saveLottery(diamond, lv, bagIds);
            this.getLotteryResultPanel.showPanel(calculateKeys, false);
            calculateKeys.forEach((key) => {
                if (lotteryDatas.get(key).isLimit)
                    this.getLotteryPanel.updateItemHasState(key);
            });
            Notice.showDownNotice(GameConfig.Language.Text_CongratulationsOnWinningThePrize.Value);
        });
    }
    calculateKey() {
        let calculateValue = Utils.getRandomInteger(1, 1000);
        let calculateKey = 1;
        lotteryDatas.forEach((value, key) => {
            if (calculateValue >= value.ratio[0] && calculateValue <= value.ratio[1]) {
                calculateKey = key;
            }
        });
        return calculateKey;
    }
    saveLottery(diamond, lv, bagIds) {
        if (diamond > 0) {
            Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_ObtainDiamonds.Value, diamond));
            this.getPlayerModuleC.saveDiamond(diamond);
        }
        if (lv > 0) {
            this.getPlayerModuleC.upLvByCount(lv);
            Notice.showDownNotice(`${GameConfig.Language.Text_Grade.Value}+${lv}`);
        }
        if (bagIds && bagIds.length > 0) {
            for (let i = 0; i < bagIds.length; ++i) {
                this.getBagModuleC.setBagId(bagIds[i]);
            }
            Notice.showDownNotice(GameConfig.Language.Text_OpenTheBackpackForUse.Value);
        }
    }
    isHas(key) {
        return this.getBagModuleC.isHasBagId(key);
    }
    initTrigger() {
        lotteryTriggerMap.forEach((value, key) => {
            value.triggers.forEach((triggerId) => {
                mw.GameObject.asyncFindGameObjectById(triggerId).then((go) => {
                    let trigger = go;
                    trigger.onEnter.add((character) => {
                        if (character.gameObjectId != this.localPlayer.character.gameObjectId)
                            return;
                        this.getLotteryPanel.show();
                    });
                });
            });
            value.worldUIIds.forEach((worldId) => {
                mw.GameObject.asyncFindGameObjectById(worldId).then((v) => {
                    let worldUI = v;
                    let levelItem = mw.UIService.create(LevelItem);
                    levelItem.updateLevelTextBlock(GameConfig.Language[`${value.name}`].Value);
                    worldUI.setTargetUIWidget(levelItem.uiWidgetBase);
                });
            });
        });
    }
}
class LotteryModuleS extends ModuleS {
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
        this.bindAction();
    }
    bindAction() {
        mw.PurchaseService.onOrderDelivered.add(this.addShipOrder.bind(this));
    }
    addShipOrder(playerId, orderId, commodityId, amount, confirmOrder) {
        //根据playerId和commodityId来处理购买逻辑
        this.getClient(playerId).net_deliverGoods(commodityId, amount);
        confirmOrder(true); //调用这个方法表示确认收货成功
    }
}

var foreign56 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    LotteryItem: LotteryItem,
    LotteryModuleC: LotteryModuleC,
    LotteryModuleS: LotteryModuleS,
    LotteryPanel: LotteryPanel,
    LotteryResultItem: LotteryResultItem,
    LotteryResultPanel: LotteryResultPanel,
    get RewardType () { return RewardType; },
    lotteryDatas: lotteryDatas
});

/**
0-黄阶-213189
1-玄阶-213181
2-地阶-213190
3-天阶-213187
 */
const bagItemBgIcons = ["213189", "213181", "213190", "213187"];
const bagItemGoEffect = ["311092", "31645", "59956", "88773", "146784"];
class BagData extends Subdata {
    constructor() {
        super(...arguments);
        this.bagIds = [];
        this.usingWeaponId = -1;
        this.usingSkinId = -1;
        this.usingEquipIds = {};
        this.usingPetId = -1;
    }
    setBagId(bagId) {
        if (!this.bagIds.includes(bagId)) {
            this.bagIds.push(bagId);
        }
        this.save(true);
    }
    setUsingWeaponId(weaponId) {
        this.usingWeaponId = weaponId;
        this.save(true);
    }
    setUsingSkinId(skinId) {
        this.usingSkinId = skinId;
        this.save(true);
    }
    setUsingEquipId(key, bagId) {
        if (key == -1 && bagId == -1) {
            this.usingEquipIds = {};
        }
        else {
            MapEx.set(this.usingEquipIds, key, bagId);
        }
        this.save(true);
    }
    setUsingPetId(petId) {
        this.usingPetId = petId;
        this.save(true);
    }
    checkBagIdError(errorBagId, bagId) {
        if (!this.bagIds || this.bagIds.length == 0 || !this.bagIds.includes(errorBagId))
            return;
        for (let i = 0; i < this.bagIds.length; ++i) {
            if (this.bagIds[i] == errorBagId) {
                this.bagIds[i] = bagId;
                this.save(true);
                break;
            }
        }
    }
}
__decorate([
    Decorator.persistence()
], BagData.prototype, "bagIds", void 0);
__decorate([
    Decorator.persistence()
], BagData.prototype, "usingWeaponId", void 0);
__decorate([
    Decorator.persistence()
], BagData.prototype, "usingSkinId", void 0);
__decorate([
    Decorator.persistence()
], BagData.prototype, "usingEquipIds", void 0);
__decorate([
    Decorator.persistence()
], BagData.prototype, "usingPetId", void 0);
class BagModuleC extends ModuleC {
    constructor() {
        super(...arguments);
        this.hudModuleC = null;
        this.bagInfoPanel = null;
        this.bagPanel = null;
        this.taskModuleC = null;
        this.adTipsPanel = null;
        this.guideModuleC = null;
        this.playerModuleC = null;
        this.loading = null;
        this.ringSoulModuleC = null;
        this.flyModuleC = null;
        this.soulBoneModuleC = null;
        this.isOpenAutoAtk = false;
        this.isAutoAtkTimer = 0;
        this.autoAtkTime = 0.5;
        this.bagIds = [];
        this.usingWeaponId = -1;
        this.usingSkinId = -1;
        this.usingEquipIds = {};
        this.usingPetId = -1;
        this.isInitComplete = false;
        this.bagItemMap = new Map();
    }
    get getHUDModuleC() {
        if (!this.hudModuleC) {
            this.hudModuleC = ModuleService.getModule(HUDModuleC);
        }
        return this.hudModuleC;
    }
    get getBagInfoPanel() {
        if (!this.bagInfoPanel) {
            this.bagInfoPanel = mw.UIService.create(BagInfoPanel);
        }
        return this.bagInfoPanel;
    }
    get getBagPanel() {
        if (!this.bagPanel) {
            this.bagPanel = mw.UIService.getUI(BagPanel);
        }
        return this.bagPanel;
    }
    get getTaskModuleC() {
        if (!this.taskModuleC) {
            this.taskModuleC = ModuleService.getModule(TaskModuleC);
        }
        return this.taskModuleC;
    }
    get getAdTipsPanel() {
        if (!this.adTipsPanel) {
            this.adTipsPanel = mw.UIService.create(AdTipsPanel);
        }
        return this.adTipsPanel;
    }
    get getGuideModuleC() {
        if (!this.guideModuleC) {
            this.guideModuleC = ModuleService.getModule(GuideModuleC);
        }
        return this.guideModuleC;
    }
    get getPlayerModuleC() {
        if (!this.playerModuleC) {
            this.playerModuleC = ModuleService.getModule(PlayerModuleC);
        }
        return this.playerModuleC;
    }
    get getLoading() {
        if (!this.loading) {
            this.loading = mw.UIService.getUI(Loading);
        }
        return this.loading;
    }
    get getRingSoulModuleC() {
        if (!this.ringSoulModuleC) {
            this.ringSoulModuleC = ModuleService.getModule(RingSoulModuleC);
        }
        return this.ringSoulModuleC;
    }
    get getFlyModuleC() {
        if (!this.flyModuleC) {
            this.flyModuleC = ModuleService.getModule(FlyModuleC);
        }
        return this.flyModuleC;
    }
    get getSoulBoneModuleC() {
        if (!this.soulBoneModuleC) {
            this.soulBoneModuleC = ModuleService.getModule(SoulBoneModuleC);
        }
        return this.soulBoneModuleC;
    }
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
        this.getHUDModuleC.onOpenShopAction.add(() => {
            this.getBagPanel.show();
            this.getBagPanel.updateBar(this.bagIds.length);
        });
        this.getHUDModuleC.onOpenAutoAtkAction.add((resultCallBack, isOpen) => {
            console.error(isOpen);
            if (isOpen) {
                if (this.isHasBagId(10046)) {
                    if (resultCallBack)
                        resultCallBack(true);
                    Notice.showDownNotice(GameConfig.Language.Text_SuccessfullyActivatedAutomaticAttack.Value);
                    this.use(10046);
                    this.isOpenAutoAtk = true;
                }
                else if (this.isHasBagId(10047)) {
                    if (resultCallBack)
                        resultCallBack(true);
                    Notice.showDownNotice(GameConfig.Language.Text_SuccessfullyActivatedAutomaticAttack.Value);
                    this.use(10047);
                    this.isOpenAutoAtk = true;
                }
                else {
                    if (resultCallBack)
                        resultCallBack(false);
                    Notice.showDownNotice(GameConfig.Language.Text_FailedToObtainAutomaticAttackSoul.Value);
                }
            }
            else {
                if (resultCallBack)
                    resultCallBack(false);
                if (this.isOpenAutoAtk) {
                    Notice.showDownNotice(GameConfig.Language.Text_SuccessfullyDisabledAutomaticAttack.Value);
                    this.isOpenAutoAtk = false;
                }
            }
        });
    }
    onEnterScene(sceneType) {
        this.initBagData();
        this.initTrigger().then(() => {
        });
        this.updateLotteryData();
        TimeUtil.delaySecond(3).then(() => {
            Utils.setGraphicsLevel();
        });
    }
    onUpdateAutoAtk(dt) {
        if (!this.isOpenAutoAtk)
            return;
        this.isAutoAtkTimer += dt;
        if (this.isAutoAtkTimer >= this.autoAtkTime) {
            this.isAutoAtkTimer = 0;
            ColdWeapon.getInstance().attack(0);
        }
    }
    updateLotteryData() {
        // for (let i = 8; i <= 10; ++i) {
        //     if (this.isHasBagId(lotteryDatas.get(i).reward)) {
        //         lotteryDatas.get(i).reward = 20061;
        //         lotteryDatas.get(i).icon = `mode_163292`;
        //         lotteryDatas.get(i).name = `小舞`;
        //         break;
        //     }
        // }
        if (this.isHasBagId(lotteryDatas.get(8).reward)) {
            lotteryDatas.get(8).reward = 20061;
            lotteryDatas.get(8).icon = `mode_163292`;
            lotteryDatas.get(8).name = `Text_XiaoWuJie`;
        }
        if (this.isHasBagId(lotteryDatas.get(9).reward)) {
            lotteryDatas.get(9).reward = 10044;
            lotteryDatas.get(9).icon = `mode_151245`;
            lotteryDatas.get(9).name = `Text_MartialSoulMechSlashWindSlash_Male`;
        }
        if (this.isHasBagId(lotteryDatas.get(10).reward)) {
            lotteryDatas.get(10).reward = 10045;
            lotteryDatas.get(10).icon = `mode_151897`;
            lotteryDatas.get(10).name = `Text_MartialSoulMechSlashWindSlash_Female`;
        }
    }
    enterScenceUsing() {
        if (this.usingWeaponId > 0)
            this.useWeapon(this.usingWeaponId);
        if (this.usingSkinId > 0)
            this.useSkin(GameConfig.BagInfo.getElement(this.usingSkinId)?.AssetId);
        if (this.usingPetId > 0)
            this.usePet(this.usingPetId);
    }
    initBagData() {
        this.bagIds = this.data.bagIds;
        this.usingWeaponId = this.data.usingWeaponId;
        this.usingSkinId = this.data.usingSkinId;
        this.usingEquipIds = this.data.usingEquipIds;
        this.usingPetId = this.data.usingPetId;
        this.checkBagIdError(200677, 20067);
    }
    checkBagIdError(errorBagId, bagId) {
        if (!this.bagIds || this.bagIds.length == 0 || !this.bagIds.includes(errorBagId))
            return;
        for (let i = 0; i < this.bagIds.length; ++i) {
            if (this.bagIds[i] == errorBagId) {
                this.bagIds[i] = bagId;
                this.server.net_checkBagIdError(errorBagId, bagId);
                break;
            }
        }
    }
    isHasBagId(bagId) {
        return this.bagIds.includes(bagId);
    }
    setBagId(bagId) {
        if (this.bagIds.includes(bagId)) {
            Notice.showDownNotice(GameConfig.Language.Text_Obtained.Value);
            return;
        }
        this.bagIds.push(bagId);
        this.server.net_setBagId(bagId);
        this.getPlayerModuleC.adsUpLv();
        Notice.showDownNotice(GameConfig.Language.Text_CongratulationsOnObtaining.Value);
        this.getBagPanel.updateBar(this.bagIds.length);
        this.getBagPanel.updateBagItem(bagId);
    }
    setUsingWeaponId(weaponId) {
        if (this.usingWeaponId == weaponId) {
            Notice.showDownNotice(`${GlobalData.weaponStr}${GameConfig.Language.Text_InUse.Value}`);
            return false;
        }
        this.usingWeaponId = weaponId;
        this.server.net_setUsingWeaponId(weaponId);
        this.updateHpByUsing();
        return true;
    }
    setUsingSkinId(skinId) {
        if (this.usingSkinId == skinId) {
            Notice.showDownNotice(`${GlobalData.skinStr}${GameConfig.Language.Text_InUse.Value}`);
            return false;
        }
        this.usingSkinId = skinId;
        this.server.net_setUsingSkinId(skinId);
        this.updateHpByUsing();
        return true;
    }
    resetUsingSkin() {
        this.usingSkinId = -1;
        this.server.net_setUsingSkinId(this.usingSkinId);
        this.updateHpByUsing();
        AccountService.downloadData(this.localPlayer.character, (success) => {
            if (!success)
                return;
            this.useSkin(null);
        });
    }
    setUsingEquipId(key, bagId) {
        if (MapEx.has(this.usingEquipIds, key) && MapEx.get(this.usingEquipIds, key) == bagId) {
            Notice.showDownNotice(`${GlobalData.equipStr}${GameConfig.Language.Text_InTheEquipment.Value}`);
            return false;
        }
        MapEx.set(this.usingEquipIds, key, bagId);
        this.server.net_setUsingEquipId(key, bagId);
        this.updateHpByUsing();
        return true;
    }
    resetUsingEquip() {
        this.usingEquipIds = {};
        this.server.net_setUsingEquipId(-1, -1);
        this.updateHpByUsing();
        this.localPlayer.character.detachAllFromSlot({ isDestroy: true });
        this.localPlayer.character.asyncReady().then(() => { this.localPlayer.character.syncDescription(false, true); });
    }
    setUsingPetId(petId) {
        if (this.usingPetId == petId) {
            Notice.showDownNotice(`${GlobalData.petStr}${GameConfig.Language.Text_FollowIn.Value}`);
            return false;
        }
        this.usingPetId = petId;
        this.server.net_setUsingPetId(petId);
        this.updateHpByUsing();
        return true;
    }
    resetUsingPet() {
        this.usingPetId = -1;
        this.server.net_setUsingPetId(this.usingPetId);
        this.updateHpByUsing();
        this.usePet(this.usingPetId);
    }
    updateHpByUsing() {
        this.getHUDModuleC.updateHpByUsing(this.getAddHpByUsing() + this.getRingSoulModuleC.getRarity + this.getFlyModuleC.getHpRarity + this.getSoulBoneModuleC.getTotalUpStarOffsetValue, this.getAddAtkByUsing() + this.getRingSoulModuleC.getRarity + this.getFlyModuleC.getAtkRarity + this.getSoulBoneModuleC.getTotalUpStarOffsetValue);
    }
    getAddHpByUsing() {
        let weaponHp = 0, skinHp = 0, equipHp = 0, petHp = 0;
        if (this.usingWeaponId != -1) {
            weaponHp = Utils.getMultipleByRarity(GameConfig.BagInfo.getElement(this.usingWeaponId)?.Rarity);
            if (weaponHp < 0 || isNaN(weaponHp))
                weaponHp = 0;
        }
        if (this.usingSkinId != -1) {
            skinHp = Utils.getMultipleByRarity(GameConfig.BagInfo.getElement(this.usingSkinId)?.Rarity);
            if (skinHp < 0 || isNaN(skinHp))
                skinHp = 0;
        }
        if (this.usingEquipIds && MapEx.count(this.usingEquipIds) > 0) {
            MapEx.forEach(this.usingEquipIds, (key, bagId) => {
                equipHp += Utils.getMultipleByRarity(GameConfig.BagInfo.getElement(bagId)?.Rarity);
            });
            if (equipHp < 0 || isNaN(equipHp))
                equipHp = 0;
        }
        if (this.usingPetId != -1) {
            petHp = Utils.getMultipleByRarity(GameConfig.BagInfo.getElement(this.usingPetId)?.Rarity);
            if (petHp < 0 || isNaN(petHp))
                petHp = 0;
        }
        let totalHp = weaponHp + skinHp + equipHp + petHp + 1;
        if (totalHp == 0)
            totalHp = 1;
        return totalHp;
    }
    getAddedHpByUsing(bagId) {
        let weaponHp = 0, skinHp = 0, equipHp = 0, petHp = 0;
        let bagInfoElement = GameConfig.BagInfo.getElement(bagId);
        if (bagInfoElement.Type == 1) {
            weaponHp = Utils.getMultipleByRarity(bagInfoElement?.Rarity);
            if (weaponHp < 0 || isNaN(weaponHp))
                weaponHp = 0;
        }
        else {
            if (this.usingWeaponId != -1) {
                weaponHp = Utils.getMultipleByRarity(GameConfig.BagInfo.getElement(this.usingWeaponId)?.Rarity);
                if (weaponHp < 0 || isNaN(weaponHp))
                    weaponHp = 0;
            }
        }
        if (bagInfoElement.Type == 2) {
            skinHp = Utils.getMultipleByRarity(bagInfoElement?.Rarity);
            if (skinHp < 0 || isNaN(skinHp))
                skinHp = 0;
        }
        else {
            if (this.usingSkinId != -1) {
                skinHp = Utils.getMultipleByRarity(GameConfig.BagInfo.getElement(this.usingSkinId)?.Rarity);
                if (skinHp < 0 || isNaN(skinHp))
                    skinHp = 0;
            }
        }
        if (this.usingEquipIds && MapEx.count(this.usingEquipIds) > 0) {
            MapEx.forEach(this.usingEquipIds, (key, bagId) => {
                if (bagInfoElement.HumanoidSlotType == key) {
                    equipHp += Utils.getMultipleByRarity(bagInfoElement?.Rarity);
                }
                else {
                    equipHp += Utils.getMultipleByRarity(GameConfig.BagInfo.getElement(bagId)?.Rarity);
                }
            });
            if (equipHp < 0 || isNaN(equipHp))
                equipHp = 0;
        }
        else {
            equipHp += Utils.getMultipleByRarity(bagInfoElement?.Rarity);
            if (equipHp < 0 || isNaN(equipHp))
                equipHp = 0;
        }
        if (bagInfoElement.Type == 4) {
            petHp = Utils.getMultipleByRarity(bagInfoElement?.Rarity);
            if (petHp < 0 || isNaN(petHp))
                petHp = 0;
        }
        else {
            if (this.usingPetId != -1) {
                petHp = Utils.getMultipleByRarity(GameConfig.BagInfo.getElement(this.usingPetId)?.Rarity);
                if (petHp < 0 || isNaN(petHp))
                    petHp = 0;
            }
        }
        let totalHp = weaponHp + skinHp + equipHp + petHp + 1;
        if (totalHp == 0)
            totalHp = 1;
        return Math.round(totalHp * Utils.getHp(this.getPlayerModuleC.getLv));
    }
    getAddAtkByUsing() {
        let weaponAtk = 0, skinAtk = 0, equipAtk = 0, petAtk = 0;
        if (this.usingWeaponId != -1) {
            weaponAtk = Utils.getMultipleByRarity(GameConfig.BagInfo.getElement(this.usingWeaponId)?.Rarity);
            if (weaponAtk < 0 || isNaN(weaponAtk))
                weaponAtk = 0;
        }
        if (this.usingSkinId != -1) {
            skinAtk = Utils.getMultipleByRarity(GameConfig.BagInfo.getElement(this.usingSkinId)?.Rarity);
            if (skinAtk < 0 || isNaN(skinAtk))
                skinAtk = 0;
        }
        if (this.usingEquipIds && MapEx.count(this.usingEquipIds) > 0) {
            MapEx.forEach(this.usingEquipIds, (key, bagId) => {
                equipAtk += Utils.getMultipleByRarity(GameConfig.BagInfo.getElement(bagId)?.Rarity);
            });
            if (equipAtk < 0 || isNaN(equipAtk))
                equipAtk = 0;
        }
        if (this.usingPetId != -1) {
            petAtk = Utils.getMultipleByRarity(GameConfig.BagInfo.getElement(this.usingPetId)?.Rarity);
            if (petAtk < 0 || isNaN(petAtk))
                petAtk = 0;
        }
        let totalAtk = weaponAtk + skinAtk + equipAtk + petAtk + 1;
        if (totalAtk == 0)
            totalAtk = 1;
        return totalAtk;
    }
    getAddedAtkByUsing(bagId) {
        let weaponAtk = 0, skinAtk = 0, equipAtk = 0, petAtk = 0;
        let bagInfoElement = GameConfig.BagInfo.getElement(bagId);
        if (bagInfoElement.Type == 1) {
            weaponAtk = Utils.getMultipleByRarity(bagInfoElement?.Rarity);
            if (weaponAtk < 0 || isNaN(weaponAtk))
                weaponAtk = 0;
        }
        else {
            if (this.usingWeaponId != -1) {
                weaponAtk = Utils.getMultipleByRarity(GameConfig.BagInfo.getElement(this.usingWeaponId)?.Rarity);
                if (weaponAtk < 0 || isNaN(weaponAtk))
                    weaponAtk = 0;
            }
        }
        if (bagInfoElement.Type == 2) {
            skinAtk = Utils.getMultipleByRarity(bagInfoElement?.Rarity);
            if (skinAtk < 0 || isNaN(skinAtk))
                skinAtk = 0;
        }
        else {
            if (this.usingSkinId != -1) {
                skinAtk = Utils.getMultipleByRarity(GameConfig.BagInfo.getElement(this.usingSkinId)?.Rarity);
                if (skinAtk < 0 || isNaN(skinAtk))
                    skinAtk = 0;
            }
        }
        if (this.usingEquipIds && MapEx.count(this.usingEquipIds) > 0) {
            MapEx.forEach(this.usingEquipIds, (key, bagId) => {
                if (bagInfoElement.HumanoidSlotType == key) {
                    equipAtk += Utils.getMultipleByRarity(bagInfoElement?.Rarity);
                }
                else {
                    equipAtk += Utils.getMultipleByRarity(GameConfig.BagInfo.getElement(bagId)?.Rarity);
                }
            });
            if (equipAtk < 0 || isNaN(equipAtk))
                equipAtk = 0;
        }
        else {
            equipAtk += Utils.getMultipleByRarity(bagInfoElement?.Rarity);
            if (equipAtk < 0 || isNaN(equipAtk))
                equipAtk = 0;
        }
        if (bagInfoElement.Type == 4) {
            petAtk = Utils.getMultipleByRarity(bagInfoElement?.Rarity);
            if (petAtk < 0 || isNaN(petAtk))
                petAtk = 0;
        }
        else {
            if (this.usingPetId != -1) {
                petAtk = Utils.getMultipleByRarity(GameConfig.BagInfo.getElement(this.usingPetId)?.Rarity);
                if (petAtk < 0 || isNaN(petAtk))
                    petAtk = 0;
            }
        }
        let totalAtk = weaponAtk + skinAtk + equipAtk + petAtk + 1;
        if (totalAtk == 0)
            totalAtk = 1;
        return Math.round(totalAtk * Utils.getAtk(this.getPlayerModuleC.getLv));
    }
    clickBagItem(bagId, buyComplete) {
        if (!this.isHasBagId(bagId)) {
            if (GameConfig.BagInfo.getElement(bagId).GetType == 2) {
                Notice.showDownNotice(GameConfig.Language.Text_BeginnerGiftPackAcquisition.Value);
                return;
            }
            else if (GameConfig.BagInfo.getElement(bagId).GetType == 3) {
                Notice.showDownNotice(GameConfig.Language.Text_GoldCoinLotteryToObtain.Value);
                return;
            }
            else if (GameConfig.BagInfo.getElement(bagId).GetType == 4) {
                Notice.showDownNotice(GameConfig.Language.Text_PleaseCompleteTheBeginnerGuideFirst.Value);
                return;
            }
            else if (GameConfig.BagInfo.getElement(bagId).GetType == 5) {
                Notice.showDownNotice(GameConfig.Language.Text_ObtainByWatchingAdvertisements.Value);
                return;
            }
            else if (GameConfig.BagInfo.getElement(bagId).GetType == 6) {
                Notice.showDownNotice(GameConfig.Language.Text_OldPlayersReturningToObtain.Value);
                return;
            }
        }
        console.warn(`${bagId}`);
        this.getBagInfoPanel.showThis(bagId, this.isHasBagId(bagId), () => {
            if (this.isHasBagId(bagId)) {
                this.use(bagId);
            }
            else {
                Notice.showDownNotice(GameConfig.Language.Text_NotObtained.Value);
                if (GlobalData.isOpenIAA) {
                    this.getAdTipsPanel.showRewardAd(() => {
                        Notice.showDownNotice(GameConfig.Language.Text_StartGuiding.Value);
                        this.getGuideModuleC.startGuide(this.getBagObVec(bagId));
                        this.getBagInfoPanel.hide();
                        this.getBagPanel.hideTween();
                    }, GameConfig.Language.Text_TakeYouToGetItForFree.Value, GameConfig.Language.Text_Cancel.Value, GameConfig.Language.Text_GetItForFree.Value);
                }
                else {
                    Notice.showDownNotice(GameConfig.Language.Text_StartGuiding.Value);
                    this.getGuideModuleC.startGuide(this.getBagObVec(bagId));
                }
            }
        }, () => {
            let price = (GameConfig.BagInfo.getElement(bagId)?.Rarity + 1) * GlobalData.addCoinCount;
            if (price < 0 || isNaN(price))
                price = GlobalData.addCoinCount;
            let hasCoin = this.getPlayerModuleC.getCoin();
            if (hasCoin >= price) {
                this.getPlayerModuleC.saveCoin(-price);
                this.setBagId(bagId);
                if (buyComplete)
                    buyComplete();
                this.getBagInfoPanel.mPriceButton.visibility = mw.SlateVisibility.Collapsed;
                this.getBagInfoPanel.mAdsButton.visibility = mw.SlateVisibility.Collapsed;
                Notice.showDownNotice(GameConfig.Language.Text_PurchaseSuccessful.Value);
            }
            else {
                Notice.showDownNotice(GameConfig.Language.Text_InsufficientGoldCoins.Value);
                if (GlobalData.isOpenIAA) {
                    this.getAdTipsPanel.showRewardAd(() => {
                        Notice.showDownNotice(GameConfig.Language.Text_SuccessfullyObtainedCoins.Value);
                        this.getPlayerModuleC.saveCoin(GlobalData.addCoinCount);
                    }, StringUtil.format(GameConfig.Language.Text_GetGoldCoinsForFree.Value, GlobalData.addCoinCount), GameConfig.Language.Text_Cancel.Value, GameConfig.Language.Text_FreeToReceive.Value);
                }
                else {
                    Notice.showDownNotice(GameConfig.Language.Text_SuccessfullyObtainedCoins.Value);
                    this.getPlayerModuleC.saveCoin(GlobalData.addCoinCount);
                }
            }
        }, () => {
            Notice.showDownNotice(GameConfig.Language.Text_StartGuiding.Value);
            this.getGuideModuleC.startGuide(this.getBagObVec(bagId));
            this.getBagInfoPanel.hide();
            this.getBagPanel.hideTween();
        });
    }
    use(bagId) {
        let bagInfoElement = GameConfig.BagInfo.getElement(bagId);
        switch (bagInfoElement.Type) {
            case 1:
                if (!this.setUsingWeaponId(bagId))
                    return;
                this.useWeapon(bagId);
                Notice.showDownNotice(GameConfig.Language.Text_EquipmentSuccessful.Value);
                break;
            case 2:
                if (!this.setUsingSkinId(bagId))
                    return;
                this.useSkin(bagInfoElement.AssetId);
                Notice.showDownNotice(GameConfig.Language.Text_WearingSuccessfully.Value);
                break;
            case 3:
                if (!this.setUsingEquipId(bagInfoElement.HumanoidSlotType, bagId))
                    return;
                this.useEquip(bagInfoElement);
                Notice.showDownNotice(GameConfig.Language.Text_EquipmentSuccessful.Value);
                break;
            case 4:
                // Notice.showDownNotice(`功能明天开放，敬请期待`);
                if (!this.setUsingPetId(bagId))
                    return;
                this.usePet(bagId);
                Notice.showDownNotice(GameConfig.Language.Text_FollowSuccess.Value);
                break;
        }
    }
    useWeapon(weaponId) {
        ColdWeapon.getInstance().register(GameConfig.ColdWeapon.getElement(weaponId));
    }
    useSkin(assetId) {
        if (assetId)
            this.localPlayer.character.setDescription([assetId]);
        this.localPlayer.character.asyncReady().then(() => {
            if (this.usingEquipIds && MapEx.count(this.usingEquipIds) > 0) {
                MapEx.forEach(this.usingEquipIds, (key, value) => {
                    this.useEquip(GameConfig.BagInfo.getElement(value));
                });
            }
            this.localPlayer.character.asyncReady().then(() => {
                this.localPlayer.character.syncDescription();
            });
        });
    }
    useEquip(bagInfoElement) {
        let relativeTransform = new mw.Transform(bagInfoElement.OffsetPos, new mw.Rotation(bagInfoElement.OffsetRot), bagInfoElement.OffsetSca);
        this.localPlayer.character.detachAllFromSlot({ slotName: bagInfoElement.HumanoidSlotType, isDestroy: true });
        this.localPlayer.character.description.advance.slotAndDecoration
            .slot[bagInfoElement.HumanoidSlotType].decoration.add(bagInfoElement.AssetId, relativeTransform);
        this.localPlayer.character.asyncReady().then(() => { this.localPlayer.character.syncDescription(false, true); });
    }
    usePet(bagId) {
        this.server.net_usePet(bagId);
    }
    async initTrigger() {
        this.getLoading.show();
        let timeOutId = setTimeout(() => {
            console.error(`提前加载完成`);
            clearTimeout(timeOutId);
            this.getLoading.hide();
            this.enterScenceUsing();
            this.getGuideModuleC.startFirst();
        }, 10 * 1000);
        let parentTrigger = await mw.GameObject.asyncFindGameObjectById("0F4AC706");
        await parentTrigger.asyncReady();
        let parent = parentTrigger.getChildren();
        console.error(`${parent?.length}`);
        for (let i = 0; i < parent.length; ++i) {
            let trigger = parent[i];
            let bagId = Number(trigger.name.split(`-`)[1]);
            if (isNaN(bagId) || bagId < 0)
                return;
            let isInitItemSuccessfully = await this.isInitItemSuccessfully(bagId, trigger.worldTransform.position);
            if (!isInitItemSuccessfully)
                return;
            trigger.onEnter.add((gameObject) => {
                this.onEnterTrigger(gameObject, bagId);
            });
            this.getLoading.updateBar((i + 1) * 10);
            if (i == 9) {
                clearTimeout(timeOutId);
                this.getLoading.hide();
                this.enterScenceUsing();
                this.getGuideModuleC.startFirst();
            }
        }
        this.isInitComplete = true;
        console.error(`加载完成`);
        /**
          let name: Map<string, number[]> = new Map<string, number[]>();
        for (let i = 0; i < parent.length; ++i) {
            let n = parent[i].name.split(`-`);
            if (name.has(n[0])) {
                name.get(n[0]).push(Number(n[1]));
            } else {
                name.set(n[0], [Number(n[1])]);
            }
        }

        let weapon = name.get("Weapon");
        for (let i = 10001; i <= 10040; ++i) {
            if (!weapon.includes(i)) console.error(`weapon:${i}`);
        }
        let skin = name.get("Skin");
        for (let i = 20001; i <= 20052; ++i) {
            if (!skin.includes(i)) console.error(`skin:${i}`);
        }
        let equip = name.get("Equip");
        for (let i = 30001; i <= 30029; ++i) {
            if (!equip.includes(i)) console.error(`equip:${i}`);
        }
        let pet = name.get("Pet");
        for (let i = 40001; i <= 40007; ++i) {
            if (!pet.includes(i)) console.error(`pet:${i}`);
        }
         */
    }
    onCompleted(bagId) {
        this.setBagId(bagId);
        this.getTaskModuleC.pickUpTreasure();
        this.getBagInfoPanel.showThis(bagId, true, () => {
            this.use(bagId);
        }, null, null);
    }
    onEnterTrigger(go, bagId) {
        if (!(go instanceof mw.Character))
            return;
        if (go.gameObjectId != this.localPlayer.character.gameObjectId)
            return;
        this.setBagId(bagId);
        this.getTaskModuleC.pickUpTreasure();
        this.getBagInfoPanel.showThis(bagId, true, () => {
            this.use(bagId);
        }, null, null);
    }
    getBagObVec(bagId) {
        if (this.bagItemMap.has(bagId))
            return this.bagItemMap.get(bagId).loc;
        return null;
    }
    async isInitItemSuccessfully(bagId, loc) {
        let bagInfoElement = GameConfig.BagInfo?.getElement(bagId);
        if (!bagInfoElement)
            return false;
        let objId = bagInfoElement?.ObjId;
        if (!objId || objId == "")
            return false;
        console.error("出错啦" + objId);
        let bagItemGo = await GameObjPool.asyncSpawn(objId);
        bagItemGo.collisionEnabled = false;
        if (bagItemGo instanceof mw.Character)
            bagItemGo.collisionWithOtherCharacterEnabled = false;
        let offset = bagInfoElement.AssetOffsetPos;
        bagItemGo.worldTransform.position = new mw.Vector(offset.x + loc.x, offset.y + loc.y, offset.z + loc.z);
        bagItemGo.worldTransform.rotation = new mw.Rotation(bagInfoElement.AssetOffsetRot);
        bagItemGo.worldTransform.scale = bagInfoElement.AssetOffsetSca;
        let effectGuid = "";
        let effectId = null;
        switch (bagInfoElement.Type) {
            case 1:
                effectGuid = bagItemGoEffect[Utils.getRandomInteger(0, bagItemGoEffect.length - 1)];
                effectId = EffectService.playAtPosition(effectGuid, effectGuid == "146784" ? loc : new mw.Vector(loc.x, loc.y, loc.z - 50), { loopCount: 0 });
                break;
            case 2:
                effectGuid = "88773";
                effectId = EffectService.playAtPosition(effectGuid, loc, { loopCount: 0 });
                break;
            case 3:
                effectGuid = "311092";
                effectId = EffectService.playAtPosition(effectGuid, loc, { loopCount: 0 });
                break;
            case 4:
                effectGuid = "146784";
                // effectId = EffectService.playAtPosition(effectGuid, new mw.Vector(loc.x, loc.y, loc.z - 50), { loopCount: 0, scale: mw.Vector.one.multiply(3) });
                effectId = EffectService.playOnGameObject(effectGuid, bagItemGo, { loopCount: 0 });
                break;
        }
        // effectId = EffectService.playOnGameObject(effectGuid, bagItemGo, { loopCount: 0 });
        this.bagItemMap.set(bagId, { go: bagItemGo, effectId: effectId, loc: loc });
        return true;
    }
    recycleItem(bagId) {
        if (!this.bagItemMap.has(bagId))
            return;
        GameObjPool.despawn(this.bagItemMap.get(bagId)?.go);
        EffectService.stop(this.bagItemMap.get(bagId)?.effectId);
    }
    onUpdate(dt) {
        this.onUpdateAutoAtk(dt);
        // this.setBagItemRot(dt);
    }
    setBagItemRot(dt) {
        if (!this.isInitComplete)
            return;
        this.bagItemMap.forEach((value, key) => {
            value.go.worldTransform.rotation = new mw.Rotation(0, 0, value.go.worldTransform.rotation.z + dt * 50);
        });
    }
}
class BagModuleS extends ModuleS {
    constructor() {
        super(...arguments);
        this.playerModuleS = null;
        this.ringSoulModuleS = null;
        this.flyModuleS = null;
        this.soulBoneModuleS = null;
    }
    get getPlayerModuleS() {
        if (!this.playerModuleS) {
            this.playerModuleS = ModuleService.getModule(PlayerModuleS);
        }
        return this.playerModuleS;
    }
    get getRingSoulModuleS() {
        if (!this.ringSoulModuleS) {
            this.ringSoulModuleS = ModuleService.getModule(RingSoulModuleS);
        }
        return this.ringSoulModuleS;
    }
    get getFlyModuleS() {
        if (!this.flyModuleS) {
            this.flyModuleS = ModuleService.getModule(FlyModuleS);
        }
        return this.flyModuleS;
    }
    get getSoulBoneModuleS() {
        if (!this.soulBoneModuleS) {
            this.soulBoneModuleS = ModuleService.getModule(SoulBoneModuleS);
        }
        return this.soulBoneModuleS;
    }
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
    }
    net_checkBagIdError(errorBagId, bagId) {
        this.currentData.checkBagIdError(errorBagId, bagId);
    }
    net_setBagId(bagId) {
        this.currentData.setBagId(bagId);
    }
    net_setUsingWeaponId(weaponId) {
        this.currentData.setUsingWeaponId(weaponId);
        this.updateHpByUsing(this.currentPlayer);
    }
    net_setUsingSkinId(skinId) {
        this.currentData.setUsingSkinId(skinId);
        this.updateHpByUsing(this.currentPlayer);
    }
    net_setUsingEquipId(key, bagId) {
        this.currentData.setUsingEquipId(key, bagId);
        this.updateHpByUsing(this.currentPlayer);
    }
    net_setUsingPetId(petId) {
        this.currentData.setUsingPetId(petId);
        this.updateHpByUsing(this.currentPlayer);
    }
    updateHpByUsing(player) {
        this.getPlayerModuleS.updateHpByUsing(player, this.getAddHpByUsing(player) + this.getRingSoulModuleS.getRarity(player) + this.getFlyModuleS.getRarity(player) + this.getSoulBoneModuleS.getRarity(player));
    }
    getAddHpByUsing(player) {
        let bagData = DataCenterS.getData(player, BagData);
        let weaponHp = 0, skinHp = 0, equipHp = 0, petHp = 0;
        if (bagData.usingWeaponId != -1) {
            weaponHp = Utils.getMultipleByRarity(GameConfig.BagInfo.getElement(bagData.usingWeaponId)?.Rarity);
            if (weaponHp < 0 || isNaN(weaponHp))
                weaponHp = 0;
        }
        if (bagData.usingSkinId != -1) {
            skinHp = Utils.getMultipleByRarity(GameConfig.BagInfo.getElement(bagData.usingSkinId)?.Rarity);
            if (skinHp < 0 || isNaN(skinHp))
                skinHp = 0;
        }
        if (bagData.usingEquipIds && MapEx.count(bagData.usingEquipIds) > 0) {
            MapEx.forEach(bagData.usingEquipIds, (key, bagId) => {
                equipHp += Utils.getMultipleByRarity(GameConfig.BagInfo.getElement(bagId)?.Rarity);
            });
            if (equipHp < 0 || isNaN(equipHp))
                equipHp = 0;
        }
        if (bagData.usingPetId != -1) {
            petHp = Utils.getMultipleByRarity(GameConfig.BagInfo.getElement(bagData.usingPetId)?.Rarity);
            if (petHp < 0 || isNaN(petHp))
                petHp = 0;
        }
        let totalHp = weaponHp + skinHp + equipHp + petHp + 1;
        if (totalHp == 0)
            totalHp = 1;
        return totalHp;
    }
    net_usePet(bagId) {
        this.getPlayerModuleS.usePet(this.currentPlayer, bagId);
    }
}
__decorate([
    Decorator.noReply()
], BagModuleS.prototype, "net_checkBagIdError", null);
__decorate([
    Decorator.noReply()
], BagModuleS.prototype, "net_setBagId", null);
__decorate([
    Decorator.noReply()
], BagModuleS.prototype, "net_setUsingWeaponId", null);
__decorate([
    Decorator.noReply()
], BagModuleS.prototype, "net_setUsingSkinId", null);
__decorate([
    Decorator.noReply()
], BagModuleS.prototype, "net_setUsingEquipId", null);
__decorate([
    Decorator.noReply()
], BagModuleS.prototype, "net_setUsingPetId", null);
__decorate([
    Decorator.noReply()
], BagModuleS.prototype, "net_usePet", null);
class BagPanel extends BagPanel_Generate$1 {
    constructor() {
        super(...arguments);
        this.bagModuleC = null;
        this.hudPanel = null;
        this.bagTabs = [];
        this.resetButton = null;
        this.currentBagTabIndex = -1;
        this.bagIdsMap = new Map();
        this.bagItems = [];
    }
    get getBagModuleC() {
        if (!this.bagModuleC) {
            this.bagModuleC = ModuleService.getModule(BagModuleC);
        }
        return this.bagModuleC;
    }
    get getHudPanel() {
        if (!this.hudPanel) {
            this.hudPanel = mw.UIService.getUI(HUDPanel);
        }
        return this.hudPanel;
    }
    onStart() {
        this.initTab();
        this.initResetButton();
        this.initBagData();
        this.bindButton();
    }
    bindButton() {
        this.mCloseButtons.onClicked.add(() => { this.hideTween(); });
    }
    initTab() {
        let tabNames = GameConfig.BagInfo.getElement(1).Name.split(`|`);
        for (let i = 0; i < tabNames.length; ++i) {
            let bagTab = mw.UIService.create(BagTab);
            bagTab.setData(tabNames[i]);
            bagTab.mButton.onClicked.add(() => { this.bindBagTabButton(i); });
            this.mTabContentCanvas.addChild(bagTab.uiObject);
            this.bagTabs.push(bagTab);
        }
    }
    initResetButton() {
        this.resetButton = mw.UIService.create(BagTab);
        this.resetButton.unSelect();
        this.resetButton.mButton.onClicked.add(() => {
            switch (this.currentBagTabIndex) {
                case 0:
                    Notice.showDownNotice(GameConfig.Language.Text_TheFunctionIsNotYetOpen_PleaseStayTuned.Value);
                    break;
                case 1:
                    this.getBagModuleC.resetUsingSkin();
                    Notice.showDownNotice(GameConfig.Language.Text_RecoveryWasSuccessful.Value);
                    break;
                case 2:
                    this.getBagModuleC.resetUsingEquip();
                    Notice.showDownNotice(GameConfig.Language.Text_RemovedSuccessfully.Value);
                    break;
                case 3:
                    Notice.showDownNotice(GameConfig.Language.Text_SuccessfullyDiscardedPet.Value);
                    this.getBagModuleC.resetUsingPet();
                    break;
            }
        });
        this.mTabContentCanvas.addChild(this.resetButton.uiObject);
        Utils.setWidgetVisibility(this.resetButton.uiObject, mw.SlateVisibility.Collapsed);
    }
    updateResetButton() {
        switch (this.currentBagTabIndex) {
            case 0:
                Utils.setWidgetVisibility(this.resetButton.uiObject, mw.SlateVisibility.Collapsed);
                break;
            case 1:
                Utils.setWidgetVisibility(this.resetButton.uiObject, mw.SlateVisibility.SelfHitTestInvisible);
                this.resetButton.setData(GameConfig.Language.Text_RestoreInitialImage.Value);
                break;
            case 2:
                Utils.setWidgetVisibility(this.resetButton.uiObject, mw.SlateVisibility.SelfHitTestInvisible);
                this.resetButton.setData(GameConfig.Language.Text_RemoveAllEquipment.Value);
                break;
            case 3:
                Utils.setWidgetVisibility(this.resetButton.uiObject, mw.SlateVisibility.SelfHitTestInvisible);
                this.resetButton.setData(GameConfig.Language.Text_CancelPetFollowing.Value);
                break;
        }
    }
    bindBagTabButton(index) {
        if (this.currentBagTabIndex == index)
            return;
        if (this.currentBagTabIndex != -1) {
            this.bagTabs[this.currentBagTabIndex].unSelect();
        }
        this.currentBagTabIndex = index;
        this.bagTabs[this.currentBagTabIndex].select();
        this.initBagItem();
        this.updateResetButton();
    }
    initBagData() {
        this.bagIdsMap.clear();
        GameConfig.BagInfo.getAllElement().forEach((value) => {
            let key = value.Type - 1;
            if (key < 0)
                return;
            if (this.bagIdsMap.has(key)) {
                this.bagIdsMap.get(key)?.push(value.ID);
            }
            else {
                this.bagIdsMap.set(key, [value.ID]);
            }
        });
        this.bagIdsMap.forEach((value, key) => {
            value.sort((a, b) => {
                return GameConfig.BagInfo.getElement(b).Rarity - GameConfig.BagInfo.getElement(a).Rarity;
            });
        });
        this.bindBagTabButton(0);
    }
    initBagItem() {
        if (!this.bagIdsMap.has(this.currentBagTabIndex))
            return;
        let bagIds = this.bagIdsMap.get(this.currentBagTabIndex);
        if (bagIds.length >= this.bagItems.length) {
            for (let i = 0; i < this.bagItems.length; ++i) {
                this.bagItems[i].setData(bagIds[i]);
                this.bagItems[i].uiObject.visibility = mw.SlateVisibility.SelfHitTestInvisible;
            }
            for (let i = this.bagItems.length; i < bagIds.length; ++i) {
                let bagItem = mw.UIService.create(BagItem);
                this.mContentCanvas.addChild(bagItem.uiObject);
                bagItem.setData(bagIds[i]);
                this.bagItems.push(bagItem);
            }
        }
        else {
            for (let i = 0; i < bagIds.length; ++i) {
                this.bagItems[i].setData(bagIds[i]);
                this.bagItems[i].uiObject.visibility = mw.SlateVisibility.SelfHitTestInvisible;
            }
            for (let i = bagIds.length; i < this.bagItems.length; ++i) {
                this.bagItems[i].uiObject.visibility = mw.SlateVisibility.Collapsed;
            }
        }
    }
    updateBagItem(bagId) {
        for (let i = 0; i < this.bagItems.length; ++i) {
            if (this.bagItems[i].uiObject.visibility != mw.SlateVisibility.Collapsed && this.bagItems[i].getBagId == bagId) {
                this.bagItems[i].setHas();
            }
        }
    }
    updateBar(curValue) {
        this.mBarTextBlock.text = `${curValue}/${GlobalData.totalBagLen}`;
        this.mProgressBar.currentValue = curValue / GlobalData.totalBagLen;
    }
    onShow(...params) {
        Utils.openUITween(this.rootCanvas, () => {
            this.getHudPanel.hide();
        }, null);
    }
    hideTween() {
        Utils.closeUITween(this.rootCanvas, null, () => {
            this.hide();
            this.getHudPanel.show();
        });
    }
}
class BagItem extends BagItem_Generate$1 {
    constructor() {
        super(...arguments);
        this.bagModuleC = null;
        this.bagId = -1;
        this.bagInfoElement = null;
    }
    get getBagModuleC() {
        if (!this.bagModuleC) {
            this.bagModuleC = ModuleService.getModule(BagModuleC);
        }
        return this.bagModuleC;
    }
    onStart() {
        this.initUI();
        this.bindButton();
    }
    initUI() {
        if (GlobalData.languageId == 0) {
            this.mNameTextBlock.fontSize = 15;
        }
        else {
            this.mNameTextBlock.fontSize = 25;
        }
    }
    bindButton() {
        this.mClickButton.onClicked.add(this.bindClickButton.bind(this));
    }
    bindClickButton() {
        this.getBagModuleC.clickBagItem(this.bagId, this.setHas.bind(this));
    }
    get getBagId() {
        return this.bagId;
    }
    setData(bagId) {
        this.bagId = bagId;
        this.bagInfoElement = GameConfig.BagInfo.getElement(bagId);
        if (!this.bagInfoElement)
            return;
        this.setHas();
        this.setName();
        this.setBgIcon();
        this.setIconImage();
    }
    setName() {
        this.mNameTextBlock.text = this.bagInfoElement.Name;
    }
    setHas() {
        if (this.getBagModuleC.isHasBagId(this.bagId)) {
            this.mHasTextBlock.text = GameConfig.Language.Text_ClickToUse.Value;
            this.mHasTextBlock_1.text = GameConfig.Language.Text_AlreadyOwned.Value;
            this.mIconImage.imageColor = mw.LinearColor.white;
        }
        else {
            if (this.bagInfoElement.GetType == 2) {
                this.mHasTextBlock.text = GameConfig.Language.Text_BeginnerGiftPackAcquisition.Value;
            }
            else if (this.bagInfoElement.GetType == 3) {
                this.mHasTextBlock.text = GameConfig.Language.Text_GoldCoinLotteryToObtain.Value;
            }
            else if (this.bagInfoElement.GetType == 4) {
                this.mHasTextBlock.text = GameConfig.Language.Text_PleaseCompleteTheBeginnerGuideFirst.Value;
            }
            else if (this.bagInfoElement.GetType == 5) {
                this.mHasTextBlock.text = GameConfig.Language.Text_ObtainByWatchingAdvertisements.Value;
            }
            else if (this.bagInfoElement.GetType == 6) {
                this.mHasTextBlock.text = GameConfig.Language.Text_OldPlayersReturningToObtain.Value;
            }
            else {
                this.mHasTextBlock.text = GameConfig.Language.Text_ClickToGet.Value;
            }
            this.mHasTextBlock_1.text = GameConfig.Language.Text_NotOwned.Value;
            this.mIconImage.imageColor = mw.LinearColor.black;
        }
    }
    setIconImage() {
        Utils.setImageByAssetIconData(this.mIconImage, this.bagInfoElement.AssetId);
    }
    setBgIcon() {
        this.mBgImage.imageGuid = bagItemBgIcons[this.bagInfoElement.Rarity];
    }
}
class BagTab extends BagTab_Generate$1 {
    onStart() {
    }
    setData(name) {
        this.mTextBlock.text = name;
    }
    select() {
        this.uiObject.size = new mw.Vector2(300, 150);
        this.mButton.normalImageGuid = "100705";
        this.mButton.pressedImageGuid = "100705";
    }
    unSelect() {
        this.uiObject.size = new mw.Vector2(250, 125);
        this.mButton.normalImageGuid = "100707";
        this.mButton.pressedImageGuid = "100707";
    }
}
class BagInfoPanel extends BagInfoPanel_Generate$1 {
    constructor() {
        super(...arguments);
        this.bagModuleC = null;
        this.bagId = -1;
        this.isHas = false;
        this.useCallBack = null;
        this.priceCallBack = null;
        this.adsCallBack = null;
    }
    get getBagModuleC() {
        if (!this.bagModuleC) {
            this.bagModuleC = ModuleService.getModule(BagModuleC);
        }
        return this.bagModuleC;
    }
    onStart() {
        this.layer = mw.UILayerTop;
        this.initUI();
        this.bindButton();
    }
    initUI() {
        this.mUseTextBlock.text = GameConfig.Language.Text_Use.Value;
        this.mAdsButton.text = GameConfig.Language.Text_GetItForFree.Value;
    }
    bindButton() {
        this.mUseButton.onClicked.add(this.addUseButton.bind(this));
        this.mPriceButton.onClicked.add(this.addPriceButton.bind(this));
        this.mAdsButton.onClose.add(this.addAdsButton.bind(this));
        this.mCloseButton.onClicked.add(this.bindCloseButton.bind(this));
    }
    addUseButton() {
        if (this.useCallBack)
            this.useCallBack();
        this.hide();
    }
    addPriceButton() {
        if (this.priceCallBack)
            this.priceCallBack();
    }
    addAdsButton(isSuccess) {
        if (!isSuccess) {
            this.hide();
            Notice.showDownNotice(GameConfig.Language.Text_FailedPleaseTryAgain.Value);
            return;
        }
        if (this.adsCallBack)
            this.adsCallBack();
        this.hide();
    }
    bindCloseButton() {
        this.hide();
    }
    showThis(bagId, isHas, useCallBack, priceCallBack, adsCallBack) {
        this.bagId = bagId;
        this.isHas = isHas;
        this.setUI();
        this.useCallBack = useCallBack;
        this.priceCallBack = priceCallBack;
        this.adsCallBack = adsCallBack;
        let price = (GameConfig.BagInfo.getElement(bagId)?.Rarity + 1) * GlobalData.addCoinCount;
        this.mPreceTextBlock.text = `${price}${GameConfig.Language.Text_PurchaseCoins.Value}`;
        this.show();
    }
    setUI() {
        if (this.isHas) {
            this.mPriceButton.visibility = mw.SlateVisibility.Collapsed;
            this.mAdsButton.visibility = mw.SlateVisibility.Collapsed;
        }
        else {
            this.mPriceButton.visibility = mw.SlateVisibility.Visible;
            this.mAdsButton.visibility = mw.SlateVisibility.Visible;
        }
        let bagInfoElement = GameConfig.BagInfo.getElement(this.bagId);
        let rarityStr = "";
        switch (bagInfoElement.Rarity) {
            case 0:
                rarityStr = GlobalData.rarityStr1;
                break;
            case 1:
                rarityStr = GlobalData.rarityStr2;
                break;
            case 2:
                rarityStr = GlobalData.rarityStr3;
                break;
            case 3:
                rarityStr = GlobalData.rarityStr4;
                break;
        }
        let bagTypeStr = "";
        switch (bagInfoElement.Type) {
            case 1:
                bagTypeStr = GlobalData.weaponStr;
                this.mTitleTextBlock.text = `${rarityStr}${bagTypeStr}${GameConfig.Language.Text_Introduce.Value}`;
                break;
            case 2:
                bagTypeStr = GlobalData.skinStr;
                this.mTitleTextBlock.text = `${rarityStr}${bagTypeStr}${GameConfig.Language.Text_Introduce.Value}`;
                break;
            case 3:
                bagTypeStr = GlobalData.equipStr;
                this.mTitleTextBlock.text = `${rarityStr}${bagTypeStr}${GameConfig.Language.Text_Introduce.Value}`;
                break;
            case 4:
                bagTypeStr = GlobalData.petStr;
                this.mTitleTextBlock.text = `${rarityStr}${bagTypeStr}${GameConfig.Language.Text_Introduce.Value}`;
                break;
        }
        this.mNameTextBlock.text = bagInfoElement?.Name;
        let name = bagInfoElement?.Name?.replace(/[\r\n]/g, "");
        if (GlobalData.languageId == 0) {
            this.mInfoTextBlock.text = `<size=30><b><color=#lime>${name}</color></b></size>，<size=30><b><color=#red>${rarityStr}${bagTypeStr}</color></b></size>\n${GameConfig.Language.Text_IncreasedHealthAndAttackPowerAfterUse.Value}<size=30><b><color=#fuchsia>${1 + Utils.getMultipleByRarity(bagInfoElement.Rarity)}${GameConfig.Language.Text_Times.Value}</color></b></size>`;
        }
        else {
            this.mInfoTextBlock.text = `<size=40><b><color=#lime>${name}</color></b></size>，<size=50><b><color=#red>${rarityStr}${bagTypeStr}</color></b></size>\n${GameConfig.Language.Text_IncreasedHealthAndAttackPowerAfterUse.Value}<size=50><b><color=#fuchsia>${1 + Utils.getMultipleByRarity(bagInfoElement.Rarity)}${GameConfig.Language.Text_Times.Value}</color></b></size>`;
        }
        let assetId = bagInfoElement?.AssetId;
        Utils.setImageByAssetIconData(this.mIconImage, assetId);
    }
    onHide() {
        this.useCallBack = null;
        this.priceCallBack = null;
        this.adsCallBack = null;
    }
}

var foreign48 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    BagData: BagData,
    BagInfoPanel: BagInfoPanel,
    BagItem: BagItem,
    BagModuleC: BagModuleC,
    BagModuleS: BagModuleS,
    BagPanel: BagPanel,
    BagTab: BagTab
});

class PlayerData_CSR {
    constructor(id, name, lv, height, kill) {
        this.userId = "";
        this.playerName = "";
        this.playerLv = 0;
        this.playerHeight = 0;
        this.playerKill = 0;
        this.userId = id;
        this.playerName = name;
        this.playerLv = lv;
        this.playerHeight = height;
        this.playerKill = kill;
    }
}
class PlayerData_CSW {
    constructor(id, name, lv) {
        this.userId = "";
        this.playerName = "";
        this.playerLv = 0;
        this.userId = id;
        this.playerName = name;
        this.playerLv = lv;
    }
}
class WorldConfigData {
    constructor() {
        this.userId = "";
        this.titleName = "";
        this.test = "";
    }
}

var foreign70 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    PlayerData_CSR: PlayerData_CSR,
    PlayerData_CSW: PlayerData_CSW,
    WorldConfigData: WorldConfigData
});

class WorldRankModuleS extends ModuleS {
    constructor() {
        super(...arguments);
        this.playerModuleS = null;
        this.worldDatas = [];
        /**房间内排行榜数据 */
        this.playerDataMap_SR = new Map();
    }
    get getPlayerModuleS() {
        if (!this.playerModuleS) {
            this.playerModuleS = ModuleService.getModule(PlayerModuleS);
        }
        return this.playerModuleS;
    }
    onStart() {
        this.initData();
    }
    async initData() {
        this.worldDatas = (await this.getCustomdata("WorldData"));
    }
    onPlayerEnterGame(player) {
    }
    onPlayerLeft(player) {
        let userId = player.userId;
        if (!this.playerDataMap_SR.has(userId))
            return;
        this.playerDataMap_SR.delete(userId);
        this.syncRankData_S(false);
    }
    /**
     * 进入场景（客户端发起）
     * @param playerName
     * @param playerLv
     */
    net_onEnterScene(playerName, playerLv, playerHeight, playerKill) {
        this.getPlayerModuleS.setPlayerLifeNickName(this.currentPlayerId, playerName, playerLv);
        this.onEnterScene(playerName, playerLv, playerHeight, playerKill);
    }
    /**
     * 进入场景校对数据
     * @param playerName
     * @param playerLv
     */
    async onEnterScene(playerName, playerLv, playerHeight, playerKill) {
        let userId = this.currentPlayer.userId;
        let playerData_S = new PlayerData_CSR(userId, playerName, playerLv, playerHeight, playerKill);
        this.playerDataMap_SR.set(userId, playerData_S);
        this.worldDatas = (await this.getCustomdata("WorldData"));
        this.syncRankData_S(true);
    }
    // /**
    //  * 刷新等级（客户端发起）
    //  * @param lv 
    //  */
    // public net_refreshLv(lv: number): void {
    //     this.refreshLv(this.currentPlayer.userId, lv);
    // }
    // /**
    //  * 刷新高度（客户端发起）
    //  * @param height 
    //  */
    // public net_refreshHeight(height: number): void {
    //     this.refreshHeight(this.currentPlayer.userId, height);
    // }
    // /**
    //  * 刷新击杀数（客户端发起）
    //  * @param kill 
    //  */
    // public net_refreshKill(kill: number): void {
    //     this.refreshKill(this.currentPlayer.userId, kill);
    // }
    /**
     * 刷新等级（服务端发起）
     * @param userId
     * @param lv
     */
    refreshLv_S(userId, lv) {
        this.refreshLv(userId, lv);
    }
    /**
     * 刷新高度（服务端发起）
     * @param userId
     * @param height
     */
    refreshHeight_S(userId, height) {
        this.refreshHeight(userId, height);
    }
    /**
     * 刷新击杀数（服务端发起）
     * @param userId
     * @param kill
     */
    refreshKill_S(userId, kill) {
        this.refreshKill(userId, kill);
    }
    /**
     * 刷新等级
     * @param userId
     * @param lv
     * @returns
     */
    async refreshLv(userId, lv) {
        if (!this.playerDataMap_SR.has(userId))
            return;
        let playerData_S = this.playerDataMap_SR.get(userId);
        playerData_S.playerLv += lv;
        this.playerDataMap_SR.set(userId, playerData_S);
        this.worldDatas = (await this.getCustomdata("WorldData"));
        this.syncRankData_S(this.isRefreshWorldData_S(new PlayerData_CSW(userId, playerData_S.playerName, playerData_S.playerLv)));
    }
    /**
     * 刷新高度
     * @param userId
     * @param height
     * @returns
     */
    refreshHeight(userId, height) {
        if (!this.playerDataMap_SR.has(userId))
            return;
        let playerData_S = this.playerDataMap_SR.get(userId);
        playerData_S.playerHeight = height;
        this.playerDataMap_SR.set(userId, playerData_S);
        this.syncRankData_S(false);
    }
    /**
     * 刷新击杀数
     * @param userId
     * @param kill
     * @returns
     */
    refreshKill(userId, kill) {
        if (!this.playerDataMap_SR.has(userId))
            return;
        let playerData_S = this.playerDataMap_SR.get(userId);
        playerData_S.playerKill += kill;
        this.playerDataMap_SR.set(userId, playerData_S);
        this.syncRankData_S(false);
    }
    /**
     * 判断是否需要刷新世界排行榜（需要自动存）
     * @param playerData_SW 数据
     * @returns
     */
    isRefreshWorldData_S(playerData_SW) {
        let isPush = false;
        let ishasDelete = false;
        let ishasData = false;
        if (this.worldDatas == null) {
            this.worldDatas = [];
        }
        if (this.worldDatas.length < GlobalData.worldRankCount) {
            if (this.worldDatas.length == 0) {
                this.worldDatas.push(playerData_SW);
                isPush = true;
            }
            else {
                for (let i = 0; i < this.worldDatas.length; ++i) {
                    if (this.worldDatas[i].userId != playerData_SW.userId)
                        continue;
                    if (playerData_SW.playerLv > this.worldDatas[i].playerLv) {
                        this.worldDatas.splice(i, 1);
                        break;
                    }
                    else {
                        ishasData = true;
                        break;
                    }
                }
                if (ishasData)
                    return isPush;
                for (let i = 0; i < this.worldDatas.length; i++) {
                    if (playerData_SW.playerLv > this.worldDatas[i].playerLv) {
                        this.worldDatas.splice(i, 0, playerData_SW);
                        isPush = true;
                        break;
                    }
                }
                if (!isPush) {
                    this.worldDatas.push(playerData_SW);
                    isPush = true;
                }
            }
        }
        else {
            for (let i = 0; i < this.worldDatas.length; ++i) {
                if (this.worldDatas[i].userId != playerData_SW.userId)
                    continue;
                if (playerData_SW.playerLv > this.worldDatas[i].playerLv) {
                    this.worldDatas.splice(i, 1);
                    ishasDelete = true;
                    break;
                }
                else {
                    ishasData = true;
                    break;
                }
            }
            if (ishasData)
                return isPush;
            for (let i = 0; i < this.worldDatas.length; i++) {
                if (playerData_SW.playerLv > this.worldDatas[i].playerLv) {
                    this.worldDatas.splice(i, 0, playerData_SW);
                    if (!ishasDelete) {
                        this.worldDatas.pop();
                    }
                    isPush = true;
                    break;
                }
            }
        }
        if (isPush) {
            this.setCustomData("WorldData", this.worldDatas);
        }
        return isPush;
    }
    /**
     * 同步排行榜数据
     * @param isRefreshWorldData
     * @returns
     */
    syncRankData_S(isRefreshWorldData) {
        if (this.playerDataMap_SR.size == 0)
            return;
        let playerUserIds = [];
        let playerNames = [];
        let playerLvs = [];
        let playerHeights = [];
        let playerKills = [];
        this.playerDataMap_SR.forEach((value, key) => {
            playerUserIds.push(value.userId);
            playerNames.push(value.playerName);
            playerLvs.push(value.playerLv);
            playerHeights.push(value.playerHeight);
            playerKills.push(value.playerKill);
        });
        let worldUserIds = [];
        let worldNames = [];
        let worldLvs = [];
        if (isRefreshWorldData && this.worldDatas != null) {
            for (let i = 0; i < this.worldDatas.length; i++) {
                worldUserIds.push(this.worldDatas[i].userId);
                worldNames.push(this.worldDatas[i].playerName);
                worldLvs.push(this.worldDatas[i].playerLv);
            }
        }
        this.getAllClient().net_syncRankData_C(playerUserIds, playerNames, playerLvs, playerHeights, playerKills, isRefreshWorldData, worldUserIds, worldNames, worldLvs);
    }
    getNamesByUserId(userId1, userId2) {
        if (this.playerDataMap_SR.has(userId1) && this.playerDataMap_SR.has(userId2)) {
            return [this.playerDataMap_SR.get(userId1).playerName, this.playerDataMap_SR.get(userId2).playerName];
        }
        return null;
    }
    getNameByUserId(userId) {
        if (this.playerDataMap_SR.has(userId)) {
            return this.playerDataMap_SR.get(userId).playerName;
        }
        return null;
    }
    /**
     * 获取自定义数据
     * @param key
     * @returns
     */
    async getCustomdata(key) {
        let data = null;
        data = await GeneralManager.asyncRpcGetData(key);
        return data;
    }
    /**
     * 设置自定义数据
     * @param saveKey
     * @param dataInfo
     * @returns
     */
    async setCustomData(saveKey, dataInfo) {
        let code = null;
        code = await DataStorage.asyncSetData(saveKey, dataInfo);
        return code == mw.DataStorageResultCode.Success;
    }
}
__decorate([
    Decorator.noReply()
], WorldRankModuleS.prototype, "net_onEnterScene", null);

var foreign73 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    WorldRankModuleS: WorldRankModuleS
});

class OnlineRewardData extends Subdata {
    constructor() {
        super(...arguments);
        this.onlineMinute = 0;
        this.isGetRewards = [];
    }
    initDefaultData() {
        this.resetOnlineRewards();
    }
    /**
     * 保存在线时间
     * @param onlineMinute
     */
    saveOnlineMinute(onlineMinute) {
        this.onlineMinute += onlineMinute;
        this.save(true);
    }
    /**
     * 保存领取奖励的状态
     * @param index
     * @returns
     */
    saveIsGetRewards(index) {
        if (index < 0 || index >= this.isGetRewards.length)
            return;
        this.isGetRewards[index] = true;
        this.save(true);
    }
    /**
     * 自动重置在线奖励数据
     */
    autoResetOnlineRewards() {
        this.resetOnlineRewards();
        this.save(true);
        Console.error("每日重置在线奖励数据");
    }
    /**
     * 重置在线奖励数据
     */
    resetOnlineRewards() {
        let rewradCount = GameConfig.OnlineRewards.getAllElement().length;
        this.isGetRewards.length = rewradCount;
        for (let i = 0; i < rewradCount; i++) {
            this.isGetRewards[i] = false;
        }
        this.onlineMinute = 0;
        Console.error("rewardCount = " + rewradCount);
    }
}
__decorate([
    Decorator.persistence()
], OnlineRewardData.prototype, "onlineMinute", void 0);
__decorate([
    Decorator.persistence()
], OnlineRewardData.prototype, "isGetRewards", void 0);

var foreign59 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: OnlineRewardData
});

class OnlineRewardModuleS extends ModuleS {
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
    }
    /**
     * 获取在线奖励数据
     * @param player
     */
    getServerOnlineRewardData(player) {
        this.getClient(player).net_getServerOnlineRewardData();
    }
    /**
     * 重置在线奖励数据（在现状态下）
     */
    resetOnlineReward() {
        this.getAllClient().net_resetOnlineReward();
    }
    /**
     * 保存在线时间
     * @param onlineMinute
     */
    net_saveOnlineMinute(onlineMinute) {
        this.currentData.saveOnlineMinute(onlineMinute);
    }
    /**
     * 保存领取奖励的状态
     * @param index
     * @returns
     */
    net_saveIsGetRewards(index) {
        this.currentData.saveIsGetRewards(index);
    }
}
__decorate([
    Decorator.noReply()
], OnlineRewardModuleS.prototype, "net_saveOnlineMinute", null);
__decorate([
    Decorator.noReply()
], OnlineRewardModuleS.prototype, "net_saveIsGetRewards", null);

var foreign61 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    OnlineRewardModuleS: OnlineRewardModuleS
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/SignInModule/SignInItem.ui
 * TIME: 2024.11.04-19.49.52
 */
let SignInItem_Generate = class SignInItem_Generate extends UIScript {
    get mDayTextBlock() {
        if (!this.mDayTextBlock_Internal && this.uiWidgetBase) {
            this.mDayTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/mDayTextBlock');
        }
        return this.mDayTextBlock_Internal;
    }
    get mIconImage() {
        if (!this.mIconImage_Internal && this.uiWidgetBase) {
            this.mIconImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/mIconImage');
        }
        return this.mIconImage_Internal;
    }
    get mRewardCanvas() {
        if (!this.mRewardCanvas_Internal && this.uiWidgetBase) {
            this.mRewardCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/mRewardCanvas');
        }
        return this.mRewardCanvas_Internal;
    }
    get mRewardTextBlock() {
        if (!this.mRewardTextBlock_Internal && this.uiWidgetBase) {
            this.mRewardTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/mRewardCanvas/RewardBgImage/mRewardTextBlock');
        }
        return this.mRewardTextBlock_Internal;
    }
    get mTipsCanvas() {
        if (!this.mTipsCanvas_Internal && this.uiWidgetBase) {
            this.mTipsCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/mTipsCanvas');
        }
        return this.mTipsCanvas_Internal;
    }
    get mTipsTextBlock() {
        if (!this.mTipsTextBlock_Internal && this.uiWidgetBase) {
            this.mTipsTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/mTipsCanvas/mTipsTextBlock');
        }
        return this.mTipsTextBlock_Internal;
    }
    get mHasCanvas() {
        if (!this.mHasCanvas_Internal && this.uiWidgetBase) {
            this.mHasCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/mHasCanvas');
        }
        return this.mHasCanvas_Internal;
    }
    get mMaskImage() {
        if (!this.mMaskImage_Internal && this.uiWidgetBase) {
            this.mMaskImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/mHasCanvas/mMaskImage');
        }
        return this.mMaskImage_Internal;
    }
    get mMaskBgImage() {
        if (!this.mMaskBgImage_Internal && this.uiWidgetBase) {
            this.mMaskBgImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/mHasCanvas/mMaskBgImage');
        }
        return this.mMaskBgImage_Internal;
    }
    get mHasTextBlock() {
        if (!this.mHasTextBlock_Internal && this.uiWidgetBase) {
            this.mHasTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/mHasCanvas/mMaskBgImage/mHasTextBlock');
        }
        return this.mHasTextBlock_Internal;
    }
    get mClickButton() {
        if (!this.mClickButton_Internal && this.uiWidgetBase) {
            this.mClickButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/mClickButton');
        }
        return this.mClickButton_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        this.mClickButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mClickButton");
        });
        this.mClickButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mDayTextBlock);
        this.initLanguage(this.mRewardTextBlock);
        this.initLanguage(this.mTipsTextBlock);
        this.initLanguage(this.mHasTextBlock);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
SignInItem_Generate = __decorate([
    UIBind('UI/module/SignInModule/SignInItem.ui')
], SignInItem_Generate);
var SignInItem_Generate$1 = SignInItem_Generate;

var foreign151 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: SignInItem_Generate$1
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/SignInModule/SignInPanel.ui
 * TIME: 2024.11.04-19.49.52
 */
let SignInPanel_Generate = class SignInPanel_Generate extends UIScript {
    get mTitleTextBlock() {
        if (!this.mTitleTextBlock_Internal && this.uiWidgetBase) {
            this.mTitleTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/TitleBgImage/mTitleTextBlock');
        }
        return this.mTitleTextBlock_Internal;
    }
    get mCanvas() {
        if (!this.mCanvas_Internal && this.uiWidgetBase) {
            this.mCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mCanvas');
        }
        return this.mCanvas_Internal;
    }
    get mCloseButton() {
        if (!this.mCloseButton_Internal && this.uiWidgetBase) {
            this.mCloseButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mCloseButton');
        }
        return this.mCloseButton_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        this.mCloseButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mCloseButton");
        });
        this.mCloseButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mTitleTextBlock);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
SignInPanel_Generate = __decorate([
    UIBind('UI/module/SignInModule/SignInPanel.ui')
], SignInPanel_Generate);
var SignInPanel_Generate$1 = SignInPanel_Generate;

var foreign152 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: SignInPanel_Generate$1
});

const rewardMap = new Map();
rewardMap.set(1, { icon: "184592", rewardDiamond: 10, rewardLv: 1 });
rewardMap.set(2, { icon: "159364", rewardDiamond: 28, rewardLv: 1 });
rewardMap.set(3, { icon: "321689", rewardDiamond: 58, rewardLv: 2 });
rewardMap.set(4, { icon: "321690", rewardDiamond: 88, rewardLv: 2 });
rewardMap.set(5, { icon: "321691", rewardDiamond: 98, rewardLv: 2 });
rewardMap.set(6, { icon: "321692", rewardDiamond: 168, rewardLv: 3 });
rewardMap.set(7, { icon: "321693", rewardDiamond: 198, rewardLv: 5 });
class SignInItem extends SignInItem_Generate$1 {
    constructor() {
        super(...arguments);
        this.signInModuleC = null;
        this.day = 0;
        this.signIn = 0;
    }
    get getSignInModuleC() {
        if (!this.signInModuleC) {
            this.signInModuleC = ModuleService.getModule(SignInModuleC);
        }
        return this.signInModuleC;
    }
    onStart() {
        this.bindButton();
        this.initTextBlock();
    }
    initTextBlock() {
        if (GlobalData.languageId == 0) {
            this.mTipsTextBlock.fontSize = 15;
            this.mRewardTextBlock.fontSize = 15;
        }
        else {
            this.mTipsTextBlock.fontSize = 30;
            this.mRewardTextBlock.fontSize = 20;
        }
    }
    bindButton() {
        this.mClickButton.onClicked.add(this.addClickButton.bind(this));
    }
    addClickButton() {
        this.getSignInModuleC.tryGetReward(this.day, () => {
            this.signIn = 1;
            this.updateUI();
        });
    }
    initSignInItem(day, signIn) {
        this.day = day;
        this.signIn = signIn;
        this.updateUI();
    }
    updateUI() {
        if (this.signIn == 1) {
            this.mHasCanvas.visibility = mw.SlateVisibility.SelfHitTestInvisible;
            this.mTipsTextBlock.text = GameConfig.Language.Text_ReceivedAlready.Value;
            this.mHasTextBlock.text = GameConfig.Language.Text_ReceivedAlready.Value;
            this.mTipsTextBlock.setFontColorByHex("00FFFFFF");
        }
        else {
            if (this.day < this.getSignInModuleC.getDay) {
                this.mHasCanvas.visibility = mw.SlateVisibility.Collapsed;
                this.mTipsTextBlock.text = GameConfig.Language.Text_SupplementarySignature.Value;
                this.mTipsTextBlock.setFontColorByHex("FF0000FF");
            }
            else if (this.day == this.getSignInModuleC.getDay) {
                this.mHasCanvas.visibility = mw.SlateVisibility.Collapsed;
                this.mTipsTextBlock.text = GameConfig.Language.Text_CanBeClaimed.Value;
                this.mTipsTextBlock.setFontColorByHex("FF0000FF");
            }
            else if (this.day > this.getSignInModuleC.getDay) {
                this.mHasCanvas.visibility = mw.SlateVisibility.Collapsed;
                this.mTipsTextBlock.text = GameConfig.Language.Text_Unclaimed.Value;
                this.mTipsTextBlock.setFontColorByHex("00FFFFFF");
            }
        }
        this.mRewardTextBlock.text = StringUtil.format(GameConfig.Language.Text_DiamondGrade.Value, rewardMap.get(this.day).rewardDiamond, rewardMap.get(this.day).rewardLv);
        this.mRewardTextBlock.setFontColorByHex("FF0000FF");
        this.mIconImage.imageGuid = rewardMap.get(this.day).icon;
        this.mDayTextBlock.text = StringUtil.format(GameConfig.Language.Text_Day.Value, this.day);
    }
}
class SignInPanel extends SignInPanel_Generate$1 {
    constructor() {
        super(...arguments);
        this.hudPanel = null;
        this.signIn = {};
        this.signInItems = [];
    }
    get getHudPanel() {
        if (!this.hudPanel) {
            this.hudPanel = mw.UIService.getUI(HUDPanel);
        }
        return this.hudPanel;
    }
    onStart() {
        this.bindButton();
        this.initTextBlock();
    }
    initTextBlock() {
        this.mTitleTextBlock.text = StringUtil.format(GameConfig.Language.Text_DayCheckIn.Value, 7);
    }
    bindButton() {
        this.mCloseButton.onClicked.add(this.addCloseButton.bind(this));
    }
    addCloseButton() {
        this.hideTween();
    }
    initSignInPanel(signIn) {
        this.signIn = signIn;
        console.error(`signIn:${JSON.stringify(this.signIn)}`);
        this.initSignIn();
    }
    initSignIn() {
        console.error(`initSignIn:${this.signInItems.length}`);
        if (!this.signInItems || this.signInItems.length == 0) {
            for (let i = 1; i <= GlobalData.signInDays; ++i) {
                let signInItem = mw.UIService.create(SignInItem);
                signInItem.initSignInItem(i, MapEx.get(this.signIn, i));
                this.signInItems.push(signInItem);
            }
            this.mCanvas.addChild(this.signInItems[0].uiObject);
            this.mCanvas.addChild(this.signInItems[3].uiObject);
            this.mCanvas.addChild(this.signInItems[1].uiObject);
            this.mCanvas.addChild(this.signInItems[4].uiObject);
            this.mCanvas.addChild(this.signInItems[2].uiObject);
            this.mCanvas.addChild(this.signInItems[5].uiObject);
            this.mCanvas.addChild(this.signInItems[6].uiObject);
            this.signInItems[6].uiObject.size = this.signInItems[6].uiObject.size.multiply(1.6);
            this.signInItems[6].uiObject.renderScale = mw.Vector2.one.multiply(1.6);
        }
        else {
            for (let i = 0; i < this.signInItems.length; ++i) {
                this.signInItems[i].initSignInItem(i + 1, MapEx.get(this.signIn, i + 1));
            }
        }
    }
    onShow(...params) {
        Utils.openUITween(this.rootCanvas, () => {
            this.getHudPanel.hide();
        }, null);
    }
    hideTween() {
        Utils.closeUITween(this.rootCanvas, null, () => {
            this.hide();
            this.getHudPanel.show();
        });
    }
}
class SignInData extends Subdata {
    constructor() {
        super(...arguments);
        this.signIn = {};
    }
    initDefaultData() {
        this.signIn = {};
        for (let i = 1; i <= GlobalData.signInDays; ++i) {
            MapEx.set(this.signIn, i, 0);
        }
        this.save(true);
    }
    resetSignInData() {
        this.signIn = {};
        for (let i = 1; i <= GlobalData.signInDays; ++i) {
            MapEx.set(this.signIn, i, 0);
        }
        this.save(true);
    }
    setSignIn(day) {
        MapEx.set(this.signIn, day, 1);
        this.save(true);
    }
}
__decorate([
    Decorator.persistence()
], SignInData.prototype, "signIn", void 0);
class SignInModuleC extends ModuleC {
    constructor() {
        super(...arguments);
        this.signInPanel = null;
        this.hudModuleC = null;
        this.adsPanel = null;
        this.playerModuleC = null;
        this.signIn = {};
        this.day = 0;
    }
    get getSignInPanel() {
        if (!this.signInPanel) {
            this.signInPanel = mw.UIService.getUI(SignInPanel);
        }
        return this.signInPanel;
    }
    get getHudModuleC() {
        if (!this.hudModuleC) {
            this.hudModuleC = ModuleService.getModule(HUDModuleC);
        }
        return this.hudModuleC;
    }
    get getAdTipsPanel() {
        if (!this.adsPanel) {
            this.adsPanel = mw.UIService.getUI(AdTipsPanel);
        }
        return this.adsPanel;
    }
    get getPlayerModuleC() {
        if (!this.playerModuleC) {
            this.playerModuleC = ModuleService.getModule(PlayerModuleC);
        }
        return this.playerModuleC;
    }
    onStart() {
        this.bindAction();
    }
    bindAction() {
        this.getHudModuleC.onOpenSignInAction.add(this.addOpenSignInPanel.bind(this));
    }
    addOpenSignInPanel() {
        this.getSignInPanel.show();
    }
    get getDay() {
        return this.day;
    }
    net_syncInitSignIn(signIn, day) {
        this.signIn = signIn;
        this.day = day;
        this.initSignInPanel();
    }
    initSignInPanel() {
        this.getSignInPanel.initSignInPanel(this.signIn);
    }
    tryGetReward(day, succeedCallback) {
        if (!MapEx.has(this.signIn, day) || day < 1 || day > GlobalData.signInDays)
            return;
        if (MapEx.get(this.signIn, day) == 1) {
            Notice.showDownNotice(GameConfig.Language.Text_SignedIn.Value);
            return;
        }
        if (this.day > day) {
            if (GlobalData.isOpenIAA) {
                this.getAdTipsPanel.showRewardAd(() => {
                    Notice.showDownNotice(GameConfig.Language.Text_SuccessfullyObtainedTodaySReward.Value);
                    this.getReward(day, succeedCallback);
                }, StringUtil.format(GameConfig.Language.Text_FreeDayReward.Value, day), GameConfig.Language.Text_Cancel.Value, GameConfig.Language.Text_FreeToReceive.Value);
            }
            else {
                this.getReward(day, succeedCallback);
            }
        }
        else if (day == this.day) {
            this.getReward(day, succeedCallback);
        }
        else if (this.day < day) {
            Notice.showDownNotice(GameConfig.Language.Text_TheCheckInDateHasNotYetArrived.Value);
        }
    }
    getReward(day, succeedCallback) {
        if (!MapEx.has(this.signIn, day) || day < 1 || day > GlobalData.signInDays)
            return;
        MapEx.set(this.signIn, day, 1);
        this.server.net_setSignIn(day);
        if (succeedCallback)
            succeedCallback();
        Notice.showDownNotice(GameConfig.Language.Text_SuccessfullyObtainedTodaySReward.Value);
        let diamond = rewardMap.get(day).rewardDiamond;
        if (diamond > 0) {
            this.getPlayerModuleC.saveDiamond(diamond);
        }
        let lv = rewardMap.get(day).rewardLv;
        if (lv > 0) {
            this.getPlayerModuleC.upLvByCount(lv);
        }
        Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_DiamondGrade.Value, diamond, lv));
    }
}
class SignInModuleS extends ModuleS {
    onStart() {
    }
    resetSignInData(player) {
        DataCenterS.getData(player, SignInData).resetSignInData();
    }
    syncResetSignInData(player) {
        DataCenterS.getData(player, SignInData).resetSignInData();
        this.syncInitSignIn(player);
    }
    syncInitSignIn(player) {
        let signIn = DataCenterS.getData(player, SignInData).signIn;
        this.getClient(player).net_syncInitSignIn(signIn, Number(Utils.getWhatDay()));
    }
    net_setSignIn(day) {
        this.currentData.setSignIn(day);
    }
}

var foreign80 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    SignInData: SignInData,
    SignInItem: SignInItem,
    SignInModuleC: SignInModuleC,
    SignInModuleS: SignInModuleS,
    SignInPanel: SignInPanel
});

class TaskModuleS extends ModuleS {
    constructor() {
        super(...arguments);
        this.onlineRewardsModuleS = null;
        this.signInModuleS = null;
        this.playerTaskMap = new Map();
        this.taskCheckTime = 60;
        this.taskCheckTimer = 0;
    }
    get getOnlineRewardsModuleS() {
        if (!this.onlineRewardsModuleS) {
            this.onlineRewardsModuleS = ModuleService.getModule(OnlineRewardModuleS);
        }
        return this.onlineRewardsModuleS;
    }
    get getSignInModuleS() {
        if (!this.signInModuleS) {
            this.signInModuleS = ModuleService.getModule(SignInModuleS);
        }
        return this.signInModuleS;
    }
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
    }
    onPlayerEnterGame(player) {
        this.playerTaskMap.set(player.playerId, player);
        this.checkResetTask_onEnterGame(player, 0);
        this.getClient(player).net_getServerTaskData(new Date().getTime());
        this.getOnlineRewardsModuleS.getServerOnlineRewardData(player);
        this.getSignInModuleS.syncInitSignIn(player);
    }
    onPlayerLeft(player) {
        let playerID = player.playerId;
        if (!this.playerTaskMap.has(playerID))
            return;
        this.playerTaskMap.delete(playerID);
        DataCenterS.getData(player, TaskData).saveLastDayNow(Date.now(), Number(Utils.getWhatDay()));
    }
    onUpdate(dt) {
        this.checkResetTask_onLine(dt);
    }
    /**
     * 检查重置任务（每日&每周）(玩家一直在线状态下的检查)
     * @param dt
     */
    checkResetTask_onLine(dt) {
        this.taskCheckTimer += dt;
        if (this.taskCheckTimer < this.taskCheckTime) {
            return;
        }
        this.taskCheckTimer = 0;
        let currentTime = Utils.getCurrentTime();
        if (Utils.getWhatDay() == "1" && currentTime == GlobalData.weeklyRefreshTime) {
            this.resetAllPlayersWeeklyTask();
        }
        if (currentTime == GlobalData.dailyRefreshTime) {
            this.resetAllPlayersDailyTask();
        }
    }
    /**重置当前房间内所有玩家的每日任务 */
    resetAllPlayersDailyTask() {
        this.playerTaskMap.forEach((player) => {
            DataCenterS.getData(player, TaskData).resetDailyTask();
            DataCenterS.getData(player, OnlineRewardData).autoResetOnlineRewards();
        });
        this.getAllClient().net_resetDailyTask();
        this.getOnlineRewardsModuleS.resetOnlineReward();
    }
    /**重置当前房间内所有玩家的每周任务 */
    resetAllPlayersWeeklyTask() {
        this.playerTaskMap.forEach((player) => {
            DataCenterS.getData(player, TaskData).resetWeeklyTask();
            this.getSignInModuleS.syncResetSignInData(player);
        });
        this.getAllClient().net_resetWeeklyTask();
    }
    /**
     * 保存成就数据
     * @param achievementType 成就类型
     * @param progress 进度
     * @param isOnComplete 是否完成
     */
    net_saveTaskProgress(dailyTaskIds, dailyTaskTypes, dailyProgresss, weeklyTaskIds, weeklyTaskTypes, weeklyProgresss) {
        if (dailyTaskIds.length != 0) {
            for (let i = 0; i < dailyTaskIds.length; ++i) {
                this.currentData.saveDailyTask(dailyTaskIds[i], dailyTaskTypes[i], dailyProgresss[i]);
            }
        }
        if (weeklyTaskIds.length != 0) {
            for (let i = 0; i < weeklyTaskIds.length; ++i) {
                this.currentData.saveWeeklyTask(weeklyTaskIds[i], weeklyTaskTypes[i], weeklyProgresss[i]);
            }
        }
        this.currentData.save(true);
    }
    net_updateTaskConpleteData(vipTaskType) {
        this.currentData.updateTaskCompleteData(vipTaskType);
    }
    checkResetTask_onEnterGame_GM(player, day) {
        this.checkResetTask_onEnterGame(player, day * 86400 * 1000);
        this.getClient(player).net_getServerTaskData(new Date().getTime());
        this.getOnlineRewardsModuleS.getServerOnlineRewardData(player);
    }
    /**
     * 检查重置任务（每日&每周）(玩家进入游戏时的检查)
     */
    checkResetTask_onEnterGame(player, day) {
        let dailyRefreshTime = 0;
        let dailyRefreshTimeNums = GlobalData.dailyRefreshTime.split(":");
        dailyRefreshTime = Number(dailyRefreshTimeNums[0]) + Number((Number(dailyRefreshTimeNums[1]) / 60).toFixed(2));
        let weeklyRefreshTime = 0;
        let weeklyRefreshTimeNums = GlobalData.weeklyRefreshTime.split(":");
        weeklyRefreshTime = Number(weeklyRefreshTimeNums[0]) + Number((Number(weeklyRefreshTimeNums[1]) / 60).toFixed(2));
        let currentDayNow = Date.now() + day;
        let lastDayNow = DataCenterS.getData(player, TaskData).lastDayNow;
        //计算两个时间戳相差的秒数
        let seconds = Math.floor((currentDayNow - lastDayNow) / 1000);
        let lastDate = new Date(lastDayNow);
        let currentDate = new Date(currentDayNow);
        let lastDay = lastDate.getDay();
        let currentDay = currentDate.getDay();
        let lastHours = lastDate.getHours();
        let currentHours = currentDate.getHours();
        let lastMinutes = lastDate.getMinutes();
        let currentMinutes = currentDate.getMinutes();
        let lastSeconds = lastDate.getSeconds();
        let currentSeconds = currentDate.getSeconds();
        let lastSecondss = lastHours * 3600 + lastMinutes * 60 + lastSeconds;
        let currentSecondss = currentHours * 3600 + currentMinutes * 60 + currentSeconds;
        //检查每日任务
        if (seconds >= 86400) {
            //超过一天
            DataCenterS.getData(player, TaskData).resetDailyTask();
            DataCenterS.getData(player, OnlineRewardData).autoResetOnlineRewards();
        }
        else {
            //不超过一天
            if (lastDay == currentDay) {
                //同一天
                if (lastSecondss < dailyRefreshTime * 3600 && currentSecondss >= dailyRefreshTime * 3600) {
                    DataCenterS.getData(player, TaskData).resetDailyTask();
                    DataCenterS.getData(player, OnlineRewardData).autoResetOnlineRewards();
                }
            }
            else {
                //不同一天
                if ((lastSecondss >= 0 && lastSecondss < dailyRefreshTime * 3600 && currentSecondss >= 0 && currentSecondss < dailyRefreshTime * 3600) ||
                    (lastSecondss >= dailyRefreshTime * 3600 && lastSecondss < 24 * 3600 && currentSecondss >= dailyRefreshTime * 3600 && currentSecondss < 24 * 3600)) {
                    DataCenterS.getData(player, TaskData).resetDailyTask();
                    DataCenterS.getData(player, OnlineRewardData).autoResetOnlineRewards();
                }
            }
        }
        //检查每周任务
        if (seconds >= 86400 * 7) {
            //超过一周
            DataCenterS.getData(player, TaskData).resetWeeklyTask();
            this.getSignInModuleS.resetSignInData(player);
        }
        else {
            //不超过一周
            //判断两个时间戳是否在同一周
            let latWhatDay = Utils.getLastDay(lastDay);
            let currentWhatDay = Utils.getWhatDay();
            if (Utils.iSameWeek(lastDayNow, currentDayNow)) {
                //同一周
                if (latWhatDay == "1" && lastSecondss < weeklyRefreshTime * 3600) {
                    if ((currentWhatDay == "1" && currentSecondss >= weeklyRefreshTime * 3600) || currentWhatDay != "1") {
                        DataCenterS.getData(player, TaskData).resetWeeklyTask();
                        this.getSignInModuleS.resetSignInData(player);
                    }
                }
            }
            else {
                //不同一周
                if (latWhatDay == "1" && lastSecondss >= 0 && lastSecondss < weeklyRefreshTime * 3600 && currentWhatDay == "1" && currentSecondss >= 0 && currentSecondss < weeklyRefreshTime * 3600) {
                    DataCenterS.getData(player, TaskData).resetWeeklyTask();
                    this.getSignInModuleS.resetSignInData(player);
                }
                if (((latWhatDay == "1" && lastSecondss >= weeklyRefreshTime * 3600 && lastSecondss < 24 * 3600) || (latWhatDay != "1"))
                    && ((currentWhatDay == "1" && currentSecondss >= weeklyRefreshTime * 3600 && currentSecondss < 24 * 3600) || (currentWhatDay != "1"))) {
                    DataCenterS.getData(player, TaskData).resetWeeklyTask();
                    this.getSignInModuleS.resetSignInData(player);
                }
            }
        }
    }
    /**
     * 重置每日任务
     */
    net_resetDailyTask() {
        this.currentData.resetDailyTask();
    }
    /**
     * 重置每周任务
     */
    net_resetWeeklyTask() {
        this.currentData.resetWeeklyTask();
    }
    killMonster(player, monsterId) {
        this.getClient(player).net_killMonster(monsterId);
    }
    killPlayer(player) {
        this.getClient(player).net_killPlayer();
    }
}
__decorate([
    Decorator.noReply()
], TaskModuleS.prototype, "net_saveTaskProgress", null);
__decorate([
    Decorator.noReply()
], TaskModuleS.prototype, "net_updateTaskConpleteData", null);
__decorate([
    Decorator.noReply()
], TaskModuleS.prototype, "net_resetDailyTask", null);
__decorate([
    Decorator.noReply()
], TaskModuleS.prototype, "net_resetWeeklyTask", null);

var foreign84 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: TaskModuleS
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/PlayerModule/PlayerLifebar.ui
 * TIME: 2024.11.04-19.49.52
 */
let PlayerLifebar_Generate = class PlayerLifebar_Generate extends UIScript {
    get mLevelText() {
        if (!this.mLevelText_Internal && this.uiWidgetBase) {
            this.mLevelText_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/mLevelText');
        }
        return this.mLevelText_Internal;
    }
    get mNameText() {
        if (!this.mNameText_Internal && this.uiWidgetBase) {
            this.mNameText_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/mNameText');
        }
        return this.mNameText_Internal;
    }
    get mLifebar() {
        if (!this.mLifebar_Internal && this.uiWidgetBase) {
            this.mLifebar_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/Canvas_1/mLifebar');
        }
        return this.mLifebar_Internal;
    }
    get mLifeText() {
        if (!this.mLifeText_Internal && this.uiWidgetBase) {
            this.mLifeText_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/Canvas_1/mLifeText');
        }
        return this.mLifeText_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mLevelText);
        this.initLanguage(this.mNameText);
        this.initLanguage(this.mLifeText);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
PlayerLifebar_Generate = __decorate([
    UIBind('UI/module/PlayerModule/PlayerLifebar.ui')
], PlayerLifebar_Generate);
var PlayerLifebar_Generate$1 = PlayerLifebar_Generate;

var foreign143 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: PlayerLifebar_Generate$1
});

let PlayerLifebar = class PlayerLifebar extends mw.Script {
    constructor() {
        super(...arguments);
        this.maxHp = 0;
        this.hp = 0;
        this.playerName = "";
        this.playerLevel = -1;
        this.bagId = -1;
        this.flyId = -1;
        this.isInvincible = false;
        this._isInit = false;
        this.character = null;
        this.invincibleEffectId = null;
        this.pet = null;
        this.petIdleId = null;
        this.petMoveId = null;
        this.frameCount = 0;
        this.maxFrameCount = 1;
        this.curPetDir = mw.Vector.zero;
        this.targetLoc = mw.Vector.zero;
        this.targetDistance = 0;
        this.petAnimation = null;
        this.flyJian = null;
        this.flyCharacter = null;
        this.flyJianAni = null;
        this.flyAnimationId = "";
        this.isFlying = false;
    }
    get getIsInvincible() {
        return this.isInvincible;
    }
    get getBagId() {
        return this.bagId;
    }
    get getFlyId() {
        return this.flyId;
    }
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
        if (SystemUtil.isClient()) {
            Console.log("初始化Player血条UI");
            this.init();
        }
    }
    onUpdate(dt) {
        if (mw.SystemUtil.isClient()) {
            this.onUpdateC(dt);
        }
    }
    async init() {
        this._hpBarUI = mw.UIService.create(PlayerLifebar_Generate$1);
        this._hpBarWidget = await SpawnManager.asyncSpawn({ guid: "UIWidget", replicates: false });
        this._hpBarWidget.setTargetUIWidget(this._hpBarUI.uiWidgetBase);
        this._hpBarWidget.widgetSpace = mw.WidgetSpaceMode.OverheadUI;
        this.character = this.gameObject;
        this._hpBarWidget.parent = this.character.overheadUI;
        this._hpBarWidget.localTransform.position = Vector.up.multiply(0);
        this._isInit = true;
        this.onHpChange();
        if (GlobalData.isOpenCcreenshot) {
            this._hpBarWidget.setVisibility(mw.PropertyStatus.Off);
        }
    }
    onHpChange() {
        if (!this._isInit)
            return;
        let curHp = this.hp;
        if (curHp < 0)
            curHp = 0;
        if (curHp > this.maxHp)
            curHp = this.maxHp;
        this._hpBarUI.mLifebar.percent = curHp / this.maxHp;
        this._hpBarUI.mLifeText.text = `${curHp}/${this.maxHp}`;
    }
    onNameChange() {
        if (!this._isInit)
            return;
        this._hpBarUI.mNameText.text = this.playerName;
    }
    async onLevelChange() {
        if (!this._isInit || this.playerLevel < 0)
            return;
        this._hpBarUI.mLevelText.text = await Utils.getLvText(this.playerLevel, this.character?.player?.userId) + ` ${GameConfig.Language.Text_Lv.Value}` + this.playerLevel;
    }
    onInvincible() {
        if (!this._isInit)
            return;
        if (this.isInvincible) {
            this.invincibleEffectId = EffectService.playOnGameObject("140172", this.character, { slotType: mw.HumanoidSlotType.Root, loopCount: 0 });
        }
        else {
            EffectService.stop(this.invincibleEffectId);
        }
    }
    async onUsePet() {
        if (this.bagId == -1) {
            if (!this.pet)
                return;
            GameObjPool.despawn(this.pet);
            this.pet = null;
            this.useUpdate = false;
        }
        else {
            let bagInfoElement = GameConfig.BagInfo.getElement(this.bagId);
            if (!bagInfoElement)
                return;
            if (!this.pet) {
                this.pet = await GameObjPool.asyncSpawn("Character");
                await this.pet.asyncReady();
            }
            let loc = this.character.worldTransform.position;
            this.pet.worldTransform.position = new mw.Vector(loc.x, loc.y, loc.z + 500);
            Utils.asyncDownloadAsset(bagInfoElement.AssetId).then(() => {
                this.pet.setDescription([bagInfoElement.AssetId]);
                this.petIdleId = bagInfoElement.Idle;
                this.petMoveId = bagInfoElement.Move;
                this.useUpdate = true;
            });
        }
    }
    onUpdateC(dt) {
        this.frameCount++;
        if (this.frameCount < this.maxFrameCount)
            return;
        this.frameCount = 0;
        this.updateMove();
        this.updateFlyAnimation();
    }
    updateMove() {
        if (!this.pet || !this.character || !this.petMoveId || !this.petIdleId)
            return;
        this.targetLoc = this.character.worldTransform.position;
        this.targetDistance = Math.sqrt(Math.pow(this.pet.worldTransform.position.x - this.targetLoc.x, 2) +
            Math.pow(this.pet.worldTransform.position.y - this.targetLoc.y, 2));
        if (this.targetDistance > 300 && this.targetDistance <= 2000) {
            this.curPetDir = this.targetLoc.clone().add(this.targetLoc.clone().subtract(this.pet.worldTransform.position.clone()));
            this.pet.lookAt(this.curPetDir);
            this.pet.addMovement(mw.Vector.forward);
            if (this.petAnimation && this.petAnimation?.assetId == this.petMoveId) ;
            else {
                Utils.asyncDownloadAsset(this.petMoveId).then(() => {
                    this.petAnimation = this.pet.loadAnimation(this.petMoveId);
                    this.petAnimation.loop = 0;
                    this.petAnimation.play();
                });
            }
        }
        else {
            if (this.petAnimation && this.petAnimation?.assetId == this.petIdleId) ;
            else {
                Utils.asyncDownloadAsset(this.petIdleId).then(() => {
                    this.petAnimation = this.pet.loadAnimation(this.petIdleId);
                    this.petAnimation.loop = 0;
                    this.petAnimation.play();
                });
            }
        }
    }
    onUseFly() {
        if (this.flyId == -1) {
            if (this.flyJian) {
                GameObjPool.despawn(this.flyJian);
                this.flyJian = null;
            }
            if (this.flyCharacter) {
                GameObjPool.despawn(this.flyCharacter);
                this.flyCharacter = null;
            }
            if (this.flyJianAni) {
                this.flyJianAni.stop();
                this.flyJianAni = null;
                this.flyAnimationId = "";
            }
            this.isFlying = false;
        }
        else {
            if (!this.character)
                return;
            if (this.flyJian) {
                GameObjPool.despawn(this.flyJian);
                this.flyJian = null;
            }
            if (this.flyCharacter) {
                GameObjPool.despawn(this.flyCharacter);
                this.flyCharacter = null;
            }
            if (!swordDataMap.has(this.flyId))
                return;
            let flyData = swordDataMap.get(this.flyId);
            Utils.asyncDownloadAsset(flyData.swordPrefabId).then(() => {
                GameObjPool.asyncSpawn(flyData.swordPrefabId).then((go) => {
                    if (flyData.isCharacter) {
                        this.flyCharacter = go;
                        this.flyCharacter.setCollision(mw.PropertyStatus.Off, true);
                        this.character.attachToSlot(this.flyCharacter, mw.HumanoidSlotType.Root);
                        this.flyCharacter.localTransform.scale = mw.Vector.one.multiply(4);
                        this.flyCharacter.localTransform.position = new mw.Vector(12, 0, 30);
                        this.flyCharacter.localTransform.rotation = mw.Rotation.zero;
                        Utils.asyncDownloadAsset(`160628`).then(() => {
                            let flyCharacterAnimation = this.flyCharacter.loadAnimation(`160628`); //TODO-小龙动画
                            flyCharacterAnimation.loop = 0;
                            flyCharacterAnimation.play();
                        });
                    }
                    else {
                        this.flyJian = go;
                        this.character.attachToSlot(this.flyJian, mw.HumanoidSlotType.Root);
                        this.flyJian.localTransform.position = mw.Vector.zero;
                        this.flyJian.localTransform.rotation = mw.Rotation.zero;
                    }
                    this.flyAnimationId = flyData.animationId;
                    this.flyJianAni = this.character.loadAnimation(this.flyAnimationId);
                    this.flyJianAni.loop = 0;
                    this.flyJianAni.play();
                });
            });
            this.isFlying = true;
        }
    }
    updateFlyAnimation() {
        if (!this.isFlying || this.flyId == -1 || !this.flyJianAni)
            return;
        if (this.flyJianAni?.assetId != this.flyAnimationId) {
            this.flyJianAni = this.character.loadAnimation(this.flyAnimationId);
            this.flyJianAni.loop = 0;
            this.flyJianAni.play();
        }
    }
    onDestroy() {
        if (this.pet)
            GameObjPool.despawn(this.pet);
        if (this.flyJian)
            GameObjPool.despawn(this.flyJian);
        if (this.flyCharacter)
            GameObjPool.despawn(this.flyCharacter);
        this._hpBarUI?.destroy();
        this._hpBarWidget?.destroy();
    }
};
__decorate([
    mw.Property({ replicated: true, onChanged: "onHpChange" })
], PlayerLifebar.prototype, "maxHp", void 0);
__decorate([
    mw.Property({ replicated: true, onChanged: "onHpChange" })
], PlayerLifebar.prototype, "hp", void 0);
__decorate([
    mw.Property({ replicated: true, onChanged: "onNameChange" })
], PlayerLifebar.prototype, "playerName", void 0);
__decorate([
    mw.Property({ replicated: true, onChanged: "onLevelChange" })
], PlayerLifebar.prototype, "playerLevel", void 0);
__decorate([
    mw.Property({ replicated: true, onChanged: "onUsePet" })
], PlayerLifebar.prototype, "bagId", void 0);
__decorate([
    mw.Property({ replicated: true, onChanged: "onUseFly" })
], PlayerLifebar.prototype, "flyId", void 0);
__decorate([
    mw.Property({ replicated: true, onChanged: "onInvincible" })
], PlayerLifebar.prototype, "isInvincible", void 0);
PlayerLifebar = __decorate([
    Component
], PlayerLifebar);
var PlayerLifebar$1 = PlayerLifebar;

var foreign66 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: PlayerLifebar$1
});

class PlayerModuleS extends ModuleS {
    constructor() {
        super(...arguments);
        this.worldModuleS = null;
        this.taskModuleS = null;
        this.bagModuleS = null;
        this.levelModuleS = null;
        this.ringSoulModuleS = null;
        this.flyModuleS = null;
        this.soulBoneModuleS = null;
        this.allPlayerMap = new Map();
        /**存储所有玩家的生命数据 */
        this.playerLifeMap = new Map();
    }
    get getWorldModuleS() {
        if (!this.worldModuleS) {
            this.worldModuleS = ModuleService.getModule(WorldRankModuleS);
        }
        return this.worldModuleS;
    }
    get getTaskModuleS() {
        if (!this.taskModuleS) {
            this.taskModuleS = ModuleService.getModule(TaskModuleS);
        }
        return this.taskModuleS;
    }
    get getBagModuleS() {
        if (!this.bagModuleS) {
            this.bagModuleS = ModuleService.getModule(BagModuleS);
        }
        return this.bagModuleS;
    }
    get getLevelModuleS() {
        if (!this.levelModuleS) {
            this.levelModuleS = ModuleService.getModule(LevelModuleS);
        }
        return this.levelModuleS;
    }
    get getRingSoulModuleS() {
        if (!this.ringSoulModuleS) {
            this.ringSoulModuleS = ModuleService.getModule(RingSoulModuleS);
        }
        return this.ringSoulModuleS;
    }
    get getFlyModuleS() {
        if (!this.flyModuleS) {
            this.flyModuleS = ModuleService.getModule(FlyModuleS);
        }
        return this.flyModuleS;
    }
    get getSoulBoneModuleS() {
        if (!this.soulBoneModuleS) {
            this.soulBoneModuleS = ModuleService.getModule(SoulBoneModuleS);
        }
        return this.soulBoneModuleS;
    }
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
        this.registerEvents();
    }
    registerEvents() {
        PrefabEvent.PrefabEvtFight.onHit(this.playerAtkPlayer.bind(this));
        PrefabEvent.PrefabEvtFight.onHurt(this.npcAtkPlayer.bind(this));
        Event.addClientListener("RefreshMaxHeight", this.saveHeight.bind(this));
    }
    /**
     * 玩家攻击玩家
     * @param senderGuid
     * @param targetGuid
     * @param damage
     * @param hitPoint
     */
    playerAtkPlayer(senderGuid, targetGuid, damage, hitPoint) {
        Console.error("PlayerModuleS-playerAtkPlayerAndNPC");
        if (!this.allPlayerMap.has(targetGuid) || !this.allPlayerMap.has(senderGuid))
            return;
        let sendPlayer = this.allPlayerMap.get(senderGuid);
        let targetPlayer = this.allPlayerMap.get(targetGuid);
        if (this.playerLifeMap.get(targetPlayer.playerId).isDie || this.playerLifeMap.get(sendPlayer.playerId).isDie)
            return;
        if (this.playerLifeMap.get(targetPlayer.playerId).playerLifebar.getIsInvincible || this.playerLifeMap.get(sendPlayer.playerId).playerLifebar.getIsInvincible) {
            Console.error("已开启队友免伤");
            return;
        }
        this.getClient(targetPlayer).net_onPlayerAtkSelf(damage, hitPoint);
        this.updatePlayerData(sendPlayer, targetPlayer, damage, hitPoint);
    }
    /**
     * 玩家攻击NPC
     * @param senderGuid
     * @param damage
     * @param hitPoint
     */
    playerAtkNPC(senderGuid, damage, hitPoint, isDie, maxHp) {
        if (!this.allPlayerMap.has(senderGuid))
            return;
        let sendPlayer = this.allPlayerMap.get(senderGuid);
        this.getClient(sendPlayer).net_onSelfAtkPlayer(damage, hitPoint, isDie, maxHp);
    }
    /**
     * NPC攻击Player
     * @param senderGuid
     * @param targetGuid
     * @param damage
     */
    npcAtkPlayer(senderGuid, targetGuid, damage) {
        if (!this.allPlayerMap.has(targetGuid))
            return;
        let targetPlayer = this.allPlayerMap.get(targetGuid);
        if (this.playerLifeMap.get(targetPlayer.playerId).isDie)
            return;
        this.getClient(targetPlayer).net_onPlayerAtkSelf(damage, targetPlayer.character.worldTransform.position);
        this.updatePlayerData(null, targetPlayer, damage, mw.Vector.zero);
    }
    /**
     * 玩家击杀敌人
     * @param senderGuid
     * @param hp
     */
    playerKillEnemy(senderGuid, hp, monsterId) {
        if (!this.allPlayerMap.has(senderGuid))
            return;
        let sendPlayer = this.allPlayerMap.get(senderGuid);
        this.saveKill(sendPlayer, 1);
        this.addExpAndCoin(sendPlayer, hp);
        this.getTaskModuleS.killMonster(sendPlayer, monsterId);
        let names = [];
        names.push(this.getWorldModuleS.getNameByUserId(sendPlayer.userId));
        names.push(Utils.randomNpcName(monsterId));
        this.getAllClient().net_killTip(sendPlayer.userId, names[0], "-1", names[1], true);
        this.saveBone(sendPlayer, hp);
    }
    /**
     * 玩家击杀敌人
     * @param senderGuid
     * @param hp
     */
    playerKillEnemy_Level(senderGuid, hp, monsterId, key, level) {
        if (!this.allPlayerMap.has(senderGuid))
            return;
        let sendPlayer = this.allPlayerMap.get(senderGuid);
        this.saveKill(sendPlayer, 1);
        this.addExpAndCoin(sendPlayer, hp);
        // this.getTaskModuleS.killMonster(sendPlayer, monsterId);//TODO
        let names = [];
        names.push(this.getWorldModuleS.getNameByUserId(sendPlayer.userId));
        names.push(`${level}-${Utils.randomNpcName(monsterId)}`);
        this.getAllClient().net_killTip(sendPlayer.userId, names[0], "-1", names[1], true, true);
        this.getLevelModuleS.startLevel(sendPlayer, key);
        this.saveBone(sendPlayer, hp);
    }
    playerAtkEnemyFlyText(senderGuid, hitPoint, damage) {
        if (!this.allPlayerMap.has(senderGuid))
            return;
        let sendPlayer = this.allPlayerMap.get(senderGuid);
        this.getClient(sendPlayer).net_flyText(damage, hitPoint);
    }
    /**
     *
     * @param player
     * @param hp
     */
    addExpAndCoin(player, hp) {
        let expOrCoin = Math.round((hp / (Utils.getRandomInteger(1, 2) == 1 ? 2 : 4)));
        let playerData = DataCenterS.getData(player, PlayerData);
        let preLv = playerData.playerLv;
        playerData.saveExpAndCoin(expOrCoin);
        let isAddLv = false;
        if (preLv != playerData.playerLv) {
            isAddLv = true;
            let playerId = player.playerId;
            if (this.playerLifeMap.has(playerId)) {
                let playerLifebar = this.playerLifeMap.get(player.playerId).playerLifebar;
                let maxHp = Math.round(playerData.getHp() * (this.getBagModuleS.getAddHpByUsing(player) +
                    this.getRingSoulModuleS.getRarity(player) + this.getFlyModuleS.getRarity(player)
                    + this.getSoulBoneModuleS.getRarity(player)));
                playerLifebar.maxHp = maxHp;
                playerLifebar.hp = maxHp;
                playerLifebar.playerLevel = playerData.playerLv;
            }
            this.saveLv(player, playerData.playerLv - preLv, playerData.playerLv);
            this.playEffectAndSoundToPlayer(player);
        }
        this.getClient(player).net_updateLvExpAndCoin(isAddLv, expOrCoin);
    }
    onPlayerEnterGame(player) {
        this.initPlayerData(player);
    }
    onPlayerLeft(player) {
        this.deletePlayerData(player);
    }
    setPlayerLifeNickName(playerId, nickName, level) {
        TimeUtil.delaySecond(5).then(() => {
            if (!this.playerLifeMap.has(playerId))
                return;
            let lifebar = this.playerLifeMap.get(playerId).playerLifebar;
            lifebar.playerName = nickName;
            lifebar.playerLevel = level;
        });
    }
    /**设置玩家等级 */
    setPlayerLevel(playerId, level) {
        if (!this.playerLifeMap.has(playerId))
            return;
        this.playerLifeMap.get(playerId).playerLifebar.playerLevel = level;
    }
    updatePlayerData(sendPlayer, targetPlayer, damage, hitPoint) {
        let playerId = targetPlayer.playerId;
        let targetPlayerData = this.playerLifeMap.get(playerId);
        if (targetPlayerData.isDie)
            return;
        // if (sendPlayer != null && targetPlayerData.playerLifebar.getIsInvincible) {
        //     Console.error("已开启队友免伤");
        //     return;
        // }
        let curHp = targetPlayerData.playerLifebar.hp;
        curHp -= damage;
        if (curHp <= 0) {
            let maxHp = Math.round(DataCenterS.getData(targetPlayer, PlayerData).getHp() * (this.getBagModuleS.getAddHpByUsing(targetPlayer)
                + this.getRingSoulModuleS.getRarity(targetPlayer) + this.getFlyModuleS.getRarity(targetPlayer)
                + this.getSoulBoneModuleS.getRarity(targetPlayer)));
            targetPlayerData.playerLifebar.hp = 0;
            targetPlayerData.isDie = true;
            if (sendPlayer) {
                this.saveKill(sendPlayer, 1);
                this.addExpAndCoin(sendPlayer, maxHp);
                this.getTaskModuleS.killPlayer(sendPlayer);
                let names = [];
                names = this.getWorldModuleS.getNamesByUserId(sendPlayer.userId, targetPlayer.userId);
                this.getAllClient().net_killTip(sendPlayer.userId, names[0], targetPlayer.userId, names[1]);
            }
            targetPlayer.character.ragdollEnabled = true;
            this.spawnTombstoneS(targetPlayer);
            TimeUtil.delaySecond(3).then(() => {
                targetPlayer.character.ragdollEnabled = false;
                targetPlayerData.playerLifebar.hp = maxHp;
                targetPlayerData.isDie = false;
                this.getClient(targetPlayer).net_updateHp(maxHp);
                targetPlayer.character.worldTransform.position = Utils.getWorldLocation();
            });
        }
        else {
            targetPlayerData.playerLifebar.hp = curHp;
        }
        if (sendPlayer) {
            let maxHp = 0;
            if (targetPlayerData.isDie) {
                maxHp = Math.round(DataCenterS.getData(targetPlayer, PlayerData).getHp() * (this.getBagModuleS.getAddHpByUsing(targetPlayer)
                    + this.getRingSoulModuleS.getRarity(targetPlayer) + this.getFlyModuleS.getRarity(targetPlayer)
                    + this.getSoulBoneModuleS.getRarity(targetPlayer)));
            }
            this.getClient(sendPlayer).net_onSelfAtkPlayer(damage, hitPoint, targetPlayerData.isDie, maxHp);
        }
        this.getClient(targetPlayer).net_updateHp(curHp);
    }
    /**生成墓碑（服务端） */
    spawnTombstoneS(player) {
        let tombstone = null;
        tombstone = SpawnManager.wornSpawn(GlobalData.tombstoneGuid);
        let pos = player.character.worldTransform.position;
        tombstone.worldTransform.position = (new mw.Vector(pos.x, pos.y, pos.z - 110));
        setTimeout(() => {
            tombstone.destroy();
        }, 3 * 1000);
    }
    /**设置玩家生命数据 */
    async initPlayerData(player) {
        let playerId = player.playerId;
        let playerDataS = new PlayerDataS();
        // let hpbar = await mw.Script.spawnScript(PlayerLifebar, true, player.character);
        let hpbar = player.character.addComponent(PlayerLifebar$1, true);
        let maxHp = Math.round(DataCenterS.getData(player, PlayerData).getHp() * (this.getBagModuleS.getAddHpByUsing(player)
            + this.getRingSoulModuleS.getRarity(player) + this.getFlyModuleS.getRarity(player)
            + this.getSoulBoneModuleS.getRarity(player)));
        hpbar.maxHp = maxHp;
        hpbar.hp = maxHp;
        playerDataS.playerLifebar = hpbar;
        playerDataS.isDie = false;
        playerDataS.playerLifebar.isInvincible = false;
        this.playerLifeMap.set(playerId, playerDataS);
        this.allPlayerMap.set(player.character.gameObjectId, player);
    }
    /**删除玩家生命数据 */
    deletePlayerData(player) {
        let playerId = player.playerId;
        if (this.playerLifeMap.has(playerId)) {
            this.playerLifeMap.get(playerId).playerLifebar.isInvincible = false;
            this.playerLifeMap.get(playerId).playerLifebar.destroy();
            this.playerLifeMap.delete(playerId);
        }
        if (this.allPlayerMap.has(player.character.gameObjectId)) {
            this.allPlayerMap.delete(player.character.gameObjectId);
        }
    }
    saveLv(player, value, value1) {
        this.getWorldModuleS.refreshLv_S(player.userId, value);
        this.setPlayerLevel(player.playerId, value1);
    }
    saveHeight(player, value) {
        DataCenterS.getData(player, PlayerData).refashHeight(value);
        this.getWorldModuleS.refreshHeight_S(player.userId, value);
    }
    saveKill(player, value) {
        DataCenterS.getData(player, PlayerData).refashKill(value);
        this.getWorldModuleS.refreshKill_S(player.userId, value);
    }
    // @Decorator.noReply()
    // public net_saveLv(value: number): void {
    //     this.currentData.refashLv(value);
    //     this.worldModuleS.refreshLv_S(this.currentPlayer.userId, value);
    // }
    // @Decorator.noReply()
    // public net_saveHeight(value: number): void {
    //     this.currentData.refashHeight(value);
    //     this.worldModuleS.refreshHeight_S(this.currentPlayer.userId, value);
    // }
    // @Decorator.noReply()
    // public net_saveKill(value: number): void {
    //     this.currentData.refashKill(value);
    //     this.worldModuleS.refreshKill_S(this.currentPlayer.userId, value);
    // }
    net_saveCoin(value) {
        this.currentData.saveCoin(value);
    }
    net_saveDiamond(value) {
        this.currentData.saveDiamond(value);
    }
    net_saveBone(value) {
        this.currentData.saveBone(value);
    }
    saveBone(player, hp) {
        let bone = DataCenterS.getData(player, PlayerData).getBone(Utils.getRandomInteger(1, 5) == 1 ? Utils.getRandomInteger(1, 20) : Utils.getRandomInteger(20, 100));
        this.getClient(player).net_setBone(bone);
    }
    /**
     * 更新金币
     * @param player
     * @param value
     */
    updateCoin(player, value) {
        this.getClient(player).net_updateCoin(value);
        DataCenterS.getData(player, PlayerData).saveCoin(value);
    }
    net_saveCoinAndExp(coin, exp) {
        let player = this.currentPlayer;
        let preLv = this.currentData.playerLv;
        this.currentData.saveCoinAndExp(coin, exp);
        let isAddLv = false;
        if (preLv != this.currentData.playerLv) {
            isAddLv = true;
            let playerId = player.playerId;
            if (this.playerLifeMap.has(playerId)) {
                let playerLifebar = this.playerLifeMap.get(player.playerId).playerLifebar;
                let maxHp = Math.round(this.currentData.getHp() * (this.getBagModuleS.getAddHpByUsing(player)
                    + this.getRingSoulModuleS.getRarity(player) + this.getFlyModuleS.getRarity(player)
                    + this.getSoulBoneModuleS.getRarity(player)));
                playerLifebar.maxHp = maxHp;
                playerLifebar.hp = maxHp;
                playerLifebar.playerLevel = this.currentData.playerLv;
            }
            this.saveLv(player, this.currentData.playerLv - preLv, this.currentData.playerLv);
            this.playEffectAndSoundToPlayer(player);
        }
        this.getClient(player).net_updateLvExpAndCoin(isAddLv, coin);
    }
    net_isInvincible(isInvincible) {
        if (this.playerLifeMap.has(this.currentPlayerId)) {
            this.playerLifeMap.get(this.currentPlayerId).playerLifebar.isInvincible = isInvincible;
        }
    }
    updateHpByUsing(player, addHp) {
        let playerData = DataCenterS.getData(player, PlayerData);
        let maxHp = Math.round(playerData.getHp() * addHp);
        if (this.playerLifeMap.has(player.playerId)) {
            this.playerLifeMap.get(player.playerId).playerLifebar.maxHp = maxHp;
        }
    }
    playEffectAndSoundToPlayer(player) {
        SoundService.play3DSound("169179", player.character, 1, 10, { radius: 500, falloffDistance: 1200 });
        EffectService.playOnGameObject("142750", player.character, { slotType: mw.HumanoidSlotType.Root, loopCount: 1 });
    }
    usePet(player, bagId) {
        if (!this.playerLifeMap.has(player.playerId))
            return;
        if (this.playerLifeMap.get(player.playerId).playerLifebar.getBagId == bagId)
            return;
        this.playerLifeMap.get(player.playerId).playerLifebar.bagId = bagId;
    }
    useFly(player, key) {
        if (!this.playerLifeMap.has(player.playerId))
            return;
        if (this.playerLifeMap.get(player.playerId).playerLifebar.getFlyId == key)
            return;
        this.playerLifeMap.get(player.playerId).playerLifebar.flyId = key;
    }
    net_skill_1() {
        let player = this.currentPlayer;
        Utils.asyncDownloadAsset(GlobalData.skillAnimation_1).then(() => {
            player.character.loadAnimation(GlobalData.skillAnimation_1).play();
            let effectId = EffectService.playOnGameObject(GlobalData.skillEffectId_1, player.character, { slotType: mw.HumanoidSlotType.Root, loopCount: 0, scale: mw.Vector.one.multiply(2) });
            let smallScale = player.character.worldTransform.scale.clone();
            player.character.worldTransform.scale = mw.Vector.one.multiply(GlobalData.skillScale_1);
            TimeUtil.delaySecond(GlobalData.skillContinue_1).then(() => {
                player.character.worldTransform.scale = smallScale;
                EffectService.stop(effectId);
            });
        });
    }
    net_setDayStr(dayStr) {
        this.currentData.setDayStr(dayStr);
    }
}
__decorate([
    Decorator.noReply()
], PlayerModuleS.prototype, "net_saveCoin", null);
__decorate([
    Decorator.noReply()
], PlayerModuleS.prototype, "net_saveDiamond", null);
__decorate([
    Decorator.noReply()
], PlayerModuleS.prototype, "net_saveBone", null);
__decorate([
    Decorator.noReply()
], PlayerModuleS.prototype, "net_saveCoinAndExp", null);
__decorate([
    Decorator.noReply()
], PlayerModuleS.prototype, "net_isInvincible", null);
__decorate([
    Decorator.noReply()
], PlayerModuleS.prototype, "net_setDayStr", null);
class PlayerDataS {
    constructor() {
        this.playerLifebar = null;
        this.isDie = false;
    }
}

var foreign65 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: PlayerModuleS
});

let Coin = class Coin extends Script {
    constructor() {
        super(...arguments);
        this.coinEffect = "29704";
        this.coinSound = "124720";
        this.rebirthTime = 30;
        /**--------------------------------【客户端】-------------------------------- */
        /**--------------------------------【服务端】-------------------------------- */
        this.playerModuleS = null;
        this.coinElement = [];
        this.triggers = [];
        this.coinEffectIds = [];
    }
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
        if (mw.SystemUtil.isClient()) {
            this.onStartC();
        }
        else if (mw.SystemUtil.isServer()) {
            this.onStartS();
        }
    }
    /**
     * 周期函数 每帧执行
     * 此函数执行需要将this.useUpdate赋值为true
     * @param dt 当前帧与上一帧的延迟 / 秒
     */
    onUpdate(dt) {
        if (mw.SystemUtil.isClient()) {
            this.onUpdateC(dt);
        }
        else if (mw.SystemUtil.isServer()) {
            this.onUpdateS(dt);
        }
    }
    /**--------------------------------【客户端】-------------------------------- */
    /**客户端的onStart */
    onStartC() {
        this.useUpdate = false;
    }
    /**客户端的onUpdate */
    onUpdateC(dt) {
    }
    get getPlayerModuleS() {
        if (this.playerModuleS == null) {
            this.playerModuleS = ModuleService.getModule(PlayerModuleS);
        }
        return this.playerModuleS;
    }
    /**服务端的onStart */
    onStartS() {
        this.useUpdate = false;
        this.initData();
    }
    async initData() {
        await ModuleService.ready();
        this.coinElement = GameConfig.Coin.getAllElement();
        this.initTrigger();
    }
    async initTrigger() {
        for (let i = 0; i < this.coinElement.length; ++i) {
            let triggerGuid = this.coinElement[i].Trigger;
            if (!triggerGuid)
                continue;
            let trigger = await mw.GameObject.findGameObjectById(triggerGuid);
            trigger.onEnter.add(this.bindTrigger.bind(this, i));
            this.triggers.push(trigger);
            let effectId = EffectService.playOnGameObject(this.coinEffect, trigger, {
                position: new mw.Vector(0, 0, -30),
                loopCount: 0,
                scale: mw.Vector.one.multiply(2)
            });
            this.coinEffectIds.push(effectId);
            Console.error("wfz - " + i);
        }
    }
    bindTrigger(index, character) {
        if (!(character instanceof mw.Character)) {
            console.error("触发器进入的不是角色");
            return;
        }
        this.getPlayerModuleS.updateCoin(character.player, this.randomValueS(10, 30));
        this.triggers[index].enabled = false;
        SoundService.play3DSound(this.coinSound, this.triggers[index]);
        if (this.coinEffectIds.length > index) {
            EffectService.stop(this.coinEffectIds[index]);
            this.coinEffectIds[index] = null;
        }
        TimeUtil.delaySecond(this.rebirthTime).then(() => {
            this.triggers[index].enabled = true;
            let effectId = EffectService.playOnGameObject(this.coinEffect, this.triggers[index], {
                position: new mw.Vector(0, 0, -30),
                loopCount: 0,
                scale: mw.Vector.one.multiply(2)
            });
            this.coinEffectIds[index] = effectId;
        });
    }
    /**服务端的onUpdate */
    onUpdateS(dt) {
    }
    /**随机一个值 */
    randomValueS(min, max) {
        return Math.floor(Math.random() * (max - min + 1) + min);
    }
    /**--------------------------------【服务端】-------------------------------- */
    /** 脚本被销毁时最后一帧执行完调用此函数 */
    onDestroy() {
    }
};
__decorate([
    mw.Property({ displayName: "金币特效", group: "金币属性", tooltip: "金币特效" })
], Coin.prototype, "coinEffect", void 0);
__decorate([
    mw.Property({ displayName: "金币音效", group: "金币属性", tooltip: "金币音效" })
], Coin.prototype, "coinSound", void 0);
__decorate([
    mw.Property({ displayName: "重生时间", group: "金币属性", tooltip: "重生时间", range: { min: 30, max: 120, showSlider: true } })
], Coin.prototype, "rebirthTime", void 0);
Coin = __decorate([
    Component
], Coin);
var Coin$1 = Coin;

var foreign3 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: Coin$1
});

let Dance = class Dance extends Script {
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
        if (mw.SystemUtil.isClient()) {
            let xifang = this.gameObject;
            xifang.setDescription(["327879"]);
            xifang.asyncReady().then(() => {
                let a = xifang.loadAnimation("306307");
                a.loop = 0;
                a.play();
            });
        }
    }
    /**
     * 周期函数 每帧执行
     * 此函数执行需要将this.useUpdate赋值为true
     * @param dt 当前帧与上一帧的延迟 / 秒
     */
    onUpdate(dt) {
    }
    /** 脚本被销毁时最后一帧执行完调用此函数 */
    onDestroy() {
    }
};
Dance = __decorate([
    Component
], Dance);
var Dance$1 = Dance;

var foreign4 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: Dance$1
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/common/EnemyLifebar.ui
 * TIME: 2024.11.04-19.49.51
 */
let EnemyLifebar_Generate = class EnemyLifebar_Generate extends UIScript {
    get mLifebarProgressBar() {
        if (!this.mLifebarProgressBar_Internal && this.uiWidgetBase) {
            this.mLifebarProgressBar_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mLifebarProgressBar');
        }
        return this.mLifebarProgressBar_Internal;
    }
    get mHpTextBlock() {
        if (!this.mHpTextBlock_Internal && this.uiWidgetBase) {
            this.mHpTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mHpTextBlock');
        }
        return this.mHpTextBlock_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mHpTextBlock);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
EnemyLifebar_Generate = __decorate([
    UIBind('UI/common/EnemyLifebar.ui')
], EnemyLifebar_Generate);
var EnemyLifebar_Generate$1 = EnemyLifebar_Generate;

var foreign104 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: EnemyLifebar_Generate$1
});

var MonsterState$1;
(function (MonsterState) {
    MonsterState[MonsterState["Inactivation"] = 0] = "Inactivation";
    MonsterState[MonsterState["Activate"] = 1] = "Activate";
})(MonsterState$1 || (MonsterState$1 = {}));
let AnimationInfo$1 = class AnimationInfo {
    constructor() {
        // @mw.Property({ displayName: "idleAnimation", group: "AnimationInfo", tooltip: "idleAnimation" })
        this.idles = [];
        // @mw.Property({ displayName: "moveAnimation", group: "AnimationInfo", tooltip: "moveAnimation" })
        this.moves = [];
        // @mw.Property({ displayName: "attackAnimation", group: "AnimationInfo", tooltip: "attackAnimation" })
        this.attacks = [];
        // @mw.Property({ displayName: "dieAnimation", group: "AnimationInfo", tooltip: "dieAnimation" })
        this.die = "";
    }
};
let AttackInfo$1 = class AttackInfo {
    constructor() {
        // @mw.Property({ displayName: "attackTimePoint", group: "AttackInfo", tooltip: "attackTimePoint" })
        this.attackTimePoints = [];
        // @mw.Property({ displayName: "forwardOffset", group: "AttackInfo", tooltip: "forwardOffset" })
        this.attackOffsets = [];
        // @mw.Property({ displayName: "attackRange", group: "AttackInfo", tooltip: "attackRange" })
        this.attackLengths = [];
        // @mw.Property({ displayName: "attackSize", group: "AttackInfo", tooltip: "attackSize" })
        this.attackSizes = [];
        // @mw.Property({ displayName: "damage", group: "AttackInfo", tooltip: "damage" })
        this.damages = [];
    }
};
let AttackEffectInfo$1 = class AttackEffectInfo {
    constructor() {
        // @mw.Property({ displayName: "effectId", group: "AttackEffectInfo", tooltip: "effectId" })
        this.effectIds = [];
        // @mw.Property({ displayName: "effectPos", group: "AttackEffectInfo", tooltip: "effectPos" })
        this.posOffsets = [];
        // @mw.Property({ displayName: "effectRot", group: "AttackEffectInfo", tooltip: "effectRot" })
        this.rotOffsets = [];
        // @mw.Property({ displayName: "effectScale", group: "AttackEffectInfo", tooltip: "effectScale" })
        this.effectScales = [];
    }
};
class Monster_Level extends Script {
    constructor() {
        super(...arguments);
        this.monsterId = 0;
        this.hp = 0;
        this.maxHp = 0;
        this.levelType = 1;
        this.levelIndex = 1;
        // @mw.Property({ displayName: "moveSpeed", group: "Info", tooltip: "moveSpeed" })
        this.moveSpeed = 450;
        // @mw.Property({ displayName: "pathVectors", group: "Info", tooltip: "pathVectors" })
        // private pathVectors: mw.Vector[] = [mw.Vector.zero];
        // @mw.Property({ displayName: "animationInfo", group: "Info", tooltip: "animationInfo" })
        this.animationInfo = new AnimationInfo$1();
        // @mw.Property({ displayName: "attackInfo", group: "Info", tooltip: "attackInfo" })
        this.attackInfo = new AttackInfo$1();
        // @mw.Property({ displayName: "attackEffectInfo", group: "Info", tooltip: "attackEffectInfo" })
        this.attackEffectInfo = new AttackEffectInfo$1();
        this.monster = null;
        this.monsterState = MonsterState$1.Inactivation;
        this.monsterWidth = 0;
        this.cubeLifebar = null;
        this.cubeLifebarWidget = null;
        this.isInitLifebar = false;
        this.preHp = 0;
        this.playerModuleS = null;
        this.level = 1;
        this.lv = 1;
        this.chasePlayerMap = new Map();
        this.isFollowing = false;
        this.isNavigateToing = false;
        // private getRandomTargetPoint_S(): mw.Vector {
        //     let targetVector = this.pathVectors[Utils.getPathIndex(this.pathVectors.length)];
        //     let targetPos = Navigation.getRandomReachablePointInRadius(targetVector, 500);
        //     return (!targetPos) ? targetVector : targetPos;
        // }
        this.attackIndex = 0;
    }
    onStart() {
        this.onStart_CS();
    }
    get getMonster() {
        if (!this.monster) {
            this.monster = this.gameObject;
        }
        return this.monster;
    }
    get getMonsterState() {
        return this.monsterState;
    }
    set setMonsterState(value) {
        this.monsterState = value;
    }
    get getMonsterHeight() {
        return this.getMonster.collisionExtent.z;
    }
    get getMonsterPostion() {
        return this.getMonster.worldTransform.position;
    }
    get getMonsterWidth() {
        if (this.monsterWidth == 0) {
            this.monsterWidth = this.getMonster.collisionExtent.x > this.getMonster.collisionExtent.y ?
                this.getMonster.collisionExtent.x : this.getMonster.collisionExtent.y;
        }
        console.error(`this.monsterWidth:${this.monsterWidth}`);
        return this.monsterWidth + 10;
    }
    async onStart_CS() {
        await this.initCharacter();
        await this.initConfig();
        if (mw.SystemUtil.isClient()) {
            this.onStart_C();
        }
        else if (mw.SystemUtil.isServer()) {
            this.onStart_S();
        }
    }
    async initCharacter() {
        await ModuleService.ready();
        this.monster = this.gameObject;
        this.monster.collisionWithOtherCharacterEnabled = false;
    }
    async initConfig() {
        let monsterElement = GameConfig.MonsterInfo.getElement(this.monsterId);
        if (!monsterElement)
            return;
        await this.initPaths(monsterElement?.PathStr);
        this.animationInfo.idles = monsterElement?.Idles;
        this.animationInfo.moves = monsterElement?.Moves;
        this.animationInfo.attacks = monsterElement?.Attacks;
        this.animationInfo.die = monsterElement?.Die;
        this.attackInfo.attackTimePoints = monsterElement?.AttackTimePoints;
        this.attackInfo.attackOffsets = monsterElement?.AttackOffsets;
        this.attackInfo.attackLengths = monsterElement?.AttackLengths;
        this.attackInfo.attackSizes = monsterElement?.AttackSizes;
        this.attackInfo.damages = monsterElement?.Damages;
        this.attackEffectInfo.effectIds = monsterElement?.EffectIds;
        this.attackEffectInfo.posOffsets = monsterElement?.EffectPosOffsets;
        monsterElement?.EffectRotOffsets?.forEach((value) => {
            this.attackEffectInfo.rotOffsets.push(new mw.Rotation(value));
        });
        this.attackEffectInfo.effectScales = monsterElement?.EffectScales;
        this.moveSpeed = monsterElement?.MoveSpeed;
    }
    async initPaths(pathStr = null) {
        // if (!pathStr || pathStr.length == 0) pathStr = GameConfig.MonsterInfo.getElement(this.monsterId)?.PathStr;
        // let pathParent = await mw.GameObject.asyncFindGameObjectById(pathStr[this.randomInt(0, pathStr.length - 1)]);
        // let pathParent = await mw.GameObject.asyncFindGameObjectById(this.pathParentStr);
        // this.pathVectors.length = 0;
        // pathParent?.getChildren().forEach((child: mw.GameObject) => {
        //     this.pathVectors.push(child.worldTransform.position);
        // });
    }
    onUpdate(dt) {
        if (mw.SystemUtil.isClient()) {
            this.onUpdate_C(dt);
        }
        else if (mw.SystemUtil.isServer()) {
            this.onUpdate_S(dt);
        }
    }
    async onStart_C() {
        this.useUpdate = false;
        this.initEvent_C();
        this.preHp = Math.floor(this.maxHp);
        this.initLifebar();
    }
    initEvent_C() {
        Event.addServerListener("DrawDebug", this.bindDrawDebug_C.bind(this));
    }
    bindDrawDebug_C(start, end, halfSize) {
        // console.error(`DrawDebug`);
        mw.PhysicsService.boxTraceMulti(start, end, halfSize, mw.Rotation.zero, { objectsToIgnore: [this.getMonster] }, {
            isDrawDebug: mw.SystemUtil.isPIE,
            duration: 1,
            traceColor: mw.LinearColor.red,
            hitColor: mw.LinearColor.green,
            thickness: 3
        });
    }
    async initLifebar() {
        this.cubeLifebar = UIService.create(EnemyLifebar_Generate$1);
        this.cubeLifebarWidget = await mw.GameObject.asyncSpawn("UIWidget", {
            replicates: false
        });
        this.cubeLifebarWidget.setTargetUIWidget(this.cubeLifebar.uiWidgetBase);
        this.cubeLifebarWidget.widgetSpace = mw.WidgetSpaceMode.OverheadUI;
        this.getMonster.attachToSlot(this.cubeLifebarWidget, mw.HumanoidSlotType.Rings);
        this.cubeLifebarWidget.occlusionEnable = false;
        this.cubeLifebarWidget.scaledByDistanceEnable = true;
        this.cubeLifebarWidget.hideByDistanceEnable = true;
        this.cubeLifebarWidget.headUIMaxVisibleDistance = 10000;
        this.isInitLifebar = true;
        this.onHpChanged();
    }
    onHpChanged() {
        if (!this.isInitLifebar)
            return;
        if (this.preHp <= 0)
            this.preHp = Math.floor(this.maxHp);
        let damage = this.preHp - this.hp;
        if (damage > 0)
            this.preHp = this.hp;
        this.cubeLifebar.mLifebarProgressBar.percent = this.hp / this.maxHp;
        this.cubeLifebar.mHpTextBlock.text = `${Math.floor(this.hp)}/${Math.floor(this.maxHp)}`;
        if (this.hp <= 0) {
            if (this.cubeLifebarWidget.getVisibility()) {
                this.cubeLifebarWidget.setVisibility(false);
            }
        }
        else if (this.hp >= this.maxHp) {
            if (!this.cubeLifebarWidget.getVisibility()) {
                this.cubeLifebarWidget.setVisibility(true);
            }
        }
    }
    onUpdate_C(dt) {
    }
    get getPlayerModuleS() {
        if (this.playerModuleS == null) {
            this.playerModuleS = ModuleService.getModule(PlayerModuleS);
        }
        return this.playerModuleS;
    }
    async onStart_S() {
        this.useUpdate = false;
        this.initEvent_S();
        await this.activate_S();
    }
    initEvent_S() {
        PrefabEvent.PrefabEvtFight.onHit(this.playerAtkEnemy_S.bind(this));
        Event.addLocalListener(`InitMonster`, (index, level, lv) => {
            if (this.levelIndex != index)
                return;
            this.level = level;
            this.lv = lv;
            this.calculateMaxHp();
            EffectService.playOnGameObject("142750", this.getMonster, { slotType: mw.HumanoidSlotType.Root });
            this.hp = this.maxHp;
            if (this.getMonster.ragdollEnabled)
                this.getMonster.ragdollEnabled = false;
            this.getMonster.setDescription([(this.randomInt(1, 2) == 1) ? "5E4EA6214690891A8428C08D8CF69868" : "FEB031744ECC57E59F33B1AEFA7A6A07"]);
            this.setMonsterState = MonsterState$1.Activate;
            this.playIdleAni_S().then(() => {
                TimeUtil.delaySecond(this.randomInt(1, 2)).then(() => this.startNavigateTo_S());
            });
        });
    }
    playerAtkEnemy_S(senderGuid, targetGuid, damage, hitPoint) {
        // console.error(`this.getMonster.gameObjectId:${this.getMonster.gameObjectId} targetGuid:${targetGuid}`);
        if (this.getMonster.gameObjectId != targetGuid || this.getMonsterState == MonsterState$1.Inactivation)
            return;
        if (this.hp <= 0) {
            this.hp = 0;
            return;
        }
        this.updateChasePlayer(senderGuid, damage);
        let tmpHp = this.hp - damage;
        if (tmpHp > 0) {
            this.hp = tmpHp;
        }
        else {
            this.hp = 0;
            this.die_S();
            this.getPlayerModuleS.playerKillEnemy_Level(senderGuid, this.maxHp, 100, this.levelType, this.level);
        }
        this.getPlayerModuleS.playerAtkEnemyFlyText(senderGuid, hitPoint, damage);
    }
    async die_S() {
        this.dieReset_S();
        //die effect
        let dieAni = await this.playDieAni_S();
        if (dieAni) {
            dieAni.length;
        }
        else {
            this.getMonster?.currentAnimation?.stop();
            if (!this.getMonster.ragdollEnabled)
                this.getMonster.ragdollEnabled = true;
        }
        // TimeUtil.delaySecond(dieTime).then(() => { this.rebirth_S(); });
    }
    dieReset_S() {
        this.setMonsterState = MonsterState$1.Inactivation;
        Navigation.stopNavigateTo(this.getMonster);
        Navigation.stopFollow(this.getMonster);
        this.isFollowing = false;
        this.isNavigateToing = false;
        this.chasePlayerMap.clear();
    }
    calculateMaxHp() {
        this.maxHp = this.level * (1000 + this.lv);
    }
    rebirth_S() {
        let rebirthEffectPos = new mw.Vector(this.getMonsterPostion.x, this.getMonsterPostion.y, this.getMonsterPostion.z - this.getMonsterHeight / 2);
        let rebirthEffect = EffectService.playAtPosition("142948", rebirthEffectPos, { loopCount: 0 });
        // this.initPaths();
        TimeUtil.delaySecond(this.randomFloat(1, 3)).then(async () => {
            EffectService.stop(rebirthEffect);
            EffectService.playOnGameObject("142750", this.getMonster, { slotType: mw.HumanoidSlotType.Root });
            this.hp = this.maxHp;
            if (this.getMonster.ragdollEnabled)
                this.getMonster.ragdollEnabled = false;
            this.setMonsterState = MonsterState$1.Activate;
            await this.playIdleAni_S();
            TimeUtil.delaySecond(this.randomFloat(1, 3)).then(() => this.startNavigateTo_S());
        });
    }
    updateChasePlayer(targetGuid, damage) {
        // console.error(`targetGuid:${targetGuid} damage:${damage}`);
        let totalDamage = 0;
        if (this.chasePlayerMap.has(targetGuid)) {
            totalDamage = this.chasePlayerMap.get(targetGuid);
        }
        totalDamage += damage;
        this.chasePlayerMap.set(targetGuid, totalDamage);
        this.fromNavigateToToFollow();
    }
    deleteChasePlayer(targetGuid) {
        if (!this.chasePlayerMap.has(targetGuid))
            return;
        this.chasePlayerMap.delete(targetGuid);
    }
    getChasePlayerByMaxDamage() {
        if (!this.chasePlayerMap || this.chasePlayerMap.size == 0)
            return null;
        let maxDamage = 0;
        let targetGuid = null;
        this.chasePlayerMap.forEach((value, key) => {
            if (value > maxDamage) {
                maxDamage = value;
                targetGuid = key;
            }
        });
        let targetPlayer = null;
        Player.getAllPlayers().forEach((value) => {
            if (value.character.gameObjectId == targetGuid) {
                targetPlayer = value;
            }
        });
        return targetPlayer;
    }
    async activate_S() {
        this.hp = this.maxHp;
        this.getMonster.setDescription([(this.randomInt(1, 2) == 1) ? "5E4EA6214690891A8428C08D8CF69868" : "FEB031744ECC57E59F33B1AEFA7A6A07"]);
        await this.getMonster.asyncReady();
        this.getMonster.maxWalkSpeed = this.moveSpeed;
        this.setMonsterState = MonsterState$1.Activate;
        this.isFollowing = false;
        this.isNavigateToing = false;
        // TimeUtil.delaySecond(this.randomInt(1, 3)).then(() => { this.playIdleAni_S(); });
        // TimeUtil.delaySecond(this.randomInt(5, 15)).then(() => this.startNavigateTo_S());
    }
    async fromNavigateToToFollow() {
        if (this.isFollowing || !this.isNavigateToing)
            return;
        Navigation.stopNavigateTo(this.getMonster);
        this.isNavigateToing = false;
        await this.playIdleAni_S();
        TimeUtil.delaySecond(this.randomFloat(0.5, 1)).then(() => this.startNavigateTo_S());
    }
    async startNavigateTo_S() {
        if (this.getMonsterState != MonsterState$1.Activate)
            return;
        await this.playMoveAni_S();
        let targetPlayer = this.getChasePlayerByMaxDamage();
        targetPlayer ? this.chasePlayerNavigateTo_S(targetPlayer) : this.randomNavigateTo_S();
    }
    randomNavigateTo_S() {
        this.isNavigateToing = true;
        // Navigation.navigateTo(this.getMonster,
        //     this.getRandomTargetPoint_S(),
        //     0, () => {
        //         // console.error(`随机寻路成功`);
        //         this.randomNavigateToComplete_S();
        //     }, () => {
        //         // console.error(`随机寻路失败`);
        //     });
        this.randomNavigateToComplete_S();
    }
    async randomNavigateToComplete_S() {
        this.isNavigateToing = false;
        await this.playIdleAni_S();
        TimeUtil.delaySecond(this.randomInt(1, 3)).then(() => { this.randomAttack_S(); });
    }
    chasePlayerNavigateTo_S(targetPlayer) {
        let dis = mw.Vector.distance(this.getMonster.worldTransform.position, targetPlayer.character.worldTransform.position);
        console.error(`dis:${dis}`);
        if (dis > this.getMonsterWidth) {
            this.directChasePlayerNavigateTo_S(targetPlayer);
        }
        else {
            this.directRandomAttack_S(targetPlayer);
        }
    }
    directChasePlayerNavigateTo_S(targetPlayer) {
        let isFollowSuccess = Navigation.follow(this.getMonster, targetPlayer.character, 0, () => {
            // console.error(`追踪寻路成功 dis = ${mw.Vector.distance(this.getMonster.worldTransform.position,
            //     targetPlayer.character.worldTransform.position)}`);
            this.chasePlayerNavigateToComplete_S(targetPlayer);
        }, () => {
            // console.error(`追踪寻路失败`);
            this.deleteChasePlayer(targetPlayer.character.gameObjectId);
            this.chasePlayerNavigateToComplete_S(targetPlayer);
        });
        // console.error(`isFollowSuccess: ${isFollowSuccess}`);
        if (isFollowSuccess) {
            this.isFollowing = true;
            return;
        }
        this.deleteChasePlayer(targetPlayer.character.gameObjectId);
        this.chasePlayerNavigateToComplete_S(targetPlayer);
    }
    async directRandomAttack_S(targetPlayer) {
        await this.playIdleAni_S();
        this.getMonster.lookAt(targetPlayer.character.worldTransform.position);
        TimeUtil.delaySecond(this.randomFloat(0.5, 1)).then(() => { this.randomAttack_S(); });
    }
    async chasePlayerNavigateToComplete_S(targetPlayer) {
        Navigation.stopFollow(this.getMonster);
        this.isFollowing = false;
        await this.playIdleAni_S();
        this.getMonster.lookAt(targetPlayer.character.worldTransform.position);
        TimeUtil.delaySecond(this.randomFloat(0.5, 1)).then(() => { this.randomAttack_S(); });
    }
    async randomAttack_S() {
        if (this.getMonsterState != MonsterState$1.Activate)
            return;
        this.attackIndex = this.randomInt(0, this.animationInfo.attacks.length - 1);
        let attackAni = await this.playAtkAni_S();
        let attackTime = attackAni.length;
        TimeUtil.delaySecond(this.attackInfo.attackTimePoints[this.attackIndex]).then(() => { this.randomAttackCheck_S(); });
        TimeUtil.delaySecond(attackTime).then(() => { this.playIdleAni_S(); });
        TimeUtil.delaySecond(attackTime + this.randomInt(1, 3)).then(() => this.startNavigateTo_S());
    }
    randomAttackCheck_S() {
        if (this.getMonsterState != MonsterState$1.Activate)
            return;
        this.attackEffect_S();
        let monsterPos = this.getMonster.worldTransform.position;
        let attackOffset = this.attackInfo.attackOffsets[this.attackIndex];
        let startForwardOffset = this.getMonster.worldTransform.getForwardVector().multiply(attackOffset.y);
        let start = new mw.Vector(monsterPos.x + startForwardOffset.x + attackOffset.x, monsterPos.y + startForwardOffset.y, monsterPos.z + startForwardOffset.z + attackOffset.z);
        let endForwardOffset = this.getMonster.worldTransform.getForwardVector().multiply(this.attackInfo.attackLengths[this.attackIndex]);
        let end = new mw.Vector(monsterPos.x + endForwardOffset.x, monsterPos.y + endForwardOffset.y, monsterPos.z + endForwardOffset.z);
        let hitResults = mw.PhysicsService.boxTraceMulti(start, end, this.attackInfo.attackSizes[this.attackIndex], mw.Rotation.zero, { objectsToIgnore: [this.getMonster] }, {});
        if (mw.SystemUtil.isPIE)
            Event.dispatchToAllClient("DrawDebug", start, end, this.attackInfo.attackSizes[this.attackIndex]);
        if (!hitResults || hitResults.length == 0)
            return;
        for (let i = 0; i < hitResults.length; ++i) {
            let hitGo = hitResults[i].gameObject;
            if (hitGo instanceof mw.Character && hitGo?.player) {
                let targetGameObjectId = hitGo?.gameObjectId;
                PrefabEvent.PrefabEvtFight.hurt(this.getMonster.gameObjectId, targetGameObjectId, Math.round((this.level * this.lv) / 10));
            }
        }
    }
    attackEffect_S() {
        let monsterPos = this.getMonster.worldTransform.position;
        let effectOffset = this.attackEffectInfo.posOffsets[this.attackIndex];
        let monsterRot = this.getMonster.worldTransform.rotation;
        let effectLocalOffset = monsterRot.rotateVector(effectOffset);
        let effectPos = new mw.Vector(monsterPos.x + effectLocalOffset.x, monsterPos.y + effectLocalOffset.y, monsterPos.z + effectLocalOffset.z);
        let rotOffset = this.attackEffectInfo.rotOffsets[this.attackIndex];
        let constructorRot = new mw.Rotation(this.getMonster.worldTransform.getForwardVector(), mw.Vector.up);
        let effectRot = new mw.Rotation(constructorRot.x + rotOffset.x, constructorRot.y + rotOffset.y, constructorRot.z + rotOffset.z);
        EffectService.playAtPosition(this.attackEffectInfo.effectIds[this.attackIndex], effectPos, {
            loopCount: 1,
            rotation: effectRot,
            scale: this.attackEffectInfo.effectScales[this.attackIndex]
        });
    }
    onUpdate_S(dt) {
    }
    async playIdleAni_S() {
        let idle = this.animationInfo.idles[this.randomInt(0, this.animationInfo.idles.length - 1)];
        await this.asyncDownloadAsset(idle);
        if (this.getMonsterState != MonsterState$1.Activate)
            return;
        let idleAni = this.getMonster.loadAnimation(idle);
        idleAni.loop = 0;
        idleAni.play();
    }
    async playMoveAni_S() {
        let move = this.animationInfo.moves[this.randomInt(0, this.animationInfo.moves.length - 1)];
        await this.asyncDownloadAsset(move);
        if (this.getMonsterState != MonsterState$1.Activate)
            return;
        let moveAni = this.getMonster.loadAnimation(move);
        moveAni.loop = 0;
        moveAni.play();
    }
    async playAtkAni_S() {
        await this.asyncDownloadAsset(this.animationInfo.attacks[this.attackIndex]);
        if (this.getMonsterState != MonsterState$1.Activate)
            return null;
        let attackAni = this.getMonster.loadAnimation(this.animationInfo.attacks[this.attackIndex]);
        attackAni.play();
        if (this.randomInt(1, 10) >= 7)
            SoundService.play3DSound((this.randomInt(1, 2) == 1) ? "431490" : "431500", this.getMonster);
        return attackAni;
    }
    async playDieAni_S() {
        let die = this.animationInfo.die;
        if (die != "-1") {
            await this.asyncDownloadAsset(die);
            let dieAni = this.getMonster.loadAnimation(die);
            dieAni.play();
            return dieAni;
        }
        return null;
    }
    randomInt(min, max) {
        if (min > max) {
            let temp = min;
            min = max;
            max = temp;
        }
        return Math.floor(Math.random() * (max - min + 1) + min);
    }
    randomFloat(min, max) {
        if (min > max) {
            let temp = min;
            min = max;
            max = temp;
        }
        return Number((Math.random() * (max - min) + min).toFixed(1));
    }
    async asyncDownloadAsset(InAssetId) {
        if (!mw.AssetUtil.assetLoaded(InAssetId)) {
            await mw.AssetUtil.asyncDownloadAsset(InAssetId);
        }
    }
}
__decorate([
    mw.Property({ displayName: "monsterId", group: "Info", tooltip: "monsterId" })
], Monster_Level.prototype, "monsterId", void 0);
__decorate([
    mw.Property({ displayName: "hp", group: "Info", tooltip: "hp", replicated: true, onChanged: "onHpChanged" })
], Monster_Level.prototype, "hp", void 0);
__decorate([
    mw.Property({ displayName: "maxHp", group: "Info", tooltip: "maxHp", replicated: true, onChanged: "onHpChanged" })
], Monster_Level.prototype, "maxHp", void 0);
__decorate([
    mw.Property({ displayName: "levelType", group: "Info", tooltip: "levelType" })
], Monster_Level.prototype, "levelType", void 0);
__decorate([
    mw.Property({ displayName: "levelIndex", group: "Info", tooltip: "levelIndex" })
], Monster_Level.prototype, "levelIndex", void 0);

var foreign8 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    AnimationInfo: AnimationInfo$1,
    AttackEffectInfo: AttackEffectInfo$1,
    AttackInfo: AttackInfo$1,
    get MonsterState () { return MonsterState$1; },
    default: Monster_Level
});

var MonsterState;
(function (MonsterState) {
    MonsterState[MonsterState["Inactivation"] = 0] = "Inactivation";
    MonsterState[MonsterState["Activate"] = 1] = "Activate";
})(MonsterState || (MonsterState = {}));
class AnimationInfo {
    constructor() {
        // @mw.Property({ displayName: "idleAnimation", group: "AnimationInfo", tooltip: "idleAnimation" })
        this.idles = [];
        // @mw.Property({ displayName: "moveAnimation", group: "AnimationInfo", tooltip: "moveAnimation" })
        this.moves = [];
        // @mw.Property({ displayName: "attackAnimation", group: "AnimationInfo", tooltip: "attackAnimation" })
        this.attacks = [];
        // @mw.Property({ displayName: "dieAnimation", group: "AnimationInfo", tooltip: "dieAnimation" })
        this.die = "";
    }
}
class AttackInfo {
    constructor() {
        // @mw.Property({ displayName: "attackTimePoint", group: "AttackInfo", tooltip: "attackTimePoint" })
        this.attackTimePoints = [];
        // @mw.Property({ displayName: "forwardOffset", group: "AttackInfo", tooltip: "forwardOffset" })
        this.attackOffsets = [];
        // @mw.Property({ displayName: "attackRange", group: "AttackInfo", tooltip: "attackRange" })
        this.attackLengths = [];
        // @mw.Property({ displayName: "attackSize", group: "AttackInfo", tooltip: "attackSize" })
        this.attackSizes = [];
        // @mw.Property({ displayName: "damage", group: "AttackInfo", tooltip: "damage" })
        this.damages = [];
    }
}
class AttackEffectInfo {
    constructor() {
        // @mw.Property({ displayName: "effectId", group: "AttackEffectInfo", tooltip: "effectId" })
        this.effectIds = [];
        // @mw.Property({ displayName: "effectPos", group: "AttackEffectInfo", tooltip: "effectPos" })
        this.posOffsets = [];
        // @mw.Property({ displayName: "effectRot", group: "AttackEffectInfo", tooltip: "effectRot" })
        this.rotOffsets = [];
        // @mw.Property({ displayName: "effectScale", group: "AttackEffectInfo", tooltip: "effectScale" })
        this.effectScales = [];
    }
}
class Monster extends Script {
    constructor() {
        super(...arguments);
        this.monsterId = 0;
        this.hp = 0;
        this.maxHp = 0;
        this.monsterType = 1;
        // @mw.Property({ displayName: "moveSpeed", group: "Info", tooltip: "moveSpeed" })
        this.moveSpeed = 450;
        // @mw.Property({ displayName: "pathVectors", group: "Info", tooltip: "pathVectors" })
        this.pathVectors = [mw.Vector.zero];
        // @mw.Property({ displayName: "animationInfo", group: "Info", tooltip: "animationInfo" })
        this.animationInfo = new AnimationInfo();
        // @mw.Property({ displayName: "attackInfo", group: "Info", tooltip: "attackInfo" })
        this.attackInfo = new AttackInfo();
        // @mw.Property({ displayName: "attackEffectInfo", group: "Info", tooltip: "attackEffectInfo" })
        this.attackEffectInfo = new AttackEffectInfo();
        this.monster = null;
        this.monsterState = MonsterState.Inactivation;
        this.monsterWidth = 0;
        this.cubeLifebar = null;
        this.cubeLifebarWidget = null;
        this.isInitLifebar = false;
        this.preHp = 0;
        this.playerModuleS = null;
        this.chasePlayerMap = new Map();
        this.isFollowing = false;
        this.isNavigateToing = false;
        this.attackIndex = 0;
    }
    onStart() {
        this.onStart_CS();
    }
    get getMonster() {
        if (!this.monster) {
            this.monster = this.gameObject;
        }
        return this.monster;
    }
    get getMonsterState() {
        return this.monsterState;
    }
    set setMonsterState(value) {
        this.monsterState = value;
    }
    get getMonsterHeight() {
        return this.getMonster.collisionExtent.z;
    }
    get getMonsterPostion() {
        return this.getMonster.worldTransform.position;
    }
    get getMonsterWidth() {
        if (this.monsterWidth == 0) {
            this.monsterWidth = this.getMonster.collisionExtent.x > this.getMonster.collisionExtent.y ?
                this.getMonster.collisionExtent.x : this.getMonster.collisionExtent.y;
        }
        console.error(`this.monsterWidth:${this.monsterWidth}`);
        return this.monsterWidth + 10;
    }
    async onStart_CS() {
        await this.initCharacter();
        await this.initConfig();
        if (mw.SystemUtil.isClient()) {
            this.onStart_C();
        }
        else if (mw.SystemUtil.isServer()) {
            this.onStart_S();
        }
    }
    async initCharacter() {
        await ModuleService.ready();
        this.monster = this.gameObject;
        this.monster.collisionWithOtherCharacterEnabled = false;
    }
    async initConfig() {
        let monsterElement = GameConfig.MonsterInfo.getElement(this.monsterId);
        if (!monsterElement)
            return;
        await this.initPaths(monsterElement?.PathStr);
        this.animationInfo.idles = monsterElement?.Idles;
        this.animationInfo.moves = monsterElement?.Moves;
        this.animationInfo.attacks = monsterElement?.Attacks;
        this.animationInfo.die = monsterElement?.Die;
        this.attackInfo.attackTimePoints = monsterElement?.AttackTimePoints;
        this.attackInfo.attackOffsets = monsterElement?.AttackOffsets;
        this.attackInfo.attackLengths = monsterElement?.AttackLengths;
        this.attackInfo.attackSizes = monsterElement?.AttackSizes;
        this.attackInfo.damages = monsterElement?.Damages;
        this.attackEffectInfo.effectIds = monsterElement?.EffectIds;
        this.attackEffectInfo.posOffsets = monsterElement?.EffectPosOffsets;
        monsterElement?.EffectRotOffsets?.forEach((value) => {
            this.attackEffectInfo.rotOffsets.push(new mw.Rotation(value));
        });
        this.attackEffectInfo.effectScales = monsterElement?.EffectScales;
        this.moveSpeed = monsterElement?.MoveSpeed;
    }
    async initPaths(pathStr = null) {
        // if (!pathStr || pathStr.length == 0) pathStr = GameConfig.MonsterInfo.getElement(this.monsterId)?.PathStr;
        // let pathParent = await mw.GameObject.asyncFindGameObjectById(pathStr[this.randomInt(0, pathStr.length - 1)]);
        let pathParent = await mw.GameObject.asyncFindGameObjectById(GlobalData.pathStrMap.get(this.monsterType));
        this.pathVectors.length = 0;
        pathParent?.getChildren().forEach((child) => {
            this.pathVectors.push(child.worldTransform.position);
        });
    }
    onUpdate(dt) {
        if (mw.SystemUtil.isClient()) {
            this.onUpdate_C(dt);
        }
        else if (mw.SystemUtil.isServer()) {
            this.onUpdate_S(dt);
        }
    }
    async onStart_C() {
        this.useUpdate = false;
        this.initEvent_C();
        this.preHp = Math.floor(this.maxHp);
        this.initLifebar();
    }
    initEvent_C() {
        Event.addServerListener("DrawDebug", this.bindDrawDebug_C.bind(this));
    }
    bindDrawDebug_C(start, end, halfSize) {
        // console.error(`DrawDebug`);
        mw.PhysicsService.boxTraceMulti(start, end, halfSize, mw.Rotation.zero, { objectsToIgnore: [this.getMonster] }, {
            isDrawDebug: mw.SystemUtil.isPIE,
            duration: 1,
            traceColor: mw.LinearColor.red,
            hitColor: mw.LinearColor.green,
            thickness: 3
        });
    }
    async initLifebar() {
        this.cubeLifebar = UIService.create(EnemyLifebar_Generate$1);
        this.cubeLifebarWidget = await mw.GameObject.asyncSpawn("UIWidget", {
            replicates: false
        });
        this.cubeLifebarWidget.setTargetUIWidget(this.cubeLifebar.uiWidgetBase);
        this.cubeLifebarWidget.widgetSpace = mw.WidgetSpaceMode.OverheadUI;
        this.getMonster.attachToSlot(this.cubeLifebarWidget, mw.HumanoidSlotType.Rings);
        this.cubeLifebarWidget.occlusionEnable = false;
        this.cubeLifebarWidget.scaledByDistanceEnable = true;
        this.cubeLifebarWidget.hideByDistanceEnable = true;
        this.cubeLifebarWidget.headUIMaxVisibleDistance = 10000;
        this.isInitLifebar = true;
        this.onHpChanged();
    }
    onHpChanged() {
        if (!this.isInitLifebar)
            return;
        if (this.preHp <= 0)
            this.preHp = Math.floor(this.maxHp);
        let damage = this.preHp - this.hp;
        if (damage > 0)
            this.preHp = this.hp;
        this.cubeLifebar.mLifebarProgressBar.percent = this.hp / this.maxHp;
        this.cubeLifebar.mHpTextBlock.text = `${Math.floor(this.hp)}/${Math.floor(this.maxHp)}`;
        if (this.hp <= 0) {
            if (this.cubeLifebarWidget.getVisibility()) {
                this.cubeLifebarWidget.setVisibility(false);
            }
        }
        else if (this.hp >= this.maxHp) {
            if (!this.cubeLifebarWidget.getVisibility()) {
                this.cubeLifebarWidget.setVisibility(true);
            }
        }
    }
    onUpdate_C(dt) {
    }
    get getPlayerModuleS() {
        if (this.playerModuleS == null) {
            this.playerModuleS = ModuleService.getModule(PlayerModuleS);
        }
        return this.playerModuleS;
    }
    async onStart_S() {
        this.useUpdate = false;
        this.initEvent_S();
        await this.activate_S();
    }
    initEvent_S() {
        PrefabEvent.PrefabEvtFight.onHit(this.playerAtkEnemy_S.bind(this));
    }
    playerAtkEnemy_S(senderGuid, targetGuid, damage, hitPoint) {
        // console.error(`this.getMonster.gameObjectId:${this.getMonster.gameObjectId} targetGuid:${targetGuid}`);
        if (this.getMonster.gameObjectId != targetGuid || this.getMonsterState == MonsterState.Inactivation)
            return;
        if (this.hp <= 0) {
            this.hp = 0;
            return;
        }
        this.updateChasePlayer(senderGuid, damage);
        let tmpHp = this.hp - damage;
        if (tmpHp > 0) {
            this.hp = tmpHp;
        }
        else {
            this.hp = 0;
            this.die_S();
            this.getPlayerModuleS.playerKillEnemy(senderGuid, this.maxHp, this.monsterId);
        }
        this.getPlayerModuleS.playerAtkEnemyFlyText(senderGuid, hitPoint, damage);
    }
    async die_S() {
        this.dieReset_S();
        //die effect
        let dieAni = await this.playDieAni_S();
        let dieTime = 0;
        if (dieAni) {
            dieTime = dieAni.length;
        }
        else {
            dieTime = 1;
            this.getMonster?.currentAnimation?.stop();
            if (!this.getMonster.ragdollEnabled)
                this.getMonster.ragdollEnabled = true;
        }
        TimeUtil.delaySecond(dieTime).then(() => { this.rebirth_S(); });
    }
    dieReset_S() {
        this.setMonsterState = MonsterState.Inactivation;
        Navigation.stopNavigateTo(this.getMonster);
        Navigation.stopFollow(this.getMonster);
        this.isFollowing = false;
        this.isNavigateToing = false;
        this.chasePlayerMap.clear();
    }
    rebirth_S() {
        let rebirthEffectPos = new mw.Vector(this.getMonsterPostion.x, this.getMonsterPostion.y, this.getMonsterPostion.z - this.getMonsterHeight / 2);
        let rebirthEffect = EffectService.playAtPosition("142948", rebirthEffectPos, { loopCount: 0 });
        // this.initPaths();
        TimeUtil.delaySecond(this.randomInt(5, 10)).then(async () => {
            EffectService.stop(rebirthEffect);
            EffectService.playOnGameObject("142750", this.getMonster, { slotType: mw.HumanoidSlotType.Root });
            this.maxHp = this.maxHp * (this.randomFloat(1.1, 1.5));
            switch (this.monsterType) {
                case 1:
                    if (this.monsterId == 5 || this.monsterId == 6) {
                        if (this.maxHp > 9999)
                            this.maxHp = 9999;
                    }
                    else {
                        if (this.maxHp > 99999)
                            this.maxHp = 99999;
                    }
                    break;
                case 2:
                    if (this.maxHp > 999999)
                        this.maxHp = 999999;
                    break;
                case 3:
                    if (this.maxHp > 9999999)
                        this.maxHp = 9999999;
                    break;
                case 4:
                    if (this.maxHp > 99999999)
                        this.maxHp = 99999999;
                    break;
                case 5:
                    if (this.maxHp > 999999999)
                        this.maxHp = 999999999;
                    break;
                case 6:
                    if (this.maxHp > 9999999999)
                        this.maxHp = 9999999999;
                    break;
            }
            this.hp = this.maxHp;
            if (this.getMonster.ragdollEnabled)
                this.getMonster.ragdollEnabled = false;
            this.setMonsterState = MonsterState.Activate;
            await this.playIdleAni_S();
            TimeUtil.delaySecond(this.randomInt(3, 5)).then(() => this.startNavigateTo_S());
        });
    }
    updateChasePlayer(targetGuid, damage) {
        // console.error(`targetGuid:${targetGuid} damage:${damage}`);
        let totalDamage = 0;
        if (this.chasePlayerMap.has(targetGuid)) {
            totalDamage = this.chasePlayerMap.get(targetGuid);
        }
        totalDamage += damage;
        this.chasePlayerMap.set(targetGuid, totalDamage);
        this.fromNavigateToToFollow();
    }
    deleteChasePlayer(targetGuid) {
        if (!this.chasePlayerMap.has(targetGuid))
            return;
        this.chasePlayerMap.delete(targetGuid);
    }
    getChasePlayerByMaxDamage() {
        if (!this.chasePlayerMap || this.chasePlayerMap.size == 0)
            return null;
        let maxDamage = 0;
        let targetGuid = null;
        this.chasePlayerMap.forEach((value, key) => {
            if (value > maxDamage) {
                maxDamage = value;
                targetGuid = key;
            }
        });
        let targetPlayer = null;
        Player.getAllPlayers().forEach((value) => {
            if (value.character.gameObjectId == targetGuid) {
                targetPlayer = value;
            }
        });
        return targetPlayer;
    }
    async activate_S() {
        this.hp = this.maxHp;
        await this.getMonster.asyncReady();
        this.getMonster.maxWalkSpeed = this.moveSpeed;
        this.setMonsterState = MonsterState.Activate;
        this.isFollowing = false;
        this.isNavigateToing = false;
        TimeUtil.delaySecond(this.randomInt(1, 3)).then(() => { this.playIdleAni_S(); });
        TimeUtil.delaySecond(this.randomInt(5, 15)).then(() => this.startNavigateTo_S());
    }
    async fromNavigateToToFollow() {
        if (this.isFollowing || !this.isNavigateToing)
            return;
        Navigation.stopNavigateTo(this.getMonster);
        this.isNavigateToing = false;
        await this.playIdleAni_S();
        TimeUtil.delaySecond(this.randomFloat(0.5, 1)).then(() => this.startNavigateTo_S());
    }
    async startNavigateTo_S() {
        if (this.getMonsterState != MonsterState.Activate)
            return;
        await this.playMoveAni_S();
        let targetPlayer = this.getChasePlayerByMaxDamage();
        targetPlayer ? this.chasePlayerNavigateTo_S(targetPlayer) : this.randomNavigateTo_S();
    }
    randomNavigateTo_S() {
        this.isNavigateToing = true;
        Navigation.navigateTo(this.getMonster, this.getRandomTargetPoint_S(), 0, () => {
            // console.error(`随机寻路成功`);
            this.randomNavigateToComplete_S();
        }, () => {
            // console.error(`随机寻路失败`);
            this.randomNavigateToComplete_S();
        });
    }
    async randomNavigateToComplete_S() {
        this.isNavigateToing = false;
        await this.playIdleAni_S();
        TimeUtil.delaySecond(this.randomInt(1, 3)).then(() => { this.randomAttack_S(); });
    }
    chasePlayerNavigateTo_S(targetPlayer) {
        let dis = mw.Vector.distance(this.getMonster.worldTransform.position, targetPlayer.character.worldTransform.position);
        console.error(`dis:${dis}`);
        if (dis > this.getMonsterWidth) {
            this.directChasePlayerNavigateTo_S(targetPlayer);
        }
        else {
            this.directRandomAttack_S(targetPlayer);
        }
    }
    directChasePlayerNavigateTo_S(targetPlayer) {
        let isFollowSuccess = Navigation.follow(this.getMonster, targetPlayer.character, 0, () => {
            // console.error(`追踪寻路成功 dis = ${mw.Vector.distance(this.getMonster.worldTransform.position,
            //     targetPlayer.character.worldTransform.position)}`);
            this.chasePlayerNavigateToComplete_S(targetPlayer);
        }, () => {
            // console.error(`追踪寻路失败`);
            this.deleteChasePlayer(targetPlayer.character.gameObjectId);
            this.chasePlayerNavigateToComplete_S(targetPlayer);
        });
        // console.error(`isFollowSuccess: ${isFollowSuccess}`);
        if (isFollowSuccess) {
            this.isFollowing = true;
            return;
        }
        this.deleteChasePlayer(targetPlayer.character.gameObjectId);
        this.chasePlayerNavigateToComplete_S(targetPlayer);
    }
    async directRandomAttack_S(targetPlayer) {
        await this.playIdleAni_S();
        this.getMonster.lookAt(targetPlayer.character.worldTransform.position);
        TimeUtil.delaySecond(this.randomFloat(0.5, 1)).then(() => { this.randomAttack_S(); });
    }
    async chasePlayerNavigateToComplete_S(targetPlayer) {
        Navigation.stopFollow(this.getMonster);
        this.isFollowing = false;
        await this.playIdleAni_S();
        this.getMonster.lookAt(targetPlayer.character.worldTransform.position);
        TimeUtil.delaySecond(this.randomFloat(0.5, 1)).then(() => { this.randomAttack_S(); });
    }
    getRandomTargetPoint_S() {
        let targetVector = this.pathVectors[Utils.getPathIndex(this.pathVectors.length)];
        let targetPos = Navigation.getRandomReachablePointInRadius(targetVector, 500);
        return (!targetPos) ? targetVector : targetPos;
    }
    async randomAttack_S() {
        if (this.getMonsterState != MonsterState.Activate)
            return;
        this.attackIndex = this.randomInt(0, this.animationInfo.attacks.length - 1);
        let attackAni = await this.playAtkAni_S();
        let attackTime = attackAni.length;
        TimeUtil.delaySecond(this.attackInfo.attackTimePoints[this.attackIndex]).then(() => { this.randomAttackCheck_S(); });
        TimeUtil.delaySecond(attackTime).then(() => { this.playIdleAni_S(); });
        TimeUtil.delaySecond(attackTime + this.randomInt(1, 3)).then(() => this.startNavigateTo_S());
    }
    randomAttackCheck_S() {
        if (this.getMonsterState != MonsterState.Activate)
            return;
        this.attackEffect_S();
        let monsterPos = this.getMonster.worldTransform.position;
        let attackOffset = this.attackInfo.attackOffsets[this.attackIndex];
        let startForwardOffset = this.getMonster.worldTransform.getForwardVector().multiply(attackOffset.y);
        let start = new mw.Vector(monsterPos.x + startForwardOffset.x + attackOffset.x, monsterPos.y + startForwardOffset.y, monsterPos.z + startForwardOffset.z + attackOffset.z);
        let endForwardOffset = this.getMonster.worldTransform.getForwardVector().multiply(this.attackInfo.attackLengths[this.attackIndex]);
        let end = new mw.Vector(monsterPos.x + endForwardOffset.x, monsterPos.y + endForwardOffset.y, monsterPos.z + endForwardOffset.z);
        let hitResults = mw.PhysicsService.boxTraceMulti(start, end, this.attackInfo.attackSizes[this.attackIndex], mw.Rotation.zero, { objectsToIgnore: [this.getMonster] }, {});
        if (mw.SystemUtil.isPIE)
            Event.dispatchToAllClient("DrawDebug", start, end, this.attackInfo.attackSizes[this.attackIndex]);
        if (!hitResults || hitResults.length == 0)
            return;
        for (let i = 0; i < hitResults.length; ++i) {
            let hitGo = hitResults[i].gameObject;
            if (hitGo instanceof mw.Character && hitGo?.player) {
                let targetGameObjectId = hitGo?.gameObjectId;
                if (this.monsterType == 6) {
                    PrefabEvent.PrefabEvtFight.hurt(this.getMonster.gameObjectId, targetGameObjectId, Math.round(this.maxHp / (GlobalData.monsterHurt * 10)));
                }
                else {
                    PrefabEvent.PrefabEvtFight.hurt(this.getMonster.gameObjectId, targetGameObjectId, Math.round(this.maxHp / GlobalData.monsterHurt));
                }
            }
        }
    }
    attackEffect_S() {
        let monsterPos = this.getMonster.worldTransform.position;
        let effectOffset = this.attackEffectInfo.posOffsets[this.attackIndex];
        let monsterRot = this.getMonster.worldTransform.rotation;
        let effectLocalOffset = monsterRot.rotateVector(effectOffset);
        let effectPos = new mw.Vector(monsterPos.x + effectLocalOffset.x, monsterPos.y + effectLocalOffset.y, monsterPos.z + effectLocalOffset.z);
        let rotOffset = this.attackEffectInfo.rotOffsets[this.attackIndex];
        let constructorRot = new mw.Rotation(this.getMonster.worldTransform.getForwardVector(), mw.Vector.up);
        let effectRot = new mw.Rotation(constructorRot.x + rotOffset.x, constructorRot.y + rotOffset.y, constructorRot.z + rotOffset.z);
        EffectService.playAtPosition(this.attackEffectInfo.effectIds[this.attackIndex], effectPos, {
            loopCount: 1,
            rotation: effectRot,
            scale: this.attackEffectInfo.effectScales[this.attackIndex]
        });
    }
    onUpdate_S(dt) {
    }
    async playIdleAni_S() {
        let idle = this.animationInfo.idles[this.randomInt(0, this.animationInfo.idles.length - 1)];
        await this.asyncDownloadAsset(idle);
        if (this.getMonsterState != MonsterState.Activate)
            return;
        let idleAni = this.getMonster.loadAnimation(idle);
        idleAni.loop = 0;
        idleAni.play();
    }
    async playMoveAni_S() {
        let move = this.animationInfo.moves[this.randomInt(0, this.animationInfo.moves.length - 1)];
        await this.asyncDownloadAsset(move);
        if (this.getMonsterState != MonsterState.Activate)
            return;
        let moveAni = this.getMonster.loadAnimation(move);
        moveAni.loop = 0;
        moveAni.play();
    }
    async playAtkAni_S() {
        await this.asyncDownloadAsset(this.animationInfo.attacks[this.attackIndex]);
        if (this.getMonsterState != MonsterState.Activate)
            return null;
        let attackAni = this.getMonster.loadAnimation(this.animationInfo.attacks[this.attackIndex]);
        attackAni.play();
        return attackAni;
    }
    async playDieAni_S() {
        let die = this.animationInfo.die;
        if (die != "-1") {
            await this.asyncDownloadAsset(die);
            let dieAni = this.getMonster.loadAnimation(die);
            dieAni.play();
            return dieAni;
        }
        return null;
    }
    randomInt(min, max) {
        if (min > max) {
            let temp = min;
            min = max;
            max = temp;
        }
        return Math.floor(Math.random() * (max - min + 1) + min);
    }
    randomFloat(min, max) {
        if (min > max) {
            let temp = min;
            min = max;
            max = temp;
        }
        return Number((Math.random() * (max - min) + min).toFixed(1));
    }
    async asyncDownloadAsset(InAssetId) {
        if (!mw.AssetUtil.assetLoaded(InAssetId)) {
            await mw.AssetUtil.asyncDownloadAsset(InAssetId);
        }
    }
}
__decorate([
    mw.Property({ displayName: "monsterId", group: "Info", tooltip: "monsterId" })
], Monster.prototype, "monsterId", void 0);
__decorate([
    mw.Property({ displayName: "hp", group: "Info", tooltip: "hp", replicated: true, onChanged: "onHpChanged" })
], Monster.prototype, "hp", void 0);
__decorate([
    mw.Property({ displayName: "maxHp", group: "Info", tooltip: "maxHp", replicated: true, onChanged: "onHpChanged" })
], Monster.prototype, "maxHp", void 0);
__decorate([
    mw.Property({ displayName: "monsterType", group: "Info", tooltip: "monsterType" })
], Monster.prototype, "monsterType", void 0);

var foreign9 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    AnimationInfo: AnimationInfo,
    AttackEffectInfo: AttackEffectInfo,
    AttackInfo: AttackInfo,
    get MonsterState () { return MonsterState; },
    default: Monster
});

var MyClearDayNight_1;
let MyClearDayNight = MyClearDayNight_1 = class MyClearDayNight extends mw.Script {
    constructor() {
        // private hudModuleC: HUDModuleC = null;
        // private get getHUDModuleC(): HUDModuleC {
        //     if (this.hudModuleC == null) {
        //         this.hudModuleC = ModuleService.getModule(HUDModuleC);
        //     }
        //     return this.hudModuleC;
        // }
        // @Core.Property({ displayName: "预加载" })
        // preloadAssets: string = "95623,108338,59832";
        super(...arguments);
        /** S&C */
        /**时钟Count，每现实秒+1 */
        this.CountGo = 0;
        /**日夜功能时间膨胀系数，默认1，>1变慢，<1变快，
         * 推荐取值
         * 1 - 24分钟过完一天(慢，mc类似)；
         * 0.5 - 12分钟过完一天(较慢)；
         * 0.25 - 6分钟过完一天(较快)；
         * 0.04 - 快速预览日夜循环功能(快)；
         */
        this.DayNightTimeScale = 0.25;
        /**距离下一阶段还要多少Count，用于连接后、重连后的时间同步，客户端==0已经和服务器同步过了，客户端>0则需要同步 */
        this.NextStageTime = -1;
        /**下一个阶段是什么 */
        // @Core.Property({ replicated: true, onChanged: "onNextStageChange" })
        this.NextStage = "清晨";
    }
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
        MyClearDayNight_1.instance = this;
        this.useUpdate = true;
        if (SystemUtil.isServer()) {
            setInterval(() => {
                /**清晨 */
                if (this.CountGo == Math.round(360 * this.DayNightTimeScale)) {
                    //     console.log("由清晨到中午的过程，上午");
                    this.NextStage = "中午";
                }
                /**中午 */
                if (this.CountGo == Math.round(720 * this.DayNightTimeScale)) {
                    //     console.log("由中午到傍晚的过程，下午");
                    this.NextStage = "傍晚";
                }
                /**傍晚 */
                if (this.CountGo == Math.round(1080 * this.DayNightTimeScale)) {
                    //     console.log("由傍晚到凌晨的过程，晚上");
                    this.NextStage = "凌晨";
                }
                /**凌晨*/
                if (this.CountGo >= Math.round(1440 * this.DayNightTimeScale)) {
                    // 重置服务器计时器
                    this.CountGo = 0;
                    // console.log("由凌晨进入清晨的过程，凌晨");
                    this.NextStage = "清晨";
                    // 进行全图时间校准
                    Player.getAllPlayers().forEach((player) => {
                        this.SyncTimeToClient(player, this.CountGo, this.NextStage);
                    });
                }
                Console.log("[CurTime] " + this.getCurTime());
                // 时钟，每秒+1
                this.CountGo++;
            }, 1000);
            // 玩家进游戏，同步下发当前服务器时间并改天换日
            Player.onPlayerJoin.add((player) => {
                setTimeout(() => {
                    this.SyncTimeToClient(player, this.CountGo, this.NextStage);
                }, 2000);
            });
            // 玩家从后台切回游戏，同步下发当前服务器时间并改天换日
            Event.addClientListener("I'm back, Sync time pls", (player) => {
                setTimeout(() => {
                    this.SyncTimeToClient(player, this.CountGo, this.NextStage);
                }, 2000);
            });
        }
        if (SystemUtil.isClient()) {
            // this.CheckWorldObj();
            Skybox.moonTextureID = "95623";
            setInterval(() => {
                /**清晨 */
                if (this.CountGo == Math.round(360 * this.DayNightTimeScale)) {
                    // console.log("由清晨到中午的过程，上午");
                    this.ChangeSky(-80, -90, 8, true, 1.2, 1.57);
                    Skybox.skyDomeTextureID = "108338";
                    this.NextStage = "中午";
                }
                /**中午 */
                if (this.CountGo == Math.round(720 * this.DayNightTimeScale)) {
                    // console.log("由中午到傍晚的过程，下午");
                    this.ChangeSky(100, 0, 2, true, 0.3, 0.3);
                    this.NextStage = "傍晚";
                }
                /**傍晚 */
                if (this.CountGo == Math.round(1080 * this.DayNightTimeScale)) {
                    // console.log("由傍晚到凌晨的过程，晚上");
                    this.ChangeSky(-80, -90, 0.5, false, 0.05, 0.4);
                    Skybox.skyDomeTextureID = "59832";
                    this.NextStage = "凌晨";
                }
                /**凌晨*/
                if (this.CountGo >= Math.round(1440 * this.DayNightTimeScale)) {
                    // 重置计时器
                    this.CountGo = 0;
                    // console.log("由凌晨进入清晨的过程，凌晨");
                    this.ChangeSky(100, 0, 1, false, 0.2, 0.2);
                    this.NextStage = "清晨";
                }
                // this.getHUDModuleC.showTime(this.getCurTime());
                Console.log("[CurTime] " + this.getCurTime());
                // 时钟，每秒+1
                this.CountGo++;
            }, 1000);
            // 客户端重连回来，向服务器报道
            Player.onPlayerReconnect.add(() => {
                Event.dispatchToServer("I'm back, Sync time pls");
            });
        }
    }
    ////////////////////////////////////
    //    实用的方法
    ////////////////////////////////////
    /**[双端可用] 获取当前时间 HH:MM */
    getCurTime() {
        return this.CountToTime(this.CountGo);
    }
    ////////////////////////////////////
    //    开发时用到的接口
    ////////////////////////////////////
    /**[双端] 根据现在的countgo，更新下一个状态 */
    UpdateNextStage() {
        if (this.CountGo >= Math.round(720 * this.DayNightTimeScale)) {
            if (this.CountGo >= Math.round(1080 * this.DayNightTimeScale)) {
                this.NextStage = "凌晨";
            }
            else {
                this.NextStage = "傍晚";
            }
        }
        else {
            if (this.CountGo >= Math.round(360 * this.DayNightTimeScale)) {
                this.NextStage = "中午";
            }
            else {
                this.NextStage = "清晨";
            }
        }
    }
    /**[服务端→客户端]服务端向指定客户端同步时间
     * @param player 指定客户端玩家
     * @param count count时间
     */
    SyncTimeToClient(player, count, nextStage) {
        if (SystemUtil.isClient()) {
            // 将count数同步到当前客户端
            this.CountGo = count;
            // 计算要到下一个阶段的时间count数
            this.NextStageTime = Math.round(Math.round(360 * this.DayNightTimeScale) - (this.CountGo % Math.round(360 * this.DayNightTimeScale)));
            // 同步改天换日
            if (nextStage == "中午") {
                this.ChangeSky(100, 0, 1, false, 0.2, 0.2, 0.02);
                setTimeout(() => {
                    this.ChangeSky(-80, -90, 8, true, 1.2, 1.57, this.NextStageTime);
                }, 60);
            }
            if (nextStage == "傍晚") {
                this.ChangeSky(-80, -90, 8, true, 1.2, 1.57, 0.02);
                setTimeout(() => {
                    this.ChangeSky(100, 0, 2, true, 0.3, 0.3, this.NextStageTime);
                }, 60);
            }
            if (nextStage == "凌晨") {
                this.ChangeSky(100, 0, 2, true, 0.3, 0.3, 0.02);
                setTimeout(() => {
                    this.ChangeSky(-80, -90, 0.5, false, 0.05, 0.4, this.NextStageTime);
                }, 60);
            }
            if (nextStage == "清晨") {
                this.ChangeSky(-80, -90, 0.5, false, 0.05, 0.4, 0.02);
                setTimeout(() => {
                    this.ChangeSky(100, 0, 1, false, 0.2, 0.2, this.NextStageTime);
                }, 60);
            }
        }
    }
    /** [客户端]改天换日的核心方法，使用Tween动画实现，纯客户端调用
     * @param yawAngle [瞬变] 日月朝向角度
     * @param pitchAngle [渐变] 俯仰角度
     * @param Dir_intensity [渐变] 日月光照强度
     * @param ChangeIntoSun [瞬变] 切换太阳和月亮，T=切换进太阳，F=切换进月亮
     * @param skyDomeIntensity [渐变] 天空盒亮度
     * @param Sky_intensity [渐变] 全局光照
     * @param time [可选] 改天换日所用Count，不带则用默认的时间360*scale
     */
    // @Core.Function(Core.Client, Core.Multicast)
    ChangeSky(yawAngle, pitchAngle, Dir_intensity, ChangeIntoSun, skyDomeIntensity, Sky_intensity, time) {
        if (SystemUtil.isServer()) {
            return;
        }
        if (time == undefined) {
            time = 360 * this.DayNightTimeScale;
        }
        time *= 1000;
        // this.CheckWorldObj();
        Lighting.yawAngle = yawAngle;
        Skybox.sunVisible = ChangeIntoSun;
        Skybox.moonVisible = !ChangeIntoSun;
        new Tween({
            a: Lighting.brightness,
            b: Lighting.pitchAngle,
            c: Skybox.skyDomeIntensity,
            d: Lighting.brightness
        }).to({
            a: Dir_intensity,
            b: pitchAngle,
            c: skyDomeIntensity,
            d: Sky_intensity
        }, time).onUpdate((obj) => {
            Lighting.brightness = obj.a;
            Lighting.pitchAngle = obj.b;
            Skybox.skyDomeIntensity = obj.c;
            Lighting.brightness = obj.d;
        }).start();
    }
    ////////////////////////////////////
    //    开发时用到的工具
    ///////////////////////////////////
    /**转换一个整数为分：秒格式
     * @param int 传入的整数，没做容错，别传负数啦
     * @param add0 [可选] 是否补零
     * @returns 返回规整后的分：秒 如12：05
     */
    CountToTime(int, add0) {
        int = int / this.DayNightTimeScale;
        let mm = parseInt(int / 60 + "") + "";
        let ss = Math.round(int - 60 * parseInt(int / 60 + "")) + "";
        if (add0 == null || add0 == true) {
            if (mm.length == 1) {
                mm = "0" + mm;
            }
            if (ss.length == 1) {
                ss = "0" + ss;
            }
        }
        return mm + ":" + ss + "";
    }
    /**将分：秒格式的字符串转换为整数
     * @param timeStr 传入的字符串，格式为 "mm:ss"
     * @returns 返回相同时间的整数
     */
    TimeToCount(timeStr) {
        // 将字符串分解为分和秒
        let [mm, ss] = timeStr.split(":").map(Number);
        // 转换时间为总秒数
        let time = mm * 60 + ss;
        // 返回转换后的整数，需要注意的是如果在CountToTime中使用了DayNightTimeScale来缩放，这里也需要相应的缩放
        return time * this.DayNightTimeScale;
    }
    /**周期函数 每帧执行
     * 此函数执行需要将this.useUpdate赋值为true
     * @param dt 当前帧与上一帧的延迟 / 秒
     */
    onUpdate(dt) {
        TweenUtil.TWEEN.update();
    }
};
__decorate([
    mw.RemoteFunction(mw.Client)
], MyClearDayNight.prototype, "SyncTimeToClient", null);
MyClearDayNight = MyClearDayNight_1 = __decorate([
    Component
], MyClearDayNight);
var MyClearDayNight$1 = MyClearDayNight;

var foreign10 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: MyClearDayNight$1
});

// import { GeneralManager, } from '../Modified027Editor/ModifiedStaticAPI';
// // declare global {
// //     var UE: any;
// // }
// class ObjMeshCalss {
//     public objMesh: mw.Model = null;
//     public objLocation: mw.Vector = mw.Vector.zero;
//     public objRotation: mw.Rotation = mw.Rotation.zero;
//     public isCanAtk: boolean = true;
// }
// export class ObjImpulseC extends ModuleC<ObjImpulseS, null> {
//     protected onStart(): void {
//         InputUtil.onKeyDown(mw.Keys.One, () => {
//             this.server.net_addImpulseToObj("153AD16B", 1000);
//         });
//         InputUtil.onKeyDown(mw.Keys.Two, () => {
//             this.server.net_addImpulseToObj("3E5773A6", 1000);
//         });
//         InputUtil.onKeyDown(mw.Keys.Three, () => {
//             this.server.net_addImpulseToObj("2C72ED5E", 1000);
//         });
//         InputUtil.onKeyDown(mw.Keys.Four, () => {
//             this.server.net_addImpulseToObj("1DA1E7D4", 1000);
//         });
//     }
//     public addImpulseToObj(objGuid: string, force: number): void {
//         this.server.net_addImpulseToObj(objGuid, force);
//     }
// }
// export class ObjImpulseS extends ModuleS<ObjImpulseC, null> {
//     private objGuids: string[] = ["1869E986", "1519A30F", "2B23B7E6", "3191EB52"];
//     private objMeshClassMap: Map<string, ObjMeshCalss> = new Map<string, ObjMeshCalss>();
//     protected onStart(): void {
//         this.findObjs();
//     }
//     private async findObjs() {
//         for (let i = 0; i < this.objGuids.length; ++i) {
//             let objMesh = await GameObject.asyncFindGameObjectById(this.objGuids[i]) as mw.Model;
//             if (objMesh) {
//                 let objMeshClass = new ObjMeshCalss();
//                 objMeshClass.objMesh = objMesh;
//                 objMeshClass.objLocation = objMesh.worldTransform.position;
//                 objMeshClass.objRotation = objMesh.worldTransform.rotation;
//                 this.objMeshClassMap.set(this.objGuids[i], objMeshClass);
//             }
//         }
//     }
//     public net_addImpulseToObj(objGuid: string, force: number): void {
//         this.addImpulseToObj(this.currentPlayer, objGuid, force);
//     }
//     public addImpulseToObj(player: mw.Player, objGuid: string, force: number): void {
//         if (!this.objMeshClassMap.has(objGuid)) return;
//         let objMeshClass = this.objMeshClassMap.get(objGuid);
//         if (!objMeshClass.isCanAtk) return;
//         objMeshClass.isCanAtk = false;
//         let objMesh = objMeshClass.objMesh;
//         let objLocation = objMesh.worldTransform.position;
//         let objRotation = objMesh.worldTransform.rotation;
//         objMesh.physicsEnabled = true;
//         let playerLoc = player.character.worldTransform.position;
//         let forceVector = new mw.Vector(objLocation.x - playerLoc.x, objLocation.y - playerLoc.y, 0).normalize();
//         const uForce = new UE.Vector();
//         uForce.X = forceVector.x * force;
//         uForce.Y = forceVector.y * force;
//         uForce.Z = forceVector.z * force;
//         TimeUtil.delayExecute(() => {
//             objMesh["privateActor"].GetStaticMeshComponent().AddImpulse(uForce, "None", true);
//             SoundService.play3DSound(
//                 "47430",
//                 objLocation,
//                 1,
//                 1,
//                 // { radius: 300, falloffDistance: 1000 }
//             );
//             GeneralManager.rpcPlayEffectAtLocation(
//                 "174248",
//                 objLocation,
//                 1,
//                 mw.Rotation.zero,
//                 mw.Vector.one.multiply(5),
//             );
//         }, 1);
//         TimeUtil.delaySecond(5).then(() => {
//             objMeshClass.isCanAtk = true;
//             objMesh.physicsEnabled = false;
//             objMesh.worldTransform.position = (objLocation);
//             objMesh.worldTransform.rotation = (objRotation);
//         });
//     }
// }

var foreign15 = /*#__PURE__*/Object.freeze({
    __proto__: null
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/common/TestPanel.ui
 * TIME: 2024.11.04-19.49.51
 */
let TestPanel_Generate = class TestPanel_Generate extends UIScript {
    get mImage() {
        if (!this.mImage_Internal && this.uiWidgetBase) {
            this.mImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mImage');
        }
        return this.mImage_Internal;
    }
    get mButton() {
        if (!this.mButton_Internal && this.uiWidgetBase) {
            this.mButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mButton');
        }
        return this.mButton_Internal;
    }
    get mInputBox() {
        if (!this.mInputBox_Internal && this.uiWidgetBase) {
            this.mInputBox_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mInputBox');
        }
        return this.mInputBox_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        this.mButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mButton");
        });
        this.mButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        //按钮多语言
        //文本多语言
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
TestPanel_Generate = __decorate([
    UIBind('UI/common/TestPanel.ui')
], TestPanel_Generate);
var TestPanel_Generate$1 = TestPanel_Generate;

var foreign108 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: TestPanel_Generate$1
});

/**
 * AUTHOR: 爱玩游戏的小胖子
 * TIME: 2023.07.30-11.41.00
 */
class TestPanel extends TestPanel_Generate$1 {
    /**
     * 构造UI文件成功后，在合适的时机最先初始化一次
     */
    onStart() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerMiddle;
        this.mButton.onClicked.add(this.changeIconUrlRequest.bind(this));
    }
    async changeIconUrlRequest() {
        // 获取输入框中输入的资源库ID
        const resGuid = this.mInputBox.text;
        // // 请求资源的ICON信息
        // await mw.assetIDChangeIconUrlRequest([resGuid]);
        // // 获得资源Icon信息
        // const res = mw.getAssetIconDataByAssetID(resGuid);
        // 通过资源信息设置 设置图片
        // this.mImage.imageGuid = resGuid;
        // mw.assetIDChangeIconUrlRequest([resGuid]).then(() => {
        // 	// 获得资源Icon信息
        // 	const res = mw.getAssetIconDataByAssetID(resGuid);
        // 	// 通过资源信息设置 设置图片
        // 	this.mImage.imageGuid = (res.assetID);
        // });
        const userInstance = ColdWeapon.getInstance();
        let w = GameConfig.ColdWeapon.getElement(Number(resGuid));
        userInstance.register(w);
    }
}

var foreign16 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: TestPanel
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/ArkModule/ArkItem.ui
 * TIME: 2024.11.04-19.49.52
 */
let ArkItem_Generate = class ArkItem_Generate extends UIScript {
    get mIconImage() {
        if (!this.mIconImage_Internal && this.uiWidgetBase) {
            this.mIconImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/mIconImage');
        }
        return this.mIconImage_Internal;
    }
    get mDayTextBlock() {
        if (!this.mDayTextBlock_Internal && this.uiWidgetBase) {
            this.mDayTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/mIconImage/mDayTextBlock');
        }
        return this.mDayTextBlock_Internal;
    }
    get mRewardCanvas() {
        if (!this.mRewardCanvas_Internal && this.uiWidgetBase) {
            this.mRewardCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/mRewardCanvas');
        }
        return this.mRewardCanvas_Internal;
    }
    get mRewardTextBlock() {
        if (!this.mRewardTextBlock_Internal && this.uiWidgetBase) {
            this.mRewardTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/mRewardCanvas/RewardBgImage/mRewardTextBlock');
        }
        return this.mRewardTextBlock_Internal;
    }
    get mTipsCanvas() {
        if (!this.mTipsCanvas_Internal && this.uiWidgetBase) {
            this.mTipsCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/mTipsCanvas');
        }
        return this.mTipsCanvas_Internal;
    }
    get mTipsIconImage() {
        if (!this.mTipsIconImage_Internal && this.uiWidgetBase) {
            this.mTipsIconImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/mTipsCanvas/mTipsIconImage');
        }
        return this.mTipsIconImage_Internal;
    }
    get mTipsTextBlock() {
        if (!this.mTipsTextBlock_Internal && this.uiWidgetBase) {
            this.mTipsTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/mTipsCanvas/mTipsTextBlock');
        }
        return this.mTipsTextBlock_Internal;
    }
    get mHasCanvas() {
        if (!this.mHasCanvas_Internal && this.uiWidgetBase) {
            this.mHasCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/mHasCanvas');
        }
        return this.mHasCanvas_Internal;
    }
    get mMaskImage() {
        if (!this.mMaskImage_Internal && this.uiWidgetBase) {
            this.mMaskImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/mHasCanvas/mMaskImage');
        }
        return this.mMaskImage_Internal;
    }
    get mMaskBgImage() {
        if (!this.mMaskBgImage_Internal && this.uiWidgetBase) {
            this.mMaskBgImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/mHasCanvas/mMaskBgImage');
        }
        return this.mMaskBgImage_Internal;
    }
    get mHasTextBlock() {
        if (!this.mHasTextBlock_Internal && this.uiWidgetBase) {
            this.mHasTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/mHasCanvas/mMaskBgImage/mHasTextBlock');
        }
        return this.mHasTextBlock_Internal;
    }
    get mClickButton() {
        if (!this.mClickButton_Internal && this.uiWidgetBase) {
            this.mClickButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/mClickButton');
        }
        return this.mClickButton_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        this.mClickButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mClickButton");
        });
        this.mClickButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mDayTextBlock);
        this.initLanguage(this.mRewardTextBlock);
        this.initLanguage(this.mTipsTextBlock);
        this.initLanguage(this.mHasTextBlock);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
ArkItem_Generate = __decorate([
    UIBind('UI/module/ArkModule/ArkItem.ui')
], ArkItem_Generate);
var ArkItem_Generate$1 = ArkItem_Generate;

var foreign119 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: ArkItem_Generate$1
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/ArkModule/ArkPanel.ui
 * TIME: 2024.11.04-19.49.52
 */
let ArkPanel_Generate = class ArkPanel_Generate extends UIScript {
    get mTitleTextBlock() {
        if (!this.mTitleTextBlock_Internal && this.uiWidgetBase) {
            this.mTitleTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/TitleBgImage/mTitleTextBlock');
        }
        return this.mTitleTextBlock_Internal;
    }
    get mCanvas() {
        if (!this.mCanvas_Internal && this.uiWidgetBase) {
            this.mCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mCanvas');
        }
        return this.mCanvas_Internal;
    }
    get mUserIdTextBlock() {
        if (!this.mUserIdTextBlock_Internal && this.uiWidgetBase) {
            this.mUserIdTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mCanvas/mUserIdTextBlock');
        }
        return this.mUserIdTextBlock_Internal;
    }
    get mArkCanvas() {
        if (!this.mArkCanvas_Internal && this.uiWidgetBase) {
            this.mArkCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mArkCanvas');
        }
        return this.mArkCanvas_Internal;
    }
    get mArkBgImage() {
        if (!this.mArkBgImage_Internal && this.uiWidgetBase) {
            this.mArkBgImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mArkCanvas/mArkBgImage');
        }
        return this.mArkBgImage_Internal;
    }
    get mIconArkImage() {
        if (!this.mIconArkImage_Internal && this.uiWidgetBase) {
            this.mIconArkImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mArkCanvas/mIconArkImage');
        }
        return this.mIconArkImage_Internal;
    }
    get mArkCountTextBlock() {
        if (!this.mArkCountTextBlock_Internal && this.uiWidgetBase) {
            this.mArkCountTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mArkCanvas/mArkCountTextBlock');
        }
        return this.mArkCountTextBlock_Internal;
    }
    get mCloseButton() {
        if (!this.mCloseButton_Internal && this.uiWidgetBase) {
            this.mCloseButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mCloseButton');
        }
        return this.mCloseButton_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        this.mCloseButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mCloseButton");
        });
        this.mCloseButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mTitleTextBlock);
        this.initLanguage(this.mUserIdTextBlock);
        this.initLanguage(this.mArkCountTextBlock);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
ArkPanel_Generate = __decorate([
    UIBind('UI/module/ArkModule/ArkPanel.ui')
], ArkPanel_Generate);
var ArkPanel_Generate$1 = ArkPanel_Generate;

var foreign120 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: ArkPanel_Generate$1
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/ArkModule/GiftBagPanel.ui
 * TIME: 2024.11.04-19.49.52
 */
let GiftBagPanel_Generate = class GiftBagPanel_Generate extends UIScript {
    get mTitleTextBlock() {
        if (!this.mTitleTextBlock_Internal && this.uiWidgetBase) {
            this.mTitleTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/TitleBgImage/mTitleTextBlock');
        }
        return this.mTitleTextBlock_Internal;
    }
    get mInputBox() {
        if (!this.mInputBox_Internal && this.uiWidgetBase) {
            this.mInputBox_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mInputBox');
        }
        return this.mInputBox_Internal;
    }
    get mInputTipsTextBlock() {
        if (!this.mInputTipsTextBlock_Internal && this.uiWidgetBase) {
            this.mInputTipsTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mInputBox/mInputTipsTextBlock');
        }
        return this.mInputTipsTextBlock_Internal;
    }
    get mGetButton() {
        if (!this.mGetButton_Internal && this.uiWidgetBase) {
            this.mGetButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mGetButton');
        }
        return this.mGetButton_Internal;
    }
    get mGetTextBlock() {
        if (!this.mGetTextBlock_Internal && this.uiWidgetBase) {
            this.mGetTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mGetButton/mGetTextBlock');
        }
        return this.mGetTextBlock_Internal;
    }
    get mCloseButton() {
        if (!this.mCloseButton_Internal && this.uiWidgetBase) {
            this.mCloseButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mCloseButton');
        }
        return this.mCloseButton_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        this.mGetButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mGetButton");
        });
        this.mGetButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mCloseButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mCloseButton");
        });
        this.mCloseButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mTitleTextBlock);
        this.initLanguage(this.mInputTipsTextBlock);
        this.initLanguage(this.mGetTextBlock);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
GiftBagPanel_Generate = __decorate([
    UIBind('UI/module/ArkModule/GiftBagPanel.ui')
], GiftBagPanel_Generate);
var GiftBagPanel_Generate$1 = GiftBagPanel_Generate;

var foreign121 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: GiftBagPanel_Generate$1
});

const rewardDiamond = new Map();
rewardDiamond.set("4R8o2Ca4XZM0001M5", { isLimit: false, icon: "103215", rewardCount: 100, price: 100, itemPos: new mw.Vector2(178, 0) });
rewardDiamond.set("4kDVCA92LDZ0001M6", { isLimit: false, icon: "103217", rewardCount: 600, price: 600, itemPos: new mw.Vector2(422, 0) });
rewardDiamond.set("ASo9Gdekb5M0001M7", { isLimit: false, icon: "103218", rewardCount: 1000, price: 1000, itemPos: new mw.Vector2(750, 0) });
rewardDiamond.set("30A0419vSs50001M8", { isLimit: true, icon: "103221", rewardCount: 1000, price: 600, itemPos: new mw.Vector2(178, 320) });
rewardDiamond.set("6ye4kcgqLtk0001M9", { isLimit: true, icon: "103218", rewardCount: 3000, price: 1800, itemPos: new mw.Vector2(422, 320) });
rewardDiamond.set("2tt47nQ6Txb0001MA", { isLimit: true, icon: "103218", rewardCount: 10800, price: 6800, itemPos: new mw.Vector2(750, 320) });
const arkIcon = "312541";
class ArkItem extends ArkItem_Generate$1 {
    constructor() {
        super(...arguments);
        this.arkModuleC = null;
        this.commodityId = "";
    }
    get getArkModuleC() {
        if (!this.arkModuleC) {
            this.arkModuleC = ModuleService.getModule(ArkModuleC);
        }
        return this.arkModuleC;
    }
    onStart() {
        this.initTextBlock();
        this.bindButton();
    }
    initTextBlock() {
        if (GlobalData.languageId == 0) {
            this.mRewardTextBlock.fontSize = 20;
            this.mDayTextBlock.fontSize = 15;
        }
        else {
            this.mRewardTextBlock.fontSize = 28;
            this.mDayTextBlock.fontSize = 25;
        }
    }
    bindButton() {
        this.mClickButton.onClicked.add(this.addClickButton.bind(this));
    }
    addClickButton() {
        this.getArkModuleC.placeOrder(this.commodityId, () => {
            if (rewardDiamond.get(this.commodityId).isLimit) {
                this.mHasCanvas.visibility = mw.SlateVisibility.SelfHitTestInvisible;
                this.mHasTextBlock.text = GameConfig.Language.Text_Soldouttoday.Value;
            }
        });
    }
    initArkItem(commodityId) {
        this.commodityId = commodityId;
        this.updateUI();
    }
    updateUI() {
        if (rewardDiamond.get(this.commodityId).isLimit) {
            this.mDayTextBlock.text = GameConfig.Language.Text_Limitedtoonepurchaseperday.Value;
            if (!this.getArkModuleC.isBuy(this.commodityId)) {
                this.mHasCanvas.visibility = mw.SlateVisibility.Collapsed;
            }
            else {
                this.mHasCanvas.visibility = mw.SlateVisibility.SelfHitTestInvisible;
                this.mHasTextBlock.text = GameConfig.Language.Text_Soldouttoday.Value;
            }
        }
        else {
            this.mDayTextBlock.text = GameConfig.Language.Text_Nopurchaserestrictions.Value;
            this.mHasCanvas.visibility = mw.SlateVisibility.Collapsed;
        }
        let data = rewardDiamond.get(this.commodityId);
        this.mIconImage.imageGuid = data.icon;
        this.mRewardTextBlock.text = `${GameConfig.Language.Text_Diamonds.Value} +${data.rewardCount}`;
        this.mTipsIconImage.imageGuid = arkIcon;
        this.mTipsTextBlock.text = `${data.price}`;
    }
}
class ArkPanel extends ArkPanel_Generate$1 {
    constructor() {
        super(...arguments);
        this.hudPanel = null;
        this.arkItems = [];
    }
    get getHudPanel() {
        if (!this.hudPanel) {
            this.hudPanel = mw.UIService.getUI(HUDPanel);
        }
        return this.hudPanel;
    }
    onStart() {
        this.initUI();
        this.bindButton();
    }
    initUI() {
        this.mIconArkImage.imageGuid = arkIcon;
        this.mTitleTextBlock.text = GameConfig.Language.Text_Rechargediamonds.Value;
        this.initArkItem();
    }
    bindButton() {
        this.mCloseButton.onClicked.add(this.addCloseButton.bind(this));
    }
    addCloseButton() {
        this.hideTween();
    }
    initArkItem() {
        rewardDiamond.forEach((value, key) => {
            let arkItem = mw.UIService.create(ArkItem);
            arkItem.initArkItem(key);
            this.mCanvas.addChild(arkItem.uiObject);
            arkItem.uiObject.position = value.itemPos;
            this.arkItems.push(arkItem);
        });
    }
    updateArkTextBlock(arkCount) {
        this.mArkCountTextBlock.text = `${arkCount}`;
    }
    onShow(...params) {
        Utils.openUITween(this.rootCanvas, () => {
            this.getHudPanel.hide();
        }, null);
    }
    hideTween() {
        Utils.closeUITween(this.rootCanvas, null, () => {
            this.hide();
            this.getHudPanel.show();
        });
    }
    updateUserIdTextBlock(str) {
        this.mUserIdTextBlock.text = `${str ? str : `UserId`}:${Player.localPlayer.userId}`;
    }
}
class ArkData extends Subdata {
    constructor() {
        super(...arguments);
        this.lastDayStr = "";
        this.secondDayStr = "";
        this.isLimitStrs = {};
        this.isGetGiftBags = {};
    }
    setLimitStr(key, day) {
        MapEx.set(this.isLimitStrs, key, day);
        this.save(true);
    }
    setGetGiftBag(key, isGet) {
        MapEx.set(this.isGetGiftBags, key, isGet);
        this.save(true);
    }
    isGetGiftBag(key) {
        if (!this.isGetGiftBags || MapEx.count(this.isGetGiftBags) == 0)
            return false;
        return MapEx.has(this.isGetGiftBags, key);
    }
}
__decorate([
    Decorator.persistence()
], ArkData.prototype, "lastDayStr", void 0);
__decorate([
    Decorator.persistence()
], ArkData.prototype, "secondDayStr", void 0);
__decorate([
    Decorator.persistence()
], ArkData.prototype, "isLimitStrs", void 0);
__decorate([
    Decorator.persistence()
], ArkData.prototype, "isGetGiftBags", void 0);
class ArkModuleC extends ModuleC {
    constructor() {
        super(...arguments);
        this.arkPanel = null;
        this.giftBagPanel = null;
        this.hudModuleC = null;
        this.playerModuleC = null;
        this.isCanContinueClick = true;
        this.isLimitStrs = {};
        this.isCanGetGiftBag = true;
    }
    get getArkPanel() {
        if (!this.arkPanel) {
            this.arkPanel = UIService.getUI(ArkPanel);
        }
        return this.arkPanel;
    }
    get getGiftBagPanel() {
        if (!this.giftBagPanel) {
            this.giftBagPanel = mw.UIService.getUI(GiftBagPanel);
        }
        return this.giftBagPanel;
    }
    get getHudModuleC() {
        if (!this.hudModuleC) {
            this.hudModuleC = ModuleService.getModule(HUDModuleC);
        }
        return this.hudModuleC;
    }
    get getPlayerModuleC() {
        if (!this.playerModuleC) {
            this.playerModuleC = ModuleService.getModule(PlayerModuleC);
        }
        return this.playerModuleC;
    }
    onStart() {
        this.bindAction();
        InputUtil.onKeyDown(mw.Keys.P, () => {
            this.getArkPanel.show();
        });
        InputUtil.onKeyDown(mw.Keys.O, () => {
            this.getGiftBagPanel.show();
        });
    }
    bindAction() {
        mw.PurchaseService.onArkBalanceUpdated.add(this.addArkUpdate.bind(this));
        this.getHudModuleC.onOpenArkAction.add(this.addOpenArkPanel.bind(this));
        this.getHudModuleC.onOpenGetAction.add(this.addOpenGiftBagPanel.bind(this));
    }
    onEnterScene(sceneType) {
        this.isLimitStrs = this.data.isLimitStrs;
    }
    addArkUpdate(amount) {
        //刷新逻辑，amount为当前代币数量
        console.error(`ArkModuleC addArkUpdate amount: ${amount}`);
        this.getArkPanel.updateArkTextBlock(amount);
    }
    addOpenArkPanel() {
        this.getArkPanel.show();
        mw.PurchaseService.getArkBalance(); // 触发代币余额刷新。接收更新的值要用mw.PurchaseService.onArkBalanceUpdated
    }
    placeOrder(commodityId, buySuccessCallback) {
        if (rewardDiamond.get(commodityId).isLimit && this.isBuy(commodityId)) {
            Notice.showDownNotice(GameConfig.Language.Text_SoldouttodayPleaseReplaceWithOtherProductsToPurchase.Value);
            return;
        }
        if (!this.isCanContinueClick) {
            Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_CoolForSeconds.Value, 3));
            return;
        }
        this.isCanContinueClick = false;
        TimeUtil.delaySecond(3).then(() => {
            this.isCanContinueClick = true;
        });
        if (mw.SystemUtil.isPIE) {
            if (rewardDiamond.get(commodityId).isLimit)
                this.setLimitStr(commodityId);
            if (buySuccessCallback)
                buySuccessCallback();
            let rewardCount = rewardDiamond.get(commodityId).rewardCount;
            Notice.showDownNotice(`${GameConfig.Language.Text_Diamonds.Value}+${rewardCount}`);
            this.getPlayerModuleC.saveDiamond(rewardCount);
        }
        else {
            mw.PurchaseService.placeOrder(commodityId, 1, (status, msg) => {
                mw.PurchaseService.getArkBalance(); //刷新代币数量
                if (status != 200)
                    return;
                if (rewardDiamond.get(commodityId).isLimit)
                    this.setLimitStr(commodityId);
                if (buySuccessCallback)
                    buySuccessCallback();
            });
        }
    }
    net_deliverGoods(commodityId, amount) {
        //根据commodityId和amount来处理收货逻辑
        console.error(`ArkModuleC net_deliverGoods commodityId: ${commodityId}, amount: ${amount}`);
        let rewardCount = rewardDiamond.get(commodityId).rewardCount;
        Notice.showDownNotice(`${GameConfig.Language.Text_Diamonds.Value}+${rewardCount}`);
        this.getPlayerModuleC.saveDiamond(rewardCount);
    }
    isBuy(key) {
        if (MapEx.has(this.isLimitStrs, key)) {
            return MapEx.get(this.isLimitStrs, key) == Utils.getDay();
        }
        return false;
    }
    setLimitStr(key) {
        let lastDayStr = Utils.getDay();
        MapEx.set(this.isLimitStrs, key, lastDayStr);
        this.server.net_setLimitStr(key, lastDayStr);
    }
    addOpenGiftBagPanel() {
        this.getGiftBagPanel.show();
    }
    getGiftBag(coodStr) {
        if (!this.isCanGetGiftBag) {
            Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_CoolForSeconds.Value, 3));
            return;
        }
        this.isCanGetGiftBag = false;
        TimeUtil.delaySecond(3).then(() => { this.isCanGetGiftBag = true; });
        this.server.net_getGiftBag(coodStr);
    }
    net_getGiftBag(giftBagCood, messageJson) {
        if (giftBagCood == GiftBagCood.Success) {
            Notice.showDownNotice(GameConfig.Language.Text_ExchangeSuccessful.Value);
            let message = JSON.parse(messageJson);
            let giftBagData = message;
            if (giftBagData?.diamond && giftBagData?.diamond > 0) {
                Notice.showDownNotice(`${GameConfig.Language.Text_Diamonds.Value}+${giftBagData.diamond}`);
                this.getPlayerModuleC.saveDiamond(giftBagData.diamond);
            }
            if (giftBagData?.lv && giftBagData?.lv > 0) {
                Notice.showDownNotice(`${GameConfig.Language.Text_Grade.Value}+${giftBagData.lv}`);
                this.getPlayerModuleC.upLvByCount(giftBagData.lv);
            }
        }
        else if (giftBagCood == GiftBagCood.Fail) {
            Notice.showDownNotice(GameConfig.Language.Text_GiftPackRedemptionCodeError.Value);
            Notice.showDownNotice(GameConfig.Language.Text_CollectionFailed.Value);
        }
        else if (giftBagCood == GiftBagCood.Exchanged) {
            Notice.showDownNotice(GameConfig.Language.Text_AlreadyredeemedNoNeedToRedeemAgain.Value);
        }
    }
    net_syncArkStr(str) {
        this.getArkPanel.updateUserIdTextBlock(str);
    }
}
class ArkModuleS extends ModuleS {
    onStart() {
        this.bindAction();
    }
    onPlayerEnterGame(player) {
        this.syncArkStr(player);
    }
    bindAction() {
        mw.PurchaseService.onOrderDelivered.add(this.addShipOrder.bind(this));
    }
    addShipOrder(playerId, orderId, commodityId, amount, confirmOrder) {
        //根据playerId和commodityId来处理购买逻辑
        this.getClient(playerId).net_deliverGoods(commodityId, amount);
        confirmOrder(true); //调用这个方法表示确认收货成功
    }
    net_setLimitStr(key, day) {
        this.currentData.setLimitStr(key, day);
    }
    net_getGiftBag(coodStr) {
        // console.error(`ArkModuleS net_getGiftBag coodStr: ${coodStr}`);
        let player = this.currentPlayer;
        if (coodStr.length == 6) {
            let isGetGiftBag = DataCenterS.getData(player, ArkData).isGetGiftBag(coodStr);
            if (isGetGiftBag) {
                this.getClient(player).net_getGiftBag(GiftBagCood.Exchanged, null);
            }
            else {
                this.getCustomdata("WorldGiftBag").then((value) => {
                    if (!value) {
                        this.getClient(player).net_getGiftBag(GiftBagCood.Fail, null);
                        return;
                    }
                    let giftBagDatas = value;
                    // console.error(`giftBagDatas:${JSON.stringify(giftBagDatas)}`);
                    let giftBagData = null;
                    for (let i = 0; i < giftBagDatas.length; ++i) {
                        if (giftBagDatas[i].coodStr == coodStr) {
                            giftBagData = giftBagDatas[i];
                            break;
                        }
                    }
                    if (giftBagData) {
                        DataCenterS.getData(player, ArkData).setGetGiftBag(coodStr, true);
                        this.getClient(player).net_getGiftBag(GiftBagCood.Success, JSON.stringify(giftBagData));
                    }
                    else {
                        this.getClient(player).net_getGiftBag(GiftBagCood.Fail, null);
                    }
                });
            }
        }
        else {
            PurchaseService.redeemGiftCode(player, coodStr, (result) => {
                this.getClient(player).net_getGiftBag(((result.status == 200 || result.status == 1) ? GiftBagCood.Success : GiftBagCood.Fail), result.message);
            });
        }
    }
    async syncArkStr(player) {
        let str = await this.getCustomdata("WorldArkStr");
        this.getClient(player).net_syncArkStr(str);
    }
    async getCustomdata(key) {
        let data = null;
        data = await GeneralManager.asyncRpcGetData(key);
        return data;
    }
}
__decorate([
    Decorator.noReply()
], ArkModuleS.prototype, "net_setLimitStr", null);
__decorate([
    Decorator.noReply()
], ArkModuleS.prototype, "net_getGiftBag", null);
class GiftBagPanel extends GiftBagPanel_Generate$1 {
    constructor() {
        super(...arguments);
        this.hudPanel = null;
        this.arkModuleC = null;
    }
    get getHudPanel() {
        if (!this.hudPanel) {
            this.hudPanel = mw.UIService.getUI(HUDPanel);
        }
        return this.hudPanel;
    }
    get getArkModuleC() {
        if (!this.arkModuleC) {
            this.arkModuleC = ModuleService.getModule(ArkModuleC);
        }
        return this.arkModuleC;
    }
    onStart() {
        this.initUI();
        this.bindButton();
    }
    initUI() {
        this.mTitleTextBlock.text = GameConfig.Language.Text_GiftPackExchange.Value;
        this.mInputTipsTextBlock.text = GameConfig.Language.Text_PleaseEnterTheRedemptionCodeProvidedByTheAuthorCanBeRedeemedForRewards.Value;
        this.mGetTextBlock.text = GameConfig.Language.Text_Exchange.Value;
        this.mInputBox.hintString = GameConfig.Language.Text_PleaseEnterTheRedemptionCode.Value;
        if (GlobalData.languageId == 0) {
            this.mInputTipsTextBlock.fontSize = 28;
            this.mInputBox.hintString = ``;
        }
        else {
            this.mInputTipsTextBlock.fontSize = 60;
            this.mInputBox.hintString = GameConfig.Language.Text_PleaseEnterTheRedemptionCode.Value;
        }
    }
    bindButton() {
        this.mCloseButton.onClicked.add(this.addCloseButton.bind(this));
        this.mGetButton.onClicked.add(this.addGetButton.bind(this));
    }
    addCloseButton() {
        this.hideTween();
    }
    addGetButton() {
        let coodStr = this.mInputBox.text;
        if (!coodStr || coodStr == "") {
            Notice.showDownNotice(GameConfig.Language.Text_PleaseEnterTheRedemptionCode.Value);
            return;
        }
        this.getArkModuleC.getGiftBag(coodStr);
    }
    onShow(...params) {
        this.mInputBox.text = "";
        Utils.openUITween(this.rootCanvas, () => {
            this.getHudPanel.hide();
        }, null);
    }
    hideTween() {
        Utils.closeUITween(this.rootCanvas, null, () => {
            this.hide();
            this.getHudPanel.show();
        });
    }
}
class GiftBagData {
}
var GiftBagCood;
(function (GiftBagCood) {
    GiftBagCood[GiftBagCood["Success"] = 200] = "Success";
    GiftBagCood[GiftBagCood["Fail"] = 0] = "Fail";
    GiftBagCood[GiftBagCood["Exchanged"] = 1000] = "Exchanged";
})(GiftBagCood || (GiftBagCood = {}));

var foreign47 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ArkData: ArkData,
    ArkItem: ArkItem,
    ArkModuleC: ArkModuleC,
    ArkModuleS: ArkModuleS,
    ArkPanel: ArkPanel,
    get GiftBagCood () { return GiftBagCood; },
    GiftBagData: GiftBagData,
    GiftBagPanel: GiftBagPanel
});

class HUDModuleS extends ModuleS {
    constructor() {
        super(...arguments);
        //#region 冲刺
        this.sprintSound = "122568";
        this.sprintEffects = ["89089", "128518", "89128", "89129", "89130"];
        this.playerForward = mw.Vector.zero;
        //#endregion 
        this.worldConfigDatas = [];
    }
    onAwake() {
        // this.initWorldConfigDatas();
    }
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
    }
    onPlayerEnterGame(player) {
        this.syncWorldConfigData(player);
    }
    /**
     * 冲刺
     * @param sprintIndex
     * @param playerScale
     */
    net_sprint(sprintIndex, playerScale) {
        let startLoc = this.currentPlayer.character.worldTransform.position;
        let capsuleHalfHeight = this.currentPlayer.character.collisionExtent.z / 2;
        let offset = new mw.Vector(startLoc.x, startLoc.y, startLoc.z - capsuleHalfHeight * playerScale);
        SoundService.play3DSound(this.sprintSound, offset);
        GeneralManager.rpcPlayEffectAtLocation(this.sprintEffects[Utils.getRandomInteger(2, 4)], offset, 1, mw.Rotation.zero, mw.Vector.one.multiply(playerScale));
        GeneralManager.rpcPlayEffectAtLocation(this.sprintEffects[0], offset, 1, mw.Rotation.zero, mw.Vector.one.multiply(0.4 * playerScale));
        GeneralManager.rpcPlayEffectOnPlayer(this.sprintEffects[1], this.currentPlayer, sprintIndex == 0 ? mw.HumanoidSlotType.RightFoot : mw.HumanoidSlotType.LeftFoot, 1, mw.Vector.zero, mw.Rotation.zero, mw.Vector.one.multiply(playerScale));
        this.playerForward = this.currentPlayer.character.worldTransform.getForwardVector();
        this.currentPlayer.character.addImpulse(this.playerForward.multiply(6000), true);
    }
    //#endregion
    //#region 跳跃
    /**
     * 播放跳跃特效音效
     * @param landingId
     * @param effectOffset
     * @param landingSoundId
     * @param playerScale
     */
    net_playLandEffectAndSound(landingId, effectOffset, landingSoundId, playerScale) {
        GeneralManager.rpcPlayEffectAtLocation(landingId[0], effectOffset, 1, mw.Rotation.zero, mw.Vector.one.multiply(playerScale));
        SoundService.play3DSound(landingSoundId, effectOffset);
        GeneralManager.rpcPlayEffectAtLocation(landingId[1], effectOffset, 1, mw.Rotation.zero, mw.Vector.one.multiply(0.4 * playerScale));
    }
    /**
     * 播放落地特效音效
     * @param stompingEffectId
     * @param stompingSoundId
     * @param playerScale
     */
    net_playStompingEffectAndSound(stompingEffectId, stompingSoundId, playerScale) {
        GeneralManager.rpcPlayEffectOnPlayer(stompingEffectId, this.currentPlayer, mw.HumanoidSlotType.Root, 1, mw.Vector.zero, mw.Rotation.zero, mw.Vector.one.multiply(0.5 * playerScale));
        SoundService.play3DSound(stompingSoundId, this.currentPlayer.character);
    }
    async initWorldConfigDatas() {
        this.worldConfigDatas = (await this.getCustomdata("WorldConfigData"));
    }
    async syncWorldConfigData(player) {
        // if (!this.worldConfigDatas || this.worldConfigDatas.length == 0)
        await this.initWorldConfigDatas();
        this.getClient(player).net_syncWorldConfigData(this.worldConfigDatas);
    }
    async getCustomdata(key) {
        let data = null;
        data = await GeneralManager.asyncRpcGetData(key);
        return data;
    }
}
__decorate([
    Decorator.noReply()
], HUDModuleS.prototype, "net_sprint", null);
__decorate([
    Decorator.noReply()
], HUDModuleS.prototype, "net_playLandEffectAndSound", null);
__decorate([
    Decorator.noReply()
], HUDModuleS.prototype, "net_playStompingEffectAndSound", null);

var foreign53 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: HUDModuleS
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/NewPeopleModule/NewPeopleItem.ui
 * TIME: 2024.11.04-19.49.52
 */
let NewPeopleItem_Generate = class NewPeopleItem_Generate extends UIScript {
    get mDayTextBlock() {
        if (!this.mDayTextBlock_Internal && this.uiWidgetBase) {
            this.mDayTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/mDayTextBlock');
        }
        return this.mDayTextBlock_Internal;
    }
    get mIconCanvas() {
        if (!this.mIconCanvas_Internal && this.uiWidgetBase) {
            this.mIconCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/IconCanvas/mIconCanvas');
        }
        return this.mIconCanvas_Internal;
    }
    get mIconBgImage_0() {
        if (!this.mIconBgImage_0_Internal && this.uiWidgetBase) {
            this.mIconBgImage_0_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/IconCanvas/mIconCanvas/mIconBgImage_0');
        }
        return this.mIconBgImage_0_Internal;
    }
    get mIconImage_0() {
        if (!this.mIconImage_0_Internal && this.uiWidgetBase) {
            this.mIconImage_0_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/IconCanvas/mIconCanvas/mIconBgImage_0/mIconImage_0');
        }
        return this.mIconImage_0_Internal;
    }
    get mIconBgImage_1() {
        if (!this.mIconBgImage_1_Internal && this.uiWidgetBase) {
            this.mIconBgImage_1_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/IconCanvas/mIconCanvas/mIconBgImage_1');
        }
        return this.mIconBgImage_1_Internal;
    }
    get mIconImage_1() {
        if (!this.mIconImage_1_Internal && this.uiWidgetBase) {
            this.mIconImage_1_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/IconCanvas/mIconCanvas/mIconBgImage_1/mIconImage_1');
        }
        return this.mIconImage_1_Internal;
    }
    get mIconBgImage_2() {
        if (!this.mIconBgImage_2_Internal && this.uiWidgetBase) {
            this.mIconBgImage_2_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/IconCanvas/mIconCanvas/mIconBgImage_2');
        }
        return this.mIconBgImage_2_Internal;
    }
    get mIconImage_2() {
        if (!this.mIconImage_2_Internal && this.uiWidgetBase) {
            this.mIconImage_2_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/IconCanvas/mIconCanvas/mIconBgImage_2/mIconImage_2');
        }
        return this.mIconImage_2_Internal;
    }
    get mIconBgImage_3() {
        if (!this.mIconBgImage_3_Internal && this.uiWidgetBase) {
            this.mIconBgImage_3_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/IconCanvas/mIconCanvas/mIconBgImage_3');
        }
        return this.mIconBgImage_3_Internal;
    }
    get mIconImage_3() {
        if (!this.mIconImage_3_Internal && this.uiWidgetBase) {
            this.mIconImage_3_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/IconCanvas/mIconCanvas/mIconBgImage_3/mIconImage_3');
        }
        return this.mIconImage_3_Internal;
    }
    get mRewardCanvas() {
        if (!this.mRewardCanvas_Internal && this.uiWidgetBase) {
            this.mRewardCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/mRewardCanvas');
        }
        return this.mRewardCanvas_Internal;
    }
    get mRewardTextBlock() {
        if (!this.mRewardTextBlock_Internal && this.uiWidgetBase) {
            this.mRewardTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/mRewardCanvas/RewardBgImage/mRewardTextBlock');
        }
        return this.mRewardTextBlock_Internal;
    }
    get mTipsCanvas() {
        if (!this.mTipsCanvas_Internal && this.uiWidgetBase) {
            this.mTipsCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/mTipsCanvas');
        }
        return this.mTipsCanvas_Internal;
    }
    get mTipsTextBlock() {
        if (!this.mTipsTextBlock_Internal && this.uiWidgetBase) {
            this.mTipsTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/mTipsCanvas/TipsBgImage/mTipsTextBlock');
        }
        return this.mTipsTextBlock_Internal;
    }
    get mHasCanvas() {
        if (!this.mHasCanvas_Internal && this.uiWidgetBase) {
            this.mHasCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/mHasCanvas');
        }
        return this.mHasCanvas_Internal;
    }
    get mMaskImage() {
        if (!this.mMaskImage_Internal && this.uiWidgetBase) {
            this.mMaskImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/mHasCanvas/mMaskImage');
        }
        return this.mMaskImage_Internal;
    }
    get mMaskBgImage() {
        if (!this.mMaskBgImage_Internal && this.uiWidgetBase) {
            this.mMaskBgImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/mHasCanvas/mMaskBgImage');
        }
        return this.mMaskBgImage_Internal;
    }
    get mHasTextBlock() {
        if (!this.mHasTextBlock_Internal && this.uiWidgetBase) {
            this.mHasTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/mHasCanvas/mMaskBgImage/mHasTextBlock');
        }
        return this.mHasTextBlock_Internal;
    }
    get mClickButton() {
        if (!this.mClickButton_Internal && this.uiWidgetBase) {
            this.mClickButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/BgImage/mClickButton');
        }
        return this.mClickButton_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        this.mClickButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mClickButton");
        });
        this.mClickButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mDayTextBlock);
        this.initLanguage(this.mRewardTextBlock);
        this.initLanguage(this.mTipsTextBlock);
        this.initLanguage(this.mHasTextBlock);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
NewPeopleItem_Generate = __decorate([
    UIBind('UI/module/NewPeopleModule/NewPeopleItem.ui')
], NewPeopleItem_Generate);
var NewPeopleItem_Generate$1 = NewPeopleItem_Generate;

var foreign139 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: NewPeopleItem_Generate$1
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/NewPeopleModule/NewPeoplePanel.ui
 * TIME: 2024.11.04-19.49.52
 */
let NewPeoplePanel_Generate = class NewPeoplePanel_Generate extends UIScript {
    get mTitleTextBlock() {
        if (!this.mTitleTextBlock_Internal && this.uiWidgetBase) {
            this.mTitleTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/TitleBgImage/mTitleTextBlock');
        }
        return this.mTitleTextBlock_Internal;
    }
    get mCanvas() {
        if (!this.mCanvas_Internal && this.uiWidgetBase) {
            this.mCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mCanvas');
        }
        return this.mCanvas_Internal;
    }
    get mTipsTextBlock() {
        if (!this.mTipsTextBlock_Internal && this.uiWidgetBase) {
            this.mTipsTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainBgImage/mTipsTextBlock');
        }
        return this.mTipsTextBlock_Internal;
    }
    get mCloseButton() {
        if (!this.mCloseButton_Internal && this.uiWidgetBase) {
            this.mCloseButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mCloseButton');
        }
        return this.mCloseButton_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        this.mCloseButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mCloseButton");
        });
        this.mCloseButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mTitleTextBlock);
        this.initLanguage(this.mTipsTextBlock);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
NewPeoplePanel_Generate = __decorate([
    UIBind('UI/module/NewPeopleModule/NewPeoplePanel.ui')
], NewPeoplePanel_Generate);
var NewPeoplePanel_Generate$1 = NewPeoplePanel_Generate;

var foreign140 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: NewPeoplePanel_Generate$1
});

const newPeopleGiftDatas = new Map();
newPeopleGiftDatas.set(1, { desc: "第一天", icon: ["209508", "367076"], dayStr: `Text_FirstDay`, name: `Text_GoldenHoopRodPowderUniformGirl`, bagId: [10041, 20056], itemPos: new mw.Vector2(30, 27) });
newPeopleGiftDatas.set(2, { desc: "第二天", icon: ["318640", "343523", "313464", "398484"], dayStr: `Text_TheSecondDay`, name: `HaotianHammerTangSan_GoldenHoopRodPurpleBlueSilverEmperor`, bagId: [10043, 20057, 20055, 10042], itemPos: new mw.Vector2(538, 27) });
const onlineMinutes = 30;
class NewPeopleData extends Subdata {
    constructor() {
        super(...arguments);
        this.isGetNewPeoples = {};
        this.isOldPeople = false;
    }
    setIsGetNewPeoples(key, isGet) {
        MapEx.set(this.isGetNewPeoples, key, isGet);
        this.save(true);
    }
    setIsOldPeople(isOld) {
        this.isGetNewPeoples = {};
        this.isOldPeople = isOld;
        this.save(true);
    }
}
__decorate([
    Decorator.persistence()
], NewPeopleData.prototype, "isGetNewPeoples", void 0);
__decorate([
    Decorator.persistence()
], NewPeopleData.prototype, "isOldPeople", void 0);
const NewPeopleTriggerMap = new Map();
NewPeopleTriggerMap.set(1, { triggers: ["08A7D30E"], worldUIIds: ["272413D6"], name: `Text_NoviceGiftPack` });
// NewPeopleTriggerMap.set(2, { triggers: null, worldUIIds: ["07D9DF79"], name: `领取自动攻击` });
// NewPeopleTriggerMap.set(3, { triggers: null, worldUIIds: ["0D9A6CAC"], name: `领取限定皮肤` });
class NewPeopleModuleC extends ModuleC {
    constructor() {
        super(...arguments);
        this.newPeoplePanel = null;
        this.hudModuleC = null;
        this.bagModuleC = null;
        this.isGetNewPeoples = {};
        this.isOldPeople = false;
    }
    get getNewPeoplePanel() {
        if (!this.newPeoplePanel) {
            this.newPeoplePanel = mw.UIService.getUI(NewPeoplePanel);
        }
        return this.newPeoplePanel;
    }
    get getHudModuleC() {
        if (!this.hudModuleC) {
            this.hudModuleC = ModuleService.getModule(HUDModuleC);
        }
        return this.hudModuleC;
    }
    get getBagModuleC() {
        if (!this.bagModuleC) {
            this.bagModuleC = ModuleService.getModule(BagModuleC);
        }
        return this.bagModuleC;
    }
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
        this.bindAction();
    }
    bindAction() {
        this.getHudModuleC.onOpenNewPeopleAction.add(this.addOpenNewPeoplePanel.bind(this));
    }
    addOpenNewPeoplePanel() {
        this.getNewPeoplePanel.show();
    }
    onEnterScene(sceneType) {
        this.isGetNewPeoples = this.data.isGetNewPeoples;
        this.isOldPeople = this.data.isOldPeople;
        this.checkIsOldPeople();
        this.initOldPeopleData();
        this.initTrigger();
    }
    checkIsOldPeople() {
        if (this.isOldPeople)
            return;
        if (this.isGetNewPeoples && MapEx.count(this.isGetNewPeoples) == 2) {
            let isOld = true;
            MapEx.forEach(this.isGetNewPeoples, (key, value) => {
                if (!value)
                    isOld = false;
            });
            if (!isOld)
                return;
            this.isOldPeople = true;
            this.isGetNewPeoples = {};
            this.server.net_setIsOldPeople(isOld);
        }
    }
    initOldPeopleData() {
        if (!this.isOldPeople)
            return;
        NewPeopleTriggerMap.get(1).name = `Text_ReturnGiftPackageForVeteranPlayers`;
        newPeopleGiftDatas.get(1).name = `Text_TheGoldenPrinceJkGirl`;
        newPeopleGiftDatas.get(1).icon = ["142399", "320751"];
        newPeopleGiftDatas.get(1).bagId = [20064, 20065];
        newPeopleGiftDatas.get(2).name = `Text_XiaolanGreenBlackOrangeDragon`;
        newPeopleGiftDatas.get(2).bagId = [20066, 20067, 20068, 20069];
        newPeopleGiftDatas.get(2).icon = ["216268", "216269", "216270", "212971"];
    }
    isGetNewPeople(key) {
        return MapEx.has(this.isGetNewPeoples, key);
    }
    isCanGet(key) {
        if (key == 1)
            return true;
        if (MapEx.has(this.isGetNewPeoples, key - 1) && MapEx.get(this.isGetNewPeoples, key - 1) != Utils.getDay())
            return true;
        return false;
    }
    setIsGetNewPeoples(key, isGet) {
        if (MapEx.has(this.isGetNewPeoples, key) && MapEx.get(this.isGetNewPeoples, key) == isGet)
            return;
        MapEx.set(this.isGetNewPeoples, key, isGet);
        this.server.net_setIsGetNewPeoples(key, isGet);
    }
    clickGetPeople(key, minutes, getComplete) {
        if (this.isCanGet(key)) {
            if (!this.isGetNewPeople(key)) {
                if (minutes < onlineMinutes) {
                    Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_OnlineTimeIsLessThanMinutes.Value, onlineMinutes));
                }
                else {
                    Notice.showDownNotice(GameConfig.Language.Text_ReceivedSuccessfully.Value);
                    Notice.showDownNotice(GameConfig.Language.Text_OpenTheBackpackForUse.Value);
                    let bagIds = newPeopleGiftDatas.get(key).bagId;
                    for (let i = 0; i < bagIds.length; ++i) {
                        TimeUtil.delaySecond(i).then(() => {
                            this.getBagModuleC.setBagId(bagIds[i]);
                        });
                    }
                    this.setIsGetNewPeoples(key, Utils.getDay());
                    if (getComplete)
                        getComplete();
                }
            }
            else {
                Notice.showDownNotice(GameConfig.Language.Text_CannotBeClaimedRepeatedly.Value);
            }
        }
        else {
            Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_PleaseComeBackToCollectOnTheThDay.Value, key));
        }
    }
    initTrigger() {
        NewPeopleTriggerMap.forEach((value, key) => {
            if (value.triggers && value.triggers.length > 0) {
                value.triggers.forEach((triggerId) => {
                    mw.GameObject.asyncFindGameObjectById(triggerId).then((go) => {
                        let trigger = go;
                        trigger.onEnter.add((character) => {
                            if (character.gameObjectId != this.localPlayer.character.gameObjectId)
                                return;
                            this.getNewPeoplePanel.show();
                        });
                    });
                });
            }
            value.worldUIIds.forEach((worldId) => {
                mw.GameObject.asyncFindGameObjectById(worldId).then((v) => {
                    let worldUI = v;
                    let levelItem = mw.UIService.create(LevelItem);
                    levelItem.updateLevelTextBlock(GameConfig.Language[`${value.name}`].Value);
                    worldUI.setTargetUIWidget(levelItem.uiWidgetBase);
                });
            });
        });
    }
}
class NewPeopleModuleS extends ModuleS {
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
    }
    net_setIsGetNewPeoples(key, isGet) {
        this.currentData.setIsGetNewPeoples(key, isGet);
    }
    net_setIsOldPeople(isOld) {
        this.currentData.setIsOldPeople(isOld);
    }
}
__decorate([
    Decorator.noReply()
], NewPeopleModuleS.prototype, "net_setIsGetNewPeoples", null);
__decorate([
    Decorator.noReply()
], NewPeopleModuleS.prototype, "net_setIsOldPeople", null);
class NewPeoplePanel extends NewPeoplePanel_Generate$1 {
    constructor() {
        super(...arguments);
        this.hudPanel = null;
        this.newPeopleItems = [];
    }
    get getHudPanel() {
        if (!this.hudPanel) {
            this.hudPanel = mw.UIService.getUI(HUDPanel);
        }
        return this.hudPanel;
    }
    onStart() {
        this.initUI();
        this.bindButton();
    }
    initUI() {
        this.mTitleTextBlock.text = GameConfig.Language.Text_NoviceGiftPack.Value;
        this.mTipsTextBlock.text = GameConfig.Language.Text_OpenTheBackpackAndUseItAfterReceivingIt.Value;
        this.initItem();
    }
    bindButton() {
        this.mCloseButton.onClicked.add(this.addCloseButton.bind(this));
    }
    addCloseButton() {
        this.hideTween();
    }
    initItem() {
        newPeopleGiftDatas.forEach((value, key) => {
            let newPeopleItem = mw.UIService.create(NewPeopleItem);
            newPeopleItem.initItem(key);
            this.mCanvas.addChild(newPeopleItem.uiObject);
            newPeopleItem.uiObject.position = value.itemPos;
            this.newPeopleItems.push(newPeopleItem);
        });
    }
    onShow(...params) {
        Utils.openUITween(this.rootCanvas, () => {
            this.getHudPanel.hide();
        }, null);
    }
    hideTween() {
        Utils.closeUITween(this.rootCanvas, null, () => {
            this.hide();
            this.getHudPanel.show();
        });
    }
}
class NewPeopleItem extends NewPeopleItem_Generate$1 {
    constructor() {
        super(...arguments);
        this.newPeopleModuleC = null;
        this.key = -1;
        this.minutes = 0;
    }
    get getNewPeopleModuleC() {
        if (!this.newPeopleModuleC) {
            this.newPeopleModuleC = ModuleService.getModule(NewPeopleModuleC);
        }
        return this.newPeopleModuleC;
    }
    onStart() {
        this.initUI();
        this.bindButton();
        this.initTextBlock();
    }
    initTextBlock() {
        if (GlobalData.languageId == 0) {
            this.mTipsTextBlock.fontSize = 12;
        }
        else {
            this.mTipsTextBlock.fontSize = 25;
        }
    }
    initUI() {
        this.mHasTextBlock.text = GameConfig.Language.Text_ReceivedAlready.Value;
        this.updateOnlineMinutesTextBlock(0);
    }
    bindButton() {
        this.mClickButton.onClicked.add(this.addClickButton.bind(this));
        Event.addLocalListener(`UpdateNewPeopleGiftBagOnlineTime`, (time) => {
            console.error(`time:${time}`);
            if (this.getNewPeopleModuleC.isCanGet(this.key)) {
                this.updateOnlineMinutesTextBlock(time);
            }
        });
    }
    addClickButton() {
        this.getNewPeopleModuleC.clickGetPeople(this.key, this.minutes, () => {
            this.mHasCanvas.visibility = mw.SlateVisibility.SelfHitTestInvisible;
        });
    }
    initItem(key) {
        this.key = key;
        this.updateUI();
    }
    updateUI() {
        let newPeopleGiftData = newPeopleGiftDatas.get(this.key);
        this.mDayTextBlock.text = GameConfig.Language[`${newPeopleGiftData.dayStr}`].Value;
        for (let i = 0; i < newPeopleGiftData.icon.length; ++i) {
            this[`mIconBgImage_${i}`].visibility = mw.SlateVisibility.SelfHitTestInvisible;
            Utils.setImageByAssetIconData(this[`mIconImage_${i}`], newPeopleGiftData.icon[i]);
        }
        for (let i = newPeopleGiftData.icon.length; i < 4; ++i) {
            this[`mIconBgImage_${i}`].visibility = mw.SlateVisibility.Collapsed;
        }
        this.mTipsTextBlock.text = GameConfig.Language[`${newPeopleGiftData.name}`].Value;
        if (this.getNewPeopleModuleC.isGetNewPeople(this.key)) {
            this.mHasCanvas.visibility = mw.SlateVisibility.SelfHitTestInvisible;
            this.mRewardTextBlock.text = StringUtil.format(GameConfig.Language.Text_OnlineMinutes.Value, onlineMinutes, onlineMinutes, onlineMinutes);
        }
        else {
            this.mHasCanvas.visibility = mw.SlateVisibility.Collapsed;
            if (this.getNewPeopleModuleC.isCanGet(this.key)) {
                Event.dispatchToLocal(`RequestNewPeopleGiftBagOnlineTime`);
            }
            else {
                this.mRewardTextBlock.text = StringUtil.format(GameConfig.Language.Text_OnlineMinutes.Value, onlineMinutes, 0, onlineMinutes);
            }
        }
    }
    updateOnlineMinutesTextBlock(minutes) {
        console.error(`minutes:${minutes}`);
        this.minutes = minutes;
        this.mRewardTextBlock.text = StringUtil.format(GameConfig.Language.Text_OnlineMinutes.Value, onlineMinutes, minutes, onlineMinutes);
    }
}

var foreign57 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    NewPeopleData: NewPeopleData,
    NewPeopleItem: NewPeopleItem,
    NewPeopleModuleC: NewPeopleModuleC,
    NewPeopleModuleS: NewPeopleModuleS,
    NewPeoplePanel: NewPeoplePanel
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/WorldRank/WorldRankPanel.ui
 * TIME: 2024.11.04-19.49.53
 */
let WorldRankPanel_Generate = class WorldRankPanel_Generate extends UIScript {
    get mTitleTextBlock() {
        if (!this.mTitleTextBlock_Internal && this.uiWidgetBase) {
            this.mTitleTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RankCanvas/mTitleTextBlock');
        }
        return this.mTitleTextBlock_Internal;
    }
    get mRoomCanvas() {
        if (!this.mRoomCanvas_Internal && this.uiWidgetBase) {
            this.mRoomCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RankCanvas/mRoomCanvas');
        }
        return this.mRoomCanvas_Internal;
    }
    get mRoomRankTextBlock() {
        if (!this.mRoomRankTextBlock_Internal && this.uiWidgetBase) {
            this.mRoomRankTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RankCanvas/mRoomCanvas/RoomCanvas/mRoomRankTextBlock');
        }
        return this.mRoomRankTextBlock_Internal;
    }
    get mRoomNameTextBlock() {
        if (!this.mRoomNameTextBlock_Internal && this.uiWidgetBase) {
            this.mRoomNameTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RankCanvas/mRoomCanvas/RoomCanvas/mRoomNameTextBlock');
        }
        return this.mRoomNameTextBlock_Internal;
    }
    get mRoomLvTextBlock() {
        if (!this.mRoomLvTextBlock_Internal && this.uiWidgetBase) {
            this.mRoomLvTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RankCanvas/mRoomCanvas/RoomCanvas/mRoomLvTextBlock');
        }
        return this.mRoomLvTextBlock_Internal;
    }
    get mRoomHeightTextBlock() {
        if (!this.mRoomHeightTextBlock_Internal && this.uiWidgetBase) {
            this.mRoomHeightTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RankCanvas/mRoomCanvas/RoomCanvas/mRoomHeightTextBlock');
        }
        return this.mRoomHeightTextBlock_Internal;
    }
    get mRoomKillTextBlock() {
        if (!this.mRoomKillTextBlock_Internal && this.uiWidgetBase) {
            this.mRoomKillTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RankCanvas/mRoomCanvas/RoomCanvas/mRoomKillTextBlock');
        }
        return this.mRoomKillTextBlock_Internal;
    }
    get mScrollBox_Room() {
        if (!this.mScrollBox_Room_Internal && this.uiWidgetBase) {
            this.mScrollBox_Room_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RankCanvas/mRoomCanvas/mScrollBox_Room');
        }
        return this.mScrollBox_Room_Internal;
    }
    get mRoomContent() {
        if (!this.mRoomContent_Internal && this.uiWidgetBase) {
            this.mRoomContent_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RankCanvas/mRoomCanvas/mScrollBox_Room/mRoomContent');
        }
        return this.mRoomContent_Internal;
    }
    get mRankLvButton() {
        if (!this.mRankLvButton_Internal && this.uiWidgetBase) {
            this.mRankLvButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RankCanvas/mRoomCanvas/RoomRankTypeCanvas/mRankLvButton');
        }
        return this.mRankLvButton_Internal;
    }
    get mRankLvTextBlock() {
        if (!this.mRankLvTextBlock_Internal && this.uiWidgetBase) {
            this.mRankLvTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RankCanvas/mRoomCanvas/RoomRankTypeCanvas/mRankLvButton/mRankLvTextBlock');
        }
        return this.mRankLvTextBlock_Internal;
    }
    get mRankHeightButton() {
        if (!this.mRankHeightButton_Internal && this.uiWidgetBase) {
            this.mRankHeightButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RankCanvas/mRoomCanvas/RoomRankTypeCanvas/mRankHeightButton');
        }
        return this.mRankHeightButton_Internal;
    }
    get mRankHeightTextBlock() {
        if (!this.mRankHeightTextBlock_Internal && this.uiWidgetBase) {
            this.mRankHeightTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RankCanvas/mRoomCanvas/RoomRankTypeCanvas/mRankHeightButton/mRankHeightTextBlock');
        }
        return this.mRankHeightTextBlock_Internal;
    }
    get mRankKillButton() {
        if (!this.mRankKillButton_Internal && this.uiWidgetBase) {
            this.mRankKillButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RankCanvas/mRoomCanvas/RoomRankTypeCanvas/mRankKillButton');
        }
        return this.mRankKillButton_Internal;
    }
    get mRankKillTextBlock() {
        if (!this.mRankKillTextBlock_Internal && this.uiWidgetBase) {
            this.mRankKillTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RankCanvas/mRoomCanvas/RoomRankTypeCanvas/mRankKillButton/mRankKillTextBlock');
        }
        return this.mRankKillTextBlock_Internal;
    }
    get mWorldCanvas() {
        if (!this.mWorldCanvas_Internal && this.uiWidgetBase) {
            this.mWorldCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RankCanvas/mWorldCanvas');
        }
        return this.mWorldCanvas_Internal;
    }
    get mWorldRankTextBlock() {
        if (!this.mWorldRankTextBlock_Internal && this.uiWidgetBase) {
            this.mWorldRankTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RankCanvas/mWorldCanvas/WorldCanvas/mWorldRankTextBlock');
        }
        return this.mWorldRankTextBlock_Internal;
    }
    get mWorldNameTextBlock() {
        if (!this.mWorldNameTextBlock_Internal && this.uiWidgetBase) {
            this.mWorldNameTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RankCanvas/mWorldCanvas/WorldCanvas/mWorldNameTextBlock');
        }
        return this.mWorldNameTextBlock_Internal;
    }
    get mWorldLvTextBlock() {
        if (!this.mWorldLvTextBlock_Internal && this.uiWidgetBase) {
            this.mWorldLvTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RankCanvas/mWorldCanvas/WorldCanvas/mWorldLvTextBlock');
        }
        return this.mWorldLvTextBlock_Internal;
    }
    get mScrollBox_World() {
        if (!this.mScrollBox_World_Internal && this.uiWidgetBase) {
            this.mScrollBox_World_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RankCanvas/mWorldCanvas/mScrollBox_World');
        }
        return this.mScrollBox_World_Internal;
    }
    get mWorldContent() {
        if (!this.mWorldContent_Internal && this.uiWidgetBase) {
            this.mWorldContent_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RankCanvas/mWorldCanvas/mScrollBox_World/mWorldContent');
        }
        return this.mWorldContent_Internal;
    }
    get mRankDesTextBlock() {
        if (!this.mRankDesTextBlock_Internal && this.uiWidgetBase) {
            this.mRankDesTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RankCanvas/RankTypeCanvas/mRankDesTextBlock');
        }
        return this.mRankDesTextBlock_Internal;
    }
    get mRoomRankButton() {
        if (!this.mRoomRankButton_Internal && this.uiWidgetBase) {
            this.mRoomRankButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RankCanvas/RankTypeCanvas/mRoomRankButton');
        }
        return this.mRoomRankButton_Internal;
    }
    get mRoomTextBlock() {
        if (!this.mRoomTextBlock_Internal && this.uiWidgetBase) {
            this.mRoomTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RankCanvas/RankTypeCanvas/mRoomRankButton/mRoomTextBlock');
        }
        return this.mRoomTextBlock_Internal;
    }
    get mWorldRankButton() {
        if (!this.mWorldRankButton_Internal && this.uiWidgetBase) {
            this.mWorldRankButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RankCanvas/RankTypeCanvas/mWorldRankButton');
        }
        return this.mWorldRankButton_Internal;
    }
    get mWorldTextBlock() {
        if (!this.mWorldTextBlock_Internal && this.uiWidgetBase) {
            this.mWorldTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RankCanvas/RankTypeCanvas/mWorldRankButton/mWorldTextBlock');
        }
        return this.mWorldTextBlock_Internal;
    }
    get mCloseButton() {
        if (!this.mCloseButton_Internal && this.uiWidgetBase) {
            this.mCloseButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/RankCanvas/mCloseButton');
        }
        return this.mCloseButton_Internal;
    }
    get mRecycleCanvas() {
        if (!this.mRecycleCanvas_Internal && this.uiWidgetBase) {
            this.mRecycleCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mRecycleCanvas');
        }
        return this.mRecycleCanvas_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        this.mRankLvButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mRankLvButton");
        });
        this.mRankLvButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mRankHeightButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mRankHeightButton");
        });
        this.mRankHeightButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mRankKillButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mRankKillButton");
        });
        this.mRankKillButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mRoomRankButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mRoomRankButton");
        });
        this.mRoomRankButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mWorldRankButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mWorldRankButton");
        });
        this.mWorldRankButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mCloseButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mCloseButton");
        });
        this.mCloseButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mTitleTextBlock);
        this.initLanguage(this.mRoomRankTextBlock);
        this.initLanguage(this.mRoomNameTextBlock);
        this.initLanguage(this.mRoomLvTextBlock);
        this.initLanguage(this.mRoomHeightTextBlock);
        this.initLanguage(this.mRoomKillTextBlock);
        this.initLanguage(this.mRankLvTextBlock);
        this.initLanguage(this.mRankHeightTextBlock);
        this.initLanguage(this.mRankKillTextBlock);
        this.initLanguage(this.mWorldRankTextBlock);
        this.initLanguage(this.mWorldNameTextBlock);
        this.initLanguage(this.mWorldLvTextBlock);
        this.initLanguage(this.mRankDesTextBlock);
        this.initLanguage(this.mRoomTextBlock);
        this.initLanguage(this.mWorldTextBlock);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
WorldRankPanel_Generate = __decorate([
    UIBind('UI/module/WorldRank/WorldRankPanel.ui')
], WorldRankPanel_Generate);
var WorldRankPanel_Generate$1 = WorldRankPanel_Generate;

var foreign163 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: WorldRankPanel_Generate$1
});

class WorldRankItem {
    constructor() {
        this.mRankTextBlock = undefined;
        this.mNameTextBlock = undefined;
        this.mLvTextBlock = undefined;
        this.worldRankItem = mw.createUIByName("module/WorldRank/WorldRankItem");
        this.mRankTextBlock = this.worldRankItem.findChildByPath("RootCanvas/Canvas/mRankTextBlock");
        this.mNameTextBlock = this.worldRankItem.findChildByPath("RootCanvas/Canvas/mNameTextBlock");
        this.mLvTextBlock = this.worldRankItem.findChildByPath("RootCanvas/Canvas/mLvTextBlock");
    }
    /**
     * 设置数据
     * @param isSelf
     * @param rank
     * @param name
     * @param lv
     * @returns
     */
    async setData(isSelf, rank, name, lv, userId) {
        let color = (isSelf) ? new mw.LinearColor(1, 0, 1, 1) : mw.LinearColor.black;
        this.mRankTextBlock.text = rank.toString();
        this.mNameTextBlock.text = name;
        if (lv == 0) {
            this.mLvTextBlock.text = GameConfig.Language.Text_CurrentlyUnavailable.Value;
        }
        else {
            this.mLvTextBlock.text = await Utils.getLvText(lv, userId);
        }
        this.mRankTextBlock.outlineColor = color;
        this.mNameTextBlock.outlineColor = color;
        this.mLvTextBlock.outlineColor = color;
    }
    /**
     * 回收
     */
    recycle() {
        ObjectPoolServices.getPool(WorldRankItem).return(this);
    }
}
class RankItem {
    constructor() {
        this.mRankTextBlock = undefined;
        this.mNameTextBlock = undefined;
        this.mLvTextBlock = undefined;
        this.mHeightTextBlock = undefined;
        this.mKillTextBlock = undefined;
        this.rankItem = mw.createUIByName("module/WorldRank/RankItem");
        this.mRankTextBlock = this.rankItem.findChildByPath("RootCanvas/Canvas/mRankTextBlock");
        this.mNameTextBlock = this.rankItem.findChildByPath("RootCanvas/Canvas/mNameTextBlock");
        this.mLvTextBlock = this.rankItem.findChildByPath("RootCanvas/Canvas/mLvTextBlock");
        this.mHeightTextBlock = this.rankItem.findChildByPath("RootCanvas/Canvas/mHeightTextBlock");
        this.mKillTextBlock = this.rankItem.findChildByPath("RootCanvas/Canvas/mKillTextBlock");
    }
    /**
     * 设置数据
     * @param isSelf
     * @param rank
     * @param name
     * @param lv
     * @returns
     */
    async setData(isSelf, rank, name, lv, height, kill, userId) {
        let color = (isSelf) ? new mw.LinearColor(1, 0, 1, 1) : mw.LinearColor.black;
        this.mRankTextBlock.text = rank.toString();
        this.mNameTextBlock.text = name;
        if (lv == 0) {
            this.mLvTextBlock.text = GameConfig.Language.Text_CurrentlyUnavailable.Value;
        }
        else {
            this.mLvTextBlock.text = await Utils.getLvText(lv, userId);
        }
        if (height == 0) {
            this.mHeightTextBlock.text = GameConfig.Language.Text_CurrentlyUnavailable.Value;
        }
        else {
            this.mHeightTextBlock.text = height.toString();
        }
        if (kill == 0) {
            this.mKillTextBlock.text = GameConfig.Language.Text_CurrentlyUnavailable.Value;
        }
        else {
            this.mKillTextBlock.text = kill.toString();
        }
        this.mRankTextBlock.outlineColor = color;
        this.mNameTextBlock.outlineColor = color;
        this.mLvTextBlock.outlineColor = color;
        this.mHeightTextBlock.outlineColor = color;
        this.mKillTextBlock.outlineColor = color;
    }
    /**
     * 回收
     */
    recycle() {
        ObjectPoolServices.getPool(RankItem).return(this);
    }
}
class WorldRankPanel extends WorldRankPanel_Generate$1 {
    constructor() {
        super(...arguments);
        this.hudPanel = null;
        /**排行模式 */
        this.onRankTypeAction = new Action1();
        this.currentShowCanvas = ShowCanvasType.None;
        this.roomItems = [];
        this.worldItems = [];
    }
    get getHudPanel() {
        if (!this.hudPanel) {
            this.hudPanel = mw.UIService.getUI(HUDPanel);
        }
        return this.hudPanel;
    }
    onStart() {
        this.initData();
        this.bindButton();
        this.initTextBlock();
    }
    initTextBlock() {
        this.mRoomRankTextBlock.text = GameConfig.Language.Text_Ranking.Value;
        this.mRoomNameTextBlock.text = GameConfig.Language.Text_Name.Value;
        this.mRoomLvTextBlock.text = GameConfig.Language.Text_Grade.Value;
        this.mRoomHeightTextBlock.text = GameConfig.Language.Text_Height.Value;
        this.mRoomKillTextBlock.text = GameConfig.Language.Text_Kill.Value;
        this.mRankLvTextBlock.text = GameConfig.Language.Text_LevelMode.Value;
        this.mRankHeightTextBlock.text = GameConfig.Language.Text_HeightMode.Value;
        this.mRankKillTextBlock.text = GameConfig.Language.Text_KillMode.Value;
        this.mWorldRankTextBlock.text = GameConfig.Language.Text_Ranking.Value;
        this.mWorldNameTextBlock.text = GameConfig.Language.Text_Name.Value;
        this.mWorldLvTextBlock.text = GameConfig.Language.Text_Grade.Value;
        this.mRoomTextBlock.text = GameConfig.Language.Text_SwitchRoomLeaderboard.Value;
        this.mWorldTextBlock.text = GameConfig.Language.Text_SwitchToTheFullServerRankingList.Value;
        if (GlobalData.languageId == 0) {
            this.mRoomRankTextBlock.fontSize = 35;
            this.mRoomNameTextBlock.fontSize = 35;
            this.mRoomLvTextBlock.fontSize = 35;
            this.mRoomHeightTextBlock.fontSize = 35;
            this.mRoomKillTextBlock.fontSize = 35;
            this.mRankLvTextBlock.fontSize = 25;
            this.mRankHeightTextBlock.fontSize = 25;
            this.mRankKillTextBlock.fontSize = 25;
            this.mWorldRankTextBlock.fontSize = 35;
            this.mWorldNameTextBlock.fontSize = 35;
            this.mWorldLvTextBlock.fontSize = 35;
            this.mRoomTextBlock.fontSize = 15;
            this.mWorldTextBlock.fontSize = 15;
            this.mTitleTextBlock.fontSize = 30;
        }
        else {
            this.mRoomRankTextBlock.fontSize = 60;
            this.mRoomNameTextBlock.fontSize = 60;
            this.mRoomLvTextBlock.fontSize = 60;
            this.mRoomHeightTextBlock.fontSize = 60;
            this.mRoomKillTextBlock.fontSize = 60;
            this.mRankLvTextBlock.fontSize = 35;
            this.mRankHeightTextBlock.fontSize = 35;
            this.mRankKillTextBlock.fontSize = 35;
            this.mWorldRankTextBlock.fontSize = 60;
            this.mWorldNameTextBlock.fontSize = 60;
            this.mWorldLvTextBlock.fontSize = 60;
            this.mRoomTextBlock.fontSize = 25;
            this.mWorldTextBlock.fontSize = 25;
            this.mTitleTextBlock.fontSize = 80;
        }
    }
    initData() {
        this.showRoomCanvas();
    }
    bindButton() {
        this.mRoomRankButton.onClicked.add(() => {
            this.showRoomCanvas();
        });
        this.mWorldRankButton.onClicked.add(() => {
            this.showWorldCanvas();
        });
        this.mCloseButton.onClicked.add(() => {
            this.hideTween();
        });
        this.mRankLvButton.onClicked.add(() => {
            this.onRankTypeAction.call(RankType.Lv);
        });
        this.mRankHeightButton.onClicked.add(() => {
            this.onRankTypeAction.call(RankType.Height);
        });
        this.mRankKillButton.onClicked.add(() => {
            this.onRankTypeAction.call(RankType.Kill);
        });
    }
    showRoomCanvas() {
        if (this.currentShowCanvas == ShowCanvasType.Room)
            return;
        this.currentShowCanvas = ShowCanvasType.Room;
        this.mRoomCanvas.visibility = mw.SlateVisibility.SelfHitTestInvisible;
        this.mWorldCanvas.visibility = mw.SlateVisibility.Collapsed;
        this.mRankDesTextBlock.text = GameConfig.Language.Text_TheRankingListInYourRoom.Value;
        this.mTitleTextBlock.text = GameConfig.Language.Text_RoomRanking.Value;
    }
    showWorldCanvas() {
        if (this.currentShowCanvas == ShowCanvasType.World)
            return;
        this.currentShowCanvas = ShowCanvasType.World;
        this.mRoomCanvas.visibility = mw.SlateVisibility.Collapsed;
        this.mWorldCanvas.visibility = mw.SlateVisibility.SelfHitTestInvisible;
        this.mRankDesTextBlock.text = StringUtil.format(GameConfig.Language.Text_TopInTheEntireServer.Value, GlobalData.worldRankCount);
        this.mTitleTextBlock.text = GameConfig.Language.Text_FullServerRankingList.Value;
    }
    onShow(...params) {
        Utils.openUITween(this.rootCanvas, () => {
            this.getHudPanel.hide();
        }, null);
    }
    /**
     * 隐藏缓动
     */
    hideTween() {
        Utils.closeUITween(this.rootCanvas, null, () => {
            this.hide();
            this.getHudPanel.show();
        });
    }
    refreshRankPanel(playerDatas_CR, curPlayerIndex, isRefreshWorldRank, worldDatas_CW, curPlayerWorldIndex) {
        this.refreshRoomRankPanel(playerDatas_CR, curPlayerIndex);
        if (isRefreshWorldRank) {
            this.refreshWorldRankPanel(worldDatas_CW, curPlayerWorldIndex);
        }
    }
    refreshRoomRankPanel(playerDatas_CR, curPlayerIndex) {
        if (playerDatas_CR.length >= this.roomItems.length) {
            for (let i = 0; i < this.roomItems.length; ++i) {
                this.roomItems[i].setData((i == curPlayerIndex), i + 1, playerDatas_CR[i].playerName, playerDatas_CR[i].playerLv, playerDatas_CR[i].playerHeight, playerDatas_CR[i].playerKill, playerDatas_CR[i].userId);
            }
            for (let i = this.roomItems.length; i < playerDatas_CR.length; ++i) {
                let roomItem = ObjectPoolServices.getPool(RankItem).spawn();
                roomItem.setData((i == curPlayerIndex), i + 1, playerDatas_CR[i].playerName, playerDatas_CR[i].playerLv, playerDatas_CR[i].playerHeight, playerDatas_CR[i].playerKill, playerDatas_CR[i].userId);
                this.mRoomContent.addChild(roomItem.rankItem);
                roomItem.rankItem.size = new mw.Vector2(1200, 100);
                this.roomItems.push(roomItem);
            }
        }
        else {
            for (let i = 0; i < playerDatas_CR.length; ++i) {
                this.roomItems[i].setData((i == curPlayerIndex), i + 1, playerDatas_CR[i].playerName, playerDatas_CR[i].playerLv, playerDatas_CR[i].playerHeight, playerDatas_CR[i].playerKill, playerDatas_CR[i].userId);
            }
            for (let i = playerDatas_CR.length; i < this.roomItems.length; ++i) {
                this.roomItems[i].recycle();
                this.mRecycleCanvas.addChild(this.roomItems[i].rankItem);
            }
            this.roomItems.length = playerDatas_CR.length;
        }
    }
    refreshWorldRankPanel(worldDatas_C, curPlayerWorldIndex) {
        if (worldDatas_C.length >= this.worldItems.length) {
            for (let i = 0; i < this.worldItems.length; ++i) {
                this.worldItems[i].setData((i == curPlayerWorldIndex), i + 1, worldDatas_C[i].playerName, worldDatas_C[i].playerLv, worldDatas_C[i].userId);
            }
            for (let i = this.worldItems.length; i < worldDatas_C.length; ++i) {
                let worldItem = ObjectPoolServices.getPool(WorldRankItem).spawn();
                worldItem.setData((i == curPlayerWorldIndex), i + 1, worldDatas_C[i].playerName, worldDatas_C[i].playerLv, worldDatas_C[i].userId);
                this.mWorldContent.addChild(worldItem.worldRankItem);
                worldItem.worldRankItem.size = new mw.Vector2(1200, 100);
                this.worldItems.push(worldItem);
            }
        }
        else {
            for (let i = 0; i < worldDatas_C.length; i++) {
                this.worldItems[i].setData((i == curPlayerWorldIndex), i + 1, worldDatas_C[i].playerName, worldDatas_C[i].playerLv, worldDatas_C[i].userId);
            }
            for (let i = worldDatas_C.length; i < this.worldItems.length; i++) {
                this.worldItems[i].recycle();
                this.mRecycleCanvas.addChild(this.worldItems[i].worldRankItem);
            }
            this.worldItems.length = worldDatas_C.length;
        }
    }
}
var ShowCanvasType;
(function (ShowCanvasType) {
    ShowCanvasType[ShowCanvasType["None"] = 0] = "None";
    ShowCanvasType[ShowCanvasType["Room"] = 1] = "Room";
    ShowCanvasType[ShowCanvasType["World"] = 2] = "World";
})(ShowCanvasType || (ShowCanvasType = {}));

var foreign71 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    RankItem: RankItem,
    get ShowCanvasType () { return ShowCanvasType; },
    WorldRankItem: WorldRankItem,
    WorldRankPanel: WorldRankPanel
});

class WorldRankModuleC extends ModuleC {
    constructor() {
        super(...arguments);
        this.hudModuleC = null;
        this.playerData = null;
        this.worldRankPanel = null;
        /**排行类型 */
        this.rankType = RankType.Lv;
        /**是否可以刷新 */
        this.isRefresh = true;
        this.userId = null;
        // /**
        //  * 刷新等级
        //  * @param playerLv 
        //  */
        // public refreshLv(playerLv: number): void {
        //     this.server.net_refreshLv(playerLv);
        // }
        // /**
        //  * 刷新高度
        //  * @param playerHeight 
        //  */
        // public refreshHeight(playerHeight: number): void {
        //     this.server.net_refreshHeight(playerHeight);
        // }
        // /**
        //  * 刷新击杀数
        //  * @param playerKill 
        //  */
        // public refreshKill(playerKill: number): void {
        //     this.server.net_refreshKill(playerKill);
        // }
        this.rankPlayerDatas_CR = [];
        this.rankWorldDatas_CW = [];
    }
    get getHudModuleC() {
        if (!this.hudModuleC) {
            this.hudModuleC = ModuleService.getModule(HUDModuleC);
        }
        return this.hudModuleC;
    }
    get getPlayerData() {
        if (this.playerData == null) {
            this.playerData = DataCenterC.getData(PlayerData);
        }
        return this.playerData;
    }
    get getWorldRankPanel() {
        if (!this.worldRankPanel) {
            this.worldRankPanel = mw.UIService.getUI(WorldRankPanel);
        }
        return this.worldRankPanel;
    }
    get currentUserId() {
        if (this.userId == "" || this.userId == null) {
            this.userId = this.localPlayer.userId;
        }
        return this.userId;
    }
    onStart() {
        this.bindAction();
    }
    bindAction() {
        this.getHudModuleC.onOpenRankAction.add(() => {
            this.getWorldRankPanel.show();
        });
        this.getWorldRankPanel.onRankTypeAction.add((rankType) => {
            if (!this.isRefresh) {
                Notice.showDownNotice(GameConfig.Language.Text_DonTClickTooQuicklyWithYourLittleHand.Value);
            }
            this.isRefresh = false;
            TimeUtil.delaySecond(1.5).then(() => {
                this.isRefresh = true;
            });
            this.rankType = rankType;
            this.refreshRanking();
        });
    }
    /**
     * 进入场景
     * @param sceneType
     */
    onEnterScene(sceneType) {
        let playerLv = this.getPlayerData.playerLv;
        let playerHeight = this.getPlayerData.playerHeight;
        let playerKill = this.getPlayerData.playerKill;
        let nickName = mw.AccountService.getNickName();
        nickName = nickName ? nickName : "UserId:" + this.localPlayer.userId;
        this.server.net_onEnterScene(nickName, playerLv, playerHeight, playerKill);
        Event.dispatchToLocal("SyncMaxHeight", playerHeight);
    }
    /**
     * 同步排行榜数据（服务端同步）
     * @param playerNames
     * @param playerLvs
     * @param worldNames
     * @param worldLvs
     */
    net_syncRankData_C(playerUserIds, playerNames, playerLvs, playerHeights, playerKills, isRefreshWorldRank, worldUserIds, worldNames, worldLvs) {
        let curPlayerIndex = -1;
        let curPlayerWorldIndex = -1;
        this.rankPlayerDatas_CR.length = 0;
        for (let i = 0; i < playerNames.length; ++i) {
            this.rankPlayerDatas_CR.push(new PlayerData_CSR(playerUserIds[i], playerNames[i], playerLvs[i], playerHeights[i], playerKills[i]));
        }
        this.sortRankData_C();
        for (let i = 0; i < this.rankPlayerDatas_CR.length; ++i) {
            if (this.rankPlayerDatas_CR[i].userId == this.currentUserId) {
                curPlayerIndex = i;
            }
        }
        if (isRefreshWorldRank) {
            this.rankWorldDatas_CW.length = 0;
            for (let i = 0; i < worldNames.length; ++i) {
                this.rankWorldDatas_CW.push(new PlayerData_CSW(worldUserIds[i], worldNames[i], worldLvs[i]));
                if (worldUserIds[i] == this.currentUserId) {
                    curPlayerWorldIndex = i;
                }
            }
        }
        this.getWorldRankPanel.refreshRankPanel(this.rankPlayerDatas_CR, curPlayerIndex, isRefreshWorldRank, this.rankWorldDatas_CW, curPlayerWorldIndex);
    }
    refreshRanking() {
        let curPlayerIndex = -1;
        this.sortRankData_C();
        for (let i = 0; i < this.rankPlayerDatas_CR.length; ++i) {
            if (this.rankPlayerDatas_CR[i].userId == this.currentUserId) {
                curPlayerIndex = i;
            }
        }
        this.getWorldRankPanel.refreshRankPanel(this.rankPlayerDatas_CR, curPlayerIndex, false, null, -1);
    }
    /**
     * 排序排行榜数据
     */
    sortRankData_C() {
        this.rankPlayerDatas_CR.sort((a, b) => {
            switch (this.rankType) {
                case RankType.Lv:
                    return b.playerLv - a.playerLv;
                case RankType.Height:
                    return b.playerHeight - a.playerHeight;
                case RankType.Kill:
                    return b.playerKill - a.playerKill;
            }
        });
    }
}
/**排行类型 */
var RankType;
(function (RankType) {
    RankType[RankType["Lv"] = 1] = "Lv";
    RankType[RankType["Height"] = 2] = "Height";
    RankType[RankType["Kill"] = 3] = "Kill";
})(RankType || (RankType = {}));

var foreign72 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    get RankType () { return RankType; },
    WorldRankModuleC: WorldRankModuleC
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/common/WorldTips/WorldTips_1.ui
 * TIME: 2024.11.04-19.49.51
 */
let WorldTips_1_Generate = class WorldTips_1_Generate extends UIScript {
    get mTextBlock() {
        if (!this.mTextBlock_Internal && this.uiWidgetBase) {
            this.mTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mTextBlock');
        }
        return this.mTextBlock_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mTextBlock);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
WorldTips_1_Generate = __decorate([
    UIBind('UI/common/WorldTips/WorldTips_1.ui')
], WorldTips_1_Generate);
var WorldTips_1_Generate$1 = WorldTips_1_Generate;

var foreign109 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: WorldTips_1_Generate$1
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/common/WorldTips/WorldTips_2.ui
 * TIME: 2024.11.04-19.49.51
 */
let WorldTips_2_Generate = class WorldTips_2_Generate extends UIScript {
    get mTextBlock() {
        if (!this.mTextBlock_Internal && this.uiWidgetBase) {
            this.mTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mTextBlock');
        }
        return this.mTextBlock_Internal;
    }
    get mTextBlock_1() {
        if (!this.mTextBlock_1_Internal && this.uiWidgetBase) {
            this.mTextBlock_1_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mTextBlock_1');
        }
        return this.mTextBlock_1_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mTextBlock);
        this.initLanguage(this.mTextBlock_1);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
WorldTips_2_Generate = __decorate([
    UIBind('UI/common/WorldTips/WorldTips_2.ui')
], WorldTips_2_Generate);
var WorldTips_2_Generate$1 = WorldTips_2_Generate;

var foreign110 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: WorldTips_2_Generate$1
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/common/WorldTips/WorldTips_3.ui
 * TIME: 2024.11.04-19.49.51
 */
let WorldTips_3_Generate = class WorldTips_3_Generate extends UIScript {
    get mTextBlock() {
        if (!this.mTextBlock_Internal && this.uiWidgetBase) {
            this.mTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mTextBlock');
        }
        return this.mTextBlock_Internal;
    }
    get mTextBlock_1() {
        if (!this.mTextBlock_1_Internal && this.uiWidgetBase) {
            this.mTextBlock_1_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mTextBlock_1');
        }
        return this.mTextBlock_1_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mTextBlock);
        this.initLanguage(this.mTextBlock_1);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
WorldTips_3_Generate = __decorate([
    UIBind('UI/common/WorldTips/WorldTips_3.ui')
], WorldTips_3_Generate);
var WorldTips_3_Generate$1 = WorldTips_3_Generate;

var foreign111 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: WorldTips_3_Generate$1
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/common/WorldTips/WorldTips_4.ui
 * TIME: 2024.11.04-19.49.51
 */
let WorldTips_4_Generate = class WorldTips_4_Generate extends UIScript {
    get mTextBlock() {
        if (!this.mTextBlock_Internal && this.uiWidgetBase) {
            this.mTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mTextBlock');
        }
        return this.mTextBlock_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mTextBlock);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
WorldTips_4_Generate = __decorate([
    UIBind('UI/common/WorldTips/WorldTips_4.ui')
], WorldTips_4_Generate);
var WorldTips_4_Generate$1 = WorldTips_4_Generate;

var foreign112 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: WorldTips_4_Generate$1
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/common/WorldTips/WorldTips_5.ui
 * TIME: 2024.11.04-19.49.51
 */
let WorldTips_5_Generate = class WorldTips_5_Generate extends UIScript {
    get mTextBlock() {
        if (!this.mTextBlock_Internal && this.uiWidgetBase) {
            this.mTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mTextBlock');
        }
        return this.mTextBlock_Internal;
    }
    get mTextBlock_1() {
        if (!this.mTextBlock_1_Internal && this.uiWidgetBase) {
            this.mTextBlock_1_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mTextBlock_1');
        }
        return this.mTextBlock_1_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mTextBlock);
        this.initLanguage(this.mTextBlock_1);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
WorldTips_5_Generate = __decorate([
    UIBind('UI/common/WorldTips/WorldTips_5.ui')
], WorldTips_5_Generate);
var WorldTips_5_Generate$1 = WorldTips_5_Generate;

var foreign113 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: WorldTips_5_Generate$1
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/common/WorldTips/WorldTips_6.ui
 * TIME: 2024.11.04-19.49.51
 */
let WorldTips_6_Generate = class WorldTips_6_Generate extends UIScript {
    get mTextBlock() {
        if (!this.mTextBlock_Internal && this.uiWidgetBase) {
            this.mTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mTextBlock');
        }
        return this.mTextBlock_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mTextBlock);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
WorldTips_6_Generate = __decorate([
    UIBind('UI/common/WorldTips/WorldTips_6.ui')
], WorldTips_6_Generate);
var WorldTips_6_Generate$1 = WorldTips_6_Generate;

var foreign114 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: WorldTips_6_Generate$1
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/common/WorldTips/WorldTips_7.ui
 * TIME: 2024.11.04-19.49.51
 */
let WorldTips_7_Generate = class WorldTips_7_Generate extends UIScript {
    get mTextBlock() {
        if (!this.mTextBlock_Internal && this.uiWidgetBase) {
            this.mTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mTextBlock');
        }
        return this.mTextBlock_Internal;
    }
    get mTextBlock_1() {
        if (!this.mTextBlock_1_Internal && this.uiWidgetBase) {
            this.mTextBlock_1_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mTextBlock_1');
        }
        return this.mTextBlock_1_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mTextBlock);
        this.initLanguage(this.mTextBlock_1);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
WorldTips_7_Generate = __decorate([
    UIBind('UI/common/WorldTips/WorldTips_7.ui')
], WorldTips_7_Generate);
var WorldTips_7_Generate$1 = WorldTips_7_Generate;

var foreign115 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: WorldTips_7_Generate$1
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/common/WorldTips/WorldTips.ui
 * TIME: 2024.11.04-19.49.51
 */
let WorldTips_Generate = class WorldTips_Generate extends UIScript {
    get mTextBlock() {
        if (!this.mTextBlock_Internal && this.uiWidgetBase) {
            this.mTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mTextBlock');
        }
        return this.mTextBlock_Internal;
    }
    get mTextBlock_1() {
        if (!this.mTextBlock_1_Internal && this.uiWidgetBase) {
            this.mTextBlock_1_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mTextBlock_1');
        }
        return this.mTextBlock_1_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mTextBlock);
        this.initLanguage(this.mTextBlock_1);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
WorldTips_Generate = __decorate([
    UIBind('UI/common/WorldTips/WorldTips.ui')
], WorldTips_Generate);
var WorldTips_Generate$1 = WorldTips_Generate;

var foreign116 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: WorldTips_Generate$1
});

class WorldUI {
}
const worldUIs = new Map();
worldUIs.set(1, { name: "机甲女", worldUIId: "0D9A6CAC", worldUIName: `Text_ClaimLimitedSkin`, npcId: "2BC98814", skinId: "163553", triggerId: "1B51B317", bagId: 20063, adsCount: 10, currentAdsCount: 0, animationIds: ["285502"], delayPlayEffects: [], effectIds: [], effectLocs: [] });
worldUIs.set(2, { name: "机甲男", worldUIId: "", worldUIName: ``, npcId: "117D39D8", skinId: "164428", triggerId: "1DF5F6A5", bagId: 20062, adsCount: 5, currentAdsCount: 0, animationIds: ["285416"], delayPlayEffects: [], effectIds: [], effectLocs: [] });
worldUIs.set(3, { name: "小舞", worldUIId: "", worldUIName: ``, npcId: "210CBFFD", skinId: "163292", triggerId: "0113105D", bagId: 20061, adsCount: 5, currentAdsCount: 0, animationIds: ["284840"], delayPlayEffects: [], effectIds: [], effectLocs: [] });
worldUIs.set(4, { name: "自动攻击男", worldUIId: "", worldUIName: ``, npcId: "21F595BD", skinId: "142399", triggerId: "0B40F8AC", bagId: 10046, adsCount: 2, currentAdsCount: 0, animationIds: ["85125", "20267"], delayPlayEffects: [350, 250], effectIds: ["168946", "168946"], effectLocs: [new mw.Vector(180, 30, 70), new mw.Vector(-90, 20, 0)] });
worldUIs.set(5, { name: "自动攻击女", worldUIId: "07D9DF79", worldUIName: `Text_ClaimAutomaticAttack`, npcId: "2F801FDC", skinId: "303702", triggerId: "3E7DEC27", bagId: 10047, adsCount: 5, currentAdsCount: 0, animationIds: ["85125", "20267"], delayPlayEffects: [350, 250], effectIds: ["168946", "168946"], effectLocs: [new mw.Vector(180, 30, 70), new mw.Vector(-90, 20, 0)] });
worldUIs.set(6, { name: "大量钻石", worldUIId: "325C5022", worldUIName: `Text_LotsOfDiamonds`, npcId: "", skinId: "", triggerId: "", bagId: -1, adsCount: 0, currentAdsCount: 0, animationIds: [], delayPlayEffects: [], effectIds: [], effectLocs: [] });
const needRefreshWorldUI = ["2284425C", "05994F71"];
const needRefreshWorldUI_1 = ["307CC8EF"];
const needRefreshWorldUI_2 = ["1E7CB2D0"];
const needRefreshWorldUI_3 = ["2EAA4C1B"];
const needRefreshWorldUI_4 = ["3B4347A9"];
const needRefreshWorldUI_5 = ["06FBC7BE", "13F5AF43"];
const needRefreshWorldUI_6 = ["030E4F84"];
const needRefreshWorldUI_7 = ["394026C7"];
const diamondTrigger = ["1271E55D"];
class WorldUIModuleC extends ModuleC {
    constructor() {
        super(...arguments);
        this.adTipsPanel = null;
        this.bagModuleC = null;
        this.playerModuleC = null;
        this.currentGetDiamondCount = 10;
    }
    get getAdTipsPanel() {
        if (!this.adTipsPanel) {
            this.adTipsPanel = mw.UIService.create(AdTipsPanel);
        }
        return this.adTipsPanel;
    }
    get getBagModuleC() {
        if (!this.bagModuleC) {
            this.bagModuleC = ModuleService.getModule(BagModuleC);
        }
        return this.bagModuleC;
    }
    get getPlayerModuleC() {
        if (!this.playerModuleC) {
            this.playerModuleC = ModuleService.getModule(PlayerModuleC);
        }
        return this.playerModuleC;
    }
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
    }
    onEnterScene(sceneType) {
        this.initWorldUI();
    }
    initWorldUI() {
        worldUIs.forEach((value, key) => {
            if (value.npcId && value.npcId.length > 0) {
                mw.GameObject.asyncFindGameObjectById(value.npcId).then((npcGo) => {
                    let npc = npcGo;
                    Utils.asyncDownloadAsset(value.skinId).then(() => {
                        npc.setDescription([value.skinId]);
                    });
                    if (!value.animationIds || value.animationIds.length == 0)
                        return;
                    if (value.animationIds.length == 1) {
                        let npcAnimation1 = npc.loadAnimation(value.animationIds[0]);
                        npcAnimation1.loop = 0;
                        npcAnimation1.play();
                    }
                    else if (value.animationIds.length == 2) {
                        let npcAnimation1 = npc.loadAnimation(value.animationIds[0]);
                        let npcAnimation2 = npc.loadAnimation(value.animationIds[1]);
                        npcAnimation1.onFinish.add(() => {
                            npcAnimation2.play();
                            setTimeout(() => {
                                let forward = npc.worldTransform.getForwardVector().normalized;
                                let right = npc.worldTransform.getRightVector().normalized;
                                let offsetLoc = mw.Vector.zero;
                                let offsetPos = npc.worldTransform.position.clone().add(forward.clone().multiply(offsetLoc.x).add(right.clone().multiply(offsetLoc.y)).add(mw.Vector.up.multiply(offsetLoc.z)));
                                let offsetRot = value.effectLocs[1];
                                let offsetRotate = npc.worldTransform.getForwardVector().toRotation().clone().add(new mw.Rotation(offsetRot.x, offsetRot.y, offsetRot.z));
                                EffectService.playAtPosition(value.effectIds[1], offsetPos, { rotation: offsetRotate });
                            }, value.delayPlayEffects[1]);
                        });
                        npcAnimation2.onFinish.add(() => {
                            npcAnimation1.play();
                            setTimeout(() => {
                                let forward = npc.worldTransform.getForwardVector().normalized;
                                let right = npc.worldTransform.getRightVector().normalized;
                                let offsetLoc = mw.Vector.zero;
                                let offsetPos = npc.worldTransform.position.clone().add(forward.clone().multiply(offsetLoc.x).add(right.clone().multiply(offsetLoc.y)).add(mw.Vector.up.multiply(offsetLoc.z)));
                                let offsetRot = value.effectLocs[0];
                                let offsetRotate = npc.worldTransform.getForwardVector().toRotation().clone().add(new mw.Rotation(offsetRot.x, offsetRot.y, offsetRot.z));
                                EffectService.playAtPosition(value.effectIds[0], offsetPos, { rotation: offsetRotate });
                            }, value.delayPlayEffects[0]);
                        });
                        npcAnimation1.play();
                        setTimeout(() => {
                            let forward = npc.worldTransform.getForwardVector().normalized;
                            let right = npc.worldTransform.getRightVector().normalized;
                            let offsetLoc = mw.Vector.zero;
                            let offsetPos = npc.worldTransform.position.clone().add(forward.clone().multiply(offsetLoc.x).add(right.clone().multiply(offsetLoc.y)).add(mw.Vector.up.multiply(offsetLoc.z)));
                            let offsetRot = value.effectLocs[0];
                            let offsetRotate = npc.worldTransform.getForwardVector().toRotation().clone().add(new mw.Rotation(offsetRot.x, offsetRot.y, offsetRot.z));
                            EffectService.playAtPosition(value.effectIds[0], offsetPos, { rotation: offsetRotate });
                        }, value.delayPlayEffects[0]);
                    }
                });
            }
            if (value.triggerId && value.triggerId.length > 0) {
                mw.GameObject.asyncFindGameObjectById(value.triggerId).then((triggerGo) => {
                    let trigger = triggerGo;
                    trigger.onEnter.add((character) => {
                        if (character.gameObjectId != this.localPlayer.character.gameObjectId)
                            return;
                        this.nextAds(value);
                    });
                });
            }
            if (value.worldUIId && value.worldUIId.length > 0) {
                mw.GameObject.asyncFindGameObjectById(value.worldUIId).then((worldUIGo) => {
                    let worldUI = worldUIGo;
                    let levelItem = mw.UIService.create(LevelItem);
                    levelItem.updateLevelTextBlock(GameConfig.Language[`${value.worldUIName}`].Value);
                    worldUI.setTargetUIWidget(levelItem.uiWidgetBase);
                });
            }
        });
        needRefreshWorldUI.forEach((value) => {
            mw.GameObject.asyncFindGameObjectById(value).then((worldUIGo) => {
                let worldUI = worldUIGo;
                let levelItem = mw.UIService.create(WorldTips_Generate$1);
                worldUI.setTargetUIWidget(levelItem.uiWidgetBase);
            });
        });
        needRefreshWorldUI_1.forEach((value) => {
            mw.GameObject.asyncFindGameObjectById(value).then((worldUIGo) => {
                let worldUI = worldUIGo;
                let levelItem = mw.UIService.create(WorldTips_1_Generate$1);
                worldUI.setTargetUIWidget(levelItem.uiWidgetBase);
            });
        });
        needRefreshWorldUI_2.forEach((value) => {
            mw.GameObject.asyncFindGameObjectById(value).then((worldUIGo) => {
                let worldUI = worldUIGo;
                let levelItem = mw.UIService.create(WorldTips_2_Generate$1);
                worldUI.setTargetUIWidget(levelItem.uiWidgetBase);
            });
        });
        needRefreshWorldUI_3.forEach((value) => {
            mw.GameObject.asyncFindGameObjectById(value).then((worldUIGo) => {
                let worldUI = worldUIGo;
                let levelItem = mw.UIService.create(WorldTips_3_Generate$1);
                worldUI.setTargetUIWidget(levelItem.uiWidgetBase);
            });
        });
        needRefreshWorldUI_4.forEach((value) => {
            mw.GameObject.asyncFindGameObjectById(value).then((worldUIGo) => {
                let worldUI = worldUIGo;
                let levelItem = mw.UIService.create(WorldTips_4_Generate$1);
                worldUI.setTargetUIWidget(levelItem.uiWidgetBase);
            });
        });
        needRefreshWorldUI_5.forEach((value) => {
            mw.GameObject.asyncFindGameObjectById(value).then((worldUIGo) => {
                let worldUI = worldUIGo;
                let levelItem = mw.UIService.create(WorldTips_5_Generate$1);
                worldUI.setTargetUIWidget(levelItem.uiWidgetBase);
            });
        });
        needRefreshWorldUI_6.forEach((value) => {
            mw.GameObject.asyncFindGameObjectById(value).then((worldUIGo) => {
                let worldUI = worldUIGo;
                let levelItem = mw.UIService.create(WorldTips_6_Generate$1);
                worldUI.setTargetUIWidget(levelItem.uiWidgetBase);
            });
        });
        needRefreshWorldUI_7.forEach((value) => {
            mw.GameObject.asyncFindGameObjectById(value).then((worldUIGo) => {
                let worldUI = worldUIGo;
                let levelItem = mw.UIService.create(WorldTips_7_Generate$1);
                worldUI.setTargetUIWidget(levelItem.uiWidgetBase);
            });
        });
        diamondTrigger.forEach((value) => {
            mw.GameObject.asyncFindGameObjectById(value).then((triggerGo) => {
                let trigger = triggerGo;
                trigger.onEnter.add((character) => {
                    if (character.gameObjectId != this.localPlayer.character.gameObjectId)
                        return;
                    this.getDiamonds();
                });
            });
        });
    }
    getDiamonds() {
        if (GlobalData.isOpenIAA) {
            this.getAdTipsPanel.showRewardAd(() => {
                Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_SuccessfullyObtainedDiamonds.Value, GlobalData.addDiamondCount * this.currentGetDiamondCount));
                this.getPlayerModuleC.saveDiamond(GlobalData.addDiamondCount * this.currentGetDiamondCount);
                this.currentGetDiamondCount++;
            }, StringUtil.format(GameConfig.Language.Text_GetFreeDiamonds.Value, GlobalData.addDiamondCount * this.currentGetDiamondCount), GameConfig.Language.Text_Cancel.Value, GameConfig.Language.Text_FreeToReceive.Value);
        }
        else {
            Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_SuccessfullyObtainedDiamonds.Value, GlobalData.addDiamondCount * this.currentGetDiamondCount));
            this.getPlayerModuleC.saveDiamond(GlobalData.addDiamondCount * this.currentGetDiamondCount);
            this.currentGetDiamondCount++;
        }
    }
    nextAds(value) {
        if (this.getBagModuleC.isHasBagId(value.bagId)) {
            Notice.showDownNotice(GameConfig.Language.Text_ObtainedOpenTheBackpackToUse.Value);
            return;
        }
        this.getAdTipsPanel.showRewardAd(() => {
            value.currentAdsCount++;
            if (value.currentAdsCount >= value.adsCount) {
                this.getBagModuleC.onCompleted(value.bagId);
            }
            else {
                TimeUtil.delaySecond(2).then(() => {
                    this.nextAds(value);
                });
            }
        }, StringUtil.format(GameConfig.Language.Text_WatchTheAdvertisementTimesGetItForFree.Value, value.adsCount - value.currentAdsCount), GameConfig.Language.Text_Cancel.Value, GameConfig.Language.Text_GetItForFree.Value);
    }
}
class WorldUIModuleS extends ModuleS {
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
    }
}

var foreign88 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    WorldUI: WorldUI,
    WorldUIModuleC: WorldUIModuleC,
    WorldUIModuleS: WorldUIModuleS
});

let GameLauncher = class GameLauncher extends mw.Script {
    constructor() {
        super(...arguments);
        this.isHideHeadUI = true;
        this.isOpenIAA = true;
        this.isOpenCcreenshot = false;
        this.languageId = -1;
        this.logLevel = "0";
        /**------------------------------------------- 服务端 ------------------------------------------------ */
    }
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
        this.onStartCS();
        if (mw.SystemUtil.isClient()) {
            this.onStartC();
        }
        else if (mw.SystemUtil.isServer()) {
            this.onStartS();
        }
    }
    /**客户端服务端的onStart */
    onStartCS() {
        this.useUpdate = true;
        GlobalData.isDebug = SystemUtil.isPIE;
        GlobalData.logLevel = Number(this.logLevel);
        GlobalData.isHideHeadUI = this.isHideHeadUI;
        GlobalData.isOpenIAA = !mw.SystemUtil.isPIE || this.isOpenIAA;
        GlobalData.isOpenCcreenshot = this.isOpenCcreenshot;
        this.onRegisterModule();
    }
    /**
     * 周期函数 每帧执行
     * 此函数执行需要将this.useUpdate赋值为true
     * @param dt 当前帧与上一帧的延迟 / 秒
     */
    onUpdate(dt) {
        update();
        mw.TweenUtil.TWEEN.update();
        if (mw.SystemUtil.isClient()) {
            this.onUpdateC(dt);
        }
        else if (mw.SystemUtil.isServer()) {
            this.onUpdateS(dt);
        }
    }
    /**注册模块 */
    onRegisterModule() {
        ModuleService.registerModule(HUDModuleS, HUDModuleC, null);
        ModuleService.registerModule(BagModuleS, BagModuleC, BagData);
        ModuleService.registerModule(PlayerModuleS, PlayerModuleC, PlayerData);
        ModuleService.registerModule(TaskModuleS, TaskModuleC, TaskData);
        ModuleService.registerModule(GuideModuleS, GuideModuleC, GuideData);
        ModuleService.registerModule(WorldRankModuleS, WorldRankModuleC, null);
        ModuleService.registerModule(OnlineRewardModuleS, OnlineRewardModuleC, OnlineRewardData);
        ModuleService.registerModule(RingSoulModuleS, RingSoulModuleC, RingSoulData);
        ModuleService.registerModule(SignInModuleS, SignInModuleC, SignInData);
        ModuleService.registerModule(ArkModuleS, ArkModuleC, ArkData);
        ModuleService.registerModule(LevelModuleS, LevelModuleC, LevelData);
        ModuleService.registerModule(NewPeopleModuleS, NewPeopleModuleC, NewPeopleData);
        ModuleService.registerModule(LotteryModuleS, LotteryModuleC, null);
        ModuleService.registerModule(FlyModuleS, FlyModuleC, FlyData);
        ModuleService.registerModule(SoulBoneModuleS, SoulBoneModuleC, SoulBone);
        ModuleService.registerModule(WorldUIModuleS, WorldUIModuleC, null);
    }
    /**------------------------------------------- 客户端 ------------------------------------------------ */
    /**客户端的OnStart */
    onStartC() {
        this.initLanguage();
    }
    initLanguage() {
        let language = LocaleUtil.getDefaultLocale().toString().toLowerCase();
        console.error(`wfz - language:${language}`);
        let languageId = -1;
        if (mw.SystemUtil.isPIE && this.languageId >= 0) {
            languageId = this.languageId;
        }
        else {
            if (!!language.match("en")) {
                languageId = 0;
            }
            else if (!!language.match("zh")) { //简体
                languageId = 1;
            }
            else if (!!language.match("ja")) {
                languageId = 3;
            }
            else if (!!language.match("ko")) {
                languageId = 4;
            }
            else { //繁体
                languageId = 2;
            }
        }
        GlobalData.languageId = languageId;
        console.error(`wfz - languageId:${languageId}`);
        GameConfig.initLanguage(languageId, (key) => {
            let ele = GameConfig.Language.getElement(key);
            if (ele == null)
                return "unknow_" + key;
            return ele.Value;
        });
        mw.UIScript.addBehavior("lan", (ui) => {
            let key = ui.text;
            if (!key)
                return;
            let lan = GameConfig.Language.getElement(key);
            if (lan)
                ui.text = lan.Value;
        });
    }
    /**客户端的update */
    onUpdateC(dt) {
    }
    /**------------------------------------------- 客户端 ------------------------------------------------ */
    /**------------------------------------------- 服务端 ------------------------------------------------ */
    /**服务端的OnStart */
    onStartS() {
        DataStorage.setTemporaryStorage(SystemUtil.isPIE);
    }
    /**服务端的update */
    onUpdateS(dt) {
    }
};
__decorate([
    mw.Property({ displayName: "是否隐藏头顶UI", group: "脚本设置" })
], GameLauncher.prototype, "isHideHeadUI", void 0);
__decorate([
    mw.Property({ displayName: "是否开启IAA", group: "脚本设置" })
], GameLauncher.prototype, "isOpenIAA", void 0);
__decorate([
    mw.Property({ displayName: "是否开启截图模式", group: "脚本设置" })
], GameLauncher.prototype, "isOpenCcreenshot", void 0);
__decorate([
    mw.Property({ displayName: "多语言", group: "脚本设置", enumType: { "系统默认": -1, "英语": 0, "简体中文": 1, "繁体中文": 2, "日语": 3, "韩语": 4 } })
], GameLauncher.prototype, "languageId", void 0);
__decorate([
    mw.Property({ displayName: "Log级别", group: "脚本设置", selectOptions: { "None": "0", "Log": "1", "Warn": "2", "Error": "3" } })
], GameLauncher.prototype, "logLevel", void 0);
GameLauncher = __decorate([
    Component
], GameLauncher);
var GameLauncher$1 = GameLauncher;

var foreign38 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: GameLauncher$1
});

class ModifiedCameraSystem {
    static get cameraLocationMode() {
        if (!SystemUtil.isClient()) {
            return;
        }
        return Camera.currentCamera.positionMode;
    }
    static set cameraLocationMode(newCameraLocationMode) {
        if (!SystemUtil.isClient()) {
            return;
        }
        let tempTransform = Camera.currentCamera.springArm.localTransform;
        Camera.currentCamera.positionMode = newCameraLocationMode;
        if (newCameraLocationMode == CameraPositionMode.PositionFollow) {
            Camera.currentCamera.parent = Player.localPlayer.character;
            Camera.currentCamera.springArm.localTransform = tempTransform;
        }
    }
    static setCameraFollowTarget(target) {
        if (!SystemUtil.isClient())
            return;
        Camera.currentCamera.parent = target;
        Camera.currentCamera.springArm.localTransform = Transform.identity;
    }
    static cancelCameraFollowTarget() {
        if (!SystemUtil.isClient())
            return;
        Camera.currentCamera.parent = Player.localPlayer.character;
        Camera.currentCamera.springArm.localTransform = Transform.identity;
    }
    static setOverrideCameraRotation(newOverrideRotation) {
        if (!SystemUtil.isClient())
            return;
        ModifiedCameraSystem.followEnable = true;
        ModifiedCameraSystem.followRotationValue = newOverrideRotation;
        Player.setControllerRotation(ModifiedCameraSystem.followRotationValue);
        if (!ModifiedCameraSystem.isBind) {
            TimeUtil.onEnterFrame.add(() => {
                if (ModifiedCameraSystem.followEnable) {
                    Player.setControllerRotation(ModifiedCameraSystem.followRotationValue);
                }
            }, this);
            ModifiedCameraSystem.isBind = true;
        }
    }
    static resetOverrideCameraRotation() {
        if (!SystemUtil.isClient())
            return;
        ModifiedCameraSystem.followEnable = false;
    }
    static getCurrentSettings() {
        if (!SystemUtil.isClient())
            return;
        cameraSystemConfig.cameraRelativeTransform = Camera.currentCamera.localTransform;
        cameraSystemConfig.cameraWorldTransform = Camera.currentCamera.worldTransform;
        cameraSystemConfig.targetArmLength = Camera.currentCamera.springArm.length;
        cameraSystemConfig.enableCameraLocationLag = Camera.currentCamera.positionLagEnabled;
        cameraSystemConfig.cameraLocationLagSpeed = Camera.currentCamera.positionLagSpeed;
        cameraSystemConfig.enableCameraRotationLag = Camera.currentCamera.rotationLagEnabled;
        cameraSystemConfig.cameraRotationLagSpeed = Camera.currentCamera.rotationLagSpeed;
        cameraSystemConfig.cameraFOV = Camera.currentCamera.fov;
        cameraSystemConfig.cameraLocationMode = Camera.currentCamera.positionMode;
        cameraSystemConfig.cameraRotationMode = Camera.currentCamera.rotationMode;
        cameraSystemConfig.enableCameraCollision = Camera.currentCamera.springArm.collisionEnabled;
        cameraSystemConfig.cameraUpLimitAngle = Camera.currentCamera.upAngleLimit;
        cameraSystemConfig.cameraDownLimitAngle = Camera.currentCamera.downAngleLimit;
        return cameraSystemConfig;
    }
    static applySettings(CameraSetting) {
        if (!SystemUtil.isClient())
            return;
        Camera.currentCamera.localTransform = CameraSetting.cameraRelativeTransform;
        Camera.currentCamera.springArm.length = CameraSetting.targetArmLength;
        Camera.currentCamera.positionLagEnabled = CameraSetting.enableCameraLocationLag;
        Camera.currentCamera.positionLagSpeed = CameraSetting.cameraLocationLagSpeed;
        Camera.currentCamera.rotationLagEnabled = CameraSetting.enableCameraRotationLag;
        Camera.currentCamera.rotationLagSpeed = CameraSetting.cameraRotationLagSpeed;
        Camera.currentCamera.fov = CameraSetting.cameraFOV;
        ModifiedCameraSystem.cameraLocationMode = CameraSetting.cameraLocationMode;
        Camera.currentCamera.rotationMode = CameraSetting.cameraRotationMode;
        Camera.currentCamera.springArm.collisionEnabled = CameraSetting.enableCameraCollision;
        Camera.currentCamera.upAngleLimit = CameraSetting.cameraUpLimitAngle;
        Camera.currentCamera.downAngleLimit = CameraSetting.cameraDownLimitAngle;
    }
    static cameraFocusing(targetArmLength, targetOffset, timeInterval = 20) {
        if (!SystemUtil.isClient())
            return;
        let timer = TimeUtil.onEnterFrame.add(() => {
            let interpolationValue = Camera.currentCamera.springArm.length + (targetArmLength - Camera.currentCamera.springArm.length) / timeInterval;
            Camera.currentCamera.springArm.length = interpolationValue;
            if (Math.abs(Camera.currentCamera.springArm.length - targetArmLength) <= 0.5) {
                TimeUtil.onEnterFrame.remove(timer);
            }
        });
    }
    static startCameraShake(shakeData) {
        if (!SystemUtil.isClient())
            return;
        let info = {
            rotationYAmplitude: shakeData.rotYawOscillation.amplitude,
            rotationYFrequency: shakeData.rotYawOscillation.frequency,
            rotationZAmplitude: shakeData.rotRollOscillation.amplitude,
            rotationZFrequency: shakeData.rotRollOscillation.frequency,
            rotationXAmplitude: shakeData.rotPitchOscillation.amplitude,
            rotationXFrequency: shakeData.rotPitchOscillation.frequency,
            positionXAmplitude: shakeData.locXOscillation.amplitude,
            positionXFrequency: shakeData.locXOscillation.frequency,
            positionYAmplitude: shakeData.locYOscillation.amplitude,
            positionYFrequency: shakeData.locYOscillation.frequency,
            positionZAmplitude: shakeData.locZOscillation.amplitude,
            positionZFrequency: shakeData.locZOscillation.frequency,
        };
        Camera.shake(info);
    }
    static stopCameraShake() {
        if (!SystemUtil.isClient())
            return;
        Camera.stopShake();
    }
    static getDefaultCameraShakeData() {
        const defaultOscillator = {
            amplitude: 0,
            frequency: 0,
            waveform: CameraModifid.EOscillatorWaveform.SineWave,
        };
        const defaultCameraShakeData = {
            rotPitchOscillation: { ...defaultOscillator },
            rotYawOscillation: { ...defaultOscillator },
            rotRollOscillation: { ...defaultOscillator },
            locXOscillation: { ...defaultOscillator },
            locYOscillation: { ...defaultOscillator },
            locZOscillation: { ...defaultOscillator },
            fovOscillation: { ...defaultOscillator },
        };
        return defaultCameraShakeData;
    }
}
ModifiedCameraSystem.isBind = false;
ModifiedCameraSystem.followTargetEnable = true;
ModifiedCameraSystem.followTargetInterpSpeed = 15;
var CameraModifid;
(function (CameraModifid) {
    (function (EOscillatorWaveform) {
        /** 正弦波 */
        EOscillatorWaveform[EOscillatorWaveform["SineWave"] = 0] = "SineWave";
        /** Perlin噪声 */
        EOscillatorWaveform[EOscillatorWaveform["PerlinNoise"] = 1] = "PerlinNoise";
    })(CameraModifid.EOscillatorWaveform || (CameraModifid.EOscillatorWaveform = {}));
})(CameraModifid || (CameraModifid = {}));
const cameraSystemConfig = {
    cameraRelativeTransform: Transform.identity,
    cameraWorldTransform: Transform.identity,
    targetArmLength: 400,
    enableCameraLocationLag: false,
    cameraLocationLagSpeed: 10,
    enableCameraRotationLag: false,
    cameraRotationLagSpeed: 10,
    cameraFOV: 90,
    cameraLocationMode: CameraPositionMode.PositionFollow,
    cameraRotationMode: CameraRotationMode.RotationControl,
    enableCameraCollision: true,
    cameraUpLimitAngle: 40,
    cameraDownLimitAngle: -40,
};

var foreign39 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    get CameraModifid () { return CameraModifid; },
    ModifiedCameraSystem: ModifiedCameraSystem
});

// import { Utils } from '../../Tools/utils';
// import { Notice } from "../../common/notice/Notice";
// import GlobalData from '../../const/GlobalData';
// import PlayerModuleC from "../PlayerModule/PlayerModuleC";
// import ShopModuleC from "../ShopModule/ShopModuleC";
// import TaskModuleC from "../TaskModule/TaskModuleC";
// import AdsModuleS from "./AdsModuleS";
// import AdTipsPanel from "./ui/AdTipsPanel";
// export default class AdsModuleC extends ModuleC<AdsModuleS, null> {
//     /**商店模块 */
//     private shopModuleC: ShopModuleC = null;
//     private taskModuleC: TaskModuleC = null;
//     private playerModuleC: PlayerModuleC = null;
//     /**广告面板 */
//     private adTipsPanel: AdTipsPanel = null;
//     /** 当脚本被实例后，会在第一帧更新前调用此函数 */
//     protected onStart(): void {
//         this.initData();
//         this.registerActions();
//     }
//     /**初始化数据 */
//     private initData(): void {
//         this.shopModuleC = ModuleService.getModule(ShopModuleC);
//         this.taskModuleC = ModuleService.getModule(TaskModuleC);
//         this.playerModuleC = ModuleService.getModule(PlayerModuleC);
//         this.adTipsPanel = mw.UIService.getUI(AdTipsPanel);
//     }
//     /**注册事件 */
//     private registerActions(): void {
//         this.adTipsPanel.onWatchAdsAction.add(this.playAds.bind(this));
//     }
//     protected onEnterScene(sceneType: number): void {
//         this.defaultAds();
//     }
//     /**播放广告 */
//     private playAds(id: number, adType: number): void {
//         this.getReward(id, adType);
//         Notice.showDownNotice("成功获得奖励");
//     }
//     /**获得奖励 */
//     private getReward(id: number, adType: number): void {
//         switch (adType) {
//             case AdType.WeaponSet:
//                 this.shopModuleC.onSwitchWeaponSet();
//                 Notice.showDownNotice("成功获得英雄套装");
//                 break;
//             case AdType.AddCoin:
//                 this.playerModuleC.saveCoin(1000);
//                 Notice.showDownNotice("成功获得1000金币");
//                 break;
//             case AdType.AddCoinAndExp:
//                 this.playerModuleC.saveCoinAndExp(500, 500);
//                 Notice.showDownNotice("成功获得500金币");
//                 Notice.showDownNotice("成功获得500经验");
//                 break;
//             case AdType.WeaponSet1:
//                 this.shopModuleC.ads(id);
//                 Notice.showDownNotice("成功获得英雄套装");
//                 break;
//             default:
//                 break;
//         }
//         this.taskModuleC.ads();
//     }
//     private defaultAds(): void {
//         TimeUtil.delaySecond(60).then(() => {
//             if (GlobalData.isOpenIAA) {
//                 this.adTipsPanel.showAdTips(30, AdType.WeaponSet1);
//             } else {
//                 this.getReward(30, AdType.WeaponSet1);
//             }
//             TimeUtil.setInterval(() => {
//                 this.adTipsPanel.showAdTips(Utils.getRandomInteger(23, 40), AdType.WeaponSet1);
//             }, 180);
//         });
//     }
// }
// export enum AdType {
//     /**武器套装 */
//     WeaponSet = 1,
//     /**AddCoin */
//     AddCoin = 2,
//     /**AddCoinAndExp */
//     AddCoinAndExp = 3,
//     /**武器套装 */
//     WeaponSet1 = 4,
// }

var foreign43 = /*#__PURE__*/Object.freeze({
    __proto__: null
});

// import AdsModuleC from "./AdsModuleC";
// export default class AdsModuleS extends ModuleS<AdsModuleC, null>{
//     /** 当脚本被实例后，会在第一帧更新前调用此函数 */
//     protected onStart(): void {
//     }
// }

var foreign44 = /*#__PURE__*/Object.freeze({
    __proto__: null
});

// import { GeneralManager, } from '../../Modified027Editor/ModifiedStaticAPI';
// import Console from "../../Tools/Console";
// declare global {
//     var UE: any;
// }
// class ObjMeshCalss {
//     public objMesh: mw.Model = null;
//     public objLocation: mw.Vector = mw.Vector.zero;
//     public objRotation: mw.Rotation = mw.Rotation.zero;
//     public isCanAtk: boolean = true;
// }
// export class ObjImpulseModuleC extends ModuleC<ObjImpulseModuleS, null> {
//     protected onStart(): void {
//     }
//     public addImpulseToObj(objGuid: string, force: number): void {
//         this.server.net_addImpulseToObj(objGuid, force);
//     }
// }
// export class ObjImpulseModuleS extends ModuleS<ObjImpulseModuleC, null> {
//     private objGuids: string[] = ["1F185144", "36F3DE51", "3B9AEB96", "0C7BDA34", "368270D9", "1F7D8922"];
//     private objMeshClassMap: Map<string, ObjMeshCalss> = new Map<string, ObjMeshCalss>();
//     protected onStart(): void {
//         this.findObjs();
//     }
//     private async findObjs() {
//         for (let i = 0; i < this.objGuids.length; ++i) {
//             let objMesh = await GameObject.asyncFindGameObjectById(this.objGuids[i]) as mw.Model;
//             if (objMesh) {
//                 objMesh.physicsEnabled = true;
//                 objMesh.physicsEnabled = false;
//                 let objMeshClass = new ObjMeshCalss();
//                 objMeshClass.objMesh = objMesh;
//                 objMeshClass.objLocation = objMesh.worldTransform.position;
//                 objMeshClass.objRotation = objMesh.worldTransform.rotation;
//                 this.objMeshClassMap.set(this.objGuids[i], objMeshClass);
//             }
//             Console.error("i = " + i);
//         }
//     }
//     @Decorator.noReply()
//     public net_addImpulseToObj(objGuid: string, force: number): void {
//         this.addImpulseToObj(this.currentPlayer, objGuid, force);
//     }
//     public addImpulseToObj(player: mw.Player, objGuid: string, force: number): void {
//         if (!this.objMeshClassMap.has(objGuid)) return;
//         let objMeshClass = this.objMeshClassMap.get(objGuid);
//         if (!objMeshClass.isCanAtk) return;
//         objMeshClass.isCanAtk = false;
//         let objMesh = objMeshClass.objMesh;
//         let objLocation = objMesh.worldTransform.position;
//         let objRotation = objMesh.worldTransform.rotation;
//         objMesh.physicsEnabled = true;
//         let playerLoc = player.character.worldTransform.position;
//         let forceVector = new mw.Vector(objLocation.x - playerLoc.x, objLocation.y - playerLoc.y, 0).normalize();
//         const uForce = new UE.Vector();
//         uForce.X = forceVector.x * force;
//         uForce.Y = forceVector.y * force;
//         uForce.Z = forceVector.z * force;
//         TimeUtil.delayExecute(() => {
//             objMesh["privateActor"].GetStaticMeshComponent().AddImpulse(uForce, "None", true);
//             SoundService.play3DSound(
//                 "47430",
//                 objLocation,
//                 1,
//                 1,
//                 // { innerRadius: 300, falloffDistance: 1000 }
//             );
//             GeneralManager.rpcPlayEffectAtLocation(
//                 "174248",
//                 objLocation,
//                 1,
//                 mw.Rotation.zero,
//                 mw.Vector.one.multiply(5),
//             );
//         }, 1);
//         TimeUtil.delaySecond(5).then(() => {
//             objMeshClass.isCanAtk = true;
//             objMesh.physicsEnabled = false;
//             objMesh.worldTransform.position = (objLocation);
//             objMesh.worldTransform.rotation = (objRotation);
//         });
//     }
// }

var foreign58 = /*#__PURE__*/Object.freeze({
    __proto__: null
});

class PropData extends Subdata {
    constructor() {
        super(...arguments);
        this.props = [];
    }
    initDefaultData() {
        this.props = [];
    }
    addProp(propId) {
        if (this.props.includes(propId))
            return;
        this.props.push(propId);
        this.save(true);
    }
}
__decorate([
    Decorator.persistence()
], PropData.prototype, "props", void 0);

var foreign67 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    PropData: PropData
});

class PropModuleC extends ModuleC {
    constructor() {
        super(...arguments);
        this.playerCamera = null;
        this.hudModuleC = null;
        this.normalCameraLocation = new mw.Vector(0, 0, 85);
        this.normalCameraRotation = new mw.Rotation(0, 0, 0);
        this.giantCameraLocation = new mw.Vector(-200, 0, 85);
        this.giantCameraRotation = new mw.Rotation(0, 0, 0);
        //#endregion
    }
    get playerCameraSystem() {
        if (this.playerCamera == null) {
            this.playerCamera = Camera.currentCamera;
        }
        return this.playerCamera;
    }
    onStart() {
        this.initData();
        this.registerAction();
    }
    initData() {
        this.hudModuleC = ModuleService.getModule(HUDModuleC);
    }
    registerAction() {
        let isBig = false;
        InputUtil.onKeyDown(mw.Keys.NumPadTwo, () => {
            isBig = !isBig;
            this.giant(isBig);
        });
    }
    //#region 巨人
    giant(isGiant) {
        if (isGiant) {
            this.hudModuleC.onPlayerScaleAction.call(5);
        }
        else {
            this.hudModuleC.onPlayerScaleAction.call(1);
        }
        this.setCameraOffset(isGiant);
        this.server.net_giant(isGiant);
    }
    setCameraOffset(isGiant) {
        let playerCameraTransform = new mw.Transform();
        playerCameraTransform.position = isGiant ? this.giantCameraLocation : this.normalCameraLocation;
        playerCameraTransform.rotation = isGiant ? this.giantCameraRotation : this.normalCameraRotation;
        this.playerCameraSystem.localTransform = playerCameraTransform;
    }
}

var foreign68 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    PropModuleC: PropModuleC
});

class PropModuleS extends ModuleS {
    constructor() {
        super(...arguments);
        /**变大动画 */
        this.giantAnimationId = "122543";
        /**正在变大的特效 */
        this.giantingEffectGuids = ["160750", "88781"];
        /**正在变大的特效缩放倍数 */
        this.giantingEffectScales = [1.5, 1];
        /**变大成功的特效 */
        this.giantEffectIds = ["168952", "155593"];
        /**变大成功的特效偏移 */
        this.giantEffectOffsets = [new mw.Vector(0, 0, 100), new mw.Vector(0, 0, 0)];
        //#endregion
    }
    onStart() {
    }
    //#region 巨人
    /**
     * 巨人
     * @param isGiant 是否巨人
     */
    net_giant(isGiant) {
        let character = this.currentPlayer.character;
        if (isGiant) {
            this.gianting(character);
        }
        else {
            character.worldTransform.scale = (mw.Vector.one);
        }
    }
    /**
     * 巨人化
     * @param character 角色
     */
    gianting(character) {
        PlayerManagerExtesion.rpcPlayAnimation(character, this.giantAnimationId, 1);
        let giantingEffectIds = this.playGiantingEffects(character);
        TimeUtil.delaySecond(2).then(() => {
            this.stopGiantingEffects(giantingEffectIds);
            character.worldTransform.position = (character.worldTransform.position.add(new mw.Vector(0, 0, 500)));
            character.worldTransform.scale = (mw.Vector.one.multiply(5));
            this.playGianEffects(character);
        });
    }
    /**
     * 播放正在变大的特效
     * @param character
     * @returns
     */
    playGiantingEffects(character) {
        let giantingEffectIds = [];
        for (let i = 0; i < this.giantingEffectGuids.length; ++i) {
            giantingEffectIds.push(GeneralManager.rpcPlayEffectOnPlayer(this.giantingEffectGuids[i], character.player, mw.HumanoidSlotType.Root, 0, mw.Vector.zero, mw.Rotation.zero, mw.Vector.one.multiply(this.giantingEffectScales[i])));
        }
        return giantingEffectIds;
    }
    /**
     * 停止正在变大的特效
     * @param giantingEffectIds
     */
    stopGiantingEffects(giantingEffectIds) {
        giantingEffectIds.forEach((e) => {
            EffectService.stop(e);
        });
        giantingEffectIds = [];
    }
    /**
     * 播放成功变大的特效
     * @param character
     */
    playGianEffects(character) {
        for (let i = 0; i < this.giantEffectIds.length; ++i) {
            GeneralManager.rpcPlayEffectOnPlayer(this.giantEffectIds[i], character.player, mw.HumanoidSlotType.Root, 1, this.giantEffectOffsets[i], mw.Rotation.zero, mw.Vector.one);
        }
    }
}

var foreign69 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    PropModuleS: PropModuleS
});

class ShopData extends Subdata {
    constructor() {
        super(...arguments);
        this.weaponSet = [];
        this.useWeaponId = -1;
    }
    initDefaultData() {
        this.weaponSet = [1];
        this.useWeaponId = 1;
        Console.error("ShopData-initDefaultData");
    }
    saveWeaponSet(weaponId) {
        if (this.weaponSet.includes(weaponId))
            return;
        this.weaponSet.push(weaponId);
        this.save(true);
    }
    saveUseWeaponId(useWeaponId) {
        this.useWeaponId = useWeaponId;
        this.save(true);
    }
}
__decorate([
    Decorator.persistence()
], ShopData.prototype, "weaponSet", void 0);
__decorate([
    Decorator.persistence()
], ShopData.prototype, "useWeaponId", void 0);

var foreign75 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: ShopData
});

class InputManagers {
    /**单例 */
    static get getInstance() {
        if (this._instance == null && !this._isDestroy) {
            this._instance = new InputManagers("Singleton-WFZ");
        }
        return this._instance;
    }
    constructor(name) {
        /**按压 */
        this.onPressTouch = new mw.Action1();
        /**抬起 */
        this.onReleaseTouch = new mw.Action1();
        this.name = name;
        this.initAndBind();
    }
    /**初始化和绑定 */
    initAndBind() {
        if (mw.SystemUtil.isClient()) {
            if (this.touch == null) {
                this.initTouch();
            }
            this.touch.onTouchBegin.add(this.beginMulFun);
            this.touch.onTouchEnd.add(this.beginMulFun);
            this.touch.onTouch.add(this.beginMulFun);
            this.keyDownActionMap = new Map();
        }
    }
    /**
     * 鼠标点击触发，返回点击的所有结果
     */
    get onTouch() {
        if (this._onTouch == null)
            this._onTouch = new Action1();
        return this._onTouch;
    }
    /**初始化触摸数据 */
    initTouch() {
        if (this.touch != null)
            return;
        this.touch = new mw.TouchInput();
        this.beginMulFun = this.touchControl.bind(this);
        Player.asyncGetLocalPlayer().then(player => {
            // this.touch.setPlayerController();
            this.touch.onTouchBegin.add(this.touchHandler.bind(this));
        });
    }
    /**屏幕触摸控制 */
    touchControl(index, loc, touchType) {
        let touchArr = this.touch.getTouchVectorArray();
        if (touchType == mw.TouchInputType.TouchEnd) {
            this.onReleaseTouch.call(new TouchData(touchType, loc.x, loc.y));
        }
        else {
            for (let i = 0; i < touchArr.length; i++) {
                if (touchArr[i].z > 0) {
                    this.onPressTouch.call(new TouchData(touchType, touchArr[i].x, touchArr[i].y));
                }
            }
        }
    }
    /**获取点击屏幕位置的物体 */
    touchHandler(index, location, state) {
        if (this.onTouch.count == 0)
            return;
        location = this.touch.getTouchVectorArray()[0];
        let list = ScreenUtil.getGameObjectByScreenPosition(location.x, location.y, 50000, true, false);
        let arr = [];
        for (let i = 0; list != null && i < list.length; i++) {
            if (arr.includes(list[i]))
                continue;
            arr.push(list[i]);
        }
        if (list.length > 0) {
            this.onTouch.call(arr);
        }
    }
    /**
     * 按下键盘事件(增加了重复监听的判断，还可以移除监听方法)
     * @param key 按键类型
     * @returns 监听的Action方法
     */
    onKeyDown(key) {
        if (!this.keyDownActionMap.has(key)) {
            this.keyDownActionMap.set(key, new Action1());
            InputUtil.onKeyDown(key, () => {
                this.keyDownActionMap.get(key).call(key);
            });
        }
        let action = this.keyDownActionMap.get(key);
        if (action.count > 0) {
            Console.error("重复的键盘事件监听 key=" + key);
            return null;
        }
        return action;
    }
    /**Test */
    log(list) {
        Console.error("------------Mouse Click……");
        for (let i = 0; list != null && i < list.length; i++) {
            Console.error("List: " + list[i].gameObject.name);
        }
    }
    /**
     * 获取屏幕手指点击屏幕的坐标
     * @param index 第几个点击
     * @returns
     */
    getTouchPos(index) {
        let pos = this.touch.getTouchVectorArray()[index];
        return new mw.Vector2(pos.x, pos.y);
    }
    /**回收 */
    clearTouch() {
        this.onReleaseTouch.clear();
        this.onPressTouch.clear();
    }
    /**回收 */
    static destroy() {
        this._isDestroy = true;
        InputManagers._instance = null;
    }
}
InputManagers._instance = null;
class TouchData {
    constructor(event, x, y) {
        this.event = event;
        this.x = x;
        this.y = y;
    }
}

var foreign100 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    InputManagers: InputManagers,
    TouchData: TouchData
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/ShopModule/NPCHead.ui
 * TIME: 2024.11.04-19.49.53
 */
let NPCHead_Generate = class NPCHead_Generate extends UIScript {
    get mFreeCanvas() {
        if (!this.mFreeCanvas_Internal && this.uiWidgetBase) {
            this.mFreeCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/mFreeCanvas');
        }
        return this.mFreeCanvas_Internal;
    }
    get mFreeText() {
        if (!this.mFreeText_Internal && this.uiWidgetBase) {
            this.mFreeText_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/mFreeCanvas/mFreeText');
        }
        return this.mFreeText_Internal;
    }
    get mCoinCanvas() {
        if (!this.mCoinCanvas_Internal && this.uiWidgetBase) {
            this.mCoinCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/mCoinCanvas');
        }
        return this.mCoinCanvas_Internal;
    }
    get mCoinImage() {
        if (!this.mCoinImage_Internal && this.uiWidgetBase) {
            this.mCoinImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/mCoinCanvas/mCoinImage');
        }
        return this.mCoinImage_Internal;
    }
    get mCoinImage_1() {
        if (!this.mCoinImage_1_Internal && this.uiWidgetBase) {
            this.mCoinImage_1_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/mCoinCanvas/mCoinImage_1');
        }
        return this.mCoinImage_1_Internal;
    }
    get mCoinText() {
        if (!this.mCoinText_Internal && this.uiWidgetBase) {
            this.mCoinText_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/mCoinCanvas/mCoinText');
        }
        return this.mCoinText_Internal;
    }
    get mAdsCanvas() {
        if (!this.mAdsCanvas_Internal && this.uiWidgetBase) {
            this.mAdsCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/mAdsCanvas');
        }
        return this.mAdsCanvas_Internal;
    }
    get mAdsText() {
        if (!this.mAdsText_Internal && this.uiWidgetBase) {
            this.mAdsText_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/mAdsCanvas/mAdsText');
        }
        return this.mAdsText_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mFreeText);
        this.initLanguage(this.mCoinText);
        this.initLanguage(this.mAdsText);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
NPCHead_Generate = __decorate([
    UIBind('UI/module/ShopModule/NPCHead.ui')
], NPCHead_Generate);
var NPCHead_Generate$1 = NPCHead_Generate;

var foreign148 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: NPCHead_Generate$1
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/ShopModule/CostPanel.ui
 * TIME: 2024.11.04-19.49.53
 */
let CostPanel_Generate = class CostPanel_Generate extends UIScript {
    get mCostTextBlock() {
        if (!this.mCostTextBlock_Internal && this.uiWidgetBase) {
            this.mCostTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/mCostTextBlock');
        }
        return this.mCostTextBlock_Internal;
    }
    get mSureButton() {
        if (!this.mSureButton_Internal && this.uiWidgetBase) {
            this.mSureButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/mSureButton');
        }
        return this.mSureButton_Internal;
    }
    get mCancleButton() {
        if (!this.mCancleButton_Internal && this.uiWidgetBase) {
            this.mCancleButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/mCancleButton');
        }
        return this.mCancleButton_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        this.mSureButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mSureButton");
        });
        this.mSureButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mCancleButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mCancleButton");
        });
        this.mCancleButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mCostTextBlock);
        //文本多语言
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/Canvas/mSureButton/TextBlock_1"));
        this.initLanguage(this.uiWidgetBase.findChildByPath("RootCanvas/Canvas/mCancleButton/TextBlock_1"));
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
CostPanel_Generate = __decorate([
    UIBind('UI/module/ShopModule/CostPanel.ui')
], CostPanel_Generate);
var CostPanel_Generate$1 = CostPanel_Generate;

var foreign147 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: CostPanel_Generate$1
});

/**
 * AUTHOR: 爱玩游戏的小胖子
 * TIME: 2023.07.30-16.55.05
 */
class CostPanel extends CostPanel_Generate$1 {
    constructor() {
        super(...arguments);
        this.shopModuleC = null;
    }
    /**
     * 构造UI文件成功后，在合适的时机最先初始化一次
     */
    onStart() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerMiddle;
        this.initData();
        this.bindButtons();
    }
    initData() {
        this.shopModuleC = ModuleService.getModule(ShopModuleC);
    }
    bindButtons() {
        this.mSureButton.onClicked.add(() => {
            this.hide();
            this.shopModuleC.sureBuy();
        });
        this.mCancleButton.onClicked.add(() => {
            this.hide();
        });
    }
    showAndInitData(price) {
        this.mCostTextBlock.text = "确定要花费" + price + "金币\n购买此英雄套装吗？";
        this.show();
    }
}

var foreign78 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: CostPanel
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/ShopModule/ShopPanel.ui
 * TIME: 2024.11.04-19.49.53
 */
let ShopPanel_Generate = class ShopPanel_Generate extends UIScript {
    get mScrollBox() {
        if (!this.mScrollBox_Internal && this.uiWidgetBase) {
            this.mScrollBox_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/MiddleDoenCanvas/mScrollBox');
        }
        return this.mScrollBox_Internal;
    }
    get mItemCanvas() {
        if (!this.mItemCanvas_Internal && this.uiWidgetBase) {
            this.mItemCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/MiddleDoenCanvas/mScrollBox/mItemCanvas');
        }
        return this.mItemCanvas_Internal;
    }
    get mTurnLeftButton() {
        if (!this.mTurnLeftButton_Internal && this.uiWidgetBase) {
            this.mTurnLeftButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/MiddleDoenCanvas/TurnLeftCanvas/mTurnLeftButton');
        }
        return this.mTurnLeftButton_Internal;
    }
    get mTurnRightButton() {
        if (!this.mTurnRightButton_Internal && this.uiWidgetBase) {
            this.mTurnRightButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/MiddleDoenCanvas/TurnRightCanvas/mTurnRightButton');
        }
        return this.mTurnRightButton_Internal;
    }
    get mCloseButton() {
        if (!this.mCloseButton_Internal && this.uiWidgetBase) {
            this.mCloseButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/CloseCanvas/mCloseButton');
        }
        return this.mCloseButton_Internal;
    }
    get mSaveCanvas() {
        if (!this.mSaveCanvas_Internal && this.uiWidgetBase) {
            this.mSaveCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mSaveCanvas');
        }
        return this.mSaveCanvas_Internal;
    }
    get mSaveButton() {
        if (!this.mSaveButton_Internal && this.uiWidgetBase) {
            this.mSaveButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mSaveCanvas/mSaveButton');
        }
        return this.mSaveButton_Internal;
    }
    get mSaveTextBlock() {
        if (!this.mSaveTextBlock_Internal && this.uiWidgetBase) {
            this.mSaveTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/mSaveCanvas/mSaveTextBlock');
        }
        return this.mSaveTextBlock_Internal;
    }
    get mCoinTextBlock() {
        if (!this.mCoinTextBlock_Internal && this.uiWidgetBase) {
            this.mCoinTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/MainCanvas/CoinCanvas/mCoinTextBlock');
        }
        return this.mCoinTextBlock_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        this.mTurnLeftButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mTurnLeftButton");
        });
        this.mTurnLeftButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mTurnRightButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mTurnRightButton");
        });
        this.mTurnRightButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mCloseButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mCloseButton");
        });
        this.mCloseButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.mSaveButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mSaveButton");
        });
        this.mSaveButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mSaveTextBlock);
        this.initLanguage(this.mCoinTextBlock);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
ShopPanel_Generate = __decorate([
    UIBind('UI/module/ShopModule/ShopPanel.ui')
], ShopPanel_Generate);
var ShopPanel_Generate$1 = ShopPanel_Generate;

var foreign150 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: ShopPanel_Generate$1
});

/**
 * AUTHOR: 爱玩游戏的小胖子
 * TIME: 2023.07.29-22.55.52
 */
class ShopPanel extends ShopPanel_Generate$1 {
    constructor() {
        super(...arguments);
        this.shopModuleC = null;
        this.coldWeapons = [];
        this.currentChildIndex = 0;
        this.shopItems = [];
        this.curSelectId = 0;
    }
    ;
    /**
     * 构造UI文件成功后，在合适的时机最先初始化一次
     */
    onStart() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerMiddle;
        this.initDatas();
        this.registerActions();
        this.bindButtons();
    }
    initDatas() {
        this.shopModuleC = ModuleService.getModule(ShopModuleC);
        this.initShopItems();
    }
    registerActions() {
        Console.error("[ShopPanel-registerActions]");
    }
    bindButtons() {
        this.mCloseButton.onClicked.add(() => {
            this.hide();
            this.shopModuleC.onSwitchCameraAction.call(false);
        });
        this.mSaveButton.onClicked.add(() => {
            this.shopModuleC.updateRoleType(this.coldWeapons[this.curSelectId - 1]);
        });
    }
    initShopItems() {
        this.coldWeapons = GameConfig.ColdWeapon.getAllElement();
        this.showShopItems();
    }
    showShopItems() {
        this.currentChildIndex = 0;
        for (let i = 0; i < this.coldWeapons.length; ++i) {
            let shopItem = ObjectPoolServices.getPool(ShopItem).spawn();
            let id = this.coldWeapons[i].id;
            shopItem.initData(id, this.coldWeapons[i].RoleIcon, this.shopModuleC.isHaveWeapon(id), this.coldWeapons[i].RoleType);
            this.mItemCanvas.addChild(shopItem.shopItem);
            shopItem.shopItem.size = new mw.Vector2(200, 200);
            shopItem.shopItem.position = new mw.Vector2(200 * this.currentChildIndex++, 0);
            this.shopItems.push(shopItem);
        }
        this.mItemCanvas.size = new mw.Vector2(200 * this.currentChildIndex, 200);
    }
    defaultSelectItem(id) {
        this.curSelectId = id;
        this.shopItems[this.curSelectId - 1].selectState();
    }
    updateShopNPC(id) {
        if (this.curSelectId == id) {
            Notice.showDownNotice("已选择");
            return;
        }
        this.shopItems[this.curSelectId - 1].cancleSelectState();
        this.curSelectId = id;
        this.shopItems[this.curSelectId - 1].selectState();
        let coldWeapon = this.coldWeapons[id - 1];
        this.shopModuleC.updateShopRoles(coldWeapon);
        let roleType = coldWeapon.RoleType;
        if (roleType == 1) {
            this.mSaveTextBlock.text = "使用";
        }
        else if (roleType == 2) {
            if (this.shopModuleC.isHaveWeapon(id)) {
                this.mSaveTextBlock.text = "使用";
            }
            else {
                this.mSaveTextBlock.text = "购买";
            }
        }
        else if (roleType == 3) {
            this.mSaveTextBlock.text = "使用";
        }
    }
    updateTextBlock() {
        this.mSaveTextBlock.text = "使用";
        this.shopItems[this.curSelectId - 1].mTextBlock.visibility = mw.SlateVisibility.Collapsed;
    }
}
/**服装 */
class ShopItem {
    /**生成Item */
    constructor() {
        this.mCanvas = undefined;
        this.mSelectImage = undefined;
        this.mIconImage = undefined;
        this.mClickButton = undefined;
        this.mTextBlock = undefined;
        this.mTextBlock_1 = undefined;
        this.id = null;
        this.isSelect = false;
        this.shopItem = mw.createUIByName("module/ShopModule/ShopItem");
        this.mCanvas = this.shopItem.findChildByPath("RootCanvas/mCanvas");
        this.mClickButton = this.shopItem.findChildByPath("RootCanvas/mCanvas/mClickButton");
        this.mSelectImage = this.shopItem.findChildByPath("RootCanvas/mCanvas/mSelectImage");
        this.mIconImage = this.shopItem.findChildByPath("RootCanvas/mCanvas/mIconImage");
        this.mTextBlock = this.shopItem.findChildByPath("RootCanvas/mCanvas/mTextBlock");
        this.mTextBlock_1 = this.shopItem.findChildByPath("RootCanvas/mCanvas/mTextBlock_1");
    }
    /**填充数据 */
    initData(id, iconGuid, isHave, roleType) {
        this.id = id;
        this.mIconImage.imageGuid = iconGuid;
        this.mClickButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick");
            if (!GlobalData.isCanClickShopItem) {
                Notice.showDownNotice("别点太快");
                return;
            }
            GlobalData.isCanClickShopItem = false;
            TimeUtil.delaySecond(0.5).then(() => {
                GlobalData.isCanClickShopItem = true;
            });
            mw.UIService.getUI(ShopPanel).updateShopNPC(this.id);
        });
        this.mClickButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        if (roleType == 3) {
            this.mTextBlock_1.text = "限时";
            this.mTextBlock.visibility = mw.SlateVisibility.Collapsed;
        }
        else {
            this.mTextBlock.visibility = isHave ? mw.SlateVisibility.Collapsed : mw.SlateVisibility.SelfHitTestInvisible;
            this.mTextBlock_1.text = "永久";
        }
        this.cancleSelectState();
    }
    /**选中状态 */
    selectState() {
        this.isSelect = true;
        this.mSelectImage.visibility = mw.SlateVisibility.SelfHitTestInvisible;
    }
    /**取消选中状态 */
    cancleSelectState() {
        this.isSelect = false;
        this.mSelectImage.visibility = mw.SlateVisibility.Collapsed;
    }
    /**回收Item */
    recycleItem() {
        this.cancleSelectState();
        ObjectPoolServices.getPool(ShopItem).return(this);
    }
}

var foreign79 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: ShopPanel
});

class ShopModuleC extends ModuleC {
    constructor() {
        super(...arguments);
        this.hudModuleC = null;
        this.playerModuleC = null;
        this.taskModuleC = null;
        this.shopPanel = null;
        this.costPanel = null;
        this.adsTipsPanel = null;
        this.weaponSet = [];
        this.coldWeaponElement = null;
        /**玩家和皮肤商店之间的相机转化 */
        this.onSwitchCameraAction = new Action1();
        /**玩家身上的相机 */
        this.camera = null;
        /**皮肤商店要展示的NPC */
        this.shopNpc = null;
        this.headUI = null;
        this.shopNPCEffectId = null;
        this.npcAnima = null;
        this.rightWeapon = null;
        this.leftWeapon = null;
        this.oldCameraData = {};
        /**记录当前滑动屏幕的X轴正负值 */
        this.x = 0;
        /**旋转速度 */
        this.slideSpeedX = 1;
        /**当前Npc的旋转Z轴值 */
        this.currentNpcRotZ = 0;
        this.limitedTouchXs = [460, 1460];
        this.limitedTouchYs = [220, 840];
    }
    ;
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
        this.initDatas();
        this.registerActions();
    }
    /**初始化数据 */
    initDatas() {
        this.hudModuleC = ModuleService.getModule(HUDModuleC);
        this.playerModuleC = ModuleService.getModule(PlayerModuleC);
        this.taskModuleC = ModuleService.getModule(TaskModuleC);
        this.shopPanel = mw.UIService.getUI(ShopPanel);
        this.costPanel = mw.UIService.getUI(CostPanel);
        this.adsTipsPanel = mw.UIService.getUI(AdTipsPanel);
        let rootCanvaSize = mw.getViewportSize();
        this.limitedTouchXs[0] = 460 * rootCanvaSize.x / 1920;
        this.limitedTouchXs[1] = 1460 * rootCanvaSize.x / 1920;
        this.limitedTouchYs[0] = 220 * rootCanvaSize.y / 1080;
        this.limitedTouchYs[1] = 840 * rootCanvaSize.y / 1080;
        Console.error(this.limitedTouchXs + " | " + this.limitedTouchYs);
    }
    registerActions() {
        this.hudModuleC.onOpenShopAction.add(() => {
            this.shopPanel.show();
            this.onSwitchCameraAction.call(true);
        });
        this.onSwitchCameraAction.add((isOpenSkinShop) => {
            isOpenSkinShop ? this.openWeaponSetShop() : this.closeWeaponSetShop();
        });
    }
    onEnterScene(sceneType) {
        this.initShopNPCData();
        // this.appearance = this.localPlayer.character.setDescription(mw.HumanoidV2);
        this.weaponSet = this.data.weaponSet;
        TimeUtil.delaySecond(3).then(() => {
            let id = this.data.useWeaponId;
            let coldWeaponElement = GameConfig.ColdWeapon.getElement(id);
            // this.updateRoleType(coldWeaponElement);
            this.onSwitchWeapon(coldWeaponElement);
            //切换角色
            this.onSwitchRole(coldWeaponElement.Role);
            //切换翅膀
            this.onSwitchWing(coldWeaponElement);
            this.updateShopRoles(coldWeaponElement);
            this.shopPanel.defaultSelectItem(id);
            this.updateHeadUI(coldWeaponElement);
        });
    }
    /**更新角色类型 */
    updateRoleType(element) {
        this.coldWeaponElement = element;
        switch (this.coldWeaponElement.RoleType) {
            case 1:
                this.onSwitchWeaponSet();
                break;
            case 2:
                this.isHaveWeaponSet();
                break;
            case 3:
                this.onWatchAdSwitchWeaponSet();
                break;
        }
    }
    /**判断是否拥有 */
    isHaveWeaponSet() {
        if (this.weaponSet.includes(this.coldWeaponElement.id)) {
            this.onSwitchWeaponSet();
        }
        else {
            this.costPanel.showAndInitData(this.coldWeaponElement.Price);
        }
    }
    sureBuy() {
        let costPrice = this.coldWeaponElement.Price;
        if (this.playerModuleC.getCoin() >= costPrice) {
            let id = this.coldWeaponElement.id;
            if (!this.weaponSet.includes(id)) {
                this.weaponSet.push(id);
            }
            this.saveWeaponSet(id);
            this.playerModuleC.saveCoin(-costPrice);
            this.updateHeadUI(this.coldWeaponElement);
            this.shopPanel.updateTextBlock();
            Notice.showDownNotice("购买成功");
        }
        else {
            Notice.showDownNotice("金币不足");
        }
    }
    /**看广告切换武器套装 */
    onWatchAdSwitchWeaponSet() {
        // if (GlobalData.isOpenIAA) {
        //     this.adsTipsPanel.showAdTips(0, AdType.WeaponSet);
        // }
        // else {
        //     this.onSwitchWeaponSet();
        // }
    }
    /**----------【PlayerModule】---------- */
    ads(id) {
        this.coldWeaponElement = GameConfig.ColdWeapon.getElement(id);
        //切换武器
        this.onSwitchWeapon(this.coldWeaponElement);
        //切换角色
        this.onSwitchRole(this.coldWeaponElement.Role);
        //切换翅膀
        this.onSwitchWing(this.coldWeaponElement);
    }
    /**切换武器套装 */
    onSwitchWeaponSet() {
        //切换武器
        this.onSwitchWeapon(this.coldWeaponElement);
        //切换角色
        this.onSwitchRole(this.coldWeaponElement.Role);
        //切换翅膀
        this.onSwitchWing(this.coldWeaponElement);
        this.shopPanel.hide();
        this.onSwitchCameraAction.call(false);
    }
    /**切换武器 */
    onSwitchWeapon(element) {
        const userInstance = ColdWeapon.getInstance();
        userInstance.register(element);
        if (element.RoleType != 3) {
            this.saveUseWeaponId(element.id);
        }
    }
    // private appearance: mw.HumanoidV2 = null;
    /**切换角色 */
    onSwitchRole(role) {
        this.localPlayer.character.setDescription([role]);
        this.localPlayer.character.syncDescription();
    }
    /**切换翅膀 */
    onSwitchWing(element) {
        this.server.net_onSwitchWing(element.EffectId, element.EffectOffset, element.EffectRot, element.EffectScale);
    }
    /**拿到相机 */
    get getCamera() {
        if (this.camera == null) {
            this.camera = Camera.currentCamera;
        }
        return this.camera;
    }
    /**得到商店的NPC */
    get getShopNpc() {
        if (this.shopNpc == null) {
            this.shopNpc = GameObject.findGameObjectById("333D8F0C");
        }
        return this.shopNpc;
    }
    // private npcHv2: mw.HumanoidV2 = null;
    /**初始化商店NPC数据 */
    async initShopNPCData() {
        this.shopNpc = await GameObject.asyncFindGameObjectById("333D8F0C");
        this.shopNpc.complexMovementEnabled = false;
        AccountService.downloadData(this.getShopNpc);
        // let nickName = AccountService.getNickName();
        // nickName = (nickName) ? nickName : "playerId:" + this.currentPlayerId;
        this.getShopNpc.displayName = "";
        this.currentNpcRotZ = this.getShopNpc.localTransform.rotation.z;
        // this.npcHv2 = this.getShopNpc.setDescription(mw.HumanoidV2);
        this.lookObj = await GameObject.asyncFindGameObjectById("3F08E093");
        this.cameraRotation = this.getShopNpc.worldTransform.getForwardVector().multiply(-1).toRotation();
        this.headUI = mw.UIService.create(NPCHead_Generate$1);
        let headUIWidget = await GameObject.asyncFindGameObjectById("1A034CD5");
        headUIWidget.setTargetUIWidget(this.headUI.uiWidgetBase);
    }
    updateHeadUI(element) {
        switch (element.RoleType) {
            case 1:
                this.headUI.mFreeCanvas.visibility = mw.SlateVisibility.SelfHitTestInvisible;
                this.headUI.mCoinCanvas.visibility = mw.SlateVisibility.Collapsed;
                this.headUI.mAdsCanvas.visibility = mw.SlateVisibility.Collapsed;
                break;
            case 2:
                this.headUI.mFreeCanvas.visibility = mw.SlateVisibility.Collapsed;
                this.headUI.mCoinCanvas.visibility = mw.SlateVisibility.SelfHitTestInvisible;
                this.headUI.mAdsCanvas.visibility = mw.SlateVisibility.Collapsed;
                if (this.weaponSet.includes(element.id)) {
                    this.headUI.mCoinText.fontSize = 100;
                    this.headUI.mCoinText.text = "已拥有";
                    // this.headUI.mCoinImage.visibility = mw.SlateVisibility.Collapsed;
                }
                else {
                    this.headUI.mCoinText.fontSize = 70;
                    this.headUI.mCoinText.text = "需要花费\n" + element.Price + "金币购买";
                    // this.headUI.mCoinImage.visibility = mw.SlateVisibility.SelfHitTestInvisible;
                }
                break;
            case 3:
                this.headUI.mFreeCanvas.visibility = mw.SlateVisibility.Collapsed;
                this.headUI.mCoinCanvas.visibility = mw.SlateVisibility.Collapsed;
                this.headUI.mAdsCanvas.visibility = mw.SlateVisibility.SelfHitTestInvisible;
                break;
        }
    }
    async updateShopRoles(element) {
        if (!element.Role) {
            Console.error("配置表角色GUID不存在");
            return;
        }
        if (!this.getShopNpc) {
            Console.error("商店角色不存在");
            return;
        }
        this.getShopNpc.setDescription([element.Role]);
        this.getShopNpc.displayName = element.Del;
        if (this.shopNPCEffectId) {
            EffectService.stop(this.shopNPCEffectId);
            this.shopNPCEffectId = null;
        }
        this.shopNPCEffectId = GeneralManager.rpcPlayEffectOnPlayer(element.EffectId, this.getShopNpc, mw.HumanoidSlotType.BackOrnamental, 0, element.EffectOffset, new mw.Rotation(element.EffectRot), element.EffectScale);
        if (this.npcAnima) {
            this.npcAnima.stop();
            this.npcAnima = null;
        }
        if (element.StandbyAnimation) {
            this.npcAnima = PlayerManagerExtesion.loadAnimationExtesion(this.getShopNpc, element.StandbyAnimation, false);
            this.npcAnima.loop = 0;
            this.npcAnima.play();
        }
        if (this.rightWeapon) {
            this.rightWeapon.destroy();
            this.rightWeapon = null;
        }
        if (element.rightWeaponGuid) {
            this.rightWeapon = await SpawnManager.asyncSpawn({ guid: element.rightWeaponGuid, replicates: false });
            this.getShopNpc.attachToSlot(this.rightWeapon, mw.HumanoidSlotType.RightHand);
        }
        if (this.leftWeapon) {
            this.leftWeapon.destroy();
            this.leftWeapon = null;
        }
        if (element.leftWeaponGuid) {
            this.leftWeapon = await SpawnManager.asyncSpawn({ guid: element.leftWeaponGuid, replicates: false });
            this.getShopNpc.attachToSlot(this.leftWeapon, mw.HumanoidSlotType.LeftHand);
        }
        this.updateHeadUI(element);
    }
    /**打开武器套装商店 */
    openWeaponSetShop() {
        this.oldCameraData = this.getCameraData();
        let cs = this.getCamera;
        this.oldRotation = cs.worldTransform.clone().rotation.clone();
        this.oldCameraData[1].followTargetInterpSpeed = ModifiedCameraSystem.followTargetInterpSpeed;
        ModifiedCameraSystem.followTargetInterpSpeed = 0;
        cs.positionLagSpeed = 0;
        cs.rotationLagEnabled = false;
        cs.positionLagEnabled = false;
        cs.rotationLagSpeed = 0;
        cs.springArm.localTransform.position = mw.Vector.zero;
        cs.localTransform.position = mw.Vector.zero;
        ModifiedCameraSystem.setCameraFollowTarget(this.lookObj);
        let crT = cs.localTransform.clone();
        crT.position = new mw.Vector(0, 0, 85);
        crT.rotation = mw.Rotation.zero;
        cs.localTransform = crT;
        ModifiedCameraSystem.setOverrideCameraRotation(this.cameraRotation);
        InputManagers.getInstance.onPressTouch.add((data) => {
            this.onPressTouch(data);
        });
        InputManagers.getInstance.onReleaseTouch.add((data) => {
            this.onReleaseTouch(data);
        });
    }
    /**关闭武器套装商店 */
    closeWeaponSetShop() {
        let cs = this.getCamera;
        ModifiedCameraSystem.setCameraFollowTarget(this.localPlayer.character);
        ModifiedCameraSystem.applySettings(this.oldCameraData[0]);
        ModifiedCameraSystem.setOverrideCameraRotation(this.oldRotation);
        setTimeout(() => {
            cs.positionLagEnabled = this.oldCameraData[1].positionLagEnabled;
            cs.rotationLagEnabled = this.oldCameraData[1].rotationLagEnabled;
            ModifiedCameraSystem.followTargetInterpSpeed = this.oldCameraData[1].followTargetInterpSpeed;
            cs.positionLagSpeed = this.oldCameraData[1].positionLagSpeed;
            cs.rotationLagSpeed = this.oldCameraData[1].rotationLagSpeed;
            ModifiedCameraSystem.resetOverrideCameraRotation();
        }, 200);
        InputManagers.getInstance.onPressTouch.clear();
        InputManagers.getInstance.onReleaseTouch.clear();
    }
    getCameraData() {
        let tmp = ModifiedCameraSystem.getCurrentSettings();
        let ret = [{}, {}];
        for (const key in tmp) {
            if (Object.prototype.hasOwnProperty.call(tmp, key)) {
                if (key == "cameraLocationLagSpeed" ||
                    key == "cameraRotationLagSpeed" ||
                    key == "followTargetInterpSpeed") {
                    ret[0][key] = 0;
                    ret[1][key] = tmp[key];
                }
                else if (key == "cameraRotationLagEnable" ||
                    key == "cameraLocationLagEnable") {
                    ret[0][key] = false;
                    ret[1][key] = tmp[key];
                }
                else {
                    ret[0][key] = tmp[key];
                }
            }
        }
        return ret;
    }
    /**按下 */
    onPressTouch(data) {
        // Console.error("[onPressTouch-data] " + data.x + "/" + data.y);
        if (data.x > this.limitedTouchXs[1] || data.x < this.limitedTouchXs[0]
            || data.y > this.limitedTouchYs[1] || data.y < this.limitedTouchYs[0])
            return;
        if (this.x != 0) {
            let x = (data.x - this.x) * this.slideSpeedX;
            // Console.error("x = " + x);
            this.currentNpcRotZ -= x;
            this.getShopNpc.localTransform.rotation = (new mw.Rotation(0, 0, this.currentNpcRotZ));
        }
        this.x = data.x;
    }
    /**释放 */
    onReleaseTouch(data) {
        // Console.error("[onReleaseTouch-data] " + data.x + "/" + data.y);
        this.x = 0;
    }
    getWeaponSet() {
        return this.data.weaponSet;
    }
    /**
     * 是否拥有
     * @param id
     * @returns
     */
    isHaveWeapon(id) {
        return this.data.weaponSet.includes(id);
    }
    saveWeaponSet(weaponId) {
        this.server.net_saveWeaponSet(weaponId);
    }
    saveUseWeaponId(useWeaponId) {
        this.server.net_saveUseWeaponId(useWeaponId);
    }
}

var foreign76 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: ShopModuleC
});

class ShopModuleS extends ModuleS {
    constructor() {
        super(...arguments);
        this.playerEffectIdMap = new Map();
        //#endregion
    }
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
    }
    onPlayerLeft(player) {
        let playerId = player.playerId;
        this.playerExitGame(playerId);
    }
    //#region 翅膀
    playerExitGame(playerId) {
        if (!this.playerEffectIdMap.has(playerId))
            return;
        let effectId = this.playerEffectIdMap.get(playerId);
        EffectService.stop(effectId);
        this.playerEffectIdMap.delete(effectId);
    }
    /**切换翅膀 */
    net_onSwitchWing(effectId, effectOffset, effectRot, effectScale) {
        let playerEffectId = -1;
        if (this.playerEffectIdMap.has(this.currentPlayerId)) {
            playerEffectId = this.playerEffectIdMap.get(this.currentPlayerId);
            EffectService.stop(playerEffectId);
        }
        playerEffectId = GeneralManager.rpcPlayEffectOnPlayer(effectId, this.currentPlayer, mw.HumanoidSlotType.BackOrnamental, 0, effectOffset, new mw.Rotation(effectRot), effectScale);
        this.playerEffectIdMap.set(this.currentPlayerId, playerEffectId);
    }
    //#endregion
    //#region 武器
    net_saveWeaponSet(weaponId) {
        this.currentData.saveWeaponSet(weaponId);
    }
    net_saveUseWeaponId(useWeaponId) {
        this.currentData.saveUseWeaponId(useWeaponId);
    }
}
__decorate([
    Decorator.noReply()
], ShopModuleS.prototype, "net_onSwitchWing", null);
__decorate([
    Decorator.noReply()
], ShopModuleS.prototype, "net_saveWeaponSet", null);
__decorate([
    Decorator.noReply()
], ShopModuleS.prototype, "net_saveUseWeaponId", null);

var foreign77 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: ShopModuleS
});

let Trampoline = class Trampoline extends mw.Script {
    constructor() {
        // @mw.Property({ group: "脚本属性", displayName: "预加载资源", onChangedInEditor: "onPreloadAssetsChangedInEditor" })
        // private preloadAssets = "";
        super(...arguments);
        this.baseFallMultiplyNum = 2000;
        this.baseMultiplyNum = 300;
        this.impactRadius = 100;
        this.trampoline = null;
        this.trampolineLen = 0;
        /**冲击时要显示的UI */
        this.impactUI = "ACD7000B454A9611BD1D1F8376ACD016";
        /** 当预加载资源改动的时候自动调用此函数 */
        // public onPreloadAssetsChangedInEditor() {
        //     let assets: string = ""
        //     for (let key in TrampolineRescourse) {
        //         let keyToAny: any = key;
        //         if (isNaN(keyToAny)) {
        //             let trampolineRescourse: any = TrampolineRescourse[key];
        //             let trampolineRescourseEnum: TrampolineRescourse = trampolineRescourse;
        //             assets = assets + trampolineRescourseEnum + ",";
        //         }
        //     }
        //     assets = assets.substring(0, assets.length - 1);
        //     this.preloadAssets = assets;
        // }
        /**------------------------------------------- 客户端 ------------------------------------------------ */
        this.playerC = null;
        /**需要变化的模型 */
        this.trampolineModelsC = [];
        this.ignoreAreaC = [];
        this.capsuleRadius = 30;
        /**玩家世界UIMap */
        this.playersRadiusUI = new Map();
        /**------------------------------------------- 客户端 ------------------------------------------------ */
        /**------------------------------------------- 服务端 ------------------------------------------------ */
        /**延迟触发（避免重复执行） */
        this.cantEnterPlayerIdS = new Set();
        /**触发器 */
        this.triggersS = [];
        /**玩家跳跃时间 */
        this.playersJumpTimeS = new Map();
        /**计算玩家是否触地面 */
        this.playerFlyAndFallMap = new Map();
        /**飞行玩家的掉落特效 */
        this.playerFallEffects = new Map();
        /**悬空玩家的拖尾特效 */
        this.playerTailEffectMap = new Map();
        this.playersImpactRadius = new Map();
        this.ignoreAreaS = [];
    }
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
        this.trampoline = GameConfig.Trampoline;
        this.trampolineLen = this.trampoline.getAllElement().length;
        if (mw.SystemUtil.isClient()) {
            this.onStartC();
        }
        if (mw.SystemUtil.isServer()) {
            this.onStartS();
        }
    }
    /**
     * 周期函数 每帧执行
     * 此函数执行需要将this.useUpdate赋值为true
     * @param dt 当前帧与上一帧的延迟 / 秒
     */
    onUpdate(dt) {
        if (mw.SystemUtil.isClient()) {
            this.onUpdateC(dt);
        }
        if (mw.SystemUtil.isServer()) {
            this.onUpdateS(dt);
        }
    }
    /**客户端的onStart */
    onStartC() {
        this.initDataC();
        this.registerEventsC();
        this.useUpdate = true;
    }
    /**初始化数据（客户端） */
    async initDataC() {
        // this.loadRescourseC();
        this.findGameObjectsC();
        this.playerC = await Player.asyncGetLocalPlayer();
        this.playerC.character.driftControl = 0.5;
        Console.error("[更新下落控制成功]");
    }
    /**加载资源（客户端） */
    async loadRescourseC() {
        for (let key in TrampolineRescourse) {
            let keyToAny = key;
            if (isNaN(keyToAny)) {
                let launcherRescourse = TrampolineRescourse[key];
                let launcherRescourseEnum = launcherRescourse;
                await this.downloadRes(launcherRescourseEnum);
                Console.error("launcherRescourseEnum--" + launcherRescourseEnum);
            }
        }
    }
    /**根据object的guid find到它（客户端） */
    async findGameObjectsC() {
        if (this.trampolineLen > 0) {
            for (let i = 0; i < this.trampolineLen; ++i) {
                let trampolineModel = await GameObject.asyncFindGameObjectById(this.trampoline.getElement(i + 1).ModelGuid);
                this.trampolineModelsC.push(trampolineModel);
                this.createShakeOBBC(trampolineModel, i);
            }
        }
    }
    /**创建蹦床中间区域判定(客户端) */
    createShakeOBBC(trampolineModel, index) {
        let PointX = trampolineModel.worldTransform.scale.x * 100 + this.capsuleRadius;
        let PointY = trampolineModel.worldTransform.scale.y / 1.5 * 100 + this.capsuleRadius;
        let center = new mw.Vector2(trampolineModel.worldTransform.position.x, trampolineModel.worldTransform.position.y);
        this.ignoreAreaC[index] = new OBB(center, trampolineModel.worldTransform.getForwardVector(), trampolineModel.worldTransform.getRightVector(), PointX, PointY);
    }
    /**注册事件&监听事件（客户端） */
    registerEventsC() {
        Event.addServerListener(ListenerEventsType$1.ServerToAllClient_Shake, this.modelShakeVFXAndSFXC.bind(this));
        Event.addServerListener(ListenerEventsType$1.ServerToAllClient_ShowRadiusUI, this.showRadiusUIC.bind(this));
        Event.addServerListener(ListenerEventsType$1.ServerToAllClient_HideRadiusUI, this.hideRadiusUIC.bind(this));
    }
    /**客户端的Update */
    onUpdateC(dt) {
        try {
            this.playersRadiusUI.forEach((value, key) => {
                let player = Player.getPlayer(key);
                if (!player || !player.character || player.character.velocity.z >= 0)
                    return;
                this.lineTraceCheck(player, value);
            });
        }
        catch (error) {
        }
    }
    /**射线检测更新世界UI位置(客户端) */
    lineTraceCheck(player, radiusUI) {
        const downVec = player.character.worldTransform.getUpVector().clone().multiply(-1);
        const loc = player.character.worldTransform.position;
        const goArr = QueryUtil.lineTrace(loc, loc.clone().add(downVec.multiply(500000)), true, false);
        for (let index = 0; index < goArr.length; index++) {
            const element = goArr[index];
            // Console.error("[element]:" + element.gameObject.name);
            if ((PlayerManagerExtesion.isCharacter(element.gameObject)))
                continue;
            if (element.gameObject.name == "BP_MWSysUIWidget")
                continue;
            if (element.gameObject.name == "世界UI")
                continue;
            if (element.gameObject.name == "蹦床") {
                if (radiusUI.getVisibility())
                    radiusUI.setVisibility(mw.PropertyStatus.Off);
                return;
            }
            if (!radiusUI.getVisibility())
                radiusUI.setVisibility(mw.PropertyStatus.On);
            radiusUI.worldTransform.position = element.position.clone().add(mw.Vector.up.multiply(10));
            return;
        }
    }
    /**模型震动时的视觉和听觉效果（客户端） */
    modelShakeVFXAndSFXC(playerId, triggerIndex) {
        this.playSoundAndEffectC(playerId, triggerIndex);
        this.modelShakeC(triggerIndex);
    }
    /**播放音效和特效（客户端） */
    playSoundAndEffectC(playerId, triggerIndex) {
        if (!this.playerC)
            return;
        if (this.playerC.playerId == playerId) {
            mw.SoundService.playSound(TrampolineRescourse.TrampolineSound, 1, 100);
        }
        else {
            mw.SoundService.play3DSound(TrampolineRescourse.TrampolineSound, this.trampolineModelsC[triggerIndex].worldTransform.position, 1, 100);
        }
    }
    /**玩家进入触发器震动模型（客户端） */
    modelShakeC(triggerIndex) {
        let baseScale = this.trampolineModelsC[triggerIndex].worldTransform.scale;
        let curPlayerPos = this.playerC.character.worldTransform.position;
        let playerLoc2 = new mw.Vector2(curPlayerPos.x, curPlayerPos.y);
        if (this.ignoreAreaC[triggerIndex].containsPoint(playerLoc2)) {
            new mw.Tween({ time: 0 })
                .to({ time: 1 }, 1000)
                .onUpdate((obj) => {
                let z = this.shakeFunc(obj.time, 100, 6, 5) * 8;
                let worldScale = new mw.Vector(baseScale.x, baseScale.y, baseScale.z + z);
                this.trampolineModelsC[triggerIndex].worldTransform.scale = worldScale;
            })
                .start();
        }
        else {
            let curTrampolinePos = this.trampolineModelsC[triggerIndex];
            let modelLoc2 = new mw.Vector2(curTrampolinePos.worldTransform.position.x, curTrampolinePos.worldTransform.position.y);
            let loc = modelLoc2.subtract(playerLoc2);
            loc = loc.normalized;
            let changeRot = new mw.Rotation(new mw.Vector(loc.x, loc.y, 0));
            new mw.Tween({ time: 0 })
                .to({ time: 1 }, 1000)
                .onUpdate((obj) => {
                let x = this.shakeFunc(obj.time, 100, 6, 5) * 100 * changeRot.y;
                let y = this.shakeFunc(obj.time, 100, 6, 5) * 100 * changeRot.x;
                let rot = new mw.Rotation(x, y, changeRot.z);
                this.trampolineModelsC[triggerIndex].localTransform.rotation = (rot);
            })
                .start();
        }
    }
    /**显示冲击指示范围UI（客户端） */
    showRadiusUIC(playerId, number) {
        if (!this.playersRadiusUI.has(playerId))
            this.createRadiusUIC(playerId);
        let radiusUI = this.playersRadiusUI.get(playerId);
        radiusUI.worldTransform.scale = mw.Vector.one.multiply(number * 2 / 100);
        radiusUI.setVisibility(mw.PropertyStatus.Off);
    }
    /**Create世界UI并刷新（客户端） */
    createRadiusUIC(playerId) {
        let uiWidget = SpawnManager.modifyPoolSpawn("UIWidget");
        uiWidget.setUIbyID(this.impactUI);
        uiWidget.pivot = mw.Vector2.one.multiply(0.5);
        uiWidget.drawSize = mw.Vector2.one.multiply(100);
        uiWidget.localTransform.rotation = (new mw.Rotation(0, 90, 0));
        uiWidget.widgetSpace = mw.WidgetSpaceMode.World;
        uiWidget.setCollision(mw.PropertyStatus.Off);
        uiWidget.refresh();
        this.playersRadiusUI.set(playerId, uiWidget);
    }
    /**隐藏玩家身上的世界UI（客户端） */
    hideRadiusUIC(playerId) {
        let radiusUI = this.playersRadiusUI.get(playerId);
        if (!radiusUI)
            return;
        mwext.GameObjPool.despawn(radiusUI);
        this.playersRadiusUI.delete(playerId);
    }
    /**服务端的onStart */
    onStartS() {
        this.initDataS();
        this.registerEventsS();
        this.useUpdate = true;
    }
    /**初始化数据（服务端） */
    async initDataS() {
        await this.findGameObjectsS();
        this.bindTriggerS();
    }
    /**注册事件&监听事件（服务端） */
    registerEventsS() {
        Player.onPlayerLeave.add((player) => {
            let playerId = player.playerId;
            if (this.playerFlyAndFallMap.has(playerId)) {
                this.playerFlyAndFallMap.delete(playerId);
            }
            if (this.playersJumpTimeS.has(playerId)) {
                this.playersJumpTimeS.delete(playerId);
            }
            if (this.playersImpactRadius.has(playerId)) {
                this.playersImpactRadius.delete(playerId);
            }
        });
    }
    /**根据object的guid find到它（服务端） */
    async findGameObjectsS() {
        if (this.trampolineLen == 0)
            return;
        for (let i = 0; i < this.trampolineLen; ++i) {
            let trigger = (await GameObject.asyncFindGameObjectById(this.trampoline.getElement(i + 1).TriggerGuid));
            this.triggersS.push(trigger);
            this.createTouchOBBS(trigger, i);
        }
    }
    /**创建蹦床中间区域判定(客户端) */
    createTouchOBBS(trigger, index) {
        let PointX = trigger.worldTransform.scale.x * 50 + this.capsuleRadius;
        let PointY = trigger.worldTransform.scale.y * 50 + this.capsuleRadius;
        let center = new mw.Vector2(trigger.worldTransform.position.x, trigger.worldTransform.position.y);
        this.ignoreAreaS[index] = new OBB(center, trigger.worldTransform.getForwardVector(), trigger.worldTransform.getRightVector(), PointX, PointY);
    }
    /**绑定触发器（服务端） */
    bindTriggerS() {
        if (this.triggersS.length == 0)
            return;
        for (let i = 0; i < this.triggersS.length; ++i) {
            this.triggersS[i].onEnter.add((go) => {
                this.onEnterTriggerS(go, i);
            });
        }
    }
    /**进入触发器(服务端) */
    onEnterTriggerS(go, triggerIndex) {
        if (!(PlayerManagerExtesion.isCharacter(go)))
            return;
        let player = go.player;
        if (player.character.movementMode == mw.MovementMode.Fly)
            return;
        let playerId = player.playerId;
        if (this.cantEnterPlayerIdS.has(playerId))
            return;
        this.cantEnterPlayerIdS.add(playerId);
        mw.TimeUtil.delayExecute(() => {
            this.cantEnterPlayerIdS.delete(playerId);
        }, 20);
        Event.dispatchToClient(player, ListenerEventsType$1.ServerToAllClient_ShowJumpRecordUI, this.triggersS[triggerIndex].worldTransform.position.z);
        this.modelVisualEffectS(playerId, triggerIndex);
        this.playerFlyS(player);
        this.showRadiusUIS(playerId);
    }
    /**广播给房间内得客户端显示正在使用蹦床玩家得落点世界UI（服务端） */
    showRadiusUIS(playerId) {
        let num = this.impactRadius + 100 * this.playersJumpTimeS.get(playerId);
        this.playersImpactRadius.set(playerId, num);
        Event.dispatchToAllClient(ListenerEventsType$1.ServerToAllClient_ShowRadiusUI, playerId, num);
    }
    /**模型视觉效果（服务端） */
    modelVisualEffectS(playerId, triggerIndex) {
        Event.dispatchToAllClient(ListenerEventsType$1.ServerToAllClient_Shake, playerId, triggerIndex);
    }
    /**玩家进入触发器玩家原地起飞（服务端） */
    playerFlyS(player) {
        let playerId = player.playerId;
        let value = this.playersJumpTimeS.get(playerId);
        value = value ? value : 0;
        this.addPlayerImpulse(player, value);
        setTimeout(() => {
            this.playerFlyAndFallMap.set(playerId, false);
        }, 500);
        this.playersJumpTimeS.set(playerId, value + 1);
    }
    /**添加向上的冲量（服务端） */
    addPlayerImpulse(player, jumpTime) {
        let multiplyNum = this.baseFallMultiplyNum + 400 * jumpTime;
        multiplyNum = Math.min(multiplyNum, 13000);
        let velocityZ = (player.character.velocity.z * 1);
        multiplyNum = multiplyNum - velocityZ;
        player.character.addImpulse(mw.Vector.up.multiply(multiplyNum), true);
        // Console.error("[jumpTime]：" + jumpTime + "\n" + "[velocityZ]：" + velocityZ + "\n" + "[multiplyNum]：" + multiplyNum);
    }
    /**服务端的Update */
    onUpdateS(dt) {
        if (this.playerFlyAndFallMap.size > 0) {
            this.playerFlyAndFallMap.forEach((isFall, playerId) => {
                let player = Player.getPlayer(playerId);
                this.isTouchDownS(player);
                this.updatePlayerStateS(playerId, isFall);
            });
        }
    }
    /**判断玩家是否落地（服务端） */
    isTouchDownS(player) {
        if (player.character.isJumping)
            return;
        let playerPoint = new mw.Vector2(player.character.worldTransform.position.x, player.character.worldTransform.position.y);
        let isContainsPoint = false;
        for (let i = 0; i < this.ignoreAreaS.length; ++i) {
            if (this.ignoreAreaS[i].containsPoint(playerPoint)) {
                isContainsPoint = true;
                break;
            }
        }
        if (isContainsPoint)
            return;
        let playerId = player.playerId;
        this.playTouchDownVFSAndSFXS(playerId);
        this.spreadToOthersS(playerId);
        this.initPlayerDataS(playerId);
        Console.error("[落地]");
    }
    /**更新此时飞行玩家的行为（服务端） */
    updatePlayerStateS(playerId, isFall) {
        let player = Player.getPlayer(playerId);
        if (player.character.velocity.z <= 0 && isFall == true) {
            let animation = PlayerManagerExtesion.loadAnimationExtesion(player.character, TrampolineRescourse.Roll, true);
            animation.speed = animation.length / 0.4;
            animation.loop = 0;
            animation.play();
            this.playEffectS(playerId, this.playerFallEffects, TrampolineRescourse.SpinEffect, mw.HumanoidSlotType.Root, new mw.Vector(0, 0, 0), mw.Rotation.zero, new mw.Vector(2, 2, 2));
            this.playerFlyAndFallMap.set(playerId, false);
        }
        if (player.character.velocity.z > 0 && isFall == false) {
            let animation = PlayerManagerExtesion.loadAnimationExtesion(player.character, TrampolineRescourse.FlyUp, true);
            animation.speed = animation.length / 0.4;
            animation.loop = 0;
            animation.play();
            this.stopEffectS(playerId, this.playerFallEffects);
            this.playTailEffectS(playerId);
            this.playerFlyAndFallMap.set(playerId, true);
        }
    }
    /**播放触底音效和特效(服务端) */
    playTouchDownVFSAndSFXS(playerId) {
        let time = this.playersJumpTimeS.get(playerId);
        let effectId = time > 9 ? TrampolineRescourse.TrampolineN_bombFallsEffect : TrampolineRescourse.TrampolineStoneFallsEffect;
        let soundId = time > 9 ? TrampolineRescourse.TrampolineN_bombFallsSound : TrampolineRescourse.TrampolineStoneFallsSound;
        let scaleNum = Math.min(time * 0.2, 4);
        let effectScale = mw.Vector.one.multiply(scaleNum);
        let worldLocation = Player.getPlayer(playerId).character.worldTransform.position;
        GeneralManager.rpcPlayEffectAtLocation(effectId, worldLocation, 1, new mw.Rotation(0, 0, 0), effectScale);
        mw.SoundService.play3DSound(soundId, worldLocation, 1, 1000);
    }
    /**玩家触底时波及其他人（服务端） */
    spreadToOthersS(playerId) {
        let groundPlayer = Player.getPlayer(playerId);
        let time = this.playersJumpTimeS.get(playerId);
        let radius = this.playersImpactRadius.get(playerId);
        for (let player of Player.getAllPlayers()) {
            if (groundPlayer == player)
                continue;
            let dis = mw.Vector.distance(player.character.worldTransform.position, groundPlayer.character.worldTransform.position);
            if (dis > radius)
                continue;
            let vec = player.character.worldTransform.position.clone().subtract(groundPlayer.character.worldTransform.position).normalize();
            vec = vec.add(mw.Vector.up).normalize();
            let multiplyNum = (1 - (dis / radius)) * (Math.min(this.baseMultiplyNum + time * 200, 6000));
            player.character.addImpulse(vec.clone().multiply(multiplyNum), true);
        }
    }
    /**初始化数据 */
    initPlayerDataS(playerId) {
        this.playerFlyAndFallMap.delete(playerId);
        this.playersJumpTimeS.delete(playerId);
        this.playersImpactRadius.delete(playerId);
        this.stopEffectS(playerId, this.playerFallEffects);
        this.stopTailEffectS(playerId);
        let player = Player.getPlayer(playerId);
        PlayerManagerExtesion.rpcStopAnimation(player.character, TrampolineRescourse.Roll);
        Event.dispatchToAllClient(ListenerEventsType$1.ServerToAllClient_HideRadiusUI, playerId);
        Event.dispatchToClient(Player.getPlayer(playerId), ListenerEventsType$1.ServerToAllClient_HideJumpRecordUI);
    }
    /**播放特效（服务端） */
    playEffectS(playerId, effectMap, effect, slotType, offset, rotation, scale) {
        let player = Player.getPlayer(playerId);
        if (effectMap.has(playerId)) {
            let effectId = effectMap.get(playerId);
            if (effectId) {
                EffectService.stop(effectId);
            }
        }
        let playerEffectId = GeneralManager.rpcPlayEffectOnPlayer(effect, player, slotType, 0, new mw.Vector(0, 0, -60), new mw.Rotation(new mw.Vector(0, -90, 0)), mw.Vector.one.multiply(3));
        effectMap.set(playerId, playerEffectId);
    }
    /**停止播放特效（服务端） */
    stopEffectS(playerId, effectMap) {
        if (effectMap.has(playerId)) {
            let effectId = effectMap.get(playerId);
            if (effectId) {
                EffectService.stop(effectId);
                effectMap.set(playerId, null);
            }
        }
    }
    /**玩家悬空状态播放拖尾特效(服务端) */
    playTailEffectS(playerId) {
        if (this.playerTailEffectMap.has(playerId))
            return;
        let player = Player.getPlayer(playerId);
        let tailEffectLeftFoot = GeneralManager.rpcPlayEffectOnPlayer(TrampolineRescourse.TrampolineEffect, player, mw.HumanoidSlotType.LeftFoot, 0);
        let tailEffectRightFoot = GeneralManager.rpcPlayEffectOnPlayer(TrampolineRescourse.TrampolineEffect, player, mw.HumanoidSlotType.RightFoot, 0);
        this.playerTailEffectMap.set(playerId, [tailEffectLeftFoot, tailEffectRightFoot]);
    }
    /**玩家触底后停止播放拖尾特效（服务端） */
    stopTailEffectS(playerId) {
        if (!this.playerTailEffectMap.has(playerId))
            return;
        let tailEffect = this.playerTailEffectMap.get(playerId);
        for (let i = 0; i < tailEffect.length; ++i) {
            EffectService.stop(tailEffect[i]);
        }
        this.playerTailEffectMap.delete(playerId);
    }
    /**------------------------------------------- 服务端 ------------------------------------------------ */
    /**------------------------------------------- 通用 ------------------------------------------------ */
    /**
     * 震荡函数
     * @param x
     * @param speed 震荡衰减/增益的速度
     * @param frequency 震荡的频率
     * @param amplitude 震荡的幅度
     * @returns
     */
    shakeFunc(x, speed, frequency, amplitude) {
        return (Math.pow(speed, -x) * Math.sin(2 * frequency * Math.PI * x)) / amplitude;
    }
    /**资源下载 */
    async downloadRes(guid) {
        if (mw.AssetUtil.assetLoaded(guid)) {
            return true;
        }
        return await mw.AssetUtil.asyncDownloadAsset(guid);
    }
};
__decorate([
    mw.Property({ displayName: "基础跳跃冲量", group: "脚本属性" })
], Trampoline.prototype, "baseFallMultiplyNum", void 0);
__decorate([
    mw.Property({ displayName: "基础冲击数", group: "脚本属性" })
], Trampoline.prototype, "baseMultiplyNum", void 0);
__decorate([
    mw.Property({ displayName: "冲击半径", group: "脚本属性" })
], Trampoline.prototype, "impactRadius", void 0);
__decorate([
    RemoteFunction(mw.Client)
], Trampoline.prototype, "addPlayerImpulse", null);
Trampoline = __decorate([
    Component
], Trampoline);
var Trampoline$1 = Trampoline;
class OBB {
    constructor(center, axisX, axisY, extentsX, extentsY) {
        this.center = center;
        this.nx = axisX;
        this.ny = axisY;
        this.extents_x = extentsX;
        this.extents_y = extentsY;
    }
    containsPoint(point) {
        let c2p = point.clone().subtract(this.center);
        let xBenchmark = Math.abs(this.dotV2(this.nx, this.nx.clone().multiply(this.extents_x)));
        let xTentative = Math.abs(this.dotV2(c2p, this.nx));
        if (xTentative >= xBenchmark) {
            return false;
        }
        let yBenchmark = Math.abs(this.dotV2(this.ny, this.ny.clone().multiply(this.extents_y)));
        let yTentative = Math.abs(this.dotV2(c2p, this.ny));
        return yTentative < yBenchmark;
    }
    dotV2(a, b) {
        return a.x * b.x + a.y * b.y;
    }
}
/**客户端&服务端发送的事件类型 */
var ListenerEventsType$1;
(function (ListenerEventsType) {
    /**服务端发给所有客户端（模型震动） */
    ListenerEventsType["ServerToAllClient_Shake"] = "ServerToAllClient_Shake";
    /**服务端发给所有客户端（显示落点UI） */
    ListenerEventsType["ServerToAllClient_ShowRadiusUI"] = "ServerToAllClient_ShowRadiusUI";
    /**服务端发给所有客户端（隐藏落点UI） */
    ListenerEventsType["ServerToAllClient_HideRadiusUI"] = "ServerToAllClient_HideRadiusUI";
    /**服务端发给指定客户端（显示JumpRecordUI） */
    ListenerEventsType["ServerToAllClient_ShowJumpRecordUI"] = "ServerToAllClient_ShowJumpRecordUI";
    /**服务端发给所有客户端（隐藏JumpRecordUI） */
    ListenerEventsType["ServerToAllClient_HideJumpRecordUI"] = "ServerToAllClient_HideJumpRecordUI";
})(ListenerEventsType$1 || (ListenerEventsType$1 = {}));
var TrampolineRescourse;
(function (TrampolineRescourse) {
    /**蹦床拖尾特效 */
    TrampolineRescourse["TrampolineEffect"] = "27392";
    /**蹦床石头落地特效 */
    TrampolineRescourse["TrampolineStoneFallsEffect"] = "57200";
    /**蹦床核弹落地特效 */
    TrampolineRescourse["TrampolineN_bombFallsEffect"] = "85150";
    /**玩家空中降落漩涡特效 */
    TrampolineRescourse["SpinEffect"] = "197224";
    /**----------------------------------------- */
    /**蹦床音效 */
    TrampolineRescourse["TrampolineSound"] = "14182";
    /**蹦床石头落地音效 */
    TrampolineRescourse["TrampolineStoneFallsSound"] = "27862";
    /**蹦床核弹落地音效 */
    TrampolineRescourse["TrampolineN_bombFallsSound"] = "39343";
    /**----------------------------------------- */
    /**蹦床上升动画 */
    TrampolineRescourse["FlyUp"] = "35401";
    /**翻滚下落动画 */
    TrampolineRescourse["Roll"] = "14736";
})(TrampolineRescourse || (TrampolineRescourse = {}));

var foreign86 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    get ListenerEventsType () { return ListenerEventsType$1; },
    OBB: OBB,
    get TrampolineRescourse () { return TrampolineRescourse; },
    default: Trampoline$1
});

/**
 * AUTHOR: 爱玩游戏的小胖子
 * TIME: 2023.09.25-22.57.17
 */
class P_Game_Trampoline extends mw.UIScript {
    constructor() {
        super(...arguments);
        /**当前客户端玩家 */
        this.player = null;
        /**------------------ 【UI控件】 ------------------ */
        this.mRecordMaxHeightCanvas = null;
        this.mRecordMaxHeightText = null;
        this.mCurrentHeightCanvas = null;
        this.mCurrentHeightTxt = null;
        /**------------------ 【UI控件】 ------------------ */
        /**------------------ 【数据】 ------------------ */
        this.showUITween1 = null;
        this.showUITween2 = null;
        this.recordMaxHeightCanvasPos = new mw.Vector2(1900, 350);
        this.currentHeightCanvasPos = new mw.Vector2(1900, 500);
        /**记录的最大高度 */
        this.recordMaxHight = 0;
        /**起始高度 */
        this.planeHeight = 0;
        this.isStart = false;
        this.isChange = false;
    }
    /**------------------ 【数据】 ------------------ */
    async onStart() {
        //设置能否每帧触发onUpdate
        this.canUpdate = true;
        this.layer = mw.UILayerMiddle;
        await this.initData();
        this.initTween();
        this.getComponentUI();
        this.registerListener();
    }
    /**初始化数据 */
    async initData() {
        this.player = await Player.asyncGetLocalPlayer();
        Console.error("[player:]" + this.player.character);
    }
    initTween() {
        this.showUITween1 = new mw.Tween({ time: 0 })
            .to({ time: 1 }, 1000)
            .onStart(() => {
            this.mRecordMaxHeightCanvas.visibility = mw.SlateVisibility.SelfHitTestInvisible;
        })
            .onUpdate((obj) => {
            let pos = new mw.Vector2(this.recordMaxHeightCanvasPos.x - this.backEaseIn(obj.time) * 500, this.recordMaxHeightCanvasPos.y);
            this.mRecordMaxHeightCanvas.position = pos;
        });
        this.showUITween2 = new mw.Tween({ time: 0 })
            .to({ time: 1 }, 1000)
            .onStart(() => {
            this.mCurrentHeightCanvas.visibility = mw.SlateVisibility.SelfHitTestInvisible;
        })
            .onUpdate((obj) => {
            let pos = new mw.Vector2(this.currentHeightCanvasPos.x - this.backEaseIn(obj.time) * 500, this.currentHeightCanvasPos.y);
            this.mCurrentHeightCanvas.position = pos;
        })
            .delay(200);
    }
    /**获取UI组件 */
    getComponentUI() {
        let rootCanvas = this.uiObject;
        this.mRecordMaxHeightCanvas = rootCanvas.findChildByPath("RootCanvas/mRecordMaxHeightCanvas");
        this.mRecordMaxHeightText = rootCanvas.findChildByPath("RootCanvas/mRecordMaxHeightCanvas/mRecordMaxHeightText");
        this.mCurrentHeightCanvas = rootCanvas.findChildByPath("RootCanvas/mCurrentHeightCanvas");
        this.mCurrentHeightTxt = rootCanvas.findChildByPath("RootCanvas/mCurrentHeightCanvas/mCurrentHeightTxt");
    }
    /**注册监听 */
    registerListener() {
        Event.addServerListener(ListenerEventsType.ServerToAllClient_ShowJumpRecordUI, this.showUI.bind(this));
        Event.addServerListener(ListenerEventsType.ServerToAllClient_HideJumpRecordUI, this.hideUI.bind(this));
        Event.addLocalListener("SyncMaxHeight", (maxHeight) => {
            this.recordMaxHight = maxHeight;
        });
    }
    onUpdate(dt) {
        if (!this.isStart)
            return;
        let height = Math.ceil(this.player.character.worldTransform.position.z - this.planeHeight);
        height = Math.max(height, 0);
        this.refreshUI(height);
    }
    /**刷新数据 */
    refreshUI(height) {
        let t = Math.min(1 - (height / this.recordMaxHight), 1);
        this.mCurrentHeightTxt.contentColor = new mw.LinearColor(1, t, t);
        this.mCurrentHeightTxt.text = height + " M";
        if (height > this.recordMaxHight) {
            this.recordMaxHight = height;
            this.mRecordMaxHeightText.text = this.recordMaxHight + "M";
            if (!this.isChange)
                return;
            this.mCurrentHeightTxt.renderScale = (mw.Vector2.one.multiply(1.25));
            this.mRecordMaxHeightText.renderScale = (mw.Vector2.one.multiply(1.25));
            this.isChange = false;
        }
        else {
            if (this.isChange)
                return;
            Event.dispatchToServer("RefreshMaxHeight", this.recordMaxHight);
            this.initNomalUI();
            this.isChange = true;
        }
    }
    /**显示UI */
    showUI(planeHeight) {
        if (this.mRecordMaxHeightCanvas.visible)
            return;
        this.planeHeight = Math.ceil(planeHeight);
        this.mRecordMaxHeightText.text = this.recordMaxHight + " M";
        this.initNomalUI();
        this.isStart = true;
        this.showUITween1.start();
        this.showUITween2.start();
        // Event.dispatchToLocal("IsCanFly", false);
    }
    /**初始化UI */
    initNomalUI() {
        this.mCurrentHeightTxt.renderScale = mw.Vector2.one;
        this.mRecordMaxHeightText.renderScale = mw.Vector2.one;
        this.mRecordMaxHeightText.contentColor = mw.LinearColor.red;
    }
    /**隐藏UI */
    hideUI() {
        this.isStart = false;
        this.mCurrentHeightCanvas.visibility = mw.SlateVisibility.Collapsed;
        this.mRecordMaxHeightCanvas.visibility = mw.SlateVisibility.Collapsed;
        // Event.dispatchToLocal("IsCanFly", true);
    }
    /**缓入 超过范围的三次方缓动 */
    backEaseIn(time) {
        return Math.pow(time, 5) + 1.7 * time * Math.sin(Math.PI * time);
    }
}
/**客户端&服务端发送的事件类型 */
var ListenerEventsType;
(function (ListenerEventsType) {
    /**服务端发给指定客户端（显示JumpRecordUI） */
    ListenerEventsType["ServerToAllClient_ShowJumpRecordUI"] = "ServerToAllClient_ShowJumpRecordUI";
    /**服务端发给所有客户端（隐藏JumpRecordUI） */
    ListenerEventsType["ServerToAllClient_HideJumpRecordUI"] = "ServerToAllClient_HideJumpRecordUI";
})(ListenerEventsType || (ListenerEventsType = {}));

var foreign87 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    get ListenerEventsType () { return ListenerEventsType; },
    default: P_Game_Trampoline
});

let NewScript = class NewScript extends Script {
    constructor() {
        super(...arguments);
        this.bagId = 0;
        this.skinId = "";
        this.adsCount = 10;
        this.adTipsPanel = null;
        this.bagModuleC = null;
        this.curAdsCount = 0;
    }
    get getAdTipsPanel() {
        if (!this.adTipsPanel) {
            this.adTipsPanel = mw.UIService.create(AdTipsPanel);
        }
        return this.adTipsPanel;
    }
    get getBagModuleC() {
        if (!this.bagModuleC) {
            this.bagModuleC = ModuleService.getModule(BagModuleC);
        }
        return this.bagModuleC;
    }
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
        if (mw.SystemUtil.isClient()) {
            if (this.bagId <= 0)
                return;
            let skinId = (this.skinId && this.skinId.length > 0) ? this.skinId : GameConfig.BagInfo.getElement(this.bagId).AssetId;
            this.curAdsCount = 0;
            Utils.asyncDownloadAsset(skinId).then(() => {
                this.gameObject.parent.setDescription([skinId]);
            });
            let trigger = this.gameObject;
            trigger.onEnter.add((char) => {
                if (char.gameObjectId != Player.localPlayer.character.gameObjectId)
                    return;
                if (this.getBagModuleC.isHasBagId(this.bagId)) {
                    Notice.showDownNotice(GameConfig.Language.Text_ObtainedOpenTheBackpackToUse.Value);
                    return;
                }
                this.nextAds();
            });
        }
    }
    nextAds() {
        this.getAdTipsPanel.showRewardAd(() => {
            this.curAdsCount++;
            if (this.curAdsCount >= this.adsCount) {
                this.getBagModuleC.onCompleted(this.bagId);
            }
            else {
                TimeUtil.delaySecond(2).then(() => {
                    this.nextAds();
                });
            }
        }, StringUtil.format(GameConfig.Language.Text_WatchTheAdvertisementTimesGetItForFree.Value, this.adsCount - this.curAdsCount), GameConfig.Language.Text_Cancel.Value, GameConfig.Language.Text_FreeToReceive.Value);
    }
    /**
     * 周期函数 每帧执行
     * 此函数执行需要将this.useUpdate赋值为true
     * @param dt 当前帧与上一帧的延迟 / 秒
     */
    onUpdate(dt) {
    }
    /** 脚本被销毁时最后一帧执行完调用此函数 */
    onDestroy() {
    }
};
__decorate([
    mw.Property({ displayName: "bagId", group: "脚本设置" })
], NewScript.prototype, "bagId", void 0);
__decorate([
    mw.Property({ displayName: "skinId", group: "脚本设置" })
], NewScript.prototype, "skinId", void 0);
__decorate([
    mw.Property({ displayName: "adsCount", group: "脚本设置" })
], NewScript.prototype, "adsCount", void 0);
NewScript = __decorate([
    Component
], NewScript);
var NewScript$1 = NewScript;

var foreign89 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: NewScript$1
});

/** 冷兵器客户端处理器 */
class WeaponClient extends WeaponData {
    constructor() {
        super(...arguments);
        // private allAniGuid: string[] = [];
        /** 当前动画索引 */
        this.curAnimationIndex = 0;
        /** 当前动作索引 */
        this.curActionIndex = 0;
        /** 是否可以连击 */
        this.canCombo = false;
        /** 是否可以操作 */
        this.canOper = true;
        /** 最后一次的播放动作信息 */
        this.lastPlayInfo = null;
        /** 最后一次播放的guid */
        this.lastPlayGuid = "";
        /** 当前右手穿戴的装备 */
        this.equipRightWeaponGuid = "";
        /** 当前左手穿戴的装备 */
        this.equipLeftWeaponGuid = "";
        /** 客户端右手穿戴的装备 */
        this.clientEquipGo_Right = null;
        /** 客户端左手穿戴的装备 */
        this.clientEquipGo_Left = null;
        /** 当前正在循环播放的特效 */
        this.curPlayEffs = [];
        this.fightIdelAniGuid = "";
        this.constFightingSec = 3;
        this.fightingSec = 0;
    }
    /**
     * 重新写入动画数据
     * @param jsonList 动画数据数组 每个json为一个动画
     */
    async reWriteAnimationJson(jsonList) {
        this.animationJsons = [];
        this.animationJsons = jsonList;
        this.animationInfo = [];
        this.animationJsons.forEach(e => {
            let info = JSON.parse(e);
            let newInfo = new AnimationInfo$2();
            if (info) {
                Object.keys(info).forEach(e => {
                    if (info[e] instanceof Object) {
                        return;
                    }
                    newInfo[e] = info[e];
                });
                info.infos.forEach(e => {
                    let nodeInfo = new NodeInfo();
                    Object.keys(e).forEach(k => {
                        nodeInfo[k] = e[k];
                    });
                    newInfo.infos.push(nodeInfo);
                });
                this.animationInfo.push(newInfo);
            }
            else {
                Console.error("解析json错误 : " + e);
            }
        });
        if (this.animationInfo.length != this.animationJsons.length) {
            Console.error("解析json错误 : 动画数量和解析数量不一致 : " + this.animationInfo.length + " = " + this.animationJsons.length);
        }
        else {
            for (let i = 0; i < this.animationInfo.length; i++) {
                let aniInfo = this.animationInfo[i];
                for (let j = 0; j < aniInfo.infos.length; j++) {
                    let info = aniInfo.infos[j];
                    if (info.guid == "") {
                        continue;
                    }
                    // if (mw.AssetUtil.assetLoaded(info.guid)) continue;
                    if (!mw.AssetUtil.assetLoaded(info.guid)) {
                        await mw.AssetUtil.asyncDownloadAsset(info.guid);
                        // if (res) mw.AssetUtil.asyncDownloadAsset(info.guid);
                    }
                }
                if (aniInfo.charFightIdelAniId == "") {
                    continue;
                }
                // if (mw.AssetUtil.assetLoaded(aniInfo.charFightIdelAniId)) continue;
                if (!mw.AssetUtil.assetLoaded(aniInfo.charFightIdelAniId)) {
                    await mw.AssetUtil.asyncDownloadAsset(aniInfo.charFightIdelAniId);
                    // if (res) mw.AssetUtil.assetLoaded(aniInfo.charFightIdelAniId);
                }
            }
        }
    }
    /**
     * 播放动画
     * @param index 动画索引
     * @param onComplate 动画播放完成回调,actionIndex:当前index,maxIndex:最大索引
     * @param onHit 打击点回调,actionIndex:当前动作索引,maxIndex:最大动作索引,hitObjs:受击对象列表(过滤自身)
     * @param onStartCombo 开始连击回调,milSec:可以连击的时间(毫秒)
     * @param onStartCharge 开始蓄力回调,actionIndex:当前动作索引,maxIndex:最大动作索引,endCharge:开发者主动触发,结束蓄力，参数是否蓄力成功
     * @returns
     */
    async playAnimation(index, onComplate, onHit, onStartCombo, onStartCharge) {
        if (!this.canOper) {
            // Console.error("当前不能操作");
            return false;
        }
        if (!this.checkIndex(index)) {
            Console.error("索引出错 : " + index);
            return false;
        }
        this.stopAllTimer();
        this.allTimer = [];
        if (this.curAnimationIndex != index) {
            this.curActionIndex = 0;
            this.canOper = false;
            this.canCombo = false;
        }
        else if (this.canCombo) {
            //计算下一个动作索引
            let maxIndex = this.getActionLengthByAnimation(this.curAnimationIndex) - 1;
            let curIndex = this.curActionIndex;
            this.curActionIndex++;
            if (this.curActionIndex >= this.getActionLengthByAnimation(this.curAnimationIndex)) {
                this.curActionIndex = 0;
            }
            //回调当前执行动作完成
            if (onComplate) {
                onComplate(curIndex, maxIndex);
            }
            if (this.lastPlayInfo != null) {
                PlayerManagerExtesion.rpcStopAnimation(this.char, this.lastPlayInfo.guid);
            }
        }
        //设置不能动画也不能连击了
        this.canOper = false;
        this.canCombo = false;
        this.fightIdelAniGuid = this.getCharFightIdelGuid(index);
        Console.error("this.fightIdelAniGuid : " + this.fightIdelAniGuid);
        //设置当前要播放的动画索引
        this.curAnimationIndex = index;
        let info = this.getCurPlayActionInfo();
        if (!info) {
            this.canOper = true;
            Console.error("获取不到当前动作 : " + index);
            return false;
        }
        this.lastPlayInfo = info;
        this.lastPlayGuid = info.guid;
        //持续时间
        let durMilSec = parseInt(info.duration);
        //击打时间
        let hitMilSec = parseInt(info.hitLength);
        let playCount = 1;
        if (info.isCharge != "0")
            playCount = 0;
        // if (!this.allAniGuid.includes(info.guid)) {
        //     this.allAniGuid.push(info.guid);
        //     Console.error("ALL 动画 : " + this.allAniGuid);
        // }
        Console.error("播放动画 : " + info.guid);
        PlayerManagerExtesion.rpcPlayAnimation(this.char, info.guid, playCount, 1);
        //设置前摇时间，丢失控制
        let rock = parseInt(info.frontRockLength);
        if (rock > 0) {
            this.char.movementEnabled = false;
            this.char.jumpEnabled = false;
        }
        /** 播放特效 */
        let effs = this.getCurPlayInfoAtType(NodeType.Eff);
        this.playAnimationEff(effs);
        /** 播放音效 */
        let audios = this.getCurPlayInfoAtType(NodeType.Audio);
        this.playAudio(audios);
        /** 移动处理 */
        let moves = this.getCurPlayInfoAtType(NodeType.Move);
        this.moveHandle(moves);
        /** 处理战斗待机 */
        this.fightingSec = 0;
        /** 获取技能检测类 */
        let skillRectNodes = this.getCurPlayInfoAtType(NodeType.SkillRect);
        /** 计算最终前摇时间 会决定禁止操作的时间 */
        let logicFrontTime = rock;
        moves.forEach(e => {
            if (e.isToPos == "1")
                return;
            let moveTime = parseInt(e.delayPlayTime) + parseInt(e.duration);
            if (moveTime > logicFrontTime) {
                logicFrontTime = moveTime;
            }
        });
        if (logicFrontTime > durMilSec)
            durMilSec = logicFrontTime;
        let maxIndex = this.getActionLengthByAnimation(this.curAnimationIndex) - 1;
        let curIndex = this.curActionIndex;
        if (info.isCharge != "0") {
            new Promise((resolve, reject) => {
                if (onStartCharge)
                    onStartCharge(this.curActionIndex, this.getActionLengthByAnimation(this.curAnimationIndex) - 1, resolve);
            }).then((res) => {
                this.char.movementEnabled = true;
                this.char.jumpEnabled = true;
                this.canOper = true;
                this.canCombo = true;
                curIndex += 1;
                if (curIndex > maxIndex || !res) {
                    this.canCombo = false;
                    this.curActionIndex = 0;
                    this.server_StopAllEffectProxy();
                    if (this.lastPlayInfo != null) {
                        PlayerManagerExtesion.rpcStopAnimation(this.char, this.lastPlayInfo.guid);
                    }
                    return;
                }
                this.server_StopAllEffectProxy();
                this.playAnimation(index, onComplate, onHit, onStartCombo, onStartCharge);
            });
            return;
        }
        /** 前摇结束 */
        this.startTimeOut(() => {
            this.char.movementEnabled = true;
            this.char.jumpEnabled = true;
            this.canOper = true;
            this.canCombo = true;
            if (onStartCombo) {
                onStartCombo(durMilSec - hitMilSec);
            }
        }, logicFrontTime);
        if (logicFrontTime > hitMilSec) {
            Console.error("前摇最终时间 : " + logicFrontTime + " 大于 击打时间 : " + hitMilSec);
        }
        /** 击打点回调 */
        this.startTimeOut(() => {
            if (onHit) {
                onHit(this.curActionIndex, maxIndex, SkillRectCheck.checkNodes(this.char, skillRectNodes));
            }
            if (info.isAutoPlay != "0") {
                Console.error("自动连击");
                Console.error(info);
                this.playAnimation(index, onComplate, onHit, onStartCombo, onStartCharge);
                return;
            }
        }, hitMilSec);
        /** 完成回调 */
        this.startTimeOut(() => {
            this.canCombo = false;
            this.canOper = true;
            this.curActionIndex = 0;
            if (onComplate) {
                onComplate(curIndex, maxIndex);
                // Console.error("技能使用完成");
                this.fightingSec = this.constFightingSec;
            }
        }, durMilSec);
        return true;
    }
    /** 获取动画总数 */
    getAnimationCount() {
        return this.animationInfo.length;
    }
    /**
     * 停止播放
     */
    stopPlay() {
        this.canCombo = false;
        this.canOper = true;
        this.curActionIndex = 0;
        this.stopAllTimer();
        this.server_StopAllEffectProxy();
        PlayerManagerExtesion.rpcStopAnimation(this.char, this.lastPlayGuid);
        this.lastPlayGuid = "";
    }
    /**
     * 获取动画中动作的总数
     * @param animationIndex 动画索引
     * @returns -1为传入参数有误
     */
    getActionLengthByAnimation(animationIndex) {
        if (!this.checkIndex(animationIndex)) {
            return -1;
        }
        let res = 0;
        let aniInfo = this.animationInfo[animationIndex];
        aniInfo.infos.forEach(e => {
            if (e.type == NodeType.Animation.toString())
                res++;
        });
        return res;
    }
    /**
     * 穿戴手部武器装备
     * @param equipGuid 装备guid
     * @param isRight 是否右手(默认:是)
     */
    equipWeapon_Hand(equipGuid, isRight = true) {
        this.server_EquipWeapon(equipGuid, isRight);
    }
    /**
     * 取消手部武器穿戴
     * @param isRight 是否右手(默认:是)
     */
    unequipWeapon_Hand(isRight = true) {
        this.server_EquipWeapon("", isRight);
    }
    /**
     * 设置从战斗待机切换到待机需要等待的时间
     * @param sec
     */
    setFightIdelChangeIdelWaitSec(sec) {
        this.constFightingSec = sec;
    }
    /**
     * 获取战斗待机动画guid
     * @param aniamtionIndex
     */
    getCharFightIdelGuid(animationIndex) {
        if (!this.checkIndex(animationIndex)) {
            return "";
        }
        let aniInfo = this.animationInfo[animationIndex];
        return aniInfo.charFightIdelAniId;
    }
    /** 客户端绑定角色id改变 */
    client_OnChangeCharGuid() {
        let handle = setInterval(async () => {
            let char = await GameObject.asyncFindGameObjectById(this.charGuid);
            if (char) {
                await char.asyncReady();
                clearInterval(handle);
                if (PlayerManagerExtesion.isCharacter(char)) {
                    this.char = char;
                }
                else {
                    this.char = char;
                }
            }
        }, 100);
    }
    /** 服务器通知客户端更换装备 */
    client_OnChangeEquipWeaponRight() {
        if (this.clientEquipGo_Right != null) {
            this.clientEquipGo_Right.parent = null;
            this.clientEquipGo_Right.destroy();
            this.clientEquipGo_Right = null;
        }
        if (this.equipRightWeaponGuid != "") {
            const handle = setInterval(async () => {
                if (this.char != null) {
                    await this.char.asyncReady();
                    clearInterval(handle);
                    this.clientEquipGo_Right = await SpawnManager.wornAsyncSpawn(this.equipRightWeaponGuid, false);
                    this.char.attachToSlot(this.clientEquipGo_Right, mw.HumanoidSlotType.RightHand);
                    this.clientEquipGo_Right.localTransform.position = mw.Vector.zero;
                }
            }, 100);
        }
    }
    /** 服务器通知客户端更换装备 */
    client_OnChangeEquipWeaponLeft() {
        if (this.clientEquipGo_Left != null) {
            this.clientEquipGo_Left.parent = null;
            this.clientEquipGo_Left.destroy();
            this.clientEquipGo_Left = null;
        }
        if (this.equipLeftWeaponGuid != "") {
            const handle = setInterval(async () => {
                if (this.char != null) {
                    clearInterval(handle);
                    this.clientEquipGo_Left = await SpawnManager.wornAsyncSpawn(this.equipLeftWeaponGuid, false);
                    this.char.attachToSlot(this.clientEquipGo_Left, mw.HumanoidSlotType.LeftHand);
                    this.clientEquipGo_Left.localTransform.position = mw.Vector.zero;
                }
            }, 100);
        }
    }
    /**
     * 客户端停止所有特效
     */
    async client_StopAllEffect() {
        this.curPlayEffs.forEach(e => {
            e.stop();
            e.destroy();
        });
        this.curPlayEffs = [];
    }
    /**
    * 播放特效
    * @param guid 特效id
    * @param slotIndex 插槽位置 -1 则在角色原地播放
    * @param offsetPos 偏移坐标
    * @param offsetRotate 偏移旋转
    * @param offsetScale 偏移缩放
    */
    async client_PlayEffect(guid, stopTime, slotIndex, offsetPos, offsetRotate, offsetScale, colorHex) {
        let eff = (await SpawnManager.wornAsyncSpawn(guid));
        if (slotIndex == -1) {
            eff.worldTransform.position = new mw.Vector(offsetPos.x, offsetPos.y, offsetPos.z);
            eff.worldTransform.rotation = new mw.Rotation(offsetRotate.x, offsetRotate.y, offsetRotate.z);
            eff.worldTransform.scale = new mw.Vector(offsetScale.x, offsetScale.y, offsetScale.z);
            eff.loop = (stopTime == 0);
            eff.maskcolor = (mw.LinearColor.colorHexToLinearColor("FFFFFFFF"));
            if (colorHex && colorHex != "") {
                eff.maskcolor = (mw.LinearColor.colorHexToLinearColor(colorHex));
            }
            eff.play();
            if (stopTime == 0) {
                this.curPlayEffs.push(eff);
            }
            else {
                setTimeout(() => {
                    eff.destroy();
                }, stopTime);
            }
        }
        else {
            eff.worldTransform.position = new mw.Vector(offsetPos.x, offsetPos.y, offsetPos.z);
            eff.worldTransform.rotation = new mw.Rotation(offsetRotate.x, offsetRotate.y, offsetRotate.z);
            eff.worldTransform.scale = new mw.Vector(offsetScale.x, offsetScale.y, offsetScale.z);
            eff.loop = (stopTime == 0);
            eff.maskcolor = (mw.LinearColor.colorHexToLinearColor("FFFFFFFF"));
            if (colorHex && colorHex != "") {
                eff.maskcolor = (mw.LinearColor.colorHexToLinearColor(colorHex));
            }
            eff.play();
            if (stopTime == 0) {
                this.curPlayEffs.push(eff);
            }
            else {
                setTimeout(() => {
                    eff.destroy();
                }, stopTime);
            }
        }
    }
    /** 移动处理 */
    moveHandle(moveInfo) {
        moveInfo.forEach(e => {
            /** 移动时间 */
            let dur = parseInt(e.duration);
            /** 移动距离 */
            let moveDis = parseInt(e.moveDistance);
            /** 移动类型 */
            let moveType = parseInt(e.isToPos);
            /** 移动方向 */
            let moveDir = parseInt(e.moveDir);
            if (moveDir != -1)
                moveDir = 1;
            /** 移动延迟 */
            let moveDelay = parseInt(e.delayPlayTime);
            if (moveDelay <= 0)
                moveDelay = 1;
            this.startTimeOut(() => {
                /** 处理瞬移 */
                if (moveType == 1) {
                    let charPos = this.char.worldTransform.position.clone();
                    let toPos = charPos;
                    let curMoveDis = this.char.worldTransform.getForwardVector().clone().multiply(moveDis).multiply(moveDir);
                    toPos = toPos.clone().add(curMoveDis);
                    let rate = 1;
                    /** 碰撞检测 因为瞬移长度不定，所以需要多条射线进行检测 最多5条 */
                    while (true) {
                        if (rate <= 0) {
                            return;
                        }
                        let res = QueryUtil.lineTrace(charPos, toPos, true, true);
                        res = res.filter(e => { return e.gameObject.gameObjectId != this.char.gameObjectId; });
                        if (res.length > 0) {
                            rate -= 0.2;
                            toPos = charPos.clone().add(curMoveDis.clone().multiply(rate));
                        }
                        else {
                            break;
                        }
                    }
                    this.char.worldTransform.position = toPos.clone();
                    this.server_setCharPos(this.char.gameObjectId, toPos);
                    return;
                }
                //服务器位移
                let charPos = this.char.worldTransform.position.clone();
                let toPos = charPos.clone();
                let curMoveDis = this.char.worldTransform.getForwardVector().multiply(moveDis).multiply(moveDir);
                toPos = toPos.clone().add(curMoveDis);
                this.server_setCharToPos(this.char.gameObjectId, charPos, toPos, dur);
            }, moveDelay);
        });
    }
    /**
     * 播放音效
     * @param audios
     * @returns
     */
    playAudio(audios) {
        if (mw.SystemUtil.isServer())
            return;
        audios.forEach((e) => {
            this.startTimeOut(async () => {
                let audioObj = await SpawnManager.wornAsyncSpawn(e.guid, false);
                if (audioObj) {
                    let audio = audioObj;
                    audio.stop();
                    audio.isLoop = false;
                    audio.play();
                    audio.onFinish.add(() => {
                        audio.destroy();
                    });
                }
            }, parseInt(e.delayPlayTime));
        });
    }
    /** 播放特效 */
    playAnimationEff(effs) {
        if (mw.SystemUtil.isServer())
            return;
        effs.forEach(e => {
            setTimeout(async () => {
                let offsetPos = new mw.Vector(parseFloat(e.offsetPos[0]), parseFloat(e.offsetPos[1]), parseFloat(e.offsetPos[2]));
                let offsetRotate = new mw.Rotation(parseFloat(e.offsetRotation[0]), parseFloat(e.offsetRotation[1]), parseFloat(e.offsetRotation[2]));
                let offsetScale = new mw.Vector(parseFloat(e.offsetScale[0]), parseFloat(e.offsetScale[1]), parseFloat(e.offsetScale[2]));
                let slotIndex = parseInt(e.slotIndex);
                if (slotIndex <= -1) {
                    offsetRotate = this.char.worldTransform.getForwardVector().toRotation().clone().add(new mw.Rotation(offsetRotate.x, offsetRotate.y, offsetRotate.z));
                    let forward = this.char.worldTransform.getForwardVector().normalized;
                    let right = this.char.worldTransform.getRightVector().normalized;
                    offsetPos = this.char.worldTransform.position.clone().add(forward.clone().multiply(offsetPos.x).add(right.clone().multiply(offsetPos.y)).add(mw.Vector.up.multiply(offsetPos.z)));
                    if (slotIndex == -2) {
                        offsetPos = offsetPos.clone().subtract(mw.Vector.up.multiply(this.char.collisionExtent.z / 2));
                    }
                    this.server_playEffectProxy(e.guid, parseInt(e.stopTime), slotIndex, offsetPos, offsetRotate, offsetScale, e.colorHex);
                }
                else {
                    if (this.char.player == null)
                        return;
                    this.server_playEffectProxy(e.guid, parseInt(e.stopTime), slotIndex, offsetPos, offsetRotate, offsetScale, e.colorHex);
                }
            }, parseInt(e.delayPlayTime));
        });
    }
    /**
     * 启动一个定时器
     * @param callback 回调
     * @param milSec 延迟毫秒
     */
    startTimeOut(callback, milSec) {
        this.allTimer.push(setTimeout(callback, milSec));
    }
    /**
     * 启动一个定时器
     * @param callback 回调
     * @param milSec 间隔毫秒
     */
    startTimeInterval(callback, milSec) {
        let index = this.allTimer.length;
        this.allTimer.push(setInterval(() => {
            callback(this.allTimer[index]);
        }, milSec));
    }
    /** 获取当前播放的action */
    getCurPlayActionInfo() {
        let info = this.animationInfo[this.curAnimationIndex];
        Console.error(this.animationInfo);
        let animationIndex = 0;
        for (let i = 0; i < info.infos.length; i++) {
            let e = info.infos[i];
            if (e.type == NodeType.Animation.toString()) {
                if (animationIndex == this.curActionIndex) {
                    return e;
                }
                animationIndex++;
            }
        }
        return null;
    }
    /**
     * 获取当前要播放的特效
     * @returns
     */
    getCurPlayInfoAtType(type) {
        let res = [];
        let info = this.animationInfo[this.curAnimationIndex];
        let animationIndex = -1;
        for (let i = 0; i < info.infos.length; i++) {
            let e = info.infos[i];
            if (e.type == NodeType.Animation.toString()) {
                animationIndex++;
            }
            if (this.curActionIndex == animationIndex) {
                if (e.type == type.toString()) {
                    res.push(e);
                }
            }
            if (this.curActionIndex < animationIndex) {
                break;
            }
        }
        return res;
    }
    /** 检查动画索引 */
    checkIndex(index) {
        if (index < 0 || index >= this.animationInfo.length) {
            return false;
        }
        return true;
    }
    onStart() {
        super.onStart();
        if (mw.SystemUtil.isClient()) ;
    }
    onUpdate(dt) {
        super.onUpdate(dt);
        if (mw.SystemUtil.isClient()) {
            if (this.fightingSec > 0)
                this.fightingSec -= dt;
            if (this.canOper && this.canCombo) {
                /** 角色在移动 */
                if (this.char.movementMode == mw.MovementMode.Walk && this.lastPlayGuid != "" &&
                    mw.Vector.distance(this.char.velocity, mw.Vector.zero) > 1) {
                    Console.error("停止动画");
                    PlayerManagerExtesion.rpcStopAnimation(this.char, this.lastPlayGuid);
                    this.lastPlayGuid = "";
                }
            }
            else if (this.char != null && this.fightIdelAniGuid != "") {
                if (this.fightingSec <= 0 || mw.Vector.distance(this.char.velocity, mw.Vector.zero) > 1) {
                    if (this.lastPlayGuid == this.fightIdelAniGuid) {
                        Console.error("开始移动 停止战斗动画");
                        PlayerManagerExtesion.rpcStopAnimation(this.char, this.fightIdelAniGuid);
                        this.lastPlayGuid = "";
                    }
                    //Console.error("当前状态在walk : " + mw.Vector.distance(this.char.velocity, mw.Vector.zero));
                    return;
                }
                if (this.fightingSec > 0) {
                    if (this.lastPlayGuid != this.fightIdelAniGuid) {
                        Console.error("播放战斗动画");
                        PlayerManagerExtesion.rpcPlayAnimation(this.char, this.fightIdelAniGuid, 0, 0);
                        this.lastPlayGuid = this.fightIdelAniGuid;
                    }
                }
                else if (this.lastPlayGuid == this.fightIdelAniGuid) {
                    PlayerManagerExtesion.rpcStopAnimation(this.char, this.fightIdelAniGuid);
                    this.lastPlayGuid = "";
                    Console.error("时间到达 退出战斗待机");
                }
            }
        }
    }
}
__decorate([
    mw.Property({ replicated: true, onChanged: "client_OnChangeEquipWeaponRight" })
], WeaponClient.prototype, "equipRightWeaponGuid", void 0);
__decorate([
    mw.Property({ replicated: true, onChanged: "client_OnChangeEquipWeaponLeft" })
], WeaponClient.prototype, "equipLeftWeaponGuid", void 0);
__decorate([
    RemoteFunction(mw.Client, mw.Multicast)
], WeaponClient.prototype, "client_StopAllEffect", null);
__decorate([
    RemoteFunction(mw.Client, mw.Multicast)
], WeaponClient.prototype, "client_PlayEffect", null);

var foreign93 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    WeaponClient: WeaponClient
});

/** 冷兵器服务器处理器 */
class WeaponServer extends WeaponClient {
    onStart() {
        super.onStart();
    }
    onUpdate(dt) {
        super.onUpdate(dt);
    }
    server_StopAllTimer() {
        this.allTimer.forEach(e => {
            clearTimeout(e);
            clearInterval(e);
        });
        this.allTimer = [];
        this.allUpdateCallback = [];
    }
    /**
     * 播放特效
     * @param guid 特效id
     * @param slotIndex 插槽位置 -1 则在角色原地播放
     * @param offsetPos 偏移坐标
     * @param offsetRotate 偏移旋转
     * @param offsetScale 偏移缩放
     */
    async server_playEffectProxy(guid, stopTime, slotIndex, offsetPos, offsetRotate, offsetScale, colorHex) {
        this.client_PlayEffect(guid, stopTime, slotIndex, offsetPos, offsetRotate, offsetScale, colorHex);
    }
    /** 服务器停止所有特效 */
    server_StopAllEffectProxy() {
        this.client_StopAllEffect();
    }
    /**
     * 设置指定对象坐标
     * @param guid
     * @param pos
     */
    async server_setCharPos(guid, pos) {
        let go = await GameObject.asyncFindGameObjectById(guid);
        if (PlayerManagerExtesion.isCharacter(go)) {
            let char = go;
            char.worldTransform.position = new mw.Vector(pos.x, pos.y, pos.z);
        }
    }
    async server_addImp(guid, moveDis, moveDir) {
        let go = await GameObject.asyncFindGameObjectById(guid);
        if (PlayerManagerExtesion.isCharacter(go)) {
            let char = go;
            char.addImpulse(char.worldTransform.getForwardVector().multiply(moveDis).multiply(moveDir), true);
        }
    }
    /**
     * 设置指定对象坐标
     * @param guid
     * @param pos
     */
    async server_setCharToPos(guid, startPos, pos, time) {
        let go = await GameObject.asyncFindGameObjectById(guid);
        if (PlayerManagerExtesion.isCharacter(go)) {
            let char = go;
            let curDur = 0;
            let posVec = new mw.Vector(pos.x, pos.y, pos.z);
            let startPosVec = new mw.Vector(startPos.x, startPos.y, startPos.z);
            let subDis = posVec.clone().subtract(startPosVec);
            let lastVec = new mw.Vector(char.worldTransform.position.x, char.worldTransform.position.y, char.worldTransform.position.z);
            Console.error("start Set char To Pos : " + Date.now());
            this.startUpdateInterval((dt) => {
                curDur += (dt * 1000);
                if (curDur >= time) {
                    Console.error("end Set char To Pos : " + Date.now());
                    return false;
                }
                let curProgress = parseFloat((curDur / time).toFixed(2));
                let curPos = new mw.Vector(parseFloat((subDis.x * curProgress).toFixed(2)), parseFloat((subDis.y * curProgress).toFixed(2)), parseFloat((subDis.z * curProgress).toFixed(2)));
                let curVec = curPos.clone().add(startPosVec);
                let res = QueryUtil.lineTrace(char.worldTransform.position, curVec, true, true);
                res = res.filter(e => { return e.gameObject.gameObjectId != this.char.gameObjectId; });
                if (res.length > 0) {
                    curVec = this.char.worldTransform.position.clone();
                }
                let sub = curVec.clone().subtract(lastVec);
                lastVec = curVec.clone();
                char.worldTransform.position = char.worldTransform.position.add(sub);
                return true;
            });
        }
    }
    /** 服务器 设置玩家装备 */
    server_EquipWeapon(guid, isRight) {
        if (isRight)
            this.equipRightWeaponGuid = guid;
        else
            this.equipLeftWeaponGuid = guid;
    }
    /** 服务器 设置玩家guid */
    server_setChar(guid) {
        this.charGuid = guid;
    }
}
__decorate([
    RemoteFunction(mw.Server)
], WeaponServer.prototype, "server_StopAllTimer", null);
__decorate([
    RemoteFunction(mw.Server)
], WeaponServer.prototype, "server_playEffectProxy", null);
__decorate([
    RemoteFunction(mw.Server)
], WeaponServer.prototype, "server_StopAllEffectProxy", null);
__decorate([
    RemoteFunction(mw.Server)
], WeaponServer.prototype, "server_setCharPos", null);
__decorate([
    RemoteFunction(mw.Server)
], WeaponServer.prototype, "server_addImp", null);
__decorate([
    RemoteFunction(mw.Server)
], WeaponServer.prototype, "server_setCharToPos", null);
__decorate([
    RemoteFunction(mw.Server)
], WeaponServer.prototype, "server_EquipWeapon", null);
__decorate([
    RemoteFunction(mw.Server)
], WeaponServer.prototype, "server_setChar", null);

var foreign96 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    WeaponServer: WeaponServer
});

/*
 * @Author: yukun.gao yukun.gao@appshahe.com
 * @Date: 2022-08-11 00:05:21
 * @LastEditors: yukun.gao yukun.gao@appshahe.com
 * @LastEditTime: 2022-09-25 17:04:42
 * @FilePath: \JavaScripts\WeaponObj\Weapon.ts
 * @Description: 这是默认设置,请设置`customMade`, 打开koroFileHeader查看配置 进行设置: https://github.com/OBKoro1/koro1FileHeader/wiki/%E9%85%8D%E7%BD%AE
 */
/** 冷兵器类 */
let Weapon = class Weapon extends WeaponServer {
    onStart() {
        super.onStart();
        this.useUpdate = true;
    }
    onUpdate(dt) {
        super.onUpdate(dt);
    }
};
Weapon = __decorate([
    Component
], Weapon);
var Weapon$1 = Weapon;

var foreign92 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: Weapon$1
});

var FreeCamera_1;
let FreeCamera = FreeCamera_1 = class FreeCamera extends Script {
    constructor() {
        super(...arguments);
        /** 摄像机锚点移动速度 */
        this.speed = 500;
        /** 移动叠加向量 */
        this._moveDirection = Vector.zero;
        /** 移动临时位置 */
        this._moveLoc = Vector.zero;
        /** 比值用常量 */
        this.VECTOR_ZERO = Vector.zero;
        /** 是否处于自由视角状态 */
        this.isFreeCamera = false;
        this.isFirstChange = true;
    }
    onStart() {
        this.init();
    }
    async init() {
        if (SystemUtil.isServer())
            return;
        await (await Player.asyncGetLocalPlayer()).character.asyncReady();
        this.freeCamera = await GameObject.asyncSpawn("Camera");
        this.freeCamera.springArm.localTransform = Transform.identity;
        // Config
        this.freeCamera.upAngleLimit = 89.9;
        this.freeCamera.downAngleLimit = 89.9;
        this.freeCamera.localTransform = Transform.identity;
        this.freeCamera.springArm.localTransform = Transform.identity;
        this.freeCamera.springArm.length = 0;
        this.freeCamera.springArm.collisionEnabled = false;
        InputUtil.onKeyDown(Keys.F8, () => {
            if (this.isFreeCamera) {
                this.exitFreeCamera();
            }
            else {
                this.enterFreeCamera();
            }
        });
        InputUtil.onKeyDown(Keys.NumPadNine, () => {
            this.freeCamera.springArm.worldTransform.position = Player.localPlayer.character.worldTransform.position.clone();
            this._moveLoc = this.freeCamera.springArm.worldTransform.position.clone();
        });
        Event.addLocalListener(FreeCamera_1.EVENTS_JOYSTICK_INPUT, (dir) => {
            if (this.freeCamera) {
                const forward = this.freeCamera.worldTransform.clone().getForwardVector().clone();
                const right = this.freeCamera.worldTransform.clone().getRightVector().clone();
                this._moveDirection.set(forward.multiply(dir.y).add(right.multiply(dir.x)));
                Vector.add(this._moveLoc, this._moveDirection.normalized.multiply(this.speed * 0.02), this._moveLoc);
                this.freeCamera.springArm.worldTransform.position = this._moveLoc;
                // 避免重复使用
                if (this.useUpdate)
                    this.useUpdate = false;
            }
        });
        KeyActionManager.instance.add([Keys.W, Keys.S, Keys.A, Keys.D, Keys.E, Keys.Q]);
    }
    /**
     * 切换至自由视角摄像机（暂未提供触屏控制方式）
     */
    enterFreeCamera() {
        if (!this.originCamera) {
            this.originCamera = Camera.currentCamera;
        }
        if (this.isFirstChange) {
            this.freeCamera.springArm.worldTransform.position = Player.localPlayer.character.worldTransform.position.clone();
            this._moveLoc = this.freeCamera.springArm.worldTransform.position.clone();
            this.isFirstChange = false;
        }
        Camera.switch(this.freeCamera, 0);
        this.originCamera.springArm.useControllerRotation = false;
        this.freeCamera.springArm.useControllerRotation = true;
        Player.localPlayer.character.movementEnabled = false;
        this.isFreeCamera = true;
        this.useUpdate = true;
    }
    /**
     * 退出自由视角摄像机
     */
    exitFreeCamera() {
        if (!this.isFreeCamera)
            return;
        Camera.switch(this.originCamera, 0);
        this.originCamera.springArm.useControllerRotation = true;
        this.freeCamera.springArm.useControllerRotation = false;
        Player.localPlayer.character.movementEnabled = true;
        this.isFreeCamera = false;
        this.useUpdate = false;
    }
    onUpdate(dt) {
        // 监听按键并叠加控制锚点位移的向量
        if (KeyActionManager.instance.isPress(Keys.W)) {
            // 将三维向量压缩至二维使用
            const forward = this.freeCamera.worldTransform.clone().getForwardVector().clone();
            this._moveDirection.x += forward.x;
            this._moveDirection.y += forward.y;
        }
        if (KeyActionManager.instance.isPress(Keys.S)) {
            const back = this.freeCamera.worldTransform.clone().getForwardVector().clone().multiply(-1);
            this._moveDirection.x += back.x;
            this._moveDirection.y += back.y;
        }
        if (KeyActionManager.instance.isPress(Keys.A)) {
            const left = this.freeCamera.worldTransform.clone().getRightVector().clone().multiply(-1);
            this._moveDirection.x += left.x;
            this._moveDirection.y += left.y;
        }
        if (KeyActionManager.instance.isPress(Keys.D)) {
            const right = this.freeCamera.worldTransform.clone().getRightVector().clone();
            this._moveDirection.x += right.x;
            this._moveDirection.y += right.y;
        }
        if (KeyActionManager.instance.isPress(Keys.E)) {
            this._moveDirection.z += 1;
        }
        if (KeyActionManager.instance.isPress(Keys.Q)) {
            this._moveDirection.z -= 1;
        }
        // 为锚点设置叠加后向量，实现无限制位移
        if (!this._moveDirection.equals(this.VECTOR_ZERO)) {
            Vector.add(this._moveLoc, this._moveDirection.normalized.multiply(this.speed * dt), this._moveLoc);
            this.freeCamera.springArm.worldTransform.position = this._moveLoc;
            this._moveDirection.x = 0;
            this._moveDirection.y = 0;
            this._moveDirection.z = 0;
        }
    }
};
FreeCamera.EVENTS_JOYSTICK_INPUT = "FreeCamera.EVENTS_JOYSTICK_INPUT";
FreeCamera = FreeCamera_1 = __decorate([
    Component
], FreeCamera);
var FreeCamera$1 = FreeCamera;
/**
 * 按键状态管理器
 */
class KeyActionManager {
    constructor() {
        /** 初始化标记 */
        this.isReady = false;
        /** 按下状态表 */
        this._actionStates = new Map;
        this._btnStates = new Map;
    }
    static get instance() {
        if (!KeyActionManager._instance) {
            KeyActionManager._instance = new KeyActionManager();
        }
        return KeyActionManager._instance;
    }
    /**
     * 检测按键是否被按下，无延迟（需要在update中调用，留意性能开销）
     * @param action 项目内按键操作枚举
     * @returns 是否被按下
     */
    isPress(action) {
        if (action instanceof mw.Button) {
            return this._btnStates.get(action.guid);
        }
        else {
            return this._actionStates.get(action);
        }
    }
    /**
     * 为指定按钮添加状态监听
     * @param btn 需要监听状态的按钮
     */
    add(btn) {
        // 初始化按下状态 并设定状态改变监听
        if (btn instanceof Button) {
            this._btnStates.set(btn.guid, false);
            btn.onPressed.add(() => {
                this._btnStates.set(btn.guid, true);
            });
            btn.onReleased.add(() => {
                this._btnStates.set(btn.guid, false);
            });
        }
        else {
            btn.forEach(element => {
                this._actionStates.set(element, false);
                InputUtil.onKeyDown(element, () => {
                    this._actionStates.set(element, true);
                });
                InputUtil.onKeyUp(element, () => {
                    this._actionStates.set(element, false);
                });
            });
        }
    }
}

var foreign99 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: FreeCamera$1
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/OnlineReward/OnlineRewardItem.ui
 * TIME: 2024.11.04-19.49.52
 */
let OnlineRewardItem_Generate = class OnlineRewardItem_Generate extends UIScript {
    get mButton() {
        if (!this.mButton_Internal && this.uiWidgetBase) {
            this.mButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mButton');
        }
        return this.mButton_Internal;
    }
    get mCoinCanvas() {
        if (!this.mCoinCanvas_Internal && this.uiWidgetBase) {
            this.mCoinCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mCoinCanvas');
        }
        return this.mCoinCanvas_Internal;
    }
    get mCoinTextBlock() {
        if (!this.mCoinTextBlock_Internal && this.uiWidgetBase) {
            this.mCoinTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mCoinCanvas/mCoinTextBlock');
        }
        return this.mCoinTextBlock_Internal;
    }
    get mExpCanvas() {
        if (!this.mExpCanvas_Internal && this.uiWidgetBase) {
            this.mExpCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mExpCanvas');
        }
        return this.mExpCanvas_Internal;
    }
    get mExpTextBlock() {
        if (!this.mExpTextBlock_Internal && this.uiWidgetBase) {
            this.mExpTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mExpCanvas/mExpTextBlock');
        }
        return this.mExpTextBlock_Internal;
    }
    get mRoleCanvas() {
        if (!this.mRoleCanvas_Internal && this.uiWidgetBase) {
            this.mRoleCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mRoleCanvas');
        }
        return this.mRoleCanvas_Internal;
    }
    get mRoleTextBlock() {
        if (!this.mRoleTextBlock_Internal && this.uiWidgetBase) {
            this.mRoleTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mRoleCanvas/mRoleTextBlock');
        }
        return this.mRoleTextBlock_Internal;
    }
    get mTimeTextBlock() {
        if (!this.mTimeTextBlock_Internal && this.uiWidgetBase) {
            this.mTimeTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mTimeTextBlock');
        }
        return this.mTimeTextBlock_Internal;
    }
    get mGetRewardTextBlock() {
        if (!this.mGetRewardTextBlock_Internal && this.uiWidgetBase) {
            this.mGetRewardTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mGetRewardTextBlock');
        }
        return this.mGetRewardTextBlock_Internal;
    }
    get mCanRewardTextBlock() {
        if (!this.mCanRewardTextBlock_Internal && this.uiWidgetBase) {
            this.mCanRewardTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mCanRewardTextBlock');
        }
        return this.mCanRewardTextBlock_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        this.mButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mButton");
        });
        this.mButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mCoinTextBlock);
        this.initLanguage(this.mExpTextBlock);
        this.initLanguage(this.mRoleTextBlock);
        this.initLanguage(this.mTimeTextBlock);
        this.initLanguage(this.mGetRewardTextBlock);
        this.initLanguage(this.mCanRewardTextBlock);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
OnlineRewardItem_Generate = __decorate([
    UIBind('UI/module/OnlineReward/OnlineRewardItem.ui')
], OnlineRewardItem_Generate);
var OnlineRewardItem_Generate$1 = OnlineRewardItem_Generate;

var foreign141 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: OnlineRewardItem_Generate$1
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/ShopModule/ShopItem.ui
 * TIME: 2024.11.04-19.49.53
 */
let ShopItem_Generate = class ShopItem_Generate extends UIScript {
    get mCanvas() {
        if (!this.mCanvas_Internal && this.uiWidgetBase) {
            this.mCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mCanvas');
        }
        return this.mCanvas_Internal;
    }
    get mSelectImage() {
        if (!this.mSelectImage_Internal && this.uiWidgetBase) {
            this.mSelectImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mCanvas/mSelectImage');
        }
        return this.mSelectImage_Internal;
    }
    get mIconImage() {
        if (!this.mIconImage_Internal && this.uiWidgetBase) {
            this.mIconImage_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mCanvas/mIconImage');
        }
        return this.mIconImage_Internal;
    }
    get mClickButton() {
        if (!this.mClickButton_Internal && this.uiWidgetBase) {
            this.mClickButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mCanvas/mClickButton');
        }
        return this.mClickButton_Internal;
    }
    get mTextBlock() {
        if (!this.mTextBlock_Internal && this.uiWidgetBase) {
            this.mTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mCanvas/mTextBlock');
        }
        return this.mTextBlock_Internal;
    }
    get mTextBlock_1() {
        if (!this.mTextBlock_1_Internal && this.uiWidgetBase) {
            this.mTextBlock_1_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mCanvas/mTextBlock_1');
        }
        return this.mTextBlock_1_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        this.mClickButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mClickButton");
        });
        this.mClickButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mTextBlock);
        this.initLanguage(this.mTextBlock_1);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
ShopItem_Generate = __decorate([
    UIBind('UI/module/ShopModule/ShopItem.ui')
], ShopItem_Generate);
var ShopItem_Generate$1 = ShopItem_Generate;

var foreign149 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: ShopItem_Generate$1
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/TaskModule/TaskItem.ui
 * TIME: 2024.11.04-19.49.53
 */
let TaskItem_Generate = class TaskItem_Generate extends UIScript {
    get mNameTextBlock() {
        if (!this.mNameTextBlock_Internal && this.uiWidgetBase) {
            this.mNameTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mNameTextBlock');
        }
        return this.mNameTextBlock_Internal;
    }
    get mCoinCanvas() {
        if (!this.mCoinCanvas_Internal && this.uiWidgetBase) {
            this.mCoinCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mCoinCanvas');
        }
        return this.mCoinCanvas_Internal;
    }
    get mCoinTextBlock() {
        if (!this.mCoinTextBlock_Internal && this.uiWidgetBase) {
            this.mCoinTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mCoinCanvas/mCoinTextBlock');
        }
        return this.mCoinTextBlock_Internal;
    }
    get mExpCanvas() {
        if (!this.mExpCanvas_Internal && this.uiWidgetBase) {
            this.mExpCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mExpCanvas');
        }
        return this.mExpCanvas_Internal;
    }
    get mExpTextBlock() {
        if (!this.mExpTextBlock_Internal && this.uiWidgetBase) {
            this.mExpTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mExpCanvas/mExpTextBlock');
        }
        return this.mExpTextBlock_Internal;
    }
    get mDiamondCanvas() {
        if (!this.mDiamondCanvas_Internal && this.uiWidgetBase) {
            this.mDiamondCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mDiamondCanvas');
        }
        return this.mDiamondCanvas_Internal;
    }
    get mDiamondTextBlock() {
        if (!this.mDiamondTextBlock_Internal && this.uiWidgetBase) {
            this.mDiamondTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mDiamondCanvas/mDiamondTextBlock');
        }
        return this.mDiamondTextBlock_Internal;
    }
    get mFinishButton() {
        if (!this.mFinishButton_Internal && this.uiWidgetBase) {
            this.mFinishButton_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mFinishButton');
        }
        return this.mFinishButton_Internal;
    }
    get mFinishTextBlock() {
        if (!this.mFinishTextBlock_Internal && this.uiWidgetBase) {
            this.mFinishTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mFinishButton/mFinishTextBlock');
        }
        return this.mFinishTextBlock_Internal;
    }
    get mUnfinishTextBlock() {
        if (!this.mUnfinishTextBlock_Internal && this.uiWidgetBase) {
            this.mUnfinishTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mUnfinishTextBlock');
        }
        return this.mUnfinishTextBlock_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        this.mFinishButton.onClicked.add(() => {
            Event.dispatchToLocal("PlayButtonClick", "mFinishButton");
        });
        this.mFinishButton.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mNameTextBlock);
        this.initLanguage(this.mCoinTextBlock);
        this.initLanguage(this.mExpTextBlock);
        this.initLanguage(this.mDiamondTextBlock);
        this.initLanguage(this.mFinishTextBlock);
        this.initLanguage(this.mUnfinishTextBlock);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
TaskItem_Generate = __decorate([
    UIBind('UI/module/TaskModule/TaskItem.ui')
], TaskItem_Generate);
var TaskItem_Generate$1 = TaskItem_Generate;

var foreign157 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: TaskItem_Generate$1
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/TrampolineModule/ImpactRadiusWindow.ui
 * TIME: 2024.11.04-19.49.52
 */
let ImpactRadiusWindow_Generate = class ImpactRadiusWindow_Generate extends UIScript {
    get img() {
        if (!this.img_Internal && this.uiWidgetBase) {
            this.img_Internal = this.uiWidgetBase.findChildByPath('MWCanvas_2147482460/img');
        }
        return this.img_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        //按钮多语言
        //文本多语言
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
ImpactRadiusWindow_Generate = __decorate([
    UIBind('UI/module/TrampolineModule/ImpactRadiusWindow.ui')
], ImpactRadiusWindow_Generate);
var ImpactRadiusWindow_Generate$1 = ImpactRadiusWindow_Generate;

var foreign159 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: ImpactRadiusWindow_Generate$1
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/TrampolineModule/JumpRecordUI.ui
 * TIME: 2024.11.04-19.49.53
 */
let JumpRecordUI_Generate = class JumpRecordUI_Generate extends UIScript {
    get mRecordMaxHeightCanvas() {
        if (!this.mRecordMaxHeightCanvas_Internal && this.uiWidgetBase) {
            this.mRecordMaxHeightCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mRecordMaxHeightCanvas');
        }
        return this.mRecordMaxHeightCanvas_Internal;
    }
    get mRecordMaxHeightText() {
        if (!this.mRecordMaxHeightText_Internal && this.uiWidgetBase) {
            this.mRecordMaxHeightText_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mRecordMaxHeightCanvas/mRecordMaxHeightText');
        }
        return this.mRecordMaxHeightText_Internal;
    }
    get mCurrentHeightCanvas() {
        if (!this.mCurrentHeightCanvas_Internal && this.uiWidgetBase) {
            this.mCurrentHeightCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mCurrentHeightCanvas');
        }
        return this.mCurrentHeightCanvas_Internal;
    }
    get mCurrentHeightTxt() {
        if (!this.mCurrentHeightTxt_Internal && this.uiWidgetBase) {
            this.mCurrentHeightTxt_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/mCurrentHeightCanvas/mCurrentHeightTxt');
        }
        return this.mCurrentHeightTxt_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mRecordMaxHeightText);
        this.initLanguage(this.mCurrentHeightTxt);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
JumpRecordUI_Generate = __decorate([
    UIBind('UI/module/TrampolineModule/JumpRecordUI.ui')
], JumpRecordUI_Generate);
var JumpRecordUI_Generate$1 = JumpRecordUI_Generate;

var foreign160 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: JumpRecordUI_Generate$1
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/WorldRank/RankItem.ui
 * TIME: 2024.11.04-19.49.53
 */
let RankItem_Generate = class RankItem_Generate extends UIScript {
    get mRankTextBlock() {
        if (!this.mRankTextBlock_Internal && this.uiWidgetBase) {
            this.mRankTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/mRankTextBlock');
        }
        return this.mRankTextBlock_Internal;
    }
    get mNameTextBlock() {
        if (!this.mNameTextBlock_Internal && this.uiWidgetBase) {
            this.mNameTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/mNameTextBlock');
        }
        return this.mNameTextBlock_Internal;
    }
    get mLvTextBlock() {
        if (!this.mLvTextBlock_Internal && this.uiWidgetBase) {
            this.mLvTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/mLvTextBlock');
        }
        return this.mLvTextBlock_Internal;
    }
    get mHeightTextBlock() {
        if (!this.mHeightTextBlock_Internal && this.uiWidgetBase) {
            this.mHeightTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/mHeightTextBlock');
        }
        return this.mHeightTextBlock_Internal;
    }
    get mKillTextBlock() {
        if (!this.mKillTextBlock_Internal && this.uiWidgetBase) {
            this.mKillTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/mKillTextBlock');
        }
        return this.mKillTextBlock_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mRankTextBlock);
        this.initLanguage(this.mNameTextBlock);
        this.initLanguage(this.mLvTextBlock);
        this.initLanguage(this.mHeightTextBlock);
        this.initLanguage(this.mKillTextBlock);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
RankItem_Generate = __decorate([
    UIBind('UI/module/WorldRank/RankItem.ui')
], RankItem_Generate);
var RankItem_Generate$1 = RankItem_Generate;

var foreign161 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: RankItem_Generate$1
});

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * AUTHOR: 爱玩游戏的小胖子
 * UI: UI/module/WorldRank/WorldRankItem.ui
 * TIME: 2024.11.04-19.49.53
 */
let WorldRankItem_Generate = class WorldRankItem_Generate extends UIScript {
    get mRankTextBlock() {
        if (!this.mRankTextBlock_Internal && this.uiWidgetBase) {
            this.mRankTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/mRankTextBlock');
        }
        return this.mRankTextBlock_Internal;
    }
    get mNameTextBlock() {
        if (!this.mNameTextBlock_Internal && this.uiWidgetBase) {
            this.mNameTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/mNameTextBlock');
        }
        return this.mNameTextBlock_Internal;
    }
    get mLvTextBlock() {
        if (!this.mLvTextBlock_Internal && this.uiWidgetBase) {
            this.mLvTextBlock_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/Canvas/mLvTextBlock');
        }
        return this.mLvTextBlock_Internal;
    }
    onAwake() {
        //设置能否每帧触发onUpdate
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        //按钮添加点击
        //按钮添加点击
        //按钮多语言
        //文本多语言
        this.initLanguage(this.mRankTextBlock);
        this.initLanguage(this.mNameTextBlock);
        this.initLanguage(this.mLvTextBlock);
        //文本多语言
    }
    /*初始化多语言*/
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) { }
    ;
    /*显示panel*/
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    /*隐藏panel*/
    hide() {
        mw.UIService.hideUI(this);
    }
};
WorldRankItem_Generate = __decorate([
    UIBind('UI/module/WorldRank/WorldRankItem.ui')
], WorldRankItem_Generate);
var WorldRankItem_Generate$1 = WorldRankItem_Generate;

var foreign162 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: WorldRankItem_Generate$1
});

const MWModuleMap = { 
     '738E4D7F44C7C0B09C12568779EB6311': foreign1,
     'CAEB1D4D4B26D23309475CB6ABC705FF': foreign2,
     '4E58E1F74D170E7844703989BEAAAA5E': foreign3,
     'E9D99BD14CFC77C10DFAE18A8FB74C5A': foreign4,
     'FE0E257049372D737A7147BB187DCF9D': foreign5,
     'BBF08FB04B2BC21BFA7B24A49D6BFFED': foreign6,
     '99A29C87465171BECD966683DD195FE0': foreign7,
     '722259704E530E29CFA29BA8A6165A28': foreign8,
     '6B09362247562626D5F89CA6E5CBD2DE': foreign9,
     '9071A44341F25CBC61BDCBAD7161E56F': foreign10,
     '270556244439107F7C1C129B130B4C47': foreign11,
     'B6E614EE4CFBEB1B622980B130DC3F41': foreign12,
     '34FB71B54A1B9B1C1F7CCE98D36B76F9': foreign13,
     '94FD08FD4489B96A203DD4875A6DAE3D': foreign14,
     '27F920A249B4AA531A747DA49D25C4E6': foreign15,
     '43674F054738789E61CB6A9D24EE590F': foreign16,
     '2F6F07C34BE76735F7D5408693891AE6': foreign17,
     'FF1563F84F41F36FE9A229AB3FA4739E': foreign18,
     '571F192B48797F8B0AC20484A439B218': foreign19,
     'CE85D5AF40F840E427ACC89239133201': foreign20,
     '5360682948009480CB3B60967C1E9C4E': foreign21,
     '4147C7DC4379F10CBF039FA1F424CF30': foreign22,
     '330670174B886285E8E931AAC1F11A68': foreign23,
     'B3F5CA5F4E3728010D4EE3A71ED406BE': foreign24,
     '99C4E5454A40C61FC427EDB862680EA4': foreign25,
     'D4C04F604802C1AE6095B19172F0E134': foreign26,
     'EC8FA87B49BED23F0082059847D749D1': foreign27,
     '2D57527C41DF26F25B17C49C54FE3BAB': foreign28,
     '159AA1104B1A8006C1E3109EEA075240': foreign29,
     '0482D8294ED7C6B824EE8FB76F64DEA8': foreign30,
     '336F8CF342D195E83F025D88E0E67CF5': foreign31,
     '3989B718464F7D8E96063AAE1F443A7D': foreign32,
     '8993132B4D482CC3AA66F6A0752D0F7E': foreign33,
     'A68C8DC74CEA5473AC1B588046967037': foreign34,
     'E917F8F14087A4C3A90C02A252449FCE': foreign35,
     'BC04C6D045DE92D9606AD08AA7EB662B': foreign36,
     '64D56E5E4A8131A6306241891C5A946D': foreign37,
     'A834984646C10B036247BD86BF004ED4': foreign38,
     'DBE391E64014FDD145AE40820C98022A': foreign39,
     '2E44AD5F4B7B17FDBCFF8BBD2D111CBA': foreign40,
     'D052578E42FD39068783C5AD26441B43': foreign41,
     '65D5A02D481CBAC84C7FF6A8300290FF': foreign42,
     'ED23BBF34B5F0FD622DB9E8B204BB63A': foreign43,
     '6C7F83344D08B83F8B1C4998A4C54AE8': foreign44,
     '7FA339B44DB59B14F8FA579AFC4E95F1': foreign45,
     'A2AF02F94A427CA3514E2CB37BE5ED24': foreign46,
     'C0133F294A4AE4099D7DE2A507F71913': foreign47,
     '5B9D28AD4F69E4EDA1ED0193610394D6': foreign48,
     '8BA9A865416FCFF8A06C0399331AD250': foreign49,
     '1DB810E549C51B0CF92803A3CA567A9F': foreign50,
     'AD997E3440FDBF90C217EEB5AE82C019': foreign51,
     'FD862E054AB9D48653FA0EA16B234198': foreign52,
     '11907A164C7CB34C30CA6D959138FC0F': foreign53,
     '3CD445AB4C6DC67B35D60DA472014379': foreign54,
     '83D94B2C4BAC128653321D91B6B11A9F': foreign55,
     'F29D351A434FCFDAFF6562A4E43888BA': foreign56,
     '7D7C982D4709FA67C72375A09BB18ECA': foreign57,
     '0F95A3C34E76FB1EC85217AAE2F7D8ED': foreign58,
     '68E90BBE443B0F584B447BB6471F9698': foreign59,
     '0BF71D314247D4EE9739E385C563DF47': foreign60,
     '57E0650848E7948CD2BAE083B45540F9': foreign61,
     '6ECF455744EA2C8A66C15CBE0F9D4732': foreign62,
     'B5ED482B492E893B56A1FD98DB7F2BD8': foreign63,
     'EBD3FCE849D367C6A0336B9A451A5330': foreign64,
     '302392054A313F839CE35097B9BB635F': foreign65,
     'FFB257A546DFC37AAC922E8047B291CA': foreign66,
     'B0AE81964A685F8B31B8DFA7B392849D': foreign67,
     '1669FAF94795EF1ACBA7FE9C800B117B': foreign68,
     '165F15B348A03E72BD290BB61AC4BF8B': foreign69,
     '357E9DA2462F9CE7CF4B43B0AA9DC354': foreign70,
     'CB72CBA34C116C9F7B0FF5B5541B59EE': foreign71,
     '2909A3E141653B96AD1695BB3D9FD3E7': foreign72,
     '459EAC1C45A11267216B289C90BC7AC5': foreign73,
     '8B404A71482B2B7A44BB8A85E26C05E7': foreign74,
     '0E7769194FC879692CDC4E91F3CA47D3': foreign75,
     'EE9111164BB56CAF9589D28E0A80DCB7': foreign76,
     'B9E68E6F47D05B8922EB89976547D0ED': foreign77,
     '6FF376094BAB027928ADA8A4F0FFBD5B': foreign78,
     'B0214F354FA856A04434CB862696C501': foreign79,
     '37558D484E7E3EEB7CF50F83FF516D01': foreign80,
     'D19D3A504FC18CE740F53FB3707D4919': foreign81,
     '5F4167AC4B1A67501A0DD4A98DCCE793': foreign82,
     'C2A63B424C2C17C9DE3395B59BA9444C': foreign83,
     '4CA21C094DAD2346E120EFBEA3D7736C': foreign84,
     'E8535D714F5BFEC20EF595B175FA24BD': foreign85,
     '1884D48A4EBB982234611D9DD0E1A853': foreign86,
     '0568B98E45100A88DECA3E894117DA12': foreign87,
     'BCDAFE1B477DCC490B7E479AC5D8C614': foreign88,
     '2FF8A8EA49762A86C34B39BBF1EF1109': foreign89,
     '4A4C950D496FFCD7471A22924E8F3AE4': foreign90,
     '586A140B4F5148B73C6201AF3EDA5701': foreign91,
     '34E4EBC14D9FE3396EC1F2B4C3CC2EB9': foreign92,
     '3B68D24B4484B5C4E8BAF5BA8E4C8BF1': foreign93,
     'E5186CAB4EA67BC6C83D8DABCCECD527': foreign94,
     'E76AEC2E4B56116E911A1B86036607DC': foreign95,
     '767E3E464F5CFA8DE7DBE19AE45B874D': foreign96,
     'B557F99E4E5DD1260BBC268B1579FDF6': foreign97,
     'E6EE5F054BE51F828EFA2E8E2B75BC22': foreign98,
     '72BDC1A847C3175B60A8E7B540400F62': foreign99,
     'B6D27EAC444C85D1D925F986D613D5B3': foreign100,
     'EFFEC0C44629992590058E96821DF5A4': foreign101,
     'C21422064060FC0412F08EAAD527453E': foreign102,
     'E08DC42B45A65EE74232E6B7819467BF': foreign103,
     '9A29CFAC457713D31702BF919B762966': foreign104,
     '4244ACB14A814AA70C452CB4CFEBB75D': foreign105,
     'FAAB758A46290493F8E43BA2B90FE5D8': foreign106,
     'AF17F51D4E0C39A0DFF650A5C6ED988B': foreign107,
     '2C5FEBB74325C7CDDE604EB4590142F0': foreign108,
     '2DC073C94D179CA85319478F3C46B3F5': foreign109,
     'D4EDE83847B2782F3A5116BF65D6C435': foreign110,
     'D359A7694332F95931151EB588C1AF5E': foreign111,
     'FF86E530405894648CE968B30C525E68': foreign112,
     '4EEC08894BAC06915772E5B74249D323': foreign113,
     'B22F1A0D4F964B7A07C054991CAEEB19': foreign114,
     'F2A5C8E04849C54D927A978574E27E4F': foreign115,
     'AC60C05B4C542CC8914005A59DEB58FA': foreign116,
     '9F6B6A8C43A7F31DDB111384318E84E0': foreign117,
     'E4A7B6B447E4FEB9A79E10A542D8CCBA': foreign118,
     'EAB0F5684D052B2B639F49AF734B6428': foreign119,
     'E295F53E4A850B613CDDF19BE7BA2152': foreign120,
     'ED85D676440DC49934CD7F8884E0F392': foreign121,
     '385ADFB84F77A44ABDB7BE9EEF4A8D0D': foreign122,
     '4017F2464551598B868EECA194CC198A': foreign123,
     '38D734224F75800856A0C69917B88EF8': foreign124,
     '2987FCF94860A2648A6FA88D34EFA05A': foreign125,
     '524BCC62487C082CECA561B07841E717': foreign126,
     '7A1BDAA348138C0EA4A3A79A331D023B': foreign127,
     '7DC553CD47B386E860AD1FAB1D5CF9C9': foreign128,
     'CEE46C5B4475EE568570CBA41D68EE0C': foreign129,
     '51FD3899419F676C5D82C682439BFAFE': foreign130,
     '92FA042A4FD4838557550FAACC252FDF': foreign131,
     '97EB0171476F91CD15A883839DACE05F': foreign132,
     '4CB823DD4201B2F6C9133CA164CC27C1': foreign133,
     '8645187F4117038772D699B1E160B075': foreign134,
     '19ADE23D4CBFC9E493C4E796F692FC19': foreign135,
     '603E72F745C5AB118A914A9B7158BE42': foreign136,
     '785A4C0942F9EE0121164A936B32CD1A': foreign137,
     '276281AF45140E4A764B7193EB07F964': foreign138,
     '7B477BE24A5D7B26F1D36B9DE347D86C': foreign139,
     '734BD21D40C070408E4722AA727C7AAC': foreign140,
     'FFAA0B1841347CE8BB80ED8EA9335519': foreign141,
     '0EE04F42462FE0DADBF4668AD079F570': foreign142,
     'D84A334C40B33A813552FF903364539E': foreign143,
     '21E8822D4EA4F6D34DE80C9C85DDC047': foreign144,
     '51DC73A84B35897D52C83693B7DD046D': foreign145,
     'D184468C4590DA86174C9FB293C6F14A': foreign146,
     '075AF2584F411C88705182871B9DFB78': foreign147,
     '137112BE4F0726F6AD61EFBED47C639E': foreign148,
     '120E374843DCC9C2C31F1A8D7B5A38C9': foreign149,
     '0D1CAB354779E284B6E58B91C82ABE07': foreign150,
     '533234054C42D87B47A4BE88C2587EC9': foreign151,
     '3F8CEA724D3F78E7DD8510A74FADCA19': foreign152,
     'C21F29B14F177E9F401F15994B1D7844': foreign153,
     'E7EA80BF43AF2B3739FCDCA2732779F2': foreign154,
     'D7FF2665439A6737640918A40438EB1F': foreign155,
     '1B46FD584FBEE6D4F5A4C1A45840B20F': foreign156,
     '0C684B0C46414ED7D11529BA94FD6935': foreign157,
     '10B4E9EA45C85246C9717EA276C7774B': foreign158,
     '26DC6E0D40A865057A807DADF4A80DCB': foreign159,
     'A5EB5DB24E4A2B0B0F5291A92A98AC57': foreign160,
     'CAE7FA2E4238E4E80DDF0A97EAF2A12E': foreign161,
     '368482014D69E4E894C63192B0F17B63': foreign162,
     '265FA5C440300C2875B6699C5F8B36C7': foreign163,
};
const MWFileMapping = new WeakMap([[foreign1 || {}, "JavaScripts/common/Ads"],
[foreign2 || {}, "JavaScripts/common/Boss"],
[foreign3 || {}, "JavaScripts/common/Coin"],
[foreign4 || {}, "JavaScripts/common/Dance"],
[foreign5 || {}, "JavaScripts/common/ExplosiveCoins"],
[foreign6 || {}, "JavaScripts/common/FlyText"],
[foreign7 || {}, "JavaScripts/common/Loading"],
[foreign8 || {}, "JavaScripts/common/Monster_Level"],
[foreign9 || {}, "JavaScripts/common/Monster"],
[foreign10 || {}, "JavaScripts/common/MyClearDayNight"],
[foreign11 || {}, "JavaScripts/common/notice/Notice"],
[foreign12 || {}, "JavaScripts/common/notice/Tween"],
[foreign13 || {}, "JavaScripts/common/notice/UIPool"],
[foreign14 || {}, "JavaScripts/common/notice/Updater"],
[foreign15 || {}, "JavaScripts/common/ObjImpulse"],
[foreign16 || {}, "JavaScripts/common/TestPanel"],
[foreign17 || {}, "JavaScripts/config/Action"],
[foreign18 || {}, "JavaScripts/config/Ads"],
[foreign19 || {}, "JavaScripts/config/Assets"],
[foreign20 || {}, "JavaScripts/config/BagInfo"],
[foreign21 || {}, "JavaScripts/config/Coin"],
[foreign22 || {}, "JavaScripts/config/ColdWeapon"],
[foreign23 || {}, "JavaScripts/config/Color"],
[foreign24 || {}, "JavaScripts/config/ConfigBase"],
[foreign25 || {}, "JavaScripts/config/DressData"],
[foreign26 || {}, "JavaScripts/config/DressProgress"],
[foreign27 || {}, "JavaScripts/config/GameConfig"],
[foreign28 || {}, "JavaScripts/config/Language"],
[foreign29 || {}, "JavaScripts/config/MonsterInfo"],
[foreign30 || {}, "JavaScripts/config/Music"],
[foreign31 || {}, "JavaScripts/config/NPC"],
[foreign32 || {}, "JavaScripts/config/OnlineRewards"],
[foreign33 || {}, "JavaScripts/config/QuickEmoji"],
[foreign34 || {}, "JavaScripts/config/QuickTalk"],
[foreign35 || {}, "JavaScripts/config/Task"],
[foreign36 || {}, "JavaScripts/config/Trampoline"],
[foreign37 || {}, "JavaScripts/const/GlobalData"],
[foreign38 || {}, "JavaScripts/GameLauncher"],
[foreign39 || {}, "JavaScripts/Modified027Editor/ModifiedCamera"],
[foreign40 || {}, "JavaScripts/Modified027Editor/ModifiedPlayer"],
[foreign41 || {}, "JavaScripts/Modified027Editor/ModifiedSpawn"],
[foreign42 || {}, "JavaScripts/Modified027Editor/ModifiedStaticAPI"],
[foreign43 || {}, "JavaScripts/module/AdsModule/AdsModuleC"],
[foreign44 || {}, "JavaScripts/module/AdsModule/AdsModuleS"],
[foreign45 || {}, "JavaScripts/module/AdsModule/ui/AdTipsPanel"],
[foreign46 || {}, "JavaScripts/module/AdsModule/ui/UpPanel"],
[foreign47 || {}, "JavaScripts/module/ArkModule/ArkModule"],
[foreign48 || {}, "JavaScripts/module/BagModule/BagModule"],
[foreign49 || {}, "JavaScripts/module/FlyModule/FlyModule"],
[foreign50 || {}, "JavaScripts/module/GuideModule/GuideModule"],
[foreign51 || {}, "JavaScripts/module/GuideModule/ui/GuidePanel"],
[foreign52 || {}, "JavaScripts/module/HUDModule/HUDModuleC"],
[foreign53 || {}, "JavaScripts/module/HUDModule/HUDModuleS"],
[foreign54 || {}, "JavaScripts/module/HUDModule/ui/HUDPanel"],
[foreign55 || {}, "JavaScripts/module/LevelModule/LevelModule"],
[foreign56 || {}, "JavaScripts/module/LotteryModule/LotteryModule"],
[foreign57 || {}, "JavaScripts/module/NewPeopleModule/NewPeopleModule"],
[foreign58 || {}, "JavaScripts/module/ObjImpulseModule/ObjImpulseModule"],
[foreign59 || {}, "JavaScripts/module/OnlineRewardModule/OnlineRewardData"],
[foreign60 || {}, "JavaScripts/module/OnlineRewardModule/OnlineRewardModuleC"],
[foreign61 || {}, "JavaScripts/module/OnlineRewardModule/OnlineRewardModuleS"],
[foreign62 || {}, "JavaScripts/module/OnlineRewardModule/ui/OnlineRewardPanel"],
[foreign63 || {}, "JavaScripts/module/PlayerModule/PlayerData"],
[foreign64 || {}, "JavaScripts/module/PlayerModule/PlayerModuleC"],
[foreign65 || {}, "JavaScripts/module/PlayerModule/PlayerModuleS"],
[foreign66 || {}, "JavaScripts/module/PlayerModule/ui/PlayerLifebar"],
[foreign67 || {}, "JavaScripts/module/PropModule/PropData"],
[foreign68 || {}, "JavaScripts/module/PropModule/PropModuleC"],
[foreign69 || {}, "JavaScripts/module/PropModule/PropModuleS"],
[foreign70 || {}, "JavaScripts/module/RankModule/PlayerPropData"],
[foreign71 || {}, "JavaScripts/module/RankModule/ui/WorldRankPanel"],
[foreign72 || {}, "JavaScripts/module/RankModule/WorldRankModuleC"],
[foreign73 || {}, "JavaScripts/module/RankModule/WorldRankModuleS"],
[foreign74 || {}, "JavaScripts/module/RingSoulModule/RingSoulModule"],
[foreign75 || {}, "JavaScripts/module/ShopModule/ShopData"],
[foreign76 || {}, "JavaScripts/module/ShopModule/ShopModuleC"],
[foreign77 || {}, "JavaScripts/module/ShopModule/ShopModuleS"],
[foreign78 || {}, "JavaScripts/module/ShopModule/ui/CostPanel"],
[foreign79 || {}, "JavaScripts/module/ShopModule/ui/ShopPanel"],
[foreign80 || {}, "JavaScripts/module/SignInModule/SignInModule"],
[foreign81 || {}, "JavaScripts/module/SoulBoneModule/SoulBoneModule"],
[foreign82 || {}, "JavaScripts/module/TaskModule/TaskData"],
[foreign83 || {}, "JavaScripts/module/TaskModule/TaskModuleC"],
[foreign84 || {}, "JavaScripts/module/TaskModule/TaskModuleS"],
[foreign85 || {}, "JavaScripts/module/TaskModule/ui/TaskPanel"],
[foreign86 || {}, "JavaScripts/module/TrampolineModule/Trampoline"],
[foreign87 || {}, "JavaScripts/module/TrampolineModule/ui/P_Game_Trampoline"],
[foreign88 || {}, "JavaScripts/module/WorldUIModule/WorldUIModule"],
[foreign89 || {}, "JavaScripts/NewScript"],
[foreign90 || {}, "JavaScripts/Prefabs/冷兵器/Script/ColdWeapon"],
[foreign91 || {}, "JavaScripts/Prefabs/冷兵器/Script/SkillRectCheck"],
[foreign92 || {}, "JavaScripts/Prefabs/冷兵器/Script/Weapon"],
[foreign93 || {}, "JavaScripts/Prefabs/冷兵器/Script/WeaponClient"],
[foreign94 || {}, "JavaScripts/Prefabs/冷兵器/Script/WeaponDef"],
[foreign95 || {}, "JavaScripts/Prefabs/冷兵器/Script/WeaponManager"],
[foreign96 || {}, "JavaScripts/Prefabs/冷兵器/Script/WeaponServer"],
[foreign97 || {}, "JavaScripts/Prefabs/PrefabEvent"],
[foreign98 || {}, "JavaScripts/Tools/Console"],
[foreign99 || {}, "JavaScripts/Tools/FreeCamera"],
[foreign100 || {}, "JavaScripts/Tools/InputManager"],
[foreign101 || {}, "JavaScripts/Tools/MapEx"],
[foreign102 || {}, "JavaScripts/Tools/ObjectPool"],
[foreign103 || {}, "JavaScripts/Tools/utils"],
[foreign104 || {}, "JavaScripts/ui-generate/common/EnemyLifebar_generate"],
[foreign105 || {}, "JavaScripts/ui-generate/common/Loading_generate"],
[foreign106 || {}, "JavaScripts/ui-generate/common/notice/NoticeView_generate"],
[foreign107 || {}, "JavaScripts/ui-generate/common/notice/TopNoticeItem_generate"],
[foreign108 || {}, "JavaScripts/ui-generate/common/TestPanel_generate"],
[foreign109 || {}, "JavaScripts/ui-generate/common/WorldTips/WorldTips_1_generate"],
[foreign110 || {}, "JavaScripts/ui-generate/common/WorldTips/WorldTips_2_generate"],
[foreign111 || {}, "JavaScripts/ui-generate/common/WorldTips/WorldTips_3_generate"],
[foreign112 || {}, "JavaScripts/ui-generate/common/WorldTips/WorldTips_4_generate"],
[foreign113 || {}, "JavaScripts/ui-generate/common/WorldTips/WorldTips_5_generate"],
[foreign114 || {}, "JavaScripts/ui-generate/common/WorldTips/WorldTips_6_generate"],
[foreign115 || {}, "JavaScripts/ui-generate/common/WorldTips/WorldTips_7_generate"],
[foreign116 || {}, "JavaScripts/ui-generate/common/WorldTips/WorldTips_generate"],
[foreign117 || {}, "JavaScripts/ui-generate/module/AdsModule/AdsTipsPanel_generate"],
[foreign118 || {}, "JavaScripts/ui-generate/module/AdsModule/UpPanel_generate"],
[foreign119 || {}, "JavaScripts/ui-generate/module/ArkModule/ArkItem_generate"],
[foreign120 || {}, "JavaScripts/ui-generate/module/ArkModule/ArkPanel_generate"],
[foreign121 || {}, "JavaScripts/ui-generate/module/ArkModule/GiftBagPanel_generate"],
[foreign122 || {}, "JavaScripts/ui-generate/module/BagModule/BagInfoPanel_generate"],
[foreign123 || {}, "JavaScripts/ui-generate/module/BagModule/BagItem_generate"],
[foreign124 || {}, "JavaScripts/ui-generate/module/BagModule/BagPanel_generate"],
[foreign125 || {}, "JavaScripts/ui-generate/module/BagModule/BagTab_generate"],
[foreign126 || {}, "JavaScripts/ui-generate/module/FlyModule/SwordItem_generate"],
[foreign127 || {}, "JavaScripts/ui-generate/module/FlyModule/SwordPanel_generate"],
[foreign128 || {}, "JavaScripts/ui-generate/module/FlyModule/SwordTipsPanel_generate"],
[foreign129 || {}, "JavaScripts/ui-generate/module/GuideModule/GuideUI_generate"],
[foreign130 || {}, "JavaScripts/ui-generate/module/HUDModule/HUDPanel_generate"],
[foreign131 || {}, "JavaScripts/ui-generate/module/HUDModule/KillTipItem_generate"],
[foreign132 || {}, "JavaScripts/ui-generate/module/LevelModule/LevelItem_generate"],
[foreign133 || {}, "JavaScripts/ui-generate/module/LevelModule/LevelPanel_generate"],
[foreign134 || {}, "JavaScripts/ui-generate/module/LevelModule/UpExpPanel_generate"],
[foreign135 || {}, "JavaScripts/ui-generate/module/LotteryModule/LotteryItem_generate"],
[foreign136 || {}, "JavaScripts/ui-generate/module/LotteryModule/LotteryPanel_generate"],
[foreign137 || {}, "JavaScripts/ui-generate/module/LotteryModule/LotteryResultItem_generate"],
[foreign138 || {}, "JavaScripts/ui-generate/module/LotteryModule/LotteryResultPanel_generate"],
[foreign139 || {}, "JavaScripts/ui-generate/module/NewPeopleModule/NewPeopleItem_generate"],
[foreign140 || {}, "JavaScripts/ui-generate/module/NewPeopleModule/NewPeoplePanel_generate"],
[foreign141 || {}, "JavaScripts/ui-generate/module/OnlineReward/OnlineRewardItem_generate"],
[foreign142 || {}, "JavaScripts/ui-generate/module/OnlineReward/OnlineRewardPanel_generate"],
[foreign143 || {}, "JavaScripts/ui-generate/module/PlayerModule/PlayerLifebar_generate"],
[foreign144 || {}, "JavaScripts/ui-generate/module/RingSoulModule/RingSoulItem_generate"],
[foreign145 || {}, "JavaScripts/ui-generate/module/RingSoulModule/RingSoulItemChild_generate"],
[foreign146 || {}, "JavaScripts/ui-generate/module/RingSoulModule/RingSoulPanel_generate"],
[foreign147 || {}, "JavaScripts/ui-generate/module/ShopModule/CostPanel_generate"],
[foreign148 || {}, "JavaScripts/ui-generate/module/ShopModule/NPCHead_generate"],
[foreign149 || {}, "JavaScripts/ui-generate/module/ShopModule/ShopItem_generate"],
[foreign150 || {}, "JavaScripts/ui-generate/module/ShopModule/ShopPanel_generate"],
[foreign151 || {}, "JavaScripts/ui-generate/module/SignInModule/SignInItem_generate"],
[foreign152 || {}, "JavaScripts/ui-generate/module/SignInModule/SignInPanel_generate"],
[foreign153 || {}, "JavaScripts/ui-generate/module/SoulBoneModule/PartItem_generate"],
[foreign154 || {}, "JavaScripts/ui-generate/module/SoulBoneModule/SoulBonePanel_generate"],
[foreign155 || {}, "JavaScripts/ui-generate/module/SoulBoneModule/StarItem_generate"],
[foreign156 || {}, "JavaScripts/ui-generate/module/SoulBoneModule/UpProbabilityPanel_generate"],
[foreign157 || {}, "JavaScripts/ui-generate/module/TaskModule/TaskItem_generate"],
[foreign158 || {}, "JavaScripts/ui-generate/module/TaskModule/TaskPanel_generate"],
[foreign159 || {}, "JavaScripts/ui-generate/module/TrampolineModule/ImpactRadiusWindow_generate"],
[foreign160 || {}, "JavaScripts/ui-generate/module/TrampolineModule/JumpRecordUI_generate"],
[foreign161 || {}, "JavaScripts/ui-generate/module/WorldRank/RankItem_generate"],
[foreign162 || {}, "JavaScripts/ui-generate/module/WorldRank/WorldRankItem_generate"],
[foreign163 || {}, "JavaScripts/ui-generate/module/WorldRank/WorldRankPanel_generate"]]);

exports.MWFileMapping = MWFileMapping;
exports.MWModuleMap = MWModuleMap;
//# sourceMappingURL=game.js.map
